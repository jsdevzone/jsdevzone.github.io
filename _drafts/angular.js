"use strict";
angular.module("pd.app.dependencies", ["easypiechart", "ui.ace", "angularSpectrumColorpicker"]),
angular.module("pd.app.templates", []),
angular.module("pd.app", ["pd.external", "pd.app.dependencies", "pd.app.templates", "pd.exceptions", "pd.config", "pd.constants", "pd.common", "pd.directives", "pd.services", "pd.controllers", "pd.local-services", "pd.dashboard", "pd.templates", "pd.documents", "pd.doctools", "pd.widgets", "pd.contacts", "pd.settings", "pd.translate", "pd.editor", "pd.blocks", "pd.library", "pd.catalog", "pd.onboarding", "pd.inbox"]).config(["$stateProvider", "$urlRouterProvider", "ConfigProvider", "$logProvider", function(e, n, t, o) {
    n.otherwise("/dashboard/"),
    e.state("root", {
        "abstract": !0,
        templateUrl: "/views/main.html",
        controller: "MainController"
    }).state("app", {
        "abstract": !0,
        parent: "root",
        templateUrl: "/views/layout/base.html"
    }).state("app.base", {
        url: "/",
        views: {
            "panel-left@app": {
                templateUrl: "/views/layout/parts/left_nav_panel.html"
            },
            "panel-top@app": {
                templateUrl: "/views/layout/parts/top_panel.html"
            }
        },
        data: {
            hasLeftPanel: !0,
            hasRightPanel: !1,
            hasTopPanel: !0,
            backgroundType: "default"
        }
    }),
    o.debugEnabled(!1)
}
]),
angular.module("pd.config", ["pd.constants"]).provider("Config", ["AuthorizationStrategy", "Constants", "$windowProvider", function(e, n, t) {
    var o = {
        token: "8424777469bd3199afb6bf19ca491aa17d38c773",
        authType: "Bearer",
        userRole: 3,
        actor: "wgERJRzhfapmeCgkrDvSYW",
        document_analytics_token: "12-nG567hsB-te5478nub_3457y"
    }
      , i = t.$get()
      , a = i.global_config || {};
    a.token || (a = _.assign(a, o));
    var s = e.get(a.authType, a.token)
      , l = {
        applicationType: n.APPLICATION_TYPE.APP,
        ravenURL: "https://a53cadea88854257bc5231466f3e5544@sentry.pandadoc.com/4",
        ravenWhitelistUrls: [/pandadoc\.com/, /yesmint\.com/],
        authorizationStrategy: s,
        staticBaseURL: "http://localhost:9000/",
        APIBaseURL: "https://staging-api.pandadoc.com/",
        liveFilteringDelay: 500,
        saveTimeoutDelay: 500,
        pusherKey: "72e976c39ed6d9e81643",
        uuid: !1,
        actor: 0,
        isRegistered: !1,
        viewerDocumentId: "HaEzQxiENfdMzy826C2iAm",
        docProcessorStaticBaseURL: "https://doc-processor-staging.s3.amazonaws.com/documents/",
        isAnalyticsEnabled: !1,
        isIntercomEnabled: !0,
        googleDriveAssoc: !1,
        googleDriveOAuth2URL: "/auth/login/google-oauth2/",
        userRole: 1,
        document_analytics_host: "https://staging-analytics.pandadoc.com",
        document_analytics_token: "token",
        document_analytics_interval: 5e3,
        templateToken: "MTEwODM3ODQ4OTkzODI2MTk5NzE2MDg0ODY2OTU4MDU4NzQ5Mzc5Njk2MjIzNjEyNjA0MTAyMzY4NzgwOTY0ODQxODU3MDAwNjM3MDc1ODE1MzgwNTY4OTA4MjQyNjU3",
        applicationUrl: i.location.origin,
        branding: {
            main_logo: "https://pd-web.s3.amazonaws.com/img/logo-pandadoc.png"
        },
        workspace: "068d8a728e854642a71cd2",
        onboardingBaseUrl: "onboarding_data/",
        signup_template_id: "TtKN6mH2WUYvxHUMTYSY94",
        integrations: {
            xero: {
                url: "/auth/login/xero/"
            }
        }
    }
      , r = _.defaults(a, l);
    r.application = {
        viewer: r.applicationType === n.APPLICATION_TYPE.VIEWER,
        embed: r.applicationType === n.APPLICATION_TYPE.EMBED,
        app: r.applicationType === n.APPLICATION_TYPE.APP,
        session_view: r.applicationType === n.APPLICATION_TYPE.SESSION_VIEW,
        sdk: r.applicationType === n.APPLICATION_TYPE.SDK
    },
    r.isWorkspaceOwner = function() {
        return r.userRole === n.ROLES.OWNER
    }
    ,
    r.isWorkspaceAdmin = function() {
        return r.userRole === n.ROLES.ADMIN
    }
    ,
    r.isWorkspaceMember = function() {
        return r.userRole === n.ROLES.MEMBER
    }
    ,
    this.$get = function() {
        return r
    }
}
]).constant("AuthorizationStrategy", {
    get: function(e, n) {
        return {
            getToken: function() {
                return n
            },
            getScheme: function() {
                return e
            }
        }
    }
}).config(["$sceDelegateProvider", function(e) {
    e.resourceUrlWhitelist(["self", new RegExp("^https://doc-view-api.s3.amazonaws.com.+$")])
}
]),
angular.module("pd.constants", []).constant("Constants", {
    BILLING: {
        FREE_PLAN_HANDLE: "free",
        INTERVAL: {
            MONTHLY: 0,
            ANNUAL: 1
        },
        SUBSCRIPTION_STATE: {
            TRIALING: "trialing",
            TRIAL_ENDED: "trial_ended",
            ASSESSING: "assessing",
            ACTIVE: "active",
            SOFT_FAILURE: "soft_failure",
            PAST_DUE: "past_due",
            SUSPENDED: "suspended,",
            CANCELLED: "canceled",
            EXPIRED: "expired",
            UNPAID: "unpaid"
        }
    },
    DOCUMENT: {
        PAD: {
            WIDTH: 800
        },
        STATUS: {
            DRAFT: 0,
            SENT: 1,
            COMPLETED: 2,
            VIEWED: 5,
            WAITING_APPROVAL: 6,
            APPROVED: 7,
            REJECTED: 8
        },
        ACTION: {
            CREATED: 0,
            EDITED: 1,
            SENT: 2,
            DELETED: 3,
            VIEWED: 4,
            COMPLETED: 5,
            COMMENTED: 6,
            RECEIVED: 7,
            NEW_REVISION: 8,
            ALL_RECIPIENTS_COMPLETED: 9,
            EMBED_TEMPLATE_SENT: 10,
            INVOICE_SENT: 12
        },
        TOKEN: {
            RENDER: "render",
            ORIGINAL: "original"
        },
        TYPE: {
            DOCUMENT: 0,
            TEMPLATE: 1,
            EDITABLE_DOCUMENT: 2,
            EDITABLE_TEMPLATE: 3,
            LIBRARY_ITEM: 4
        },
        STATUS_COLORS: {
            0: "#e9a446",
            1: "#217dfc",
            2: "#59b671",
            5: "#6b30a9",
            6: "#a55f20",
            7: "#50e8ab",
            8: "#e34e48"
        }
    },
    APPROVAL: {
        STATUS: {
            DRAFT: 1,
            PENDING: 2,
            APPROVED: 3,
            REJECTED: 4
        }
    },
    RECIPIENTS: {
        TYPE: {
            SIGNER: 1,
            CC: 2
        },
        ACTIONS: {
            SIGN: 1,
            CC: 2,
            SIGNED: 3,
            NONE: 4
        }
    },
    PUSHER_EVENTS: {
        NOTIFICATION: "notification",
        SERVICE: "service"
    },
    NOTIFICATION: {
        TYPE: {
            ACTION: "action",
            MESSAGE: "message",
            INTEGRATION: "integration",
            CONTACT_SYNC: "contact-sync",
            GOOGLEDRIVE: "google-drive"
        }
    },
    WIDGET: {
        TEXT: 0,
        TEXTFIELD: 1,
        CHECKBOX: 2,
        SIGNATURE: 3,
        MYSIGNATURE: 7,
        DATE: 8,
        INITIALS: 9,
        DROPDOWN: 11,
        UPLOAD: 12,
        MASKED: 13,
        BUILD_MODE: "build",
        EDIT_MODE: "edit",
        DEFAULT_POSITION: {
            top: 5,
            left: 5,
            page: 1
        },
        DEFAULT_SIZE: {
            width: 20,
            height: 10
        },
        TEXT_SIZE_PROPORTION: .6,
        ERROR_TYPE: {
            EMPTY: "empty",
            NON_ASSIGNED: "nonAssigned",
            INVALID_VALUE: "invalidValue"
        }
    },
    WIDGET_LABEL: {
        0: "text",
        1: "textfield",
        2: "checkbox",
        3: "signature",
        7: "my signature",
        8: "date"
    },
    INVITE: {
        SENT: 1,
        ACCEPTED: 2,
        CANCELED: 3
    },
    EVENTS: {
        REQUEST: "request",
        RESPONSE: "response",
        REQUEST_ERROR: "request-error",
        STATE_CHANGE: "state-change"
    },
    REVISIONS: {
        NEW: "new",
        COPY: "copy",
        GOOGLE_DRIVE: "gdrive"
    },
    GRID: {
        SELECTION_CHANGE: "selectionChange",
        FILTERING: "filtering",
        RELOAD: "reload"
    },
    FREE_DOCS_AMOUNT: 3,
    FREE_DOCS_AMOUNT_TEXT: "three",
    REWARD_DOCS_AMOUNT: 3,
    REWARD_DOCS_AMOUNT_TEXT: "three",
    ROLES: {
        OWNER: 3,
        ADMIN: 2,
        MEMBER: 1,
        GUEST: 0,
        NOBODY: -1
    },
    FEATURES: {
        TEAM: 0,
        DOCUMENT_ANALYTICS: 1,
        EMBED: 2,
        COPY_DIRECT_LINK: 3,
        BRANDING: 4,
        BOXVIEW: 5,
        EDITOR: 6,
        LIBRARY: 7,
        DEVELOPER_PORTAL: 8,
        CATALOG: 9,
        DOCUMENT_THEMES: 11,
        WORKFLOW: 12,
        AUDIT_TRAIL: 13,
        PROFIT_AND_MARGIN: 14,
        MULTIPLE_WORKSPACES: 15,
        EDITOR_LAZY_INIT: 17,
        SEND_DOCUMENT_AS: 18,
        XERO: 19,
        CATALOG_UPDATE_TEMPLATES: 20,
        PDF_ATTACHMENT: 21,
        WORKSPACE_SETTINGS: 23,
        MASKED_FIELD: 25,
        UPLOAD_FIELD: 26,
        BLOCK_LOCKING: 27
    },
    GOOGLE_DOCS_ADD_ON: "https://chrome.google.com/webstore/detail/pandadoc/ccienjcnenlecjjdojempdieldpgfpkk?authuser=0&utm_source=panda&utm_medium=pandadoc-addon&utm_campaign=sign-google-docs",
    EMBED_DOCUMENT: {
        LOADED: "embed.document.loaded",
        STARTED: "embed.document.started",
        COMPLETED: "embed.document.completed",
        EXCEPTION: "embed.document.exception",
        INJECTION: "embed.document.injection"
    },
    SESSION_VIEW_DOCUMENT: {
        LOADED: "session_view.document.loaded",
        COMPLETED: "session_view.document.completed",
        EXCEPTION: "session_view.document.exception"
    },
    APPLICATION_TYPE: {
        APP: "app",
        VIEWER: "viewer",
        EMBED: "embed",
        SESSION_VIEW: "session_view",
        SDK: "sdk"
    },
    SUBSCRIPTIONS: {
        FREE: "free",
        PROFESSIONAL: "professional",
        PROFESSIONAL_ANNUAL: "professional-annual",
        BUSINESS: "business",
        BUSINESS_ANNUAL: "business-annual",
        ENTERPRISE: "enterprise"
    },
    DIRECTIONS: {
        UP: "up",
        DOWN: "down",
        LEFT: "left",
        RIGHT: "right"
    },
    BADGES: {
        WELCOME: 0
    },
    TOKENS: {
        PREFIX: "[",
        POSTFIX: "]"
    },
    EDITABLE_DOCUMENT_PAGE_ASPECT_RATIO: .773,
    FILE_PROCESSING_PROVIDER: {
        DOC_PROCESSOR: 0,
        BOX: 1
    },
    BLOCK_TYPES: {
        TEXT: "text",
        IMAGE: "image",
        HEADING: "heading",
        PAGE_BREAK: "pagebreak",
        TOC: "toc",
        TABLE: "table",
        PRICING_TABLE: "pricingtable",
        HEADER: "header",
        FOOTER: "footer",
        COVER: "cover",
        VIDEO: "video",
        HTML: "html",
        PDF: "pdf"
    },
    WIDGET_FREE_BLOCKS: ["pagebreak", "cover", "header", "footer"],
    BLOCKS_WITH_TEXT: ["text", "heading", "table", "pricingtable", "header", "footer", "cover"],
    FIXED_BLOCKS: ["cover", "header", "footer"],
    LAYOUTS: {
        TEXT: {
            TEXT: "text",
            TEXT_IMAGE_LEFT: "text_image_left",
            TEXT_IMAGE_RIGHT: "text_image_right"
        },
        HEADING: {
            H1: "heading_1",
            H2: "heading_2",
            H3: "heading_3"
        },
        IMAGE: {
            IMAGE: "image",
            TWO_IMAGES: "two_images",
            THREE_IMAGES: "three_images"
        },
        VIDEO: {
            URL: "url"
        },
        PAGE_BREAK: {
            PAGE_BREAK: "pagebreak"
        },
        TABLE: {
            TABLE: "table"
        },
        TOC: {
            TOC: "toc"
        },
        PRICING_TABLE: {
            PRICING_TABLE: "pricing_table"
        },
        PDF: {
            PDF: "pdf"
        }
    },
    UPLOADCARE: {
        DOC_FILE_PROVIDERS: "file dropbox gdrive box skydrive huddle",
        DOC_PREFERRED_TYPES: "application/vnd.openxmlformats-officedocument.*",
        IMAGE_FILE_PROVIDERS: "file gdrive box skydrive",
        IMAGE_PREFERRED_TYPES: "image/*",
        MAX_FILE_SIZE: 104857600
    },
    PLANS: {
        INTERVAL: {
            MONTHLY: 0,
            ANNUAL: 1
        },
        TYPE: {
            FREE: 0,
            PROFESSIONAL: 1,
            BUSINESS: 2,
            ENTERPRISE: 3
        }
    },
    ANALYTICS: {
        LAST_PAGE_THRESHOLD: 50
    },
    TABLE_TYPE: {
        BASIC: "basic",
        PRICING: "pricing"
    },
    TABLE_MODE: {
        EDIT: "edit",
        READ_ONLY: "read_only",
        RECIPIENT_RESTRICTED: "recipient_restricted"
    },
    DEFAULT_CURRENCY: "USD",
    MAIN_CURRENCIES: ["USD", "EUR", "AUD", "GBP"],
    NUMBER_TYPE: {
        ABSOLUTE: "absolute",
        PERCENT: "percent"
    },
    NUMBER: {
        MAX_INTEGER_PART_LENGTH: 13,
        MAX_FRACTION_PART_LENGTH: 2
    },
    TEXT_EDITOR_TOOLBAR: {
        NONE: "none",
        SHARED: "shared",
        PROVIDED: "provided"
    },
    DATE: {
        MIN: moment("01-01-1900", "DD-MM-YYYY"),
        MAX: moment("31-12-9999", "DD-MM-YYYY")
    },
    THEME: {
        PAPER_SIZE: {
            US_LETTER: 0,
            A4: 1
        },
        BACKGROUND_OPTIONS: [{
            label: "Fill screen",
            value: "fill"
        }, {
            label: "Tile",
            value: "tile"
        }, {
            label: "Original",
            value: "original"
        }],
        HEADING_FONTS: [{
            name: "Raleway",
            fontFamily: "Raleway, sans-serif",
            "import": "@import url(https://fonts.googleapis.com/css?family=Raleway:400,700);"
        }, {
            name: "Roboto",
            fontFamily: "Roboto, sans-serif",
            "import": "@import url(https://fonts.googleapis.com/css?family=Roboto:400,300,700&subset=latin,latin-ext);"
        }, {
            name: "Lora",
            fontFamily: "Lora, serif",
            "import": "@import url(https://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic&subset=latin,latin-ext);"
        }, {
            name: "Arvo",
            fontFamily: "Arvo, serif",
            "import": "@import url(https://fonts.googleapis.com/css?family=Arvo:400,700,400italic,700italic);"
        }, {
            name: "Nunito",
            fontFamily: "Nunito, sans-serif",
            "import": "@import url(https://fonts.googleapis.com/css?family=Nunito:400,700);"
        }, {
            name: "Trebuchet",
            fontFamily: "Trebuchet, Helvetica, serif",
            "import": ""
        }, {
            name: "Arial",
            fontFamily: "Arial, Helvetica, sans-serif",
            "import": ""
        }, {
            name: "Verdana",
            fontFamily: "Verdana, Geneva, sans-serif",
            "import": ""
        }, {
            name: "Georgia",
            fontFamily: "Georgia, serif",
            "import": ""
        }, {
            name: "Times New Roman",
            fontFamily: "Times New Roman, Times, serif",
            "import": ""
        }],
        TEXT_FONTS: [{
            name: "Roboto",
            fontFamily: "Roboto, sans-serif",
            "import": "@import url(https://fonts.googleapis.com/css?family=Roboto:400,300,700&subset=latin,latin-ext);"
        }, {
            name: "Lora",
            fontFamily: "Lora, serif",
            "import": "@import url(https://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic&subset=latin,latin-ext);"
        }, {
            name: "Arvo",
            fontFamily: "Arvo, serif",
            "import": "@import url(https://fonts.googleapis.com/css?family=Arvo:400,700,400italic,700italic);"
        }, {
            name: "Trebuchet",
            fontFamily: "Trebuchet, Helvetica, serif",
            "import": ""
        }, {
            name: "Arial",
            fontFamily: "Arial, Helvetica, sans-serif",
            "import": ""
        }, {
            name: "Verdana",
            fontFamily: "Verdana, Geneva, sans-serif",
            "import": ""
        }, {
            name: "Georgia",
            fontFamily: "Georgia, serif",
            "import": ""
        }, {
            name: "Times New Roman",
            fontFamily: "Times New Roman, Times, serif",
            "import": ""
        }],
        BACKGROUND_IMAGES: [{
            src: null ,
            preview: null ,
            extraStyles: ""
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-1.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-1-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #fcfcfc;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-2.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-2-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #3f3e3a;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-3.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-3-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #3c454a;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-4.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-4-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #d0dae4;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-5.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-5-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #76b7d5;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-6.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-6-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #959595;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-7.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-7-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #ebdfcf;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-8.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-8-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #c68573;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-9.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-9-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #f2bb9c;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-10.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-10-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #5a5b55;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-11.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-bg-image-11-preview.jpg",
            extraStyles: "background-size: cover;\nbackground-color: #e9e9e9;\n",
            backgroundType: "fill"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-brickwall.png",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-brickwall-preview.png",
            extraStyles: "background-size: 110px;\nbackground-color: #e4e4e4;\n",
            backgroundType: "tile"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-congruent.png",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-congruent-preview.png",
            extraStyles: "background-size: 150px;\nbackground-color: #333333;\n",
            backgroundType: "tile"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-geometry.png",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-geometry-preview.png",
            extraStyles: "background-size: 600px;\nbackground-color: #373737;\n",
            backgroundType: "tile"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-greyzz.png",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-greyzz-preview.png",
            extraStyles: "background-size: 149px;\nbackground-color: #f6f6f6;\n",
            backgroundType: "tile"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-linedpaper.png",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-linedpaper-preview.png",
            extraStyles: "background-size: 412px;\nbackground-color: #f8f8f8;\n",
            backgroundType: "tile"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-p5.png",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-p5-preview.png",
            extraStyles: "background-size: 8px;\nbackground-color: #f5f5f5;\n",
            backgroundType: "tile"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-sprinkles.png",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-sprinkles-preview.png",
            extraStyles: "background-size: 10px;\nbackground-color: #f2ecd5;\n",
            backgroundType: "tile"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-stardust.png",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/backgrounds/theme-pattern-stardust-preview.png",
            extraStyles: "background-size: 399px;\nbackground-color: #444349;\n",
            backgroundType: "tile"
        }],
        COVER_IMAGES: [{
            src: null ,
            preview: null 
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-1.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-1-preview.jpg"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-2.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-2-preview.jpg"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-3.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-3-preview.jpg"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-4.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-4-preview.jpg"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-5.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-5-preview.jpg"
        }, {
            src: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-6.jpg",
            preview: "https://s3.amazonaws.com/pd-static-content/themes/cover/cover-6-preview.jpg"
        }]
    },
    COVER_PAGE: {
        LOGO_LAYOUTS: {
            LEFT: "left",
            CENTER: "center",
            RIGHT: "right"
        },
        TEXT_LAYOUTS: {
            TWO_COLUMNS: "two_columns",
            ONE_COLUMN: "one_column"
        }
    },
    AUDIT_TRAIL: {
        ACTIONS: {
            CREATED: 1,
            NEW_REVISION_CREATED: 2,
            SENT_FOR_APPROVAL: 3,
            APPROVED: 4,
            REJECTED: 5,
            SENT: 6,
            COMPLETED_BY_ALL: 7,
            VIEWED: 8,
            COMPLETED_BY_RECIPIENT: 9
        }
    },
    INTEGRATIONS: {
        SALESFORCE: "salesforce",
        XERO: "xero",
        BASE: "basecrm",
        WEBHOOK: "webhook"
    },
    PAYMENT_PROVIDERS: {
        STRIPE: 0,
        CHARGIFY: 1
    },
    TIME_PERIODS: {
        WEEK: "week",
        "3WEEKS": "3weeks",
        MONTH: "month",
        "3MONTHS": "3months",
        YEAR: "year"
    },
    APPROVER_ACTIONS: {
        NONE: "none",
        APPROVE: "approve",
        APPROVED: "approved",
        REJECTED: "rejected"
    },
    ONBOARDING: {
        INDUSTRIES: ["Creative Agency", "Software Provider", "Telecommunications", "IT Services", "Advertising", "Human Resources", "Financial Services", "Manufacturing", "Construction", "Consulting", "Education & Training", "Software Reseller", "Non-Profit", "Real Estate", "Legal", "Media & Entertainment", "Other"]
    }
}),
angular.module("pd.external", ["ngTable", "jui", "ui.bootstrap", "pascalprecht.translate", "ngSanitize", "ui.router", "ui.router.compat", "LocalStorageModule", "restangular", "ngCookies", "monospaced.elastic", "rx", "angularFileUpload"]),
angular.module("pd.translate", []).config(["$translateProvider", function(e) {
    e.translations("en", {
        app: {
            dashboard: "Dashboard",
            inbox: "Inbox",
            documents: "Documents",
            contacts: "Contacts",
            templates: "Templates",
            library: "Content Library",
            settings: "Settings",
            catalog: "Catalog",
            help: "Help"
        },
        doc: {
            reload_page: "Reload page",
            action: {
                0: "created",
                1: "edited",
                2: "sent",
                3: "deleted",
                4: "viewed",
                5: "completed",
                6: "commented",
                7: "received",
                8: "created a new revision for ",
                9: "All recipients completed ",
                10: "signed",
                11: "created a copy of ",
                12: "Xero invoice(s) created for"
            },
            status: {
                0: "draft",
                1: "sent",
                2: "completed",
                5: "viewed",
                6: "to approve",
                7: "approved",
                8: "rejected"
            },
            status_description: {
                0: "Recently created document",
                1: "The document has been sent to recipients",
                2: "The document has been accepted or signed by all recipients",
                5: "Recipient has viewed the document",
                6: "The document is waiting for approval",
                7: "The document should be approved prior to being sent out",
                8: "The document has been rejected"
            },
            saving: "Saving changes...",
            saved: "All changes are saved"
        },
        recipients: {
            types: {
                1: "Signer",
                2: "CC"
            },
            actions: {
                1: "To sign",
                2: "CC",
                3: "Signed",
                4: ""
            }
        },
        widget: {
            type: {
                0: "Text",
                1: "Textfield",
                2: "Checkbox",
                3: "Signature",
                7: "My Signature",
                8: "Date",
                9: "Initials",
                11: "Dropdown",
                12: "Upload",
                13: "Masked"
            },
            action: {
                1: "Fill",
                2: "Check",
                3: "Sign",
                8: "Fill",
                9: "Initials"
            },
            validation: {
                8: "Date should be between {{min_date}} and {{max_date}}.",
                11: "Please specify at least one item for the dropdown field."
            },
            help: {
                field_name: "Internal name of the field that is used as an identifier via API"
            }
        },
        loadingIndicator: {
            loading: "Loading...",
            saving: "Saving...",
            deleting: "Deleting..."
        },
        settings: {
            email: {
                document_opened: "Document is opened by a recipient for the first time",
                document_completed: "Document is completed by all recipients",
                recipient_completed: "Document is completed by a recipient",
                comment_added: "A message or an annotation is posted to timeline",
                all: "I receive any messages or notifications",
                product_updates: "Updates about product, new features, promos, etc."
            }
        },
        integration: {
            quoteroller: {
                name: "Quote Roller",
                description: "Create polished, professional proposals in minutes.",
                errors: {
                    authalreadyassociated: "This Quote Roller account is already associated with another PandaDoc account."
                },
                contact_sync: "Continuously import  your Contacts from Quote Roller to PandaDoc"
            },
            nimble: {
                name: "Nimble",
                description: "CRM system combined with the power of social media.",
                errors: {
                    authalreadyassociated: "This Nimble account is already associated with another PandaDoc account."
                },
                contact_sync: "Continuously import  your Contacts from Nimble to PandaDoc"
            },
            harvest: {
                name: "Harvest",
                description: "Simple time tracking, fast online invoicing, and powerful reporting software.",
                errors: {
                    authalreadyassociated: "This Harvest account is already associated with another PandaDoc account."
                },
                contact_sync: "Continuously import  your Contacts from Harvest to PandaDoc"
            },
            google_oauth2: {
                name: "Gmail",
                description: "Gmail is a free, smart email service provided by Google.",
                errors: {
                    authalreadyassociated: "This Google account is already associated with another PandaDoc account."
                }
            },
            capsulecrm: {
                name: "Capsule",
                description: "Capsule is a simple, flexible CRM for small businesses.",
                errors: {
                    authalreadyassociated: "This Capsule CRM account is already associated with another PandaDoc account."
                },
                contact_sync: "Continuously import  your Contacts from Capsule to PandaDoc"
            },
            pipedrive: {
                name: "Pipedrive",
                description: "Pipedrive is a CRM-replacing sales pipeline management tool.",
                errors: {
                    authalreadyassociated: "This Pipedrive CRM account is already associated with another PandaDoc account."
                },
                integration: "Create, send, and track quotes, proposals, and contracts from within Pipedrive"
            },
            nutshell: {
                name: "Nutshell",
                description: "Nutshell is a modern, cloud application to help manage your leads and customers.",
                errors: {
                    authalreadyassociated: "This Nutshell CRM account is already associated with another PandaDoc account."
                },
                contact_sync: "Continuously import  your Contacts from Nutshell to PandaDoc"
            },
            basecampnew: {
                name: "Basecamp",
                description: "Basecamp is a web-based project-management tool.",
                errors: {
                    authalreadyassociated: "This Basecamp account is already associated with another PandaDoc account."
                },
                contact_sync: "Continuously import  your Contacts from Basecamp to PandaDoc"
            },
            zohocrm: {
                name: "Zoho CRM",
                description: "Zoho CRM gives you a 360-degree view of your complete sales cycle and pipeline.",
                errors: {
                    authalreadyassociated: "This ZohoCRM account is already associated with another PandaDoc account."
                },
                integration: "Create, send, and track quotes, proposals, and contracts from within Zoho CRM"
            },
            insightly: {
                name: "Insightly",
                description: "Customer Relationship & Project Management. Easy. Powerful. Affordable.",
                errors: {
                    authalreadyassociated: "This Insightly account is already associated with another PandaDoc account."
                },
                contact_sync: "Continuously import  your Contacts from Insightly to PandaDoc"
            },
            yammer: {
                name: "Yammer",
                description: "Private social network that helps employees collaborate.",
                errors: {
                    authalreadyassociated: "This Yammer account is already associated with another PandaDoc account."
                },
                contact_sync: "Continuously import  your Contacts from Yammer to PandaDoc",
                sing_in: "Fast sign in process for Yammer and PandDoc, seemless connection between both applications."
            },
            pipeliner: {
                name: "Pipeliner CRM",
                description: "Sales Management Software for Apps, Windows & Mac.",
                contact_sync: "Continuously import  your Contacts from Pipeliner CRM to PandaDoc"
            },
            pipelinedeals: {
                name: "PipelineDeals",
                description: "Simple and useful CRM software in the cloud.",
                contact_sync: "Continuously import  your Contacts from PipelineDeals to PandaDoc"
            },
            onepagecrm: {
                name: "OnePageCRM",
                description: "OnePageCRM is a simple online sales CRM for small business.",
                contact_sync: "Continuously import  your Contacts from OnePageCRM to PandaDoc"
            },
            salesforce: {
                name: "Salesforce",
                description: "Sell smarter and faster with the world's #1 CRM.",
                setup_guide_link: "https://www.pandadoc.com/faqs/salesforce-integration-pandadoc/",
                faq_link: "https://www.pandadoc.com/faqs/salesforce-integration-pandadoc/",
                copy_products_to_pricing_table: "When document is created from integrated CRM system (i.e. Salesforce, Pipedrive, etc), related Products will be add to this pricing table.",
                create_documents: "Create PandaDoc documents directly inside of Opportunities in Salesforce",
                inject_data: "Pull in Opportunities fields,  contacts, product and pricing details in your to PandaDoc documents",
                track_status: "Track the status of PandaDoc documents inside of the Salesforce Opportunities"
            },
            xero: {
                name: "Xero",
                description: "Xero is an online accounting software for small businesses.",
                errors: {
                    authalreadyassociated: "This Xero account is already associated with another PandaDoc account."
                },
                help_messages: {
                    account: "Use account code here (e.g. 1200 - code for 'Accounts Receivable' account)"
                },
                create_invoices: "Create invoices in Xero from PandaDoc pricing tables by using automatic and manual methods. Links are also created to connect Xero invoices to PandaDoc documents"
            },
            webhook: {
                name: "webhooks",
                description: "Use webhooks to be notified about events that happen in a PandaDoc account."
            }
        },
        warnings: {
            document_is_draft: "This document is currently being edited by author. This is the latest public version",
            document_is_ready: "Please reload page to see the latest version of the document",
            "document-opened-out-of-turn": "Document has to be completed by other recipients before you can sign it. We will send a notification when it's ready.",
            google_drive_edit_fail: "We're unable to upload a document to Google Drive. Please try again",
            "subscription-inactive": "Oops! Your subscription is not active. Please update your billing details to reactivate it.",
            "doc-limit-exceeded": "Sorry there, panda bear, you've run out of documents for this month. You can upgrade to a premium plan or just invite your friends to PandaDoc to earn more documents credit!",
            "document-waiting-for-approval": "This document has been sent for approval",
            document_approved: "Document has been approved",
            document_rejected: "Document has been rejected",
            "document_already-approved-or-rejected": "This document has been already approved or rejected by another moderator. Please reload it to see the latest version."
        },
        profile: {
            email_is_not_verified: "Your e-mail ({{email}}) has not been verified. Please check your inbox.",
            resend_verification_email: "Resend verification e-mail",
            email_sending: "Sending...",
            email_sent: "Sent.",
            email_sending_error: "Error while sending email. Please try later.",
            email_activated: "Email is activated"
        },
        billing: {
            title: "Billing",
            upgrade: "upgrade",
            working: "working",
            downgrade: "downgrade",
            contact_us: "contact us",
            your_current_plan: "your current plan",
            monthly_plans: "Monthly plans",
            annual_plans: "Annual plans",
            show_monthly: "Show monthly",
            show_annual: "Show annual",
            back_to_plans: "Back to plans",
            manage_billing_details: "Manage billing details",
            add_billing_information: "Add billing information",
            setup_subscription: "Setup subscription",
            current_plan: "Your current plan",
            docs_left_this_month: "docs left to send this month",
            docs_left: "docs left to send",
            get_more_docs: "Get more docs. Invite friends!",
            change_plan_confirmation: "You're about to change your current plan. <br> A price for a new plan is ${{price}} per user. Do you want to proceed?",
            change_plan_to_free_confirmation: "Are you sure you want to downgrade to the Free plan? From now on, you'll need to buy document credits to send docs. Do you want to continue?",
            subscription_state_past_due: "Your subscription has been suspended. Please <a href='{{credit_card_url}}'>update your billing details</a> or contact our <a href='' contact-us class='contact-us'>support team<a>",
            subscription_state_canceled: "Your subscription has been suspended. Please <a href='{{credit_card_url}}'>update your billing details</a> or contact our <a href='' contact-us class='contact-us'>support team<a>",
            subscription_has_no_documents_owner: "You have run out of documents. You can subscribe to <a href='{{billing_page_url}}'>one of our premium plans</a> with Unlimited documents or just <a href='{{rewards_page_url}}'>invite your friends</a> to get free docs",
            subscription_has_no_documents_user: "You have run out of documents. Please contact your account owner to add docs credit or <a href='{{rewards_page_url}}'>invite your friends</a> to PandaDoc to get free documents.",
            subscription_state_trial_ended: "Your trial period has ended. <a href='{{billing_page_url}}'>Subscribe here</a>",
            subscription_state_trial_ended_user: "Your trial period has ended. Please contact account owner to update billing details.",
            payment_per_month: "Payment per month",
            payment_per_year: "Payment per year",
            plan: {
                free: {
                    name: "Free",
                    desc: "Up to 3 documents",
                    description: "Up to 3 documents",
                    price_desc: "Free forever"
                },
                professional: {
                    name: "Professional",
                    desc: "Up to 30 documents per month",
                    description: "Up to 30 documents per month",
                    price_desc: "user / <b>month</b>"
                },
                "professional-annual": {
                    name: "Professional",
                    desc: "Up to 100 documents per month",
                    description: "Up to 100 documents per month",
                    price_desc: "user / <b>year</b>"
                },
                business: {
                    name: "Business",
                    desc: "Unlimited documents, 24/5 phone support",
                    description: "Unlimited documents, 24/5 phone support",
                    price_desc: "user / <b>month</b>"
                },
                "business-annual": {
                    name: "Business",
                    desc: "Unlimited documents",
                    description: "Unlimited documents",
                    price_desc: "user / <b>year</b> "
                },
                enterprise: {
                    name: "Enterprise",
                    desc: "Enterprise Monthly Plan",
                    description: "Enterprise Monthly Plan",
                    price_desc: "user / <b>month</b> "
                },
                pd_plans_business_mn_1_4: {
                    name: "Business Monthly",
                    description: "up to 4 team members"
                },
                pd_plans_business_mn_5_10: {
                    name: "Business Monthly",
                    description: "up to 10 team members"
                },
                pd_plans_business_mn_11_25: {
                    name: "Business Monthly",
                    description: "up to 25 team members"
                },
                pd_plans_enterprise_mn_1_4: {
                    name: "Enterprise Monthly",
                    description: "up to 4 team members"
                },
                pd_plans_enterprise_mn_5_10: {
                    name: "Enterprise Monthly",
                    description: "up to 10 team members"
                },
                pd_plans_business_an_1_4: {
                    name: "Business Annual",
                    description: "up to 4 team members"
                },
                pd_plans_business_an_5_10: {
                    name: "Business Annual",
                    description: "up to 10 team members"
                },
                pd_plans_business_an_11_25: {
                    name: "Business Annual",
                    description: "up to 25 team members"
                },
                pd_plans_enterprise_an_1_4: {
                    name: "Enterprise Annual",
                    description: "up to 4 team members"
                },
                pd_plans_enterprise_an_5_10: {
                    name: "Enterprise Annual",
                    description: "up to 10 team members"
                },
                pd_plans_v2_business_mn_1_10: {
                    name: "Business",
                    description: "For growing companies"
                },
                pd_plans_v2_business_an_1_10: {
                    name: "Business",
                    description: "For growing companies"
                },
                pd_plans_v2_professional_mn_1_10: {
                    name: "Professional",
                    description: "For your small business needs"
                },
                pd_plans_v2_professional_an_1_10: {
                    name: "Professional",
                    description: "For your small business needs"
                },
                pd_plans_v2_enterprise_mn_1_plus: {
                    name: "Enterprise",
                    description: "For large organizations"
                },
                pd_plans_v2_enterprise_an_1_plus: {
                    name: "Enterprise",
                    description: "For large organizations"
                },
                pd_plans_v2_enterprise_an_10_plus: {
                    name: "Enterprise",
                    description: "For large organizations"
                }
            },
            interval: {
                0: "month",
                1: "year"
            }
        },
        referral: {
            action: {
                1: "accepted your invite"
            }
        },
        roles: {
            3: "Owner",
            2: "Manager",
            1: "Team Member"
        },
        roles_hierarchy: {
            3: "Workspace Owner",
            2: "Workspace Owner and Managers",
            1: "All in workspace"
        },
        buttons: {
            more_docs: "Get more docs",
            free_docs: "Get free docs",
            save: "Save",
            accept: "Accept",
            accept_and_sign: "Accept and sign"
        },
        colors: {
            BLACK: "Black",
            BLUE: "Blue",
            RED: "Red"
        },
        documents: {
            today: "Today",
            yesterday: "Yesterday",
            last_7_days: "Last 7 days",
            last_30_days: "Last 30 days",
            older: "Older",
            to_sign: "Documents to sign",
            everything_else: "Everything else"
        },
        library: {
            documents: "Documents",
            content: "Content Library"
        },
        block: {
            name: {
                text: "Text",
                image: "Image",
                heading: "Heading",
                pagebreak: "Page break",
                toc: "TOC",
                table: "Table",
                pricingtable: "Pricing Table",
                header: "Page header",
                footer: "Page footer",
                cover: "Cover page",
                html: "HTML",
                video: "Video",
                pdf: "Attachment"
            },
            layout: {
                text_image_left: "IMG left",
                text_image_right: "IMG right",
                text: "Text",
                image: "One",
                two_images: "Two",
                three_images: "Three",
                heading_1: "Heading 1",
                heading_2: "Heading 2",
                heading_3: "Heading 3",
                pagebreak: "Page break",
                table: "Table",
                pricingtable: "Pricing Table",
                header_text_image_left: "IMG left",
                header_text_image_right: "IMG right",
                header_text: "Text",
                footer_text_image_left: "IMG left",
                footer_text_image_right: "IMG right",
                footer_text: "Text"
            },
            validation: {
                pricingtable: "Pricing table or its settings contain incorrect values"
            },
            help: {
                public_id: "Please define Block Id to use predefined tokens for this block"
            }
        },
        catalog: {
            item: {
                errors: {
                    name: {
                        this_field_is_required: "Name is required",
                        ensure_this_value_has_at_most__characters_it_has_: "Name is too long. Maximum length is 255 characters"
                    },
                    description: {
                        ensure_this_value_has_at_most__characters_it_has_: "Description is too long"
                    },
                    price: {
                        ensure_that_there_are_no_more_than__digits_in_total: "Price is too long. Ensure that there are no more than 15 digits in total.",
                        this_field_cannot_be_null: "Price should be a number",
                        ensure_that_there_are_no_more_than__decimal_places: "Price is incorrect. Ensure that there are no more than 2 decimal places",
                        ensure_that_there_are_no_more_than__digits_before_the_decimal_point: "Price is too long. Ensure that there are no more than 13 digits before the decimal point"
                    },
                    cost: {
                        ensure_that_there_are_no_more_than__digits_in_total: "Cost is too long. Ensure that there are no more than 15 digits in total",
                        ensure_that_there_are_no_more_than__decimal_places: "Cost is incorrect. Ensure that there are no more than 2 decimal places",
                        ensure_that_there_are_no_more_than__digits_before_the_decimal_point: "Cost is too long. Ensure that there are no more than 13 digits before the decimal point"
                    },
                    sku: {
                        ensure_this_value_has_at_most__characters_it_has_: "SKU is too long. Maximum length is 255 characters"
                    }
                }
            }
        },
        taxes: {
            tax_1: "Tax 1",
            tax_2: "Tax 2"
        },
        discount: "Discount",
        cover: {
            logo: {
                layouts: {
                    left: "Left",
                    center: "Center",
                    right: "Right"
                }
            },
            text: {
                layouts: {
                    one_column: "One column",
                    two_columns: "Two columns"
                }
            }
        },
        design: {
            options: {
                theme_color: "This is the document main color. Heading-H3, Table Headers, Links will be displayed using this color.",
                background_type: 'Control background image properties. "Fill screen" - image will fill all screen. "Tile" - image will be repeated. "Original" - image will be displayed in the top left corner in its original size'
            }
        },
        pricing_table: {
            help: {
                item_cost: "Item Cost is used to calculate total pricing table cost, profit and margin. It's not visible to your customers",
                cost_margin_table_section: "This section is not visible to recipients",
                show_cost_margin: "For internal use, not visible to your customers. This option shows cost, total profit and margin in the pricing table. Margin is calculated as follows: (Price − Cost) / Price",
                include_in_document_total: "This pricing table amount will be included in total of the whole document and will be available in [Total] token.",
                decimals: "Here you can set the number of decimal places for your pricing table, you can change this&nbsp;to&nbsp;0,&nbsp;1,&nbsp;2"
            }
        },
        sign_in_order: {
            help: {
                sign_in_order: "Signing Order option allows you to specify an order of signing. A recipient will receive a notification only when the document has been signed by all preceding recipients in the list",
                signing_order_enabled: "Signing order is enabled. A recipient will receive an email notification only when the document has been signed by all preceding recipients in the list"
            }
        },
        workflow: {
            approval_selector: "A document created out of this template should be approved by any user from a specified Group or specific user before it can be sent to clients. Approver will get an email with a link to a document."
        },
        toc: {
            toc_rightside_nav: "Shows TOC as a right-side navigation for recipients. It helps to navigate through long documents easier"
        },
        dashboard: {
            comments: "Comments",
            actions: "Activity",
            recent: "Recent Docs"
        },
        period: {
            week: "Week",
            "3weeks": "3 Weeks",
            month: "Month",
            "3months": "3 Months",
            year: "Year"
        },
        approver: {
            actions: {
                none: "",
                approve: "To Approve",
                approved: "Approved",
                rejected: "Rejected"
            }
        },
        folders: {
            documents: "Documents",
            templates: "Document Templates",
            library: "Content Library",
            catalog: "Catalog"
        },
        webhook: {
            help: {
                name: "Internal webhook name",
                endpoint_url: "A URL of an endpoint which we post a webhook to",
                json_payload: "A data which will be included in a webhook JSON payload",
                shared_key: "All webhooks sent from PandaDoc are signed and you can verify their identity. Learn more how to use shared key in API documentation.",
                subscribe_to_events: "Subscribe to the following events from PandaDoc"
            }
        }
    }),
    e.preferredLanguage("en")
}
]),
angular.module("pd.services", ["pd.config", "pd.constants"]),
angular.module("pd.services").factory("API", ["$rootScope", "Restangular", "Config", "RequestIndicator", "Constants", "$q", function(e, n, t, o, i, a) {
    var s = n.withConfig(function(n) {
        t.authorizationStrategy.getScheme() && t.authorizationStrategy.getToken() && n.setDefaultHeaders({
            Authorization: t.authorizationStrategy.getScheme() + " " + t.authorizationStrategy.getToken()
        }),
        n.setBaseUrl(t.APIBaseURL),
        n.setResponseExtractor(function(n, t, o, a) {
            if (e.$broadcast(i.EVENTS.RESPONSE, a, t),
            "getList" === t && (n.results || n.data)) {
                var s = n.results || n.data;
                return s.next = n.next || !1,
                s.previous = n.previous || !1,
                s.totalCount = n.count,
                s
            }
            return n
        }
        );
        var o = [400, 403, 404, 500];
        n.setErrorInterceptor(function(n) {
            n.data && -1 !== o.indexOf(n.status) && e.$broadcast(i.EVENTS.REQUEST_ERROR, n)
        }
        ),
        n.setRequestInterceptor(function(n, t, o, a) {
            return e.$broadcast(i.EVENTS.REQUEST, a, t),
            n
        }
        ),
        n.addElementTransformer("contact-sync/integrations", !1, function(e) {
            return e.integration && (e.id = e.integration),
            e
        }
        )
    }
    );
    s.headers = {
        Authorization: t.authorizationStrategy.getScheme() + " " + t.authorizationStrategy.getToken()
    },
    s.baseUrl = t.APIBaseURL,
    s.handleRequest = function(e, n) {
        return n ? void e.then(n) : e
    }
    ;
    var l = {};
    return s.runOneAtTime = function(e) {
        var n = l[e];
        if (n)
            return n.promise;
        var t = e()
          , o = function() {
            delete l[e]
        }
        ;
        return t.then(o, o),
        l[e] = {
            promise: t
        },
        t
    }
    ,
    s.wrapInPromise = function(e) {
        var n = a.defer();
        return n.resolve(e),
        n.promise
    }
    ,
    s
}
]),
angular.module("pd.services").service("AppAnalyticsService", ["Config", "ProfileService", function(e, n) {
    var t = this;
    this.profile = null ,
    this.isIdentityProvided = !1,
    this._init = function() {
        return e.isAnalyticsEnabled ? (!this.isIdentityProvided && this.profile && this.profile.iid && window.analytics && (window.analytics.identify("" + this.profile.iid, {
            email: this.profile.email,
            firstName: this.profile.first_name,
            lastName: this.profile.last_name,
            name: this.profile.first_name + " " + this.profile.last_name
        }, {
            integrations: {
                Intercom: e.isIntercomEnabled
            }
        }),
        window.analytics.page(null , null , null , {
            integrations: {
                Intercom: e.isIntercomEnabled
            }
        }),
        this.isIdentityProvided = !0),
        !0) : !1
    }
    ,
    this.track = function(n, t) {
        window.analytics && e.isAnalyticsEnabled && window.analytics.track(n, t ? t : {})
    }
    ,
    e.application.app || e.application.sdk ? n.getProfile().then(function(e) {
        t.profile = e,
        t._init()
    }
    ) : t._init()
}
]),
angular.module("pd.services").service("BadgeService", ["$rootScope", "API", function(e, n) {
    this.setBadge = function(n, t) {
        e.badges[n] = t,
        e.$broadcast("badge.update", {
            name: n,
            value: t
        })
    }
    ,
    this.getBadge = function(n) {
        return e.badges[n]
    }
    ,
    this.getBadges = function(e) {
        return n.handleRequest(n.all("badges").getList(), e)
    }
}
]).run(["$rootScope", function(e) {
    e.badges = {}
}
]),
angular.module("pd.services").service("BillingService", ["API", "WorkspacesService", "$q", "Constants", function(e, n, t, o) {
    var i = [o.SUBSCRIPTIONS.PROFESSIONAL, o.SUBSCRIPTIONS.PROFESSIONAL_ANNUAL, o.SUBSCRIPTIONS.BUSINESS, o.SUBSCRIPTIONS.BUSINESS_ANNUAL];
    this.hasChargifySubscription = function() {
        var e = t.defer();
        return n.getWorkspace().then(function(n) {
            e.resolve(-1 !== i.indexOf(n.subscription.plan.handle))
        }
        ),
        e.promise
    }
    ,
    this.chargify = {
        getPlans: function(n) {
            return e.handleRequest(e.all("plans").getList(), n)
        },
        changePlan: function(n, t, o) {
            return n.plan = {
                id: t.id
            },
            e.handleRequest(e.one("subscriptions", n.id).patch(n), o)
        }
    },
    this.stripe = {
        getPackages: function() {
            return e.all("packages").getList()
        },
        getPlans: function() {
            return e.all("plans/stripe").getList()
        },
        setupSubscription: function(n, t) {
            return e.one("subscriptions/stripe", n.id).post("", {
                token: t
            })
        },
        deleteSubscription: function() {
            var n = {
                "Content-Type": "application/json"
            };
            return e.all("subscriptions/stripe").customDELETE("", "", n)
        }
    },
    this.sendCouponCode = function(n, t) {
        return e.handleRequest(e.all("coupons").post({
            code: n
        }), t)
    }
}
]),
angular.module("pd.services").service("BlocksService", ["API", "Config", "Constants", "BasicTableService", "$q", "BlockBuilderService", function(e, n, t, o, i, a) {
    var s = n.application.app || n.application.sdk ? null  : []
      , l = function() {
        return e.all("block_types").getList()
    }
      , r = function() {
        if (s)
            return e.wrapInPromise(s);
        var n = e.runOneAtTime(l);
        return n.then(function(e) {
            s = e
        }
        ),
        n
    }
    ;
    this.getAvailableBlocks = r,
    this.getBlockType = function(e) {
        return r().then(function(n) {
            return _.find(n, {
                id: e
            })
        }
        )
    }
    ,
    this.getLayouts = function(e) {
        return this.getAvailableBlocks().then(function(n) {
            return _.find(n, {
                id: e
            }).layouts
        }
        )
    }
    ;
    var c = {
        pricingtable: "pricingtable",
        "default": "blocks"
    };
    this.createBlock = function(n, t) {
        return a.getDefaultBlockData(n, t).then(function(o) {
            var i = {
                block_list: t.blockList.id,
                type: n.id,
                layout: t.layout ? t.layout.id : n.default_layout || _.first(n.layouts).id,
                data: o,
                order: t.index
            };
            return e.all(c[n.handle] || c["default"]).post(i)
        }
        )
    }
    ,
    this.duplicateBlock = function(n) {
        return e.one("blocks", n.id).post("duplicate", {})
    }
    ,
    this.removeBlock = function(n) {
        return e.one("blocks", n.id).remove()
    }
    ,
    this.updateBlock = function(n, t, o) {
        return t = t || {},
        o || (o = _.cloneDeep(_.omit(n, ["focused", "widgetsInfo"])),
        o.type = o.type.id,
        o.layout = o.layout.id),
        e.one(c[n.type.handle] || c["default"], n.id).patch(o, t)
    }
    ,
    this.updateBlockSettings = function(n, t) {
        return e.one(c[n.type.handle] || c["default"], n.id).patch(t)
    }
    ,
    this.patchPricingTable = function(n, t) {
        return e.one("pricingtable", n).customOperation("patch", "public", {}, {}, t)
    }
    ,
    this.reorderBlocks = function(n, t) {
        return e.one("block_list", n).post("reorder", _.map(t, "id"))
    }
    ,
    this.updateBlockIntegrationsSettings = function(n, t) {
        return e.one("integrations/blocks", n).post("settings", t)
    }
    ,
    this.addAttachment = function(n, t) {
        return e.one("blocks", n).post("attach", t)
    }
}
]),
angular.module("pd.services").service("BrandingService", ["API", function(e) {
    this.getWorkspaceBranding = function(n) {
        return e.handleRequest(e.one("workspaces/branding").get(), n)
    }
    ,
    this.updateBranding = function(n, t) {
        return e.handleRequest(e.one("workspaces/branding").customOperation("patch", "", {}, {}, n), t)
    }
}
]),
angular.module("pd.services").service("CatalogService", ["API", "$stateParams", function(e, n) {
    var t = null 
      , o = {}
      , i = function() {
        return e.all("catalog/datasources").getList()
    }
    ;
    this.getDataSources = function() {
        if (t)
            return e.wrapInPromise(t);
        var n = e.runOneAtTime(i);
        return n.then(function(e) {
            t = e
        }
        ),
        n
    }
    ,
    this.getDataSource = function(e) {
        return this.getDataSources().then(function(n) {
            return _.find(n, {
                id: e
            })
        }
        )
    }
    ,
    this.getRootFolder = function() {
        var e = this;
        return e.getDataSource(n.dataSourceId).then(function(n) {
            var t = n.root_folder;
            return o[t] ? o[t] : e.getFolder(t).then(function(e) {
                return o[t] = e,
                e
            }
            )
        }
        )
    }
    ,
    this.getFolders = function(n, t) {
        var o = _.omit(_.defaults(n, {
            page: 1,
            count: 50
        }), "parent");
        return e.handleRequest(e.one("catalog/folders", n.parent).getList("folders", o), t)
    }
    ,
    this.getFolder = function(n, t) {
        return e.handleRequest(e.one("catalog/folders", n).get(), t)
    }
    ,
    this.addFolder = function(n, t) {
        return e.handleRequest(e.all("catalog/folders").post(n), t)
    }
    ,
    this.removeFolder = function(n, t) {
        return e.handleRequest(e.one("catalog/folders", n).customDELETE("", {
            id: n
        }), t)
    }
    ,
    this.getFolderParents = function(n, t) {
        return e.handleRequest(e.one("catalog/folders", n).getList("tree"), t)
    }
    ,
    this.updateFolder = function(n, t) {
        return e.handleRequest(e.one("catalog/folders", n.id).patch(n), t)
    }
    ,
    this.getItem = function(n) {
        return e.one("catalog/items", n).get()
    }
    ,
    this.getItems = function(n, t, o, i) {
        return o = o || {},
        o.page = o.page || 1,
        o.count = o.count || 50,
        o.q ? this.searchItems(t, o, i) : e.handleRequest(e.one("catalog/folders", n).getList("items", o), i)
    }
    ,
    this.searchItems = function(n, t, o) {
        return e.handleRequest(e.one("catalog/datasources", n).getList("search", t), o)
    }
    ,
    this.addItem = function(n, t) {
        return e.handleRequest(e.all("catalog/items", n.folder).post(n), t)
    }
    ,
    this.updateItem = function(n, t) {
        return e.handleRequest(n.patch(), t)
    }
    ,
    this.removeItems = function(n, t) {
        var o = {
            "Content-Type": "application/json"
        };
        return e.handleRequest(e.all("catalog/items").customDELETE("", {
            id: n
        }, o), t)
    }
    ,
    this.moveItem = function(n, t, o, i) {
        var a = {
            from_folder: t,
            to_folder: o
        };
        return e.handleRequest(e.one("catalog/items", n).post("move", a, {}), i)
    }
}
]),
angular.module("pd.services").service("ContactsService", ["API", function(e) {
    this.getContacts = function(n, t) {
        return n = n || {},
        n.page = n.page || 1,
        n.count = n.count || 10,
        e.handleRequest(e.all("contacts").getList(n), t)
    }
    ,
    this.addContact = function(n, t) {
        return e.handleRequest(e.all("contacts").post(n), t)
    }
    ,
    this.updateContact = function(n, t) {
        return e.handleRequest(n.patch(), t)
    }
    ,
    this.removeContacts = function(n, t) {
        var o = {
            "Content-Type": "application/json"
        };
        return e.handleRequest(e.all("contacts").customDELETE("", {
            id: n
        }, o), t)
    }
    ,
    this.getContactById = function(n, t) {
        return e.handleRequest(e.one("contacts", n).get(), t)
    }
    ,
    this.importContacts = function(n) {
        return e.all("contacts/import").post({
            contacts: n
        })
    }
}
]),
angular.module("pd.services").service("DashboardService", ["API", function(e) {
    this.getDocumentsCount = function(n) {
        return e.all("dashboard").customGET("", {
            period: n
        })
    }
}
]),
angular.module("pd.services").factory("DocumentAnalyticsAPI", ["$rootScope", "Restangular", "Config", "Constants", function(e, n, t, o) {
    var i = n.withConfig(function(n) {
        n.setDefaultHeaders({
            "X-Auth-Token": t.document_analytics_token
        }),
        n.setBaseUrl(t.document_analytics_host),
        n.setResponseExtractor(function(n, t, i, a) {
            if (e.$broadcast(o.EVENTS.RESPONSE, a),
            "getList" === t && (n.results || n.data)) {
                var s = n.results || n.data;
                return s.next = n.next || !1,
                s.previous = n.previous || !1,
                s.totalCount = n.count,
                s
            }
            return n
        }
        )
    }
    );
    return i
}
]),
angular.module("pd.services").service("DocumentAnalyticsService", ["DocumentAnalyticsAPI", function(e) {
    this.track = function(n) {
        return e.all("track/").getList(n)
    }
    ,
    this.getDocumentInfo = function(n) {
        return e.one("analytic", "document").get(n)
    }
    ,
    this.getRecipientInfo = function(n) {
        return e.one("analytic", "recipient").get(n)
    }
}
]),
angular.module("pd.services").service("DocumentContentInfoBuilder", ["$sce", "Constants", "PageFactory", function(e, n, t) {
    var o = function(e) {
        return {
            isStaticContent: !1,
            isBoxContent: !1,
            isEditableContent: !1,
            documentSize: {
                width: n.DOCUMENT.PAD.WIDTH,
                scale: 1
            },
            attachments: [],
            parent: e,
            getPage: function(e, n) {
                var t = {
                    content: n,
                    number: e + 1
                };
                if (this.content === n)
                    return _.find(this.pages, t);
                var o = _.find(this.attachments, {
                    content: n
                });
                return o ? _.find(o.pages, t) : this.parent ? this.parent.getPage(e, n) : void 0
            }
        }
    }
    ;
    this.buildLibraryItemContentInfo = function(e) {
        var n = r(e, e.revision.content.block_list);
        return n.type = e.type,
        n
    }
    ,
    this.buildDocumentContentInfo = function(e) {
        var n, t = e.revision, o = a(t.content);
        return o.isBoxContent || o.isStaticContent ? (n = l(o, t.content, t.number),
        t.attachments && (n.attachments = _.map(t.attachments, function(e) {
            return i(e, o, t.number, n)
        }
        ),
        n.pages = _.reduce(n.attachments, function(e, n) {
            return e.concat(n.pages)
        }
        , n.pages))) : n = r(e, e.revision.content.block_list),
        n.type = e.type,
        n
    }
    ;
    var i = function(e, n, t, o) {
        n = n || a(e.content);
        var i = l(n, e.content, t, o);
        return i.id = e.id,
        i
    }
    ;
    this.buildAttachment = i,
    this.addAttachment = function(e, n) {
        var t = a(n.content)
          , o = this.buildAttachment(n, t, e.revision_number, e);
        e.attachments.push(o),
        e.pages = e.pages.concat(o.pages)
    }
    ;
    var a = function(e) {
        if (e && e.pages && e.pages.normal && e.pages.normal.length) {
            var n = _.first(e.pages.normal);
            return n.text && n.svg ? {
                isBoxContent: !0
            } : {
                isStaticContent: !0
            }
        }
        return {
            isEditableContent: !0
        }
    }
      , s = function(e) {
        return _.map(e.pages.normal, function(n, o) {
            return t.createPageModel(n, o, e.id)
        }
        )
    }
      , l = function(e, n, t, i) {
        return _.defaults({}, e, o(i), {
            pages: s(n),
            revision_number: t,
            content: n.id
        })
    }
      , r = function(e, t) {
        return _.defaults({
            isEditableContent: !0
        }, o(), {
            blockList: t,
            revision_number: e.revision ? e.revision.number : 1,
            width: n.DOCUMENT.PAD.WIDTH
        })
    }
}
]),
angular.module("pd.services").service("DocumentDetailsService", ["API", "$q", "ProfileService", "Config", "DocumentInfoBuilder", "MultipleRequestService", "WorkspacesService", "DocumentContentInfoBuilder", function(e, n, t, o, i, a, s, l) {
    this.getDocumentInfo = function(e) {
        var t = n.defer()
          , o = {}
          , s = [{
            request: u,
            args: [e]
        }, {
            request: g,
            args: []
        }, {
            request: f,
            args: [e]
        }]
          , r = function() {
            o.document && o.widgets && o.tokens && t.resolve(i.buildDocumentInfo(o))
        }
        ;
        return c(e).then(function(e) {
            t.notify(l.buildDocumentContentInfo(e)),
            o.document = e,
            r()
        }
        , t.reject),
        a.execute(s, !0).then(function(e) {
            o.widgets = e[0],
            o.user = e[1],
            o.tokens = _.sortBy(e[2], "name"),
            r()
        }
        , t.reject),
        t.promise
    }
    ,
    this.getTemplateInfo = function(e) {
        var t = n.defer()
          , o = {}
          , s = [{
            request: m,
            args: [e]
        }, {
            request: g,
            args: []
        }]
          , r = function() {
            o.document && o.widgets && t.resolve(i.buildTemplateInfo(o))
        }
        ;
        return d(e).then(function(e) {
            t.notify(l.buildDocumentContentInfo(e)),
            o.document = e,
            r()
        }
        , t.reject),
        a.execute(s, !0).then(function(e) {
            o.widgets = e[0],
            o.user = e[1],
            r()
        }
        , t.reject),
        t.promise
    }
    ,
    this.getEmbeddedTemplateInfo = function(t) {
        var o = n.defer();
        return e.one("templates/" + t, "embed").get().then(function(e) {
            o.notify(l.buildDocumentContentInfo(e)),
            o.resolve(i.buildEmbeddedTemplateInfo(e))
        }
        , o.reject),
        o.promise
    }
    ,
    this.getLibraryItemInfo = function(e) {
        var t = n.defer()
          , o = {}
          , s = [{
            request: p,
            args: [e]
        }, {
            request: g,
            args: []
        }]
          , c = function() {
            o.document && o.user && t.resolve(i.buildLibraryItemInfo(o))
        }
        ;
        return r(e).then(function(e) {
            t.notify(l.buildLibraryItemContentInfo(e)),
            o.document = e,
            c()
        }
        , t.reject),
        a.execute(s, !0).then(function(e) {
            o.widgets = e[0],
            o.user = e[1],
            c()
        }
        , t.reject),
        t.promise
    }
    ;
    var r = function(n) {
        return e.one("library/items", n).get()
    }
      , c = function(n) {
        return e.one("documents", n).get()
    }
      , d = function(n) {
        return e.one("templates", n).get()
    }
      , u = function(n) {
        return e.all("widgets").getList({
            document_id: n
        })
    }
      , m = function(n) {
        return e.one("templates", n).getList("widgets")
    }
      , p = function(n) {
        return e.one("library/items", n).getList("widgets")
    }
      , g = function() {
        return t.getProfile()
    }
      , f = function(n) {
        return e.one("documents", n).getList("block_tokens")
    }
}
]),
angular.module("pd.services").service("DocumentInfoBuilder", ["Constants", "WidgetUtility", "Config", "ColorService", "RecipientService", "$rootScope", "DocumentInfoFactory", "WidgetInfoFactory", function(e, n, t, o, i, a, s, l) {
    this.buildDocumentInfo = function(e) {
        if (t.application.viewer || t.application.session_view) {
            e.actor = t.actor;
            var n = u(e.document.recipients, t.actor);
            n && a.$broadcast("profile.initialized", n.contact)
        } else
            (t.application.app || t.application.sdk) && (e.actor = d(e.document.recipients, e.user));
        var l = s.createDocumentInfo(e);
        return l.document.recipients = o.assignColor(l.document.recipients),
        l.widgetsInfo = c(e.widgets, l),
        l.document.recipients = i.assignType(l.document.recipients, l.widgetsInfo),
        l.tokens = e.tokens,
        l
    }
    ,
    this.buildTemplateInfo = function(e) {
        var t = s.createTemplateInfo(e);
        return t.widgetsInfo = c(e.widgets, t),
        o.assignColor(e.document.roles),
        _.each(t.widgetsInfo, function(t) {
            t.widget.role && _.assign(t, n.getRoleInfo(e.document.roles, t.widget.role))
        }
        ),
        t
    }
    ,
    this.buildEmbeddedTemplateInfo = function(e) {
        return _.each(e.widgets, function(n) {
            r(n, {
                document: e
            })
        }
        ),
        s.cretateEmbeddedTemplateInfo({
            document: e
        })
    }
    ,
    this.buildLibraryItemInfo = function(e) {
        var t = s.createLibraryItemInfo(e);
        return t.widgetsInfo = c(e.widgets, t),
        o.assignColor(e.document.roles),
        _.each(t.widgetsInfo, function(t) {
            t.widget.role && _.assign(t, n.getRoleInfo(e.document.roles, t.widget.role))
        }
        ),
        t
    }
    ;
    var r = function(e, n) {
        return e.content = e.content || n.document.revision.content.id,
        e
    }
      , c = function(e, n) {
        var t = _.filter(e, function(e) {
            if (!e.revision || !e.content)
                return !0;
            if (e.revision === n.document.revision.uuid)
                return !0;
            var t = _.any(n.document.revision.attachments, function(n) {
                return n.content.id === e.content
            }
            );
            return t
        }
        );
        return _.map(t, function(e) {
            return l.createWidgetInfo(r(e, n), n)
        }
        )
    }
      , d = function(e, n) {
        if (n) {
            var t = _.find(e, function(e) {
                return e.contact.email === n.email
            }
            );
            return t ? t.contact.id : void 0
        }
    }
      , u = function(e, n) {
        return _.find(e, function(e) {
            return e.contact.id === n
        }
        )
    }
}
]),
angular.module("pd.services").service("DocumentsApprovalService", ["API", function(e) {
    this.enableApproval = function(n) {
        return e.one("documents", n.id).all("approvals").post({})
    }
    ,
    this.addModerator = function(n, t) {
        return e.one("approvals", n.id).all("moderators").post(t)
    }
    ,
    this.removeModerator = function(n, t) {
        return e.one("approvals", n.id).one("moderators", t.id).remove()
    }
    ,
    this.disableApproval = function(n, t) {
        return e.one("documents", n.id).one("approvals", t.id).remove()
    }
    ,
    this.sendForApproval = function(n, t) {
        return t = t || "",
        e.one("approvals", n.approval.id).all("request").post({
            message: t
        })
    }
    ,
    this.approve = function(n, t) {
        return e.one("approvals", n.approval.id).all("approve").post({
            reason: t
        })
    }
    ,
    this.reject = function(n, t) {
        return e.one("approvals", n.approval.id).all("reject").post({
            reason: t
        })
    }
}
]),
angular.module("pd.services").service("DocumentsService", ["API", "Constants", function(e, n) {
    this.getDocuments = function(n, t) {
        n = n || {},
        _.defaults(n, {
            page: 1,
            count: 10
        });
        var o = n.q ? "documents/search" : "documents";
        return e.handleRequest(e.all(o).getList(n), t)
    }
    ,
    this.getFlatDocuments = function(n, t) {
        n = n || {},
        _.defaults(n, {
            page: 1,
            count: 10
        });
        var o = n.q ? "documents/search" : "documents/flat";
        return e.handleRequest(e.all(o).getList(n), t)
    }
    ,
    this.getRecentDocuments = function(n) {
        return e.handleRequest(e.all("documents/recent").getList(), n)
    }
    ,
    this.getDocumentById = function(n, t) {
        return e.handleRequest(e.one("documents", n).get(), t)
    }
    ,
    this.getDownloadPDFUrl = function(n, t, o) {
        return e.handleRequest(e.one("documents", n).customGET("pdf", t), o)
    }
    ,
    this.getContactDocuments = function(t, o, i) {
        return o = o || {},
        o.status__ne = n.DOCUMENT.STATUS.DRAFT,
        e.handleRequest(e.one("contacts", t).getList("documents", o), i)
    }
    ,
    this.createDocument = function(n, t) {
        return e.all("documents").post(n, t)
    }
    ,
    this.createDocumentFromTemplate = function(n, t, o) {
        return e.one("templates", n).post("clone", t, o)
    }
    ,
    this.getInbox = function(n, t) {
        return n = n || {},
        n.page = n.page || 1,
        n.count = n.count || 10,
        e.handleRequest(e.all("inbox/documents").getList(n), t)
    }
    ,
    this.duplicate = function(n, t) {
        n = _.isArray(n) ? n : [n];
        var o = {
            ids: n
        };
        return t && (o.folder_id = t),
        e.all("documents/duplicate").post(o)
    }
    ,
    this.move = function(n, t, o) {
        n = _.isArray(n) ? n : [n];
        var i = {
            ids: n,
            to_folder_id: o
        };
        return t && (i.fromFolderId = t),
        e.all("documents/move").post(i)
    }
    ,
    this.remove = function(n, t) {
        n = _.isArray(n) ? n : [n];
        var o = {
            ids: n
        };
        return t && (o.folder_id = t),
        e.all("documents/delete").post(o)
    }
    ,
    this.addRecipient = function(n, t, o) {
        return e.handleRequest(e.one("documents", n).post("recipients", {
            contact: t
        }), o)
    }
    ,
    this.removeRecipient = function(n, t, o) {
        return e.handleRequest(e.one("documents", n).one("recipients", t).remove(), o)
    }
    ,
    this.sendDocument = function(n, t) {
        return e.handleRequest(e.one("documents", n.documentId).post("send", {
            message: n.message,
            subject: n.subject,
            sender: n.sender
        }), t)
    }
    ,
    this.getDocumentRevisions = function(n, t) {
        return e.handleRequest(e.one("documents", n).getList("revisions", {
            order_by: "-date_created",
            count: 30
        }), t)
    }
    ,
    this.newRevision = function(t, o, i) {
        _.defaults(o, {
            type: n.REVISIONS.COPY,
            postObject: {}
        });
        var a;
        return a = n.REVISIONS.GOOGLE_DRIVE === o.type ? e.one("google-drive/revision", t).post("", o.postObject) : e.one("documents", t).post("revisions/" + o.type, o.postObject),
        e.handleRequest(a, i)
    }
    ,
    this.getIncompleteDocuments = function(n) {
        return n = n || {},
        _.defaults(n, {
            page: 1,
            count: 10
        }),
        e.all("inbox/notifications").getList(n)
    }
    ,
    this.getWaitingForApprovalDocuments = function(n) {
        return n = n || {},
        _.defaults(n, {
            page: 1,
            count: 10
        }),
        e.all("documents/to-approve").getList(n)
    }
    ,
    this.completeDocument = function(n, t, o) {
        return e.handleRequest(e.one("documents", n).one("recipients", t).post("complete"), o)
    }
    ,
    this.sendReminder = function(n) {
        return e.one("recipients", n).all("send-reminder").patch({})
    }
    ,
    this.setRecipientsOrder = function(n, t) {
        var o = _.map(t, "id");
        return e.one("documents", n.id).all("recipients/ordering").patch({
            ordering: !0,
            ids: o
        })
    }
    ,
    this.disableRecipientsOrder = function(n) {
        return e.one("documents", n.id).all("recipients/ordering").patch({
            ordering: !1
        })
    }
    ,
    this.getAuditTrail = function(n) {
        return e.one("documents", n.id).getList("audit_trail")
    }
    ,
    this.createSampleDocument = function() {
        return e.all("documents").one("sample").post()
    }
    ,
    this.createTemplateFromDocument = function(n) {
        return e.all("documents/to_template").post({
            ids: [n]
        })
    }
    ,
    this.addAttachment = function(n, t) {
        return e.one("documents", n).post("attach", t)
    }
}
]),
angular.module("pd.services").service("DownloadService", ["ContextService", "DocumentsService", "TemplatesService", "$download", "$rootScope", function(e, n, t, o, i) {
    this.download = function(e) {
        this.getDownloadUrl(e, function(n) {
            o(n.url, e)
        }
        )
    }
    ,
    this.getDownloadUrl = function(o, a) {
        var s = e.when({
            "documents, inbox": function() {
                return n
            },
            templates: function() {
                return t
            }
        });
        s.getDownloadPDFUrl(o.document.id).then(a, function() {
            i.$broadcast("download.completed")
        }
        )
    }
}
]),
angular.module("pd.services").provider("ExternalCommunicationChannel", [function() {
    var e = function() {
        var e = {
            on: angular.noop,
            send: angular.noop,
            hasConnection: !1
        };
        if (window.Channel)
            try {
                var n = window.Channel.build({
                    window: window.parent,
                    origin: "*",
                    scope: "pd-js"
                });
                return {
                    on: function(e, t) {
                        n.bind(e, function(e, n) {
                            t(n)
                        }
                        )
                    },
                    send: function(e, t) {
                        n.notify({
                            method: e,
                            params: t
                        })
                    },
                    hasConnection: !0
                }
            } catch (t) {}
        return e
    }
    ;
    this.$get = function() {
        return e()
    }
}
]).service("ExternalService", ["ExternalCommunicationChannel", "$timeout", "$rootScope", function(e, n, t) {
    var o = "external."
      , i = e
      , a = {}
      , s = {}
      , l = function(e, i) {
        n(function() {
            t.$broadcast(o + e, i)
        }
        )
    }
    ;
    i.on("sdk.init_options", function(e) {
        l("sdk.init_options", e),
        s = e
    }
    ),
    i.on("sdk.receive_extra_data", function(e) {
        l("sdk.receive_extra_data", e),
        a = e
    }
    ),
    i.on("sdk.receive_extra_data_tokens", function(e) {
        l("sdk.receive_extra_data_tokens", e)
    }
    ),
    i.on("sdk.doclist.refresh", function(e) {
        l("sdk.doclist.refresh", e)
    }
    ),
    this.hasConnection = function() {
        return i.hasConnection
    }
    ,
    this.getExternalData = function() {
        return _.cloneDeep(a)
    }
    ,
    this.getInitOptions = function() {
        return _.cloneDeep(s)
    }
    ,
    this.send = function(e, n) {
        i.send(e, n)
    }
}
]).run(["ExternalService", function(e) {}
]),
angular.module("pd.services").service("FeaturesService", ["WorkspacesService", "$q", "Config", "$rootScope", "IntegrationsService", "Constants", function(e, n, t, o, i, a) {
    var s = []
      , l = !1
      , r = []
      , c = function() {
        l = !1,
        e.getWorkspace().then(function(e) {
            s = e.features || [],
            l = !0,
            _.each(r, function(e) {
                e.defer.resolve(e.func.apply(null , e.args))
            }
            )
        }
        )
    }
    ;
    t.application.app || t.application.sdk ? c() : l = !0,
    o.$on("workspace.updated", function() {
        (t.application.app || t.application.sdk) && c()
    }
    );
    var d = function(e) {
        return -1 !== s.indexOf(e)
    }
    ;
    this.checkAvailability = function(e) {
        var t = n.defer();
        return l ? t.resolve(d(e)) : r.push({
            defer: t,
            func: d,
            args: [e]
        }),
        t.promise
    }
    ,
    this.getAvailableFeatures = function() {
        var e = n.defer();
        return l ? e.resolve(s) : r.push({
            defer: e,
            func: function() {
                return s
            },
            args: []
        }),
        e.promise
    }
}
]).run(["FeaturesService", function(e) {}
]),
angular.module("pd.services").service("FileService", ["API", "$q", function(e, n) {
    this.startProcessing = function(n) {
        return e.all("documents/process").post({
            source: n.cdnUrl
        })
    }
    ,
    this.startNewRevisionProcessing = function(n) {
        return e.all("google-drive/process").post(n)
    }
    ,
    this.getFileProcessingProgress = function(n) {
        return e.one("documents/" + n, "state").get()
    }
    ,
    this.uploadImage = function(e) {
        var t = n.defer();
        return setTimeout(function() {
            t.resolve(e)
        }
        , 2e3),
        t.promise
    }
}
]),
angular.module("pd.services").service("FoldersService", ["API", "WorkspacesService", "FoldersLoaderService", function(e, n, t) {
    var o = {
        documents: "folders",
        templates: "template-folders"
    };
    this.getFoldersManager = function(n) {
        var t = o[n];
        return {
            getFolders: function(n, o) {
                return n = n || {},
                n.page = n.page || 1,
                n.count = n.count || 50,
                n.parent ? e.handleRequest(e.one(t, n.parent).getList("folders", n), o) : e.handleRequest(e.all(t).getList(n), o)
            },
            addFolder: function(n, o) {
                return e.handleRequest(e.all(t).post(n), o)
            },
            removeFolder: function(n, o) {
                return e.handleRequest(e.one(t, n).customDELETE("", {
                    id: n
                }), o)
            },
            getFolderParents: function(n, o) {
                return e.handleRequest(e.one(t, n).getList("tree"), o)
            },
            updateFolder: function(n, o) {
                return e.handleRequest(e.one(t, n.id).patch(n), o)
            },
            getFolder: function(n, o) {
                return e.handleRequest(e.one(t, n).get(), o)
            }
        }
    }
    ,
    this.getRootFolder = function(e) {
        return n.getWorkspace().then(function(n) {
            return t.loadFolder(n.folders[e], e)
        }
        )
    }
}
]),
angular.module("pd.services").service("IntegrationsService", ["API", "$interval", "Config", "wrapInPromise", function(e, n, t, o) {
    this.getIntegrations = function(n) {
        return e.handleRequest(e.all("settings/integrations").getList(), n)
    }
    ,
    this.disableIntegration = function(e, n) {
        var t = {
            is_active: !1
        };
        return this.updateIntegration(e, t, n)
    }
    ,
    this.updateIntegration = function(n, t, o) {
        return e.handleRequest(e.one("settings/integrations").customOperation("patch", n, {}, {}, t), o)
    }
    ,
    this.enableIntegration = function(n, t, o) {
        return e.handleRequest(e.one("settings/integrations").customOperation("post", n, {}, {}, t), o)
    }
    ,
    this.getIntegrationContacts = function(n, t, o) {
        return t = t || {},
        t.page = t.page || 1,
        t.count = t.count || 10,
        e.handleRequest(e.all("integrations/" + n + "/contacts").getList(t), o)
    }
    ,
    this.inviteIntegrationContacts = function(n, t) {
        return e.all("integrations/" + n + "/provision").post(t)
    }
    ;
    var i = null ;
    n(function() {
        i = null 
    }
    , 3e4),
    this.getIntegrationStatus = function(n) {
        return i && i[n] ? o(i[n]) : e.one("integrations/status", n).get().then(function(e) {
            return i = i || {},
            i[n] = e,
            e
        }
        )
    }
    ,
    this.getIntegrationSettings = function(n) {
        return e.one("integrations/settings", n).get()
    }
    ,
    this.updateIntegrationSettings = function(n, t) {
        return e.one("integrations/settings", n).patch(t)
    }
    ,
    this.getXeroTaxes = function() {
        return e.all("integrations/xero/taxes").getList()
    }
    ,
    this.getIntegrationSettingsForDocument = function(n, t) {
        return e.one("integrations/" + n + "/documents/" + t, "settings").get()
    }
    ,
    this.updateIntegrationSettingsForDocument = function(n, t, o) {
        return e.one("integrations/" + n + "/documents/" + t, "settings").patch(o)
    }
    ,
    this.connectWebhooksIntegration = function() {
        return e.all("integrations/connected").post({
            provider: "webhook"
        })
    }
    ,
    this.getWebhooks = function() {
        return e.all("integrations/webhook/settings").getList()
    }
    ,
    this.addWebhook = function(n) {
        return e.all("integrations/webhook/settings").post(n)
    }
    ,
    this.updateWebhook = function(n) {
        return e.one("integrations/webhook/settings", n.id).patch(n)
    }
    ,
    this.removeWebhook = function(n) {
        return e.one("integrations/webhook/settings", n.id).remove()
    }
    ,
    this.loadWebhookHistory = function(n) {
        return e.all("integrations/webhook/calls/" + n.id).getList({
            page: 1,
            count: 30
        })
    }
    ,
    this.regenerateWebhookSharedKey = function(n) {
        return e.one("integrations/webhook/settings", n.id).patch({
            shared_key: "regenerate"
        })
    }
}
]),
angular.module("pd.services").service("IntercomService", ["API", function(e) {
    this.sendMessage = function(n) {
        return e.all("intercom/messages").post({
            message: n
        })
    }
}
]),
angular.module("pd.services").service("InvoicesService", ["API", function(e) {
    this.createInvoice = function(n, t) {
        return e.all("integrations/" + t + "/invoices").post(n)
    }
    ,
    this.getInvoices = function(n, t) {
        return e.one("integrations/" + n + "/documents", t).getList("invoices")
    }
    ,
    this.removeInvoice = function(n, t) {
        return e.one("/integrations/" + n + "/invoices", t.id).remove()
    }
    ,
    this.updateInvoice = function(n, t) {
        return e.one("integrations/" + n + "/invoices", t.id).patch(t)
    }
    ,
    this.generateInvoices = function(n) {
        return e.one("integrations/xero/invoices", n).post("generate", {})
    }
}
]),
angular.module("pd.services").service("LibraryService", ["API", "FoldersService", function(e, n) {
    this.getRootFolder = function() {
        return n.getRootFolder("library")
    }
    ,
    this.getFolders = function(n) {
        var t = n.parent;
        return n = _.omit(n, "parent"),
        t && (n.folder_id = t),
        e.all("library/folders").getList(n)
    }
    ,
    this.addFolder = function(n) {
        return e.all("library/folders").post(n)
    }
    ,
    this.getFolderParents = function(n, t) {
        return e.handleRequest(e.one("library/folders", n).getList("tree"), t)
    }
    ,
    this.getItems = function(n, t) {
        var o = n.folder_id
          , i = n.q;
        if (n = _.omit(n, "folder_id"),
        o && !i)
            return e.handleRequest(e.one("library/folders", o).getList("items", n), t);
        var a = n.q ? "library/items/search" : "library/items";
        return e.handleRequest(e.all(a).getList(n), t)
    }
    ,
    this.getItem = function(n) {
        return e.one("library/items", n).get()
    }
    ,
    this.createItem = function(n, t) {
        return e.all("library/items").post(n, t)
    }
    ,
    this.removeFolder = function(n) {
        return e.one("library/folders", n).customDELETE("", {
            id: n
        })
    }
    ,
    this.updateFolder = function(n) {
        return e.one("library/folders", n.id).patch(n)
    }
    ,
    this.remove = function(n, t) {
        n = _.isArray(n) ? n : [n];
        var o = {
            ids: n
        };
        return t && (o.folder_id = t),
        e.all("library/items/delete").post(o)
    }
    ,
    this.move = function(n, t, o) {
        n = _.isArray(n) ? n : [n];
        var i = {
            ids: n,
            to_folder_id: o
        };
        return t && (i.fromFolderId = t),
        e.all("library/items/move").post(i)
    }
    ,
    this.duplicate = function(n, t) {
        n = _.isArray(n) ? n : [n];
        var o = {
            ids: n
        };
        return t && (o.folder_id = t),
        e.all("documents/duplicate").post(o)
    }
    ,
    this.insertLibraryItem = function(n, t) {
        return e.one("library/items", n).post("insert", t)
    }
    ,
    this.createFromBlock = function(n, t) {
        return e.all("library/items").customPOST({
            block_id: n,
            name: t
        }, "create")
    }
    ,
    this.addBlockToItem = function(n, t) {
        return e.one("library/items", t).post("add", {
            block_id: n
        })
    }
}
]),
angular.module("pd.services").service("OrganizationService", ["API", function(e) {
    this.getOrganization = function(n) {
        return e.handleRequest(e.one("organization").get(), n)
    }
    ,
    this.getWorkspaces = function(n) {
        return e.handleRequest(e.all("organization/workspaces").getList({
            page: 1,
            count: 50
        }), n)
    }
    ,
    this.addWorkspace = function(n, t) {
        return e.handleRequest(e.all("organization/workspaces").post(n), t)
    }
    ,
    this.updateWorkspace = function(n, t) {
        return e.handleRequest(e.one("workspaces", n.id).patch(n), t)
    }
}
]),
angular.module("pd.services").service("ProfileService", ["API", "$rootScope", "Config", function(e, n, t) {
    var o = null 
      , i = function() {
        return e.one("profile").get()
    }
    ;
    this.getProfile = function() {
        if (!t.application.app && !t.application.sdk || o)
            return e.wrapInPromise(o);
        var n = e.runOneAtTime(i);
        return n.then(function(e) {
            o = e
        }
        ),
        n
    }
    ,
    this.updateProfile = function(n, t) {
        t = t || {};
        var i = e.all("profile").patch(n, t);
        return i.then(function(e) {
            o = _.assign(o, e)
        }
        ),
        i
    }
    ,
    this.changePassword = function(n, t) {
        return e.handleRequest(e.all("profile/set-password").post(n), t)
    }
    ,
    this.resendVerificationEmail = function(n) {
        return e.handleRequest(e.all("users/regenerate-token").post({
            email: o.email
        }), n)
    }
    ,
    this.logout = function() {
        return e.all("users/logout").post()
    }
    ;
    var a = this;
    n.$on("update.company.name", function() {
        o = null ,
        a.getProfile()
    }
    ),
    t.application.app ? n.$on("profile.email-verified", function(e, n) {
        n.profile && o && n.profile.id === o.id && (o.email_verified = !0)
    }
    ) : n.$on("profile.initialized", function(e, n) {
        o = n
    }
    )
}
]),
angular.module("pd.services").service("PropertiesService", ["API", function(e) {
    var n = this;
    this._cachedProperties = null ,
    this.get = function() {
        var t;
        return n._cachedProperties ? t = e.wrapInPromise(n._cachedProperties) : (t = e.runOneAtTime(function() {
            return e.one("properties").get()
        }
        ),
        t.then(function(e) {
            n._cachedProperties = e
        }
        )),
        t
    }
    ,
    this.set = function(t, o, i) {
        n._cachedProperties && (n._cachedProperties[t] = n._cachedProperties[t] || {},
        _.isString(o) ? n._cachedProperties[t][o] = i : _.isObject(o) && _.assign(n._cachedProperties[t], o));
        var a = {};
        return _.isString(o) ? a[o] = i : _.isObject(o) && (a = o),
        e.all("properties").customPOST(a, t)
    }
}
]),
angular.module("pd.services").factory("PublicConfigFactory", ["API", "Config", "$rootScope", function(e, n, t) {
    function o() {
        return i = window.__pd_public_conf ? e.wrapInPromise(window.__pd_public_conf) : e.one("conf/a/conf").get()
    }
    var i = null ;
    return t.$on("branding.logoChanged", o),
    t.$on("branding.iconChanged", o),
    {
        getConf: function() {
            return i ? i : o()
        }
    }
}
]),
angular.module("pd.services").service("PusherService", ["$rootScope", "Config", "Constants", "ProfileService", "$timeout", "$q", function(e, n, t, o, i, a) {
    var s = this;
    if (!window.Pusher)
        return this.isInitialized = !1,
        !1;
    var l = new Pusher(n.pusherKey)
      , r = function(n, t) {
        i(function() {
            e.$broadcast(n, t)
        }
        )
    }
      , c = function(e) {
        var n = l.subscribe(e);
        n.bind(t.PUSHER_EVENTS.NOTIFICATION, function(e) {
            r("notification." + e.event_type, e),
            s.isInitialized = !0
        }
        ),
        n.bind(t.PUSHER_EVENTS.SERVICE, function(e) {
            r(e.event_type + "." + e.action, e.data),
            s.isInitialized = !0
        }
        ),
        n.bind("profile", function(e) {
            r(e.event_type + "." + e.action, e.data),
            s.isInitialized = !0
        }
        )
    }
      , d = function() {
        var e = a.defer();
        return n.application.viewer || n.application.session_view ? e.resolve(n.uuid) : n.application.app && o.getProfile().then(function(t) {
            e.resolve(t.uuid + "." + n.workspace)
        }
        ),
        e.promise
    }
    ;
    return this.isInitialized || d().then(c),
    !0
}
]).run(["PusherService", function(e) {}
]),
angular.module("pd.services").service("RewardsService", ["API", function(e) {
    this.inviteUsers = function(n, t) {
        return e.handleRequest(e.all("invite/email").post(n), t)
    }
    ,
    this.inviteGmailContacts = function(n) {
        return e.handleRequest(e.all("invite/gmail").post({}), n)
    }
    ,
    this.invitePandaDocContacts = function(n) {
        return e.handleRequest(e.all("invite/pandadoc").post({}), n)
    }
    ,
    this.getRewards = function(n, t) {
        return e.handleRequest(e.all("rewards").getList(n), t)
    }
}
]),
angular.module("pd.services").service("SettingsService", ["API", function(e) {
    this.getEmailNotificationSettings = function(n) {
        return e.handleRequest(e.one("settings/notifications").get(), n)
    }
    ,
    this.updateEmailNotificationSetting = function(n) {
        e.one("settings/notifications").customOperation("patch", "", {}, {}, n)
    }
}
]),
angular.module("pd.services").service("SubscriptionService", ["Constants", "$sce", "$filter", "ContactUsDialog", function(e, n, t, o) {
    var i = [e.BILLING.SUBSCRIPTION_STATE.PAST_DUE, e.BILLING.SUBSCRIPTION_STATE.SUSPENDED, e.BILLING.SUBSCRIPTION_STATE.CANCELLED, e.BILLING.SUBSCRIPTION_STATE.EXPIRED, e.BILLING.SUBSCRIPTION_STATE.UNPAID]
      , a = [e.BILLING.SUBSCRIPTION_STATE.ASSESSING, e.BILLING.SUBSCRIPTION_STATE.ACTIVE, e.BILLING.SUBSCRIPTION_STATE.SOFT_FAILURE];
    this.isFree = function(n) {
        return n && n.plan && n.plan.type === e.PLANS.TYPE.FREE
    }
    ,
    this.isTrial = function(e) {
        return !this.isFree(e) && e.in_trial
    }
    ,
    this.isTrialEnded = function(n) {
        return !this.isFree(n) && n.state === e.BILLING.SUBSCRIPTION_STATE.TRIAL_ENDED
    }
    ,
    this.isNotActive = function(e) {
        return !this.isFree(e) && -1 !== i.indexOf(e.state)
    }
    ,
    this.isActive = function(e) {
        return !this.isFree(e) && -1 !== a.indexOf(e.state)
    }
    ,
    this.getCreditCardDetailsUrl = function(e) {
        return e.external_url ? "#/settings/account/subscription/checkout" : "#/settings/account/subscription/"
    }
    ,
    this.onSubscriptionUpdateError = function(e, n) {
        var i = 'Unable to switch to "' + t("translate")("billing.plan." + e.handle + ".name") + '" plan.';
        n.data && n.data.plan && n.data.plan.length > 0 && (i = n.data.plan[0]),
        o.open({
            header: "Unable to update your subscription",
            message: i
        })
    }
}
]),
angular.module("pd.services").service("TemplatesService", ["API", "Constants", "DefaultDocumentContentService", function(e, n, t) {
    this.getTemplates = function(n, t) {
        n = n || {},
        _.defaults(n, {
            page: 1,
            count: 10
        });
        var o = n.q ? "templates/search" : "templates";
        return e.handleRequest(e.all(o).getList(n), t)
    }
    ,
    this.getTemplateById = function(n, t) {
        return e.handleRequest(e.one("templates", n).get(), t)
    }
    ,
    this.createTemplate = function(n, o) {
        return e.all("templates").post(n, o).then(t.createDefaultContent)
    }
    ,
    this.getDownloadPDFUrl = function(n, t, o) {
        return e.handleRequest(e.one("templates", n).customGET("pdf", t), o)
    }
    ,
    this.newRevision = function(t, o, i) {
        _.defaults(o, {
            type: n.REVISIONS.COPY,
            postObject: {}
        });
        var a;
        return a = n.REVISIONS.GOOGLE_DRIVE === o.type ? e.one("google-drive/revision", t).post("", o.postObject) : e.one("templates", t).post("revisions/" + o.type, o.postObject),
        e.handleRequest(a, i)
    }
    ,
    this.getTemplateRevisions = function(n, t) {
        return e.handleRequest(e.one("templates", n).getList("revisions", {
            order_by: "-date_created",
            count: 30
        }), t)
    }
    ;
    var o = function(e) {
        return e === n.DOCUMENT.TYPE.LIBRARY_ITEM ? "library/items" : "templates"
    }
    ;
    this.addRole = function(n, t, i, a) {
        return e.handleRequest(e.one(o(i), n).all("roles").post(t), a)
    }
    ,
    this.removeRole = function(n, t, i, a) {
        e.handleRequest(e.one(o(i), n).one("roles", t).remove(), a)
    }
    ,
    this.updateRole = function(n, t, i, a) {
        return e.handleRequest(e.one(o(i), n).one("roles", t.id).patch(t), a)
    }
    ,
    this.sendTemplate = function(n, t) {
        return e.one("templates", n).post("embed", t)
    }
    ,
    this.createToken = function(n) {
        return e.one("templates", n).post("token")
    }
    ,
    this.deleteToken = function(n) {
        return e.all("templates/" + n + "/token").remove()
    }
    ,
    this.setRolesOrder = function(n, t) {
        var o = _.map(t, "id");
        return e.one("templates", n.id).all("roles/ordering").patch({
            ordering: !0,
            ids: o
        })
    }
    ,
    this.disableRolesOrder = function(n) {
        return e.one("templates", n.id).all("roles/ordering").patch({
            ordering: !1
        })
    }
    ,
    this.createSampleTemplate = function() {
        return e.all("templates").one("sample").post()
    }
    ,
    this.remove = function(n, t) {
        n = _.isArray(n) ? n : [n];
        var o = {
            ids: n
        };
        return t && (o.folder_id = t),
        e.all("templates/delete").post(o)
    }
    ,
    this.duplicate = function(n, t) {
        n = _.isArray(n) ? n : [n];
        var o = {
            ids: n
        };
        return t && (o.folder_id = t),
        e.all("documents/duplicate").post(o)
    }
    ,
    this.move = function(n, t, o) {
        n = _.isArray(n) ? n : [n];
        var i = {
            ids: n,
            to_folder_id: o
        };
        return t && (i.fromFolderId = t),
        e.all("templates/move").post(i)
    }
    ,
    this.addAttachment = function(n, t) {
        return e.one("templates", n).post("attach", t)
    }
}
]),
angular.module("pd.services").service("ThemesService", ["API", "$stateParams", function(e, n) {
    this.getThemeById = function(n, t) {
        return e.handleRequest(e.one("themes", n).get(), t)
    }
    ,
    this.getThemes = function(n, t) {
        return n = n || {},
        _.defaults(n, {
            page: 1,
            count: 100
        }),
        e.handleRequest(e.all("themes").getList(n), t)
    }
    ,
    this.applyTheme = function(n, t, o) {
        return e.handleRequest(e.one("themes", t).patch({
            content: n
        }), o)
    }
    ,
    this.updateTheme = function(n, t, o, i) {
        return o = _.extend(o, {
            content: n
        }),
        e.handleRequest(e.one("themes", t).patch(o), i)
    }
    ,
    this.removeTheme = function(n, t) {
        return e.handleRequest(e.one("themes", n).patch({
            display: !1
        }), t)
    }
}
]),
angular.module("pd.services").service("TimelineService", ["API", function(e) {
    var n = function(e, n) {
        if (n.document_id) {
            var t = n.isTemplate ? "templates/" : "documents/";
            return t + n.document_id + "/" + e
        }
        return e
    }
      , t = function(e) {
        return _.omit(e, ["document_id", "isTemplate"])
    }
    ;
    this.getActions = function(o, i) {
        return e.handleRequest(e.all(n("actions", o)).getList(t(o)), i)
    }
    ,
    this.sendDashboardMessage = function(o, i, a) {
        return i = i || {},
        e.handleRequest(e.all(n("messages", i)).post(o, t(i)), a)
    }
    ,
    this.sendDocumentMessage = function(n, t, o) {
        return t = t || {},
        e.handleRequest(e.one("documents", t.document_id).post("messages", n), o)
    }
    ,
    this.sendComment = function(t, o, i) {
        return e.handleRequest(e.one(n("messages/" + t.messageId + "/nested", t)).post("", {
            text: o
        }), i)
    }
    ,
    this.getMessages = function(o, i) {
        return e.handleRequest(e.all(n("messages", o)).getList(t(o)), i)
    }
}
]),
angular.module("pd.services").service("TokensService", ["API", "ContextService", function(e, n) {
    this.getTokens = function(t) {
        var o = n.when({
            documents: function() {
                return "documents"
            },
            templates: function() {
                return "templates"
            },
            library: function() {
                return "library/items"
            }
        });
        return e.one(o, t).getList("block_tokens")
    }
    ,
    this.deleteTokens = function(n, t) {
        var o = _.map(t, function(e) {
            return {
                name: e.name
            }
        }
        );
        return e.one("block_list", n).customOperation("remove", "tokens", {}, {
            "Content-Type": "application/json"
        }, o)
    }
    ,
    this.updateTokens = function(n, t) {
        var o = _.map(t, function(e) {
            return {
                name: e.name,
                value: e.value
            }
        }
        );
        return e.one("block_list", n).customOperation("patch", "tokens", {}, {
            "Content-Type": "application/json"
        }, o)
    }
}
]),
angular.module("pd.services").service("WebinarsService", ["API", function(e) {
    this.joinWebinar = function() {
        return e.handleRequest(e.all("internal/gotowebinar").post())
    }
    ,
    this.getWebinarDescription = function() {
        return e.handleRequest(e.one("internal/gotowebinar").get())
    }
}
]),
angular.module("pd.services").service("WidgetsService", ["API", function(e) {
    this.addWidget = function(n, t) {
        var o, i = n.widget;
        if (n.isTemplate)
            o = e.one("templates", n.documentId).post("widgets", i);
        else {
            var a = {};
            n.documentId && (a.document_id = n.documentId),
            n.block && (a.block = n.block.id),
            o = e.all("widgets").post(i, a)
        }
        return e.handleRequest(o, t)
    }
    ,
    this.linkWithBlock = function(n, t) {
        return e.all("block_widgets").post({
            widget: n,
            block: t
        })
    }
    ,
    this.updateWidgetData = function(n) {
        var t = _.pick(n.data, "value");
        return t.value = t.value || "",
        e.one("widgets", n.id).customOperation("patch", "data", {}, {}, t)
    }
    ,
    this.removeWidget = function(n) {
        return e.one("widgets", n).remove()
    }
    ,
    this.updateWidget = function(n) {
        return e.one("widgets", n.id).patch(n)
    }
    ,
    this.getUploadedFileLink = function(n) {
        return e.one("widgets/" + n.id, "download").get()
    }
    ,
    this.removeUploadedFile = function(n) {
        return e.one("widgets/" + n.id, "upload").remove()
    }
    ,
    this.getWidgetValue = function(n) {
        return e.one("widgets/" + n.id, "value").get()
    }
}
]),
angular.module("pd.services").service("WorkspacesService", ["API", "Constants", "ProfileService", "$rootScope", function(e, n, t, o) {
    var i, a = function() {
        return t.getProfile().then(function(n) {
            return e.one("workspaces", n.workspace).get()
        }
        )
    }
    , s = function() {
        if (i)
            return e.wrapInPromise(i);
        var n = e.runOneAtTime(a);
        return n.then(function(e) {
            i = e
        }
        ),
        n
    }
    ;
    this.getWorkspace = s,
    this.getWorkspaceMembers = function(n) {
        return n = n || {
            page: 1,
            count: 150
        },
        s().then(function(t) {
            return e.one("workspaces", t.id).all("members").getList(n)
        }
        )
    }
    ,
    this.findWorkspaceMembers = function(n) {
        return this.getWorkspace().then(function(t) {
            return e.one("workspaces", t.id).all("members").getList(n)
        }
        )
    }
    ,
    this.inviteUser = function(n, t, o) {
        return e.handleRequest(e.one("workspaces", n).post("invites", {
            email: t
        }), o)
    }
    ,
    this.getPendingInvites = function(t, o) {
        var i = {
            status: n.INVITE.SENT
        };
        return e.handleRequest(e.one("workspaces", t).getList("invites", i), o)
    }
    ,
    this.getWorkspaces = function(n) {
        return e.handleRequest(e.all("workspaces").getList({
            page: 1,
            count: 50
        }), n)
    }
    ,
    this.activateWorkspace = function(n, t) {
        return e.handleRequest(e.one("workspaces", n).post("activate"), t)
    }
    ,
    o.$eventToObservable("subscription.updated").debounce(2e3).subscribe(function(e) {
        var n = _.first(e.additionalArguments).subscription;
        n && i && (i = null ,
        s().then(function() {
            o.$broadcast("workspace.updated")
        }
        ))
    }
    ),
    o.$on("update.company.name", function() {
        i = null ,
        s().then(function() {
            o.$broadcast("workspace.updated")
        }
        )
    }
    ),
    this.isMyWorkspace = function(e) {
        return this.getWorkspaces().then(function(n) {
            return _.any(n, {
                id: e
            })
        }
        )
    }
    ,
    this.loadWorkspaceById = function(n) {
        return e.one("workspaces", n).get()
    }
    ,
    this.getWorkspaceSettings = function(n) {
        return e.one("workspaces", n).customGET("settings")
    }
    ,
    this.updateWorkspaceSettings = function(n, t) {
        return e.one("workspaces", n).customOperation("patch", "settings", {}, {}, t)
    }
}
]),
angular.module("pd.local-services", []),
angular.module("pd.local-services").factory("ColumnModel", ["$filter", function(e) {
    var n = function() {
        return {
            name: "Column",
            type: "basic_column",
            options: {
                width: 50,
                removable: !0,
                editable: !0
            }
        }
    }
    ;
    return {
        create: function(t) {
            return t = t || {},
            _.defaults(t, n(), {
                ref: e("uuid-short")()
            })
        }
    }
}
]).factory("SectionModel", ["$filter", function(e) {
    var n = function() {
        return {
            name: "Section",
            isDefault: !1,
            options: {
                showHeader: !0,
                removable: !0,
                editable: !0
            },
            rows: []
        }
    }
      , t = function() {
        return {
            name: "Default",
            isDefault: !0,
            options: {
                showHeader: !1,
                removable: !1,
                editable: !1
            },
            rows: []
        }
    }
    ;
    return {
        createDefault: function() {
            return _.assign({}, t(), {
                ref: e("uuid-short")()
            })
        },
        create: function(t) {
            return t = t || {},
            _.defaults(t, n(), {
                ref: e("uuid-short")()
            })
        }
    }
}
]).factory("RowModel", ["$filter", function(e) {
    var n = function() {
        return {
            section: "section_ref",
            data: {},
            options: {
                removable: !0,
                editable: !0
            }
        }
    }
    ;
    return {
        create: function(t) {
            return t = t || {},
            _.defaults(t, n(), {
                ref: e("uuid-short")()
            })
        }
    }
}
]).factory("BasicTableModel", [function() {
    var e = function() {
        return {
            columns: [],
            sections: [],
            settings: {
                showHeaders: !0,
                verticalBorder: !0,
                horizontalBorder: !0
            }
        }
    }
    ;
    return {
        create: function(n) {
            return n = n || {},
            _.defaults(n, e())
        }
    }
}
]),
angular.module("pd.local-services").service("BasicTableRendersService", [function() {
    var e = {}
      , n = {}
      , t = {};
    this.registerCellRenders = function(n, t) {
        e[n] = t
    }
    ,
    this.registerRowController = function(e, t) {
        n[e] = t
    }
    ,
    this.registerTableFooter = function(e, n) {
        t[e] = n
    }
    ,
    this.getTableFooter = function(e) {
        return t[e]
    }
    ,
    this.cellTemplate = function(n, t) {
        return e[t.type].template
    }
    ,
    this.cellController = function(n, t) {
        return e[t.type].controller
    }
    ,
    this.rowController = function(e, t) {
        return n[t]
    }
    ,
    this.sectionTemplate = function() {
        return "/views/blocks/table/renders/base/section.html"
    }
    ,
    this.columnTemplate = function() {
        return "/views/blocks/table/renders/base/column.html"
    }
}
]),
angular.module("pd.local-services").service("BasicTableService", ["wrapMethodInPromise", "ColumnModel", "RowModel", "SectionModel", function(e, n, t, o) {
    this.createDefaultCellValue = function(e, n) {
        e[n.ref] = ""
    }
    ,
    this.createRow = e(function(e) {
        var n = _.last(e.sections)
          , o = this
          , i = _.reduce(e.columns, function(e, n) {
            return o.createDefaultCellValue(e, n),
            e
        }
        , {});
        return t.create({
            section: n.ref,
            data: i
        })
    }
    , this),
    this.removeCellValue = function(e, n) {
        e[n.ref] = null 
    }
    ,
    this.createSection = e(function(e) {
        return e.sections && 0 !== e.sections.length ? o.create({
            name: ""
        }) : o.createDefault()
    }
    , this),
    this.createColumn = e(function(e) {
        return e = e || {
            name: ""
        },
        {
            column: n.create(e)
        }
    }
    , this)
}
]).run(["BasicTableRendersService", function(e) {
    var n = "/views/blocks/table/renders/base/";
    e.registerCellRenders("basic_column", {
        template: n + "cell.html",
        controller: ""
    })
}
]),
angular.module("pd.local-services").service("BlockBuilderService", ["BasicTableService", "$q", "$filter", "BasicTableModel", "PricingTableModel", "PricingTableService", "Constants", "$sce", function(e, n, t, o, i, a, s, l) {
    var r = function() {
        return {
            src: ""
        }
    }
      , c = function() {
        return ""
    }
      , d = function() {
        return {
            text: c(),
            image: r()
        }
    }
      , u = function() {
        return {
            images: [r(), r(), r()]
        }
    }
      , m = function() {
        return {
            text: c()
        }
    }
      , p = function() {
        return {
            text: c()
        }
    }
      , g = function() {
        return {
            settings: {
                include_h1: !0,
                include_h2: !0,
                include_h3: !0,
                exclude: []
            }
        }
    }
      , f = function() {
        return {
            text: c(),
            image: r(),
            options: {
                show_page_number_in_pdf: !1
            }
        }
    }
      , b = function() {
        return {
            text: c(),
            image: r(),
            options: {
                show_page_number_in_pdf: !1
            }
        }
    }
      , v = function() {
        return {
            options: {
                height: 200
            },
            content: "<p>Custom HTML content</p>"
        }
    }
      , h = function() {
        return {
            url: "",
            embed: "",
            cover: ""
        }
    }
      , w = function(e, n) {
        return {
            background: r(),
            logo: {
                image: r(),
                visible: !0,
                position: {
                    top: 140
                },
                layout: s.COVER_PAGE.LOGO_LAYOUTS.LEFT
            },
            title: {
                text: "<b>" + l.trustAsHtml(_.escape(n.documentInfo.document.name)).toString() + "</b>",
                position: {
                    top: 380
                }
            },
            text: {
                right: c(),
                left: c(),
                layout: s.COVER_PAGE.TEXT_LAYOUTS.TWO_COLUMNS,
                position: {
                    top: 540
                }
            }
        }
    }
      , k = function(n) {
        return e.createColumn().then(function(e) {
            return n.columns.push(e.column),
            n
        }
        )
    }
      , y = function(n) {
        return e.createSection(n).then(function(e) {
            return n.sections.push(e),
            n
        }
        )
    }
      , I = function(n) {
        return e.createRow(n).then(function(e) {
            return _.first(n.sections).rows.push(e),
            n
        }
        )
    }
      , C = function() {
        var e = o.create();
        return k(e).then(k).then(y).then(I)
    }
      , S = function(e) {
        return a.createSection(e).then(function(n) {
            return e.sections.push(n),
            e
        }
        )
    }
      , T = function(e) {
        return a.createRow(e).then(function(n) {
            return e.result.qty || (e.result.qty = 0),
            e.result.qty += n.data.qty,
            _.first(e.sections).rows.push(n),
            e
        }
        )
    }
      , E = function() {
        var e = i.create();
        return S(e).then(T)
    }
      , x = {
        text: d,
        image: u,
        heading: m,
        pagebreak: p,
        toc: g,
        table: C,
        pricingtable: E,
        header: f,
        footer: b,
        cover: w,
        html: v,
        video: h,
        "default": function() {
            return {
                text: c()
            }
        }
    };
    this.getDefaultBlockData = function(e, t) {
        var o = n.defer()
          , i = (x[e.handle] || x["default"])(e, t);
        return i.then ? i : (o.resolve(i),
        o.promise)
    }
}
]),
angular.module("pd.local-services").service("ToolsManager", ["$injector", "$state", "Constants", "Config", "$q", "FeaturesService", function(e, n, t, o, i, a) {
    var s = function() {
        return o.application.viewer
    }
      , l = function() {
        return o.application.app || o.application.sdk
    }
      , r = function(e) {
        return e.isDraft
    }
      , c = function(e) {
        return e.isSentOrCompleted
    }
      , d = function(e) {
        return e.isApproved
    }
      , u = function(e) {
        return e.isOwner
    }
      , m = function(e) {
        return e.document.revision.number > 1
    }
      , p = function(e) {
        return e.document.type === t.DOCUMENT.TYPE.EDITABLE_DOCUMENT || e.document.type === t.DOCUMENT.TYPE.EDITABLE_TEMPLATE || e.document.type === t.DOCUMENT.TYPE.LIBRARY_ITEM
    }
      , g = function(e) {
        return e.isFromMyWorkspace && o.userRole === t.ROLES.OWNER
    }
      , f = function(e) {
        return e.isFromMyWorkspace && o.userRole === t.ROLES.ADMIN
    }
      , b = function() {
        return -1 !== n.current.name.indexOf("inbox") && l()
    }
      , v = function() {
        return -1 !== n.current.name.indexOf("documents") && l()
    }
      , h = function() {
        return -1 !== n.current.name.indexOf("templates") && l()
    }
      , w = function() {
        return -1 !== n.current.name.indexOf("library") && l()
    }
      , k = function() {
        return !0
    }
      , y = function(e, n, t) {
        var o = e.condition(n, t)
          , i = !(e.feature && -1 === t.indexOf(e.feature));
        return o && i
    }
      , I = function(e, n, t) {
        return _.any(e, function(e) {
            return y(e, n, t)
        }
        )
    }
      , C = function(e) {
        if (e.blockList) {
            var n = _.find(e.blockList.blocks, function(e) {
                return e.type.handle === t.BLOCK_TYPES.TOC
            }
            );
            return n && n.data && n.data.settings && n.data.settings.show_right_side_navigation
        }
        return !1
    }
      , S = {
        name: "content",
        condition: function(e) {
            return u(e) && r(e) && p(e)
        }
    }
      , T = {
        name: "widgets",
        condition: function(e) {
            return r(e) && u(e) && !p(e)
        }
    }
      , E = {
        name: "library",
        condition: function(e) {
            return u(e) && r(e) && p(e)
        },
        feature: t.FEATURES.LIBRARY
    }
      , x = {
        name: "timeline",
        condition: k
    }
      , D = {
        name: "people",
        condition: k
    }
      , P = {
        name: "analytics",
        condition: function(e) {
            return u(e) || g(e) || f(e)
        },
        feature: t.FEATURES.DOCUMENT_ANALYTICS
    }
      , A = {
        name: "edit",
        condition: function(e) {
            return u(e) && (!r(e) || !p(e))
        }
    }
      , $ = {
        name: "download",
        condition: k
    }
      , O = {
        name: "send",
        condition: function(e) {
            return (r(e) || d(e)) && u(e)
        }
    }
      , R = {
        name: "complete",
        condition: function(e) {
            return (r(e) || d(e)) && u(e)
        }
    }
      , N = {
        name: "roles",
        condition: k
    }
      , L = {
        name: "create",
        condition: k
    }
      , M = {
        name: "embed",
        condition: function(e) {
            return !p(e) && (g(e) || f(e))
        },
        feature: t.FEATURES.EMBED
    }
      , U = {
        name: "xero",
        condition: function(e) {
            return p(e) && e.isFromMyWorkspace
        },
        feature: t.FEATURES.XERO
    }
      , F = {
        name: "more",
        condition: function(e, n) {
            return I([G, V, Y, H], e, n)
        }
    }
      , B = {
        name: "more",
        condition: function(e, n) {
            return I([G, V], e, n)
        }
    }
      , W = {
        name: "approval",
        condition: function(e) {
            return r(e) && u(e)
        }
    }
      , z = {
        name: "toc",
        condition: function(e) {
            return c(e) && p(e) && C(e)
        }
    }
      , j = {
        name: "comments",
        condition: k
    }
      , q = {
        name: "print",
        condition: k
    }
      , V = {
        name: "revisions",
        condition: m,
        context: "more"
    }
      , G = {
        name: "design",
        condition: function(e) {
            return r(e) && u(e) && p(e)
        },
        context: "more",
        feature: t.FEATURES.DOCUMENT_THEMES
    }
      , Y = {
        name: "workflow",
        condition: function(e) {
            return r(e) && (u(e) || g(e) || f(e))
        },
        context: "more",
        feature: t.FEATURES.WORKFLOW
    }
      , H = {
        name: "print",
        condition: k,
        context: "more"
    }
      , K = {
        name: "create-template",
        condition: u,
        context: "more"
    }
      , X = [z, j, D, q, $]
      , Z = [z, S, T, E, x, D, P, A, U, F, $, O, R, W, V, G, Y, H, K]
      , Q = [S, T, E, N, A, U, M, F, $, L, V, G, Y, H]
      , J = [S, N, B, V, G]
      , ee = function() {
        var e = [];
        return v() ? e = Z : b() ? e = Z : h() ? e = Q : w() ? e = J : s() && (e = X),
        e
    }
      , ne = function(e) {
        return _.filter(ee(), {
            context: e
        })
    }
    ;
    this.hasToolAccess = function(e, n) {
        return e && _.find(ee(), {
            name: n
        }).condition(e)
    }
    ,
    this.getToolsList = function(n, t) {
        var o = i.defer()
          , s = ne(t);
        return a.getAvailableFeatures().then(function(t) {
            var i = _.filter(s, function(e) {
                return y(e, n, t)
            }
            );
            o.resolve(_.map(i, function(n) {
                return e.get("meta." + n.name)
            }
            ))
        }
        ),
        o.promise
    }
    ,
    this.getDefaultDocTool = function(e) {
        return r(e) && u(e) ? p(e) ? S : T : c(e) && C(e) ? z : s() ? j : h() || w() ? N : x
    }
}
]),
angular.module("pd.local-services").service("DefaultDocumentContentService", ["API", "Constants", "BlocksService", "$q", "MultipleRequestService", function(e, n, t, o, i) {
    var a = function(e) {
        return [_.find(e, {
            handle: n.BLOCK_TYPES.HEADING
        }), _.find(e, {
            handle: n.BLOCK_TYPES.TEXT
        }), _.find(e, {
            handle: n.BLOCK_TYPES.TEXT
        })]
    }
      , s = function(e) {
        return [_.find(_.find(e, {
            handle: n.BLOCK_TYPES.HEADING
        }).layouts, {
            handle: n.LAYOUTS.HEADING.H1
        }), _.find(_.find(e, {
            handle: n.BLOCK_TYPES.TEXT
        }).layouts, {
            handle: n.LAYOUTS.TEXT.TEXT
        }), _.find(_.find(e, {
            handle: n.BLOCK_TYPES.TEXT
        }).layouts, {
            handle: n.LAYOUTS.TEXT.TEXT_IMAGE_LEFT
        })]
    }
    ;
    this.createDefaultContent = function(e) {
        var l = e.type
          , r = o.defer()
          , c = n.DOCUMENT.TYPE.EDITABLE_DOCUMENT === l || n.DOCUMENT.TYPE.EDITABLE_TEMPLATE === l
          , d = 1 === e.revision_number
          , u = e.revision.content && e.revision.content.block_list && 0 === e.revision.content.block_list.blocks.length;
        return c && d && u ? t.getAvailableBlocks().then(function(n) {
            var o = a(n)
              , l = e.revision.content.block_list
              , c = s(n)
              , d = [{
                request: t.createBlock,
                args: [o[0], {
                    blockList: l,
                    index: 0,
                    layout: c[0]
                }]
            }, {
                request: t.createBlock,
                args: [o[1], {
                    blockList: l,
                    index: 1,
                    layout: c[1]
                }]
            }, {
                request: t.createBlock,
                args: [o[2], {
                    blockList: l,
                    index: 2,
                    layout: c[2]
                }]
            }];
            i.execute(d, !0).then(function() {
                r.resolve(e)
            }
            , r.reject)
        }
        ) : r.resolve(e),
        r.promise
    }
}
]),
angular.module("pd.local-services").service("DocumentCreateService", ["ContactsService", "DocumentsService", "$q", "MultipleRequestService", "ExternalService", "Config", "DefaultDocumentContentService", function(e, n, t, o, i, a, s) {
    var l = function(n) {
        var o = t.defer()
          , i = _.filter(n.contacts, function(e) {
            return !e.id
        }
        );
        return _.isEmpty(i) ? o.resolve(n) : e.importContacts(i).then(function(e) {
            _.each(e.contacts, function(e) {
                var t = _.find(n.contacts, function(n) {
                    return n.email && e.email && n.email.toLowerCase() === e.email.toLowerCase()
                }
                );
                t && (t.id = e.id)
            }
            ),
            o.resolve(n)
        }
        ),
        o.promise
    }
      , r = function(e) {
        var t = _.map(e.contacts, function(t) {
            return {
                request: n.addRecipient,
                args: [e.document.id, t.id]
            }
        }
        );
        return o.execute(t)
    }
      , c = function(e) {
        return s.createDefaultContent(e)
    }
      , d = function(e) {
        return i.send("sdk.on_document_created", {
            document: e
        }),
        e
    }
      , u = function(e) {
        var n = t.defer()
          , o = i.getExternalData().metadata;
        return o && !_.isEmpty(o) && (e.metadata = o),
        n.resolve(e),
        n.promise
    }
      , m = function(e) {
        return {
            name: e.name,
            assoc: _.map(e.assignments, function(e) {
                return {
                    role_id: e.role.id,
                    contact_id: e.contact.id
                }
            }
            ),
            contacts: _.map(e.contacts, "id"),
            tokens: e.tokens || []
        }
    }
    ;
    this.createDocument = function(e) {
        e.extraOptions = e.extraOptions || {};
        var o = t.defer()
          , a = function() {
            return n.createDocument(e.document, e.extraOptions)
        }
        ;
        return u(e.document).then(a).then(d).then(c).then(function(e) {
            var n = i.getExternalData();
            if (n && n.recipients) {
                var t = _.filter(n.recipients, function(e) {
                    return !!e.email
                }
                );
                l({
                    contacts: t,
                    document: e
                }).then(r).then(function() {
                    o.resolve(e)
                }
                )
            } else
                o.resolve(e)
        }
        , o.reject),
        o.promise
    }
    ,
    this.createDocumentFromTemplate = function(e) {
        e.params = e.params || {},
        e.contacts = _.filter(e.contacts, function(e) {
            return !!e.email
        }
        ),
        e.assignments = _.filter(e.assignments, function(e) {
            return e.contact && e.contact.email
        }
        );
        var t = _.filter(e.contacts, function(e) {
            return !e.id
        }
        );
        t = t.concat(_.map(_.filter(e.assignments, function(e) {
            return !e.contact.id
        }
        ), "contact"));
        var o = function() {
            var t = m(e);
            return u(t).then(function() {
                return n.createDocumentFromTemplate(e.templateId, t, e.params)
            }
            )
        }
        ;
        return l({
            contacts: t
        }).then(o).then(d).then(c)
    }
}
]),
angular.module("pd.local-services").service("FoldersCacheService", ["$rootScope", function(e) {
    var n = {};
    this.add = function(e) {
        n[e.id] = e
    }
    ,
    this.get = function(e) {
        return n[e]
    }
    ,
    e.$on("folder.updated", function(e, t) {
        n[t.folder.id] = t.folder
    }
    )
}
]),
angular.module("pd.local-services").service("FoldersLoaderService", ["WorkspacesService", "$filter", "API", "$q", "FoldersCacheService", "ProfileService", function(e, n, t, o, i, a) {
    var s = {
        documents: "folders",
        templates: "template-folders",
        library: "library/folders",
        catalog: "catalog/folders"
    }
      , l = function(e, t, o) {
        return n("rootFolder")(e, t, o)
    }
      , r = {}
      , c = function(n, o) {
        return a.getProfile().then(function(a) {
            return e.getWorkspace().then(function(e) {
                var r = _.values(e.folders);
                if (r && _.contains(r, n)) {
                    var c = l({
                        id: n
                    }, o, a);
                    return i.add(c),
                    c
                }
                return t.one(s[o], n).get().then(function(e) {
                    return e.parent || (e = l(e, o, a)),
                    i.add(e),
                    e
                }
                )
            }
            )
        }
        )
    }
      , d = function(e, n) {
        var t = i.get(e);
        if (t) {
            var a = o.defer();
            return a.resolve(t),
            a.promise
        }
        return c(e, n)
    }
      , u = function(e) {
        d(e.folderId, e.type).then(function(n) {
            e.folder = n,
            m(e)
        }
        , function() {
            p(e)
        }
        )
    }
      , m = function(e) {
        _.each(e.queue, function(n) {
            n.resolve(e.folder)
        }
        ),
        r[e.folderId] = null 
    }
      , p = function(e) {
        _.each(e.queue, function(e) {
            e.reject()
        }
        ),
        r[e.folderId] = null 
    }
      , g = function(e, n) {
        var t = {
            queue: [],
            folderId: e,
            type: n
        };
        return r[e] = t,
        u(t),
        t
    }
    ;
    this.getFolderParents = function(e, n) {
        return this.loadFolder(e, n).then(function(a) {
            for (var l = [], r = !1; a && !r; )
                l.push(a),
                a.parent ? a = i.get(a.parent) : r = !0;
            if (r) {
                var d = o.defer();
                return d.resolve(l.reverse()),
                d.promise
            }
            return t.one(s[n], e).getList("tree").then(function(e) {
                var t = _.find(e, function(e) {
                    return !e.parent
                }
                )
                  , o = _.filter(e, function(e) {
                    return e.parent
                }
                );
                return _.each(o, i.add),
                c(t.id, n).then(function(e) {
                    return [e].concat(o)
                }
                )
            }
            )
        }
        )
    }
    ,
    this.loadFolder = function(e, n, t) {
        var i = r[e] || g(e, n, t)
          , a = o.defer();
        return i.queue.push(a),
        a.promise
    }
}
]),
angular.module("pd.local-services").service("PricingTableAddColumnDialog", ["ModalService", function(e) {
    this.show = function(n) {
        var t = _.assign({}, {
            controller: "PricingTableAddColumnDialogController",
            templateUrl: "/views/blocks/pricingtable/add-new-column-dialog.html",
            resolve: {
                availableColumns: function() {
                    return n
                }
            }
        });
        return e.open(t)
    }
}
]).controller("PricingTableAddColumnDialogController", ["$scope", "availableColumns", function(e, n) {
    e.columns = n,
    e.selection = {},
    e.selection.column = null ,
    e.$watch("selection.column", function(n) {
        n && e.$close(n)
    }
    )
}
]),
angular.module("pd.local-services").service("PricingTableCalculator", [function() {
    var e = 2
      , n = {
        absolute: function(e, n) {
            return n
        },
        percent: function(e, n) {
            return e * n / 100
        }
    }
      , t = function(e, n) {
        return e * n
    }
      , o = function(e, t, o) {
        return t ? o && !t.global ? 0 : n[t.type](e, t.value) : 0
    }
      , i = function(e, t, o) {
        return t ? o && !t.global ? 0 : n[t.type](e, t.value) : 0
    }
      , a = function(n) {
        return Number(n.toFixed(e))
    }
    ;
    this.lineSubTotal = function(e) {
        e = e || {},
        e.qty = e.qty || 0,
        e.price = e.price || 0;
        var n = t(e.price, e.qty)
          , s = o(n, e.discount)
          , l = n - s
          , r = _.reduce([e.tax_first, e.tax_second], function(e, n) {
            return e + i(l, n)
        }
        , l);
        return {
            total: a(r)
        }
    }
    ;
    var s = function(e) {
        var n = t(e.data.price, e.data.qty)
          , i = o(n, e.data.discount);
        return n - i
    }
      , l = function(e) {
        return _.isNumber(e.data.cost) && e.data.cost > 0 ? e.data.cost * e.data.qty : s(e)
    }
      , r = function(e, n) {
        var t = _.reduce(e.sections, function(e, n) {
            return _.reduce(n.rows, function(e, n) {
                return !n.options.optional || n.options.optional && n.options.optional_selected ? (e.cost = e.cost + l(n),
                e.total = e.total + s(n),
                e) : e
            }
            , e)
        }
        , {
            total: 0,
            cost: 0
        })
          , o = t.total - n.discount - t.cost;
        return {
            cost: t.cost,
            profit: o,
            margin: 0 === t.total ? 0 : 100 * o / Math.abs(t.total)
        }
    }
    ;
    this.calculateGrandTotal = function(e, n) {
        e = e || {};
        var t = _.reduce(e.sections, function(e, n) {
            return _.reduce(n.rows, function(e, n) {
                if (!n.options.optional || n.options.optional && n.options.optional_selected) {
                    var t = e.subtotal + n.data.total
                      , o = e.qty + n.data.qty;
                    return {
                        subtotal: t,
                        qty: o
                    }
                }
                return e
            }
            , e)
        }
        , {
            subtotal: 0,
            qty: 0
        })
          , s = o(t.subtotal, e.options.discount, !0)
          , l = t.subtotal - s
          , c = i(l, e.options.tax_first, !0)
          , d = i(l, e.options.tax_second, !0)
          , u = l + c + d
          , m = {
            subtotal: t.subtotal,
            discount: s,
            tax_first: c,
            tax_second: d,
            total: u,
            qty: t.qty
        };
        return n && _.extend(m, r(e, m)),
        _.each(m, function(e, n) {
            m[n] = a(e)
        }
        ),
        m
    }
}
]),
angular.module("pd.local-services").service("PricingTableCellHtmlExtractor", ["$filter", "$sce", "Constants", "TokenWrapper", function(e, n, t, o) {
    var i = function(n, t, o, i) {
        return n = n || 0,
        o = o || "cy",
        i = _.isUndefined(i) ? 2 : i,
        angular.element('<div class="number-field"><div class="number-field__view"><span>' + e(o)(n, t, i) + "</span></div></div>")
    }
      , a = function(e, n, t) {
        return i(e, n, null , t)
    }
      , s = function(e, n) {
        return i(e, "%", null , n)
    }
      , l = function(e) {
        return i(e, "", "hideZeroFractionPart")
    }
      , r = function(e, n, t) {
        var i = angular.element("<span>" + e + "</span>");
        return o.create(i, n, t),
        i
    }
      , c = function(e, n) {
        return e.options.optional ? '<div class="form-row__fixed"><label class="chb optional-row-chb"><input type="checkbox" class="chb__input" ' + (e.options.optional_selected ? " checked " : "") + (n ? "" : " disabled ") + '/><span class="chb__animation-wrap"><span class="chb__icon chb__icon--checked"></span></span><span class="chb__icon chb__icon--unchecked"></span></label></div>' : ""
    }
      , d = function(e, t) {
        var o = n.trustAsHtml(e.data.description)
          , i = _.isEmpty(o) ? "<p><br/></p>" : o.toString();
        return r(i, function(n) {
            e.data.description = n
        }
        , t)
    }
      , u = function(e) {
        var n = angular.element('<div class="product-pics"></div>');
        return e.data.images && e.data.images.length && _.each(_.filter(e.data.images, "src"), function(t, o) {
            var i = $('<div class="product-pic clickable"><div><img src="' + t.src + '" /></div></div>');
            i.magnificPopup({
                items: _.map(e.data.images, function(e) {
                    return _.pick(e, "src")
                }
                ),
                gallery: {
                    enabled: !0
                },
                index: o,
                type: "image"
            }),
            n.append(i)
        }
        ),
        n
    }
      , m = function(e, o, i, a, s) {
        var l = angular.element('<div><div class="form-row">' + c(e, a === t.TABLE_MODE.EDIT || a === t.TABLE_MODE.RECIPIENT_RESTRICTED) + '<div class="form-row__stretcher">' + (e.data.name ? '<div><label class="doc-table__item-name"></label></div>' : "") + '</div></div><div class="contenteditable pos--rel z-auto doc-table__product-descr"></div><div class="image-container"></div></div>');
        if (e.data.name) {
            var r = angular.element("<span>" + n.trustAsHtml(_.escape(e.data.name)).toString() + "</span>");
            l.find(".doc-table__item-name").append(r)
        }
        if (e.data.description) {
            var m = d(e, s);
            l.find(".contenteditable").append(m)
        } else
            l.find(".contenteditable").hide();
        return e.data.images && e.data.images.length ? l.find(".image-container").append(u(e)) : l.find(".image-container").hide(),
        l
    }
      , p = function(e, n) {
        return angular.element('<div class="form-row form-row--vert-middle pos--rel z-1"></div>').append(a(e.data.price, n.data.options.currency, n.data.settings.decimalPlaces))
    }
      , g = function(e) {
        var n = angular.element('<div class="number-field--qty"></div>').append(l(e.data.qty));
        return e.options.qty_editable && n.addClass("number-field--qty-editable"),
        n
    }
      , f = function(n, t) {
        var o = angular.element('<div class="doc-table__cell-total">' + e("cy")(n.data.total || 0, t.data.options.currency, t.data.settings.decimalPlaces) + "</div>");
        return n.options.optional && !n.options.optional_selected && o.addClass("doc-table__cell-total--optional-unchecked"),
        o
    }
      , b = function(e) {
        return function(n, t) {
            return angular.element('<div class="form-row form-row--vert-middle pos--rel z-1"></div>').append(s(n.data[e].value, t.data.settings.decimalPlaces))
        }
    }
      , v = function(e, t, o, i, a) {
        var s = e.data.custom_fields[o.column.ref] || ""
          , l = n.trustAsHtml(s).toString();
        return r(l, function(n) {
            e.data.custom_fields[o.column.ref] = n;
        
        }
        , a)
    }
      , h = {
        product_name: m,
        product_price: p,
        product_qty: g,
        product_total: f,
        product_line_tax_first: b("tax_first"),
        product_line_tax_second: b("tax_second"),
        product_line_discount: b("discount"),
        product_custom_field: v
    };
    this.getExtractor = function(e) {
        return h[e]
    }
}
]),
angular.module("pd.local-services").service("PricingTableColumnsService", ["ColumnModel", "Constants", "$filter", function(e, n, t) {
    var o = function() {
        return ""
    }
      , i = function(e) {
        return function() {
            return e
        }
    }
      , a = function(e) {
        return {
            value: e,
            type: n.NUMBER_TYPE.PERCENT,
            global: !1
        }
    }
      , s = {
        "default": o,
        sku: o,
        name: o,
        price: i(0),
        qty: i(1),
        total: i(0),
        tax_first: function(e, n, t) {
            return a(t.options.tax_first.value)
        },
        tax_second: function(e, n, t) {
            return a(t.options.tax_second.value)
        },
        discount: function(e, n, t) {
            return a(t.options.discount.value)
        }
    }
      , l = function() {
        return e.create({
            name: "Name",
            ref: "name",
            type: "product_name",
            options: {
                width: 40,
                removable: !1,
                editable: !0
            }
        })
    }
      , r = function() {
        return e.create({
            name: "Price",
            ref: "price",
            type: "product_price",
            options: {
                width: 20,
                removable: !0,
                editable: !0
            }
        })
    }
      , c = function() {
        return e.create({
            name: "Qty",
            ref: "qty",
            type: "product_qty",
            options: {
                width: 20,
                removable: !0,
                editable: !0
            }
        })
    }
      , d = function() {
        return e.create({
            name: "Subtotal",
            ref: "total",
            type: "product_total",
            options: {
                width: 20,
                removable: !0,
                editable: !0
            }
        })
    }
      , u = function() {
        return e.create({
            name: "SKU",
            ref: "sku",
            type: "product_sku",
            options: {
                width: 15,
                removable: !0,
                editable: !0
            }
        })
    }
      , m = function() {
        return [l(), r(), c(), d()]
    }
      , p = function() {
        return [u(), r(), c(), d()]
    }
    ;
    this.getLineTaxFirstColumn = function(n) {
        return e.create({
            name: _.escape(n || t("translate")("taxes.tax_1")),
            ref: "tax_first",
            type: "product_line_tax_first",
            options: {
                width: 15,
                removable: !1,
                editable: !0
            }
        })
    }
    ,
    this.getLineTaxSecondColumn = function(n) {
        return e.create({
            name: _.escape(n || t("translate")("taxes.tax_2")),
            ref: "tax_second",
            type: "product_line_tax_second",
            options: {
                width: 15,
                removable: !1,
                editable: !0
            }
        })
    }
    ,
    this.getLineDiscountColumn = function(n) {
        return e.create({
            name: _.escape(n || t("translate")("discount")),
            ref: "discount",
            type: "product_line_discount",
            options: {
                width: 15,
                removable: !1,
                editable: !0
            }
        })
    }
    ,
    this.getDefaultColumns = m;
    var g = function(n) {
        return e.create({
            name: _.escape(n),
            ref: n,
            type: "product_custom_field",
            options: {
                width: 15,
                removable: !0,
                editable: !0
            }
        })
    }
      , f = function(e) {
        var n = _.reduce(e.sections, function(e, n) {
            return _.reduce(n.rows, function(e, n) {
                return n.data.custom_fields && (e = e.concat(_.keys(n.data.custom_fields))),
                e
            }
            , e)
        }
        , []);
        return _.uniq(n)
    }
    ;
    this.getAvailableColumns = function(e) {
        var n = _.map(f(e), g)
          , t = p().concat(n);
        return _.filter(t, function(n) {
            return _.all(e.columns, function(e) {
                return e.ref !== n.ref
            }
            )
        }
        )
    }
    ,
    this.createDefaultCellValue = function(e, n, t) {
        var o = "product_custom_field" === n.type ? e.custom_fields : e;
        o[n.ref] || (o[n.ref] = (s[n.ref] || s["default"])(e, n, t),
        "name" === n.ref && (o.description = ""))
    }
}
]),
angular.module("pd.local-services").factory("PricingTableModel", ["PricingTableColumnsService", "Constants", function(e, n) {
    var t = function() {
        return {
            columns: e.getDefaultColumns(),
            sections: [],
            settings: {
                showHeaders: !0,
                verticalBorder: !0,
                horizontalBorder: !0,
                showProfit: !1,
                use_for_export: !0,
                showSubtotal: !0,
                showGrandTotal: !0,
                showTotalQty: !1,
                labels: {
                    totalQty: "Quantity",
                    subtotal: "Subtotal",
                    grandTotal: "Total"
                },
                decimalPlaces: 2
            },
            result: {
                subtotal: 0,
                total: 0,
                qty: 0,
                profit: 0,
                margin: 0,
                discount: 0,
                tax_first: 0,
                tax_second: 0
            },
            options: {
                tax_first: null ,
                tax_second: null ,
                discount: null ,
                currency: n.DEFAULT_CURRENCY
            },
            version: 0
        }
    }
    ;
    return {
        create: function(e) {
            return e = e || {},
            _.defaults(e, t())
        }
    }
}
]).factory("PricingTableRowModel", ["RowModel", function(e) {
    return {
        create: function(n) {
            var t = e.create(n);
            return t.options.optional = !1,
            t.options.optional_selected = !0,
            t.options.qty_editable = !1,
            t
        }
    }
}
]),
angular.module("pd.local-services").service("PricingTableService", ["BasicTableService", "wrapMethodInPromise", "ColumnModel", "PricingTableRowModel", "SectionModel", "PricingTableColumnsService", "PricingTableAddColumnDialog", "$q", function(e, n, t, o, i, a, s, l) {
    this.createDefaultCellValue = a.createDefaultCellValue;
    var r = ["product_custom_field", "product_price", "product_qty", "product_total"];
    this.removeCellValue = function(e, n) {
        _.contains(r, n.type) || (e[n.ref] = null )
    }
    ;
    var c = function(e) {
        var n = _.last(e.columns);
        return n && "product_total" === n.type ? e.columns.length - 1 : e.columns.length
    }
    ;
    this.createColumn = function(e, n) {
        var o = l.defer()
          , i = a.getAvailableColumns(n)
          , r = t.create({
            name: ""
        })
          , d = c(n);
        return i && !_.isEmpty(i) ? s.show(i).then(function(e) {
            o.resolve(e ? {
                column: t.create(e),
                index: d
            } : {
                column: r,
                index: d
            })
        }
        ) : o.resolve({
            column: r,
            index: d
        }),
        o.promise
    }
    ,
    this.createRow = n(function(e) {
        var n = _.last(e.sections)
          , t = _.reduce(e.columns, function(n, t) {
            return a.createDefaultCellValue(n, t, e),
            _.defaults(n, {
                qty: 1,
                total: 0,
                price: 0
            }),
            n
        }
        , {
            custom_fields: {}
        });
        return o.create({
            section: n.ref,
            data: t
        })
    }
    , this),
    this.createSection = e.createSection
}
]).run(["BasicTableRendersService", "Constants", function(e, n) {
    var t = "/views/blocks/pricingtable/renders/"
      , o = function(n) {
        e.registerCellRenders(n, {
            template: t + n.replace("product_", "") + ".html",
            controller: ""
        })
    }
      , i = ["product_name", "product_price", "product_qty", "product_total", "product_sku", "product_line_tax_first", "product_line_tax_second", "product_line_discount", "product_custom_field"];
    _.each(i, o),
    e.registerTableFooter(n.TABLE_TYPE.PRICING, "/views/blocks/pricingtable/pricingtable-footer.html"),
    e.registerRowController(n.TABLE_TYPE.PRICING, "PricingTableRowController")
}
]),
angular.module("pd.local-services").service("PricingTableValidator", ["Constants", function(e) {
    var n = function(n) {
        if (!n)
            return !0;
        var t = n.toString().split(".")
          , o = _.first(t)
          , i = t.length > 1 ? _.last(t) : "";
        return o.length > e.NUMBER.MAX_INTEGER_PART_LENGTH ? !1 : i.length > e.NUMBER.MAX_FRACTION_PART_LENGTH ? !1 : !0
    }
      , t = function(e) {
        return e ? e > 0 : !0
    }
      , o = function(e) {
        var o = [{
            value: e.data.price,
            validators: [n]
        }, {
            value: e.data.cost,
            validators: [n]
        }, {
            value: e.data.qty,
            validators: [n, t]
        }];
        return _.each("tax_first", "tax_second", "discount", function(t) {
            e.data[t] && o.push({
                value: e[t].value,
                validators: [n]
            })
        }
        ),
        o
    }
      , i = function(e) {
        return _.all(o(e), function(e) {
            return _.all(e.validators, function(n) {
                return n(e.value)
            }
            )
        }
        )
    }
    ;
    this.validateNumberLength = n,
    this.validatePositiveNumber = t,
    this.validateTable = function(e) {
        var t = _.reduce(e.sections, function(e, n) {
            return e.concat(n.rows)
        }
        , [])
          , o = _.reduce(["tax_first", "tax_second", "discount"], function(n, t) {
            var o = e.options[t];
            return o && o.global && n.push(o.value),
            n
        }
        , [])
          , a = _.all(t, i)
          , s = _.all(o, n);
        return a && s
    }
}
]),
angular.module("pd.local-services").service("WorkspaceSwitcher", ["ProfileService", "ModalService", "WorkspacesService", "$state", "$window", "Config", function(e, n, t, o, i, a) {
    var s = function(n) {
        return e.getProfile().then(function(e) {
            return e.workspace === n.id
        }
        )
    }
    ;
    this.switchToWorkspace = function(e, l, r) {
        s(e).then(function(s) {
            if (s && l)
                o.go(l);
            else if (!s) {
                var c = e.name ? 'Switching to workspace "' + e.name + '"...' : "Switching to another workspace...";
                n.open({
                    backdrop: "static",
                    keyboard: !1,
                    template: '<div class="p t--larger a--center"><spinner visible="true"></spinner><span class="push-self a--middle inline-block">' + _.escape(c) + "</span></div>"
                }),
                t.activateWorkspace(e.id).then(function() {
                    var e = a.applicationUrl + i.location.pathname;
                    l && (e += o.href(l, r || {})),
                    i.location.assign(e),
                    i.location.reload(!0)
                }
                )
            }
        }
        )
    }
}
]),
angular.module("pd.controllers", ["pd.common"]),
angular.module("pd.controllers").controller("ApplicationController", ["$scope", "$rootScope", "Config", "$state", "Constants", "$stateParams", "ContextService", "AlertService", "ModalService", "$filter", "$controller", function(e, n, t, o, i, a, s, l, r, c, d) {
    n.userRole = t.userRole,
    n.FREE_DOCS_AMOUNT = i.FREE_DOCS_AMOUNT,
    n.FREE_DOCS_AMOUNT_TEXT = i.FREE_DOCS_AMOUNT_TEXT,
    n.REWARD_DOCS_AMOUNT = i.REWARD_DOCS_AMOUNT,
    n.REWARD_DOCS_AMOUNT_TEXT = i.REWARD_DOCS_AMOUNT_TEXT,
    e.addDocument = function() {
        var e = s.when({
            documents: function() {
                return a.folderId
            }
        })
          , n = {
            reload: "documents.new" === o.current.name
        };
        o.go("documents.new", {
            folderId: e ? e : null ,
            documentId: null 
        }, n)
    }
    ,
    e.addTemplate = function() {
        var e = s.when({
            templates: function() {
                return a.folderId
            }
        })
          , n = {
            reload: "templates.upload" === o.current.name
        };
        o.go("templates.new", {
            folderId: e ? e : null ,
            templateId: null 
        }, n)
    }
    ,
    e.$on("left.panel.expand", function() {
        n.leftPanelExpanded = !0
    }
    ),
    e.$on("left.panel.collapse", function() {
        n.leftPanelExpanded = !1
    }
    );
    var u = [i.INTEGRATIONS.SALESFORCE, i.INTEGRATIONS.BASE, i.INTEGRATIONS.XERO];
    e.$eventToObservable("notification." + i.NOTIFICATION.TYPE.INTEGRATION).debounce(1e3).map(function(e) {
        return _.first(e.additionalArguments)
    }
    ).filter(function(e) {
        return e && "failed" === e.action
    }
    ).filter(function(e) {
        return !_.contains(u, e.integration)
    }
    ).subscribe(function(e) {
        var n = "We couldn't connect to service";
        e.integration && (n = "We couldn't connect to " + c("translate")("integration." + e.integration + ".name") + "."),
        l.alert({
            title: n,
            text: "Please check your credentials and try again."
        })
    }
    ),
    d("InspectletController", {
        $scope: e
    })
}
]),
angular.module("pd.controllers").controller("EmbedController", ["$scope", "Constants", function(e, n) {}
]),
angular.module("pd.controllers").controller("MainController", ["$scope", "$rootScope", "Config", "$state", "$stateParams", "Constants", "$controller", function(e, n, t, o, i, a, s) {
    var l = function(e) {
        return e.app ? "ApplicationController" : e.viewer ? "ViewerController" : e.embed ? "EmbedController" : e.session_view ? "SessionViewController" : e.sdk ? "SDKController" : void 0
    }
    ;
    n.$state = o,
    n.$stateParams = i,
    FastClick.attach(document.body);
    var r = l(t.application);
    r && s(r, {
        $scope: e
    }),
    n.$watch("$state.current.name", function(e) {
        e && (n.isTemplateSection = -1 !== e.indexOf("templates"))
    }
    )
}
]),
angular.module("pd.controllers").controller("SDKController", ["$scope", "DocumentsService", "ProfileService", "ExternalService", "Config", "$state", function(e, n, t, o, i, a) {
    var s = function(e) {
        var n = {};
        return e.docName && (n.documentName = e.docName),
        e.file && (n.file = e.file),
        e.template && (n.templateId = e.template),
        e.documentId && (n.documentId = e.documentId),
        n
    }
      , l = function(e) {
        var n = "documents.new";
        e.documentId ? n = "documents.details" : e.template && (n = "documents.create-from-template"),
        a.go(n, s(e))
    }
      , r = function(e) {
        a.go("documents", s(e))
    }
      , c = function(e) {
        a.go("documents.extension", s(e))
    }
      , d = function(e, n) {
        e = e || {},
        n = n || {},
        e.isEditor ? l(n) : e.isExtension ? c(n) : r(n)
    }
    ;
    o.hasConnection() ? (e.$on("external.sdk.init_options", function(e, n) {
        if (n && n.customCss) {
            var t = $("<link>", {
                href: n.customCss,
                type: "text/css",
                rel: "stylesheet",
                media: "screen,print"
            });
            t.appendTo("head")
        }
    }
    ),
    e.$on("external.sdk.receive_extra_data", function(e, n) {
        d(o.getInitOptions(), n)
    }
    )) : d(),
    e.$on("sdk.new.document", function() {
        o.send("sdk.new_document.start"),
        o.getInitOptions().externalEditor || l(o.getExternalData())
    }
    ),
    e.$on("sdk.open.document", function(e, n) {
        o.send("sdk.document.open", n)
    }
    ),
    e.$on("sdk.open.tokens", function() {
        o.send("sdk.tokens.open")
    }
    )
}
]),
angular.module("pd.controllers").controller("SessionViewController", ["$scope", "$rootScope", "Config", "$state", "Constants", function(e, n, t, o, i) {}
]),
angular.module("pd.controllers").controller("ViewerController", ["$scope", "$rootScope", "Config", "$state", "Constants", function(e, n, t, o, i) {}
]),
angular.module("pd.controllers").controller("InspectletController", ["$scope", function(e) {
    var n, t, o = function() {
        window.__insp && window.__insp.sbc && (n = window.__insp.sbc,
        window.__insp.sbc = angular.noop)
    }
    , i = function() {
        n && (window.__insp.sbc = n,
        n = null )
    }
    , a = function(e) {
        var n = e.revision.content;
        return n && n.pages && n.pages.normal && n.pages.normal.length
    }
    , s = function(e) {
        return _.contains(["document", "template", "library-item"], e)
    }
    ;
    e.$on("object.loaded", function(e, n) {
        s(n.ref) && a(n.obj) && (t = n.obj.id,
        o())
    }
    ),
    e.$on("$stateChangeSuccess", function(e, n, o) {
        if (o && t) {
            var a = _.values(o);
            _.contains(a, t) || (t = null ,
            i())
        }
    }
    )
}
]),
angular.module("pd.common", ["pd.config"]),
angular.module("pd.common").factory("ElementClickBehavior", ["rx", function(e) {
    var n, t = e.Observable.create(function(e) {
        return n = e,
        angular.noop
    }
    ).publish().refCount();
    return {
        fireEvent: function(e) {
            n.onNext(e)
        },
        getStream: function() {
            return t
        },
        addToElement: function(t, o, i) {
            var a = e.Observable.merge(e.Observable.fromEvent(t, "mousedown"), e.Observable.fromEvent(t, "touchstart"));
            i && i["do"] && (a = a["do"](i["do"])),
            i && i.map && (a = a.map(i.map));
            var s = a.subscribe(function(e) {
                n.onNext(e)
            }
            );
            o.$on("$destroy", function() {
                s.dispose()
            }
            )
        }
    }
}
]),
angular.module("pd.common").service("ContactUsDialog", ["ModalService", function(e) {
    this.open = function(n) {
        return e.open({
            templateUrl: "/views/common/dialogs/contact-us-dialog.html",
            resolve: {
                config: function() {
                    return n
                }
            },
            controller: ["$scope", "config", function(e, n) {
                _.assign(e, n)
            }
            ]
        })
    }
}
]),
angular.module("pd.common").service("DocumentTokensDialog", ["ModalService", function(e) {
    this.open = function(n, t) {
        var o = {
            templateUrl: "/views/common/dialogs/document-tokens-dialog.html",
            controller: "DocumentTokensDialogController",
            resolve: {
                count: function() {
                    return n
                },
                fromContentLibrary: function() {
                    return t
                }
            }
        };
        return e.open(o)
    }
}
]).controller("DocumentTokensDialogController", ["$scope", "fromContentLibrary", "ContextService", "count", function(e, n, t, o) {
    e.fromContentLibrary = !!n,
    e.count = o,
    e.viewTokens = function() {
        t.openDocTool("tools-content", {
            section: "tokens"
        }, {
            replace: !0
        }),
        e.$close()
    }
}
]),
angular.module("pd.common").service("EmbedSignedDocumentDialog", ["ModalService", function(e) {
    this.open = function() {
        return e.open({
            backdrop: "static",
            keyboard: !1,
            templateUrl: "/views/common/dialogs/embed-signed-document-dialog.html"
        })
    }
}
]),
angular.module("pd.common").service("EmbedSignedTestdriveDialog", ["ModalService", function(e) {
    this.open = function() {
        return e.open({
            backdrop: "static",
            keyboard: !1,
            templateUrl: "/views/common/dialogs/embed-signed-testdrive-dialog.html"
        })
    }
}
]),
angular.module("pd.common").service("EmbedUserInfoDialog", ["ModalService", function(e) {
    this.open = function(n) {
        return e.open({
            backdrop: "static",
            keyboard: !1,
            templateUrl: "/views/common/dialogs/embed-user-info-dialog.html",
            resolve: {
                userInfo: function() {
                    return n || {}
                }
            },
            controller: ["$scope", "userInfo", function(e, n) {
                e.userInfo = n
            }
            ]
        })
    }
}
]),
angular.module("pd.common").service("EmptyWidgetsDialog", ["ModalService", function(e) {
    this.open = function(n, t) {
        var o = {
            templateUrl: "/views/common/dialogs/empty-widgets-dialog.html",
            controller: "EmptyWidgetsDialogController",
            resolve: {
                empty: function() {
                    return n
                },
                documentInfo: function() {
                    return t
                }
            }
        };
        return e.open(o)
    }
}
]).controller("EmptyWidgetsDialogController", ["$scope", "empty", "WidgetHighlightService", "documentInfo", function(e, n, t, o) {
    e.fillOut = function() {
        t.highlightWidgetAndEdit(n, o),
        e.$close()
    }
}
]),
angular.module("pd.common").service("InactiveSubscriptionDialog", ["ModalService", "Config", "WorkspacesService", "$sce", "SubscriptionService", "Constants", function(e, n, t, o, i, a) {
    this.open = function() {
        return e.open({
            templateUrl: "/views/common/dialogs/inactive-subscription-dialog.html",
            controller: ["$scope", function(e) {
                e.isOwner = n.userRole === a.ROLES.OWNER,
                t.getWorkspace().then(function(n) {
                    e.billingUrl = i.getCreditCardDetailsUrl(n.subscription)
                }
                )
            }
            ]
        })
    }
}
]),
angular.module("pd.common").service("NoAssignedWidgetsDialog", ["ModalService", function(e) {
    this.open = function(n, t) {
        var o = {
            templateUrl: "/views/common/dialogs/no-assigned-widgets-dialog.html",
            controller: "NoAssignedWidgetsDialogController",
            resolve: {
                nonAssigned: function() {
                    return t
                },
                documentInfo: function() {
                    return n
                }
            }
        };
        return e.open(o)
    }
}
]).controller("NoAssignedWidgetsDialogController", ["$scope", "nonAssigned", "documentInfo", "ProfileService", "GetMeAsContactService", "ColorService", "DocumentsService", "RecipientService", "WidgetHighlightService", "$q", "$timeout", function(e, n, t, o, i, a, s, l, r, c, d) {
    var u = function() {
        var e = c.defer();
        return o.getProfile().then(function(n) {
            var o = _.find(t.document.recipients, function(e) {
                return e.contact.id === n.actor
            }
            );
            o ? e.resolve(o) : i.get().then(function(n) {
                s.addRecipient(t.document.id, n.id).then(function(n) {
                    t.document.recipients.push(n),
                    a.assignColor(t.document.recipients),
                    e.resolve(n)
                }
                )
            }
            )
        }
        ),
        e.promise
    }
    ;
    e.assign = function() {
        n && (e.working = !0,
        u().then(function(t) {
            _.each(n, function(e) {
                e.widget.actor = t.contact.id
            }
            ),
            d(function() {
                e.$close()
            }
            , 700)
        }
        ))
    }
    ,
    e.close = function() {
        r.highlightFirstWidget(n, t),
        e.$dismiss()
    }
}
]),
angular.module("pd.common").service("RoleAssignmentDialog", ["ModalService", function(e) {
    this.open = function(n, t) {
        var o = {
            templateUrl: "/views/common/dialogs/role-assignment-dialog.html",
            controller: "RoleAssignmentDialogController",
            resolve: {
                template: function() {
                    return n
                },
                recipients: function() {
                    return t
                }
            }
        };
        return e.open(o)
    }
}
]).controller("RoleAssignmentDialogController", ["$scope", "template", "recipients", function(e, n, t) {
    n.roles && !_.isEmpty(n.roles) && (e.assignments = _.map(n.roles, function(e) {
        return {
            role: e,
            contact: "",
            recipients: t
        }
    }
    )),
    e.close = function() {
        e.$close(e.assignments)
    }
}
]),
angular.module("pd.common").service("SuccessfulPaymentDialog", ["ModalService", function(e) {
    this.open = function(n) {
        return e.open({
            templateUrl: "/views/common/dialogs/successful-payment-dialog.html",
            resolve: {
                config: function() {
                    return n
                }
            },
            controller: ["$scope", "config", function(e, n) {
                _.assign(e, n)
            }
            ]
        })
    }
}
]),
angular.module("pd.common").service("UploadDialog", ["ModalService", function(e) {
    var n = {
        url: "imageupload",
        alias: "file",
        responseField: "filelink",
        headers: {},
        autoUpload: !0
    };
    this.show = function(t) {
        return t = t || {},
        t = _.defaults(t, n),
        e.open({
            templateUrl: "/views/common/dialogs/upload-dialog.html",
            controller: "UploadDialogController",
            resolve: {
                options: function() {
                    return t
                }
            },
            backdrop: "static"
        })
    }
}
]).controller("UploadDialogController", ["$scope", "$timeout", "FileService", "FileUploader", "Config", "options", function(e, n, t, o, i, a) {
    e.autoUpload = a.autoUpload,
    e.uploader = new o({
        url: i.APIBaseURL + a.url,
        alias: a.alias,
        autoUpload: a.autoUpload,
        headers: a.headers,
        formData: [{
            workspace: i.workspace
        }],
        onAfterAddingFile: function(n) {
            e.imagePreview = null ,
            e[a.responseField] = null ,
            e.fileItem = n,
            s(n._file),
            e.uploading = e.autoUpload
        },
        onSuccessItem: function(n, t) {
            e[a.responseField] = t[a.responseField],
            e.uploading = !1,
            e.autoUpload || e.$close(e[a.responseField])
        }
    }),
    e.isShowImagePreview = function() {
        return e.fileItem && (!e.autoUpload || 100 === e.fileItem.progress)
    }
    ,
    e.isUploading = function() {
        return e.fileItem && e.uploading
    }
    ,
    a && a.imagesOnly && e.uploader.filters.push({
        name: "images",
        fn: function(e) {
            return e.type && -1 !== e.type.indexOf("image")
        }
    }),
    e.done = function() {
        e.autoUpload ? e.$close(e[a.responseField]) : (e.uploader.uploadItem(e.fileItem),
        e.uploading = !0)
    }
    ,
    e.cancel = function() {
        e.$dismiss()
    }
    ,
    e.clear = function() {
        angular.element('input[type="file"]').val(""),
        e.fileItem = null ,
        e.imagePreview = null ,
        e[a.responseField] = null 
    }
    ,
    e.onFileDrop = function(n) {
        e.uploader.addToQueue(n)
    }
    ;
    var s = function(t) {
        var o = new FileReader;
        o.onload = function(t) {
            n(function() {
                e.imagePreview = t.target.result
            }
            )
        }
        ,
        o.readAsDataURL(t)
    }
}
]),
angular.module("pd.common").service("YammerContactsInviteDialog", ["ModalService", function(e) {
    this.open = function() {
        var n = {
            templateUrl: "/views/common/dialogs/yammer-contacts-invite-dialog.html",
            controller: "YammerContactsInviteDialogController"
        };
        return e.open(n)
    }
}
]).controller("YammerContactsInviteDialogController", ["$scope", "IntegrationsService", "Constants", function(e, n, t) {
    var o = "yammer";
    e.$on(t.GRID.FILTERING, function(n, t) {
        e.filtering = t && t.filter
    }
    ),
    e.$on(t.GRID.SELECTION_CHANGE, function(n, t, o) {
        e.selected = t,
        e.all = !e.filtering && o
    }
    ),
    e.gridOptions = {
        store: {
            getItems: _.partial(n.getIntegrationContacts, o)
        },
        properties: {
            sorting: {
                name: "asc"
            }
        },
        toQueryParameters: function(e) {
            return "name" === e.order_by ? e.order_by = "first_name,last_name" : "-name" === e.order_by && (e.order_by = "-first_name,-last_name"),
            e
        }
    },
    e.invite = function() {
        var t = {};
        e.all || (t.contact_ids = _.map(e.selected, "id")),
        n.inviteIntegrationContacts(o, t).then(function() {
            e.$close()
        }
        )
    }
}
]),
angular.module("pd.common").service("YammerContactsSyncDialog", ["ModalService", function(e) {
    this.open = function() {
        var n = {
            templateUrl: "/views/common/dialogs/yammer-contacts-sync-dialog.html",
            controller: "YammerContactsSyncDialogController"
        };
        return e.open(n)
    }
}
]).controller("YammerContactsSyncDialogController", ["$scope", "IntegrationsService", "Constants", "YammerContactsInviteDialog", "AppAnalyticsService", "$filter", "AlertService", function(e, n, t, o, i, a, s) {
    var l = "yammer";
    i.track("Integration connect started", {
        integration_type: l
    }),
    n.enableIntegration(l, {}),
    e.$on("notification." + t.NOTIFICATION.TYPE.INTEGRATION, function(n, t) {
        if ("activated" === t.action && t.integration === l)
            i.track("Integration connect finished", {
                integration_type: l
            });
        else if ("auth error" === t.action) {
            if (t.code) {
                var o = "integration." + l + ".errors." + t.code
                  , r = a("translate")(o);
                r && r !== o && s.alert({
                    title: "Authentication error",
                    text: r
                })
            }
            e.$close()
        }
    }
    ),
    e.syncProgress = 10,
    e.$on("notification." + t.NOTIFICATION.TYPE.CONTACT_SYNC, function(n, t) {
        t.percent > 10 && (e.syncProgress = t.percent)
    }
    ),
    e.$watch("syncProgress", function(n) {
        100 === n && (e.$close(),
        o.open())
    }
    ),
    e.skip = function() {
        e.$close()
    }
}
]),
angular.module("pd.common").directive("addMeAsContact", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/add-me-as-contact.html",
        scope: {
            addCallback: "=",
            recipients: "=",
            contacts: "=",
            merged: "="
        },
        controller: ["$scope", "GetMeAsContactService", "ProfileService", function(e, n, t) {
            e.adding = !1,
            e.meAdded = !1;
            var o = t.getProfile()
              , i = function(n) {
                return a(n, e.recipients) || s(n, e.contacts)
            }
              , a = function(e, n) {
                return e.actor && _.any(n, function(n) {
                    return n.contact.id === e.actor
                }
                )
            }
              , s = function(e, n) {
                return e.actor && _.any(n, function(n) {
                    return n.id === e.actor
                }
                )
            }
            ;
            e.addMeAsRecipient = function() {
                o.then(function(t) {
                    i(t) || (e.adding = !0,
                    n.get().then(function(n) {
                        e.addCallback(n),
                        e.adding = !1
                    }
                    , function() {
                        e.adding = !1
                    }
                    ))
                }
                )
            }
            ,
            o.then(function(n) {
                e.$watchCollection("recipients", function() {
                    e.meAdded = i(n)
                }
                ),
                e.$watchCollection("contacts", function() {
                    e.meAdded = i(n)
                }
                ),
                e.$watch("merged", function(t) {
                    e.meAdded = _.any(t, function(e) {
                        return e.contact && e.contact.id === n.actor
                    }
                    )
                }
                )
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.common").directive("approverAction", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            document: "="
        },
        controller: ["$scope", "Config", "ProfileService", "Constants", function(e, n, t, o) {
            var i = o.DOCUMENT.STATUS
              , a = o.APPROVER_ACTIONS;
            e.actions = o.APPROVER_ACTIONS,
            e.action = a.NONE,
            e.$watch("document", function(o) {
                o && (o.status === i.REJECTED ? e.action = a.REJECTED : o.status === i.APPROVED ? e.action = a.APPROVED : o.status === i.WAITING_APPROVAL && t.getProfile().then(function(t) {
                    if (o.approval) {
                        var i = _.first(o.approval.moderators);
                        i.role === n.userRole && (e.action = a.APPROVE),
                        i.user && i.user.id === t.id && (e.action = a.APPROVE)
                    }
                }
                ))
            }
            )
        }
        ],
        templateUrl: "/views/common/approver-action.html"
    }
}
]),
angular.module("pd.common").directive("autoFont", ["Constants", function(e) {
    return {
        restrict: "A",
        link: function(n, t) {
            var o = Math.max(t.height() * e.WIDGET.TEXT_SIZE_PROPORTION, 4);
            t.css({
                fontSize: o + "px"
            })
        }
    }
}
]),
angular.module("pd.common").directive("autosizeViewport", [function() {
    return {
        restrict: "A",
        compile: function(e, n) {
            function t() {
                var e, t = n.minAppWidth ? n.minAppWidth : 900, o = "width=" + t, i = angular.element("meta[name=viewport]");
                e = window.innerWidth > 0 ? window.innerWidth : window.availWidth ? window.availWidth : window.screen.width,
                t > e && i.attr("content", o)
            }
            function o(n) {
                var t = angular.element(window).height()
                  , o = $(".panel-top").height()
                  , i = ".min-height--window { height: " + t + "px; min-height: " + t + "px; }";
                i += ".min-height--window-toppanel { height: " + (t - o) + "px; min-height: " + (t - o) + "px; }",
                e[0].innerHTML = i
            }
            t(),
            o(),
            $(window).on("resize orientationchange", _.debounce(o, 50))
        }
    }
}
]),
angular.module("pd.common").directive("avatar", [function() {
    return {
        restrict: "E",
        replace: !0,
        transclude: !0,
        templateUrl: "/views/common/avatar.html",
        scope: {
            size: "=",
            user: "=",
            "class": "@"
        },
        controller: ["$scope", "$sce", "Config", function(e, n, t) {
            e.src = "",
            e["class"] = "";
            var o = function(o) {
                if (o && o.avatar)
                    return n.trustAsResourceUrl(o.avatar);
                if (o && o.email) {
                    var i = e.size || 50;
                    return n.trustAsResourceUrl(t.APIBaseURL + "avatar/?q=" + encodeURIComponent(o.email) + "&s=" + i)
                }
                return ""
            }
            ;
            e.$watch("user.avatar", function(n) {
                n && (e.src = o(e.user))
            }
            ),
            e.$watch("user.email", function(n) {
                n && e.user && !e.user.avatar && (e.src = o(e.user))
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.common").directive("backgroundImage", [function() {
    return {
        restrict: "A",
        link: function(e, n, t) {
            var o = function(e) {
                return ["url", "(", '"', e, '"', ")"].join("")
            }
              , i = t.backgroundImage;
            i && e.$watch(i, function(e) {
                e ? (n.css("background-image", o(e)),
                n.css("background-size", n.attr("background-image-size"))) : n.css("background-image", "none")
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("buttonWithConfirmation", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/button-with-confirmation.html",
        scope: {
            additionalClasses: "@",
            icon: "@",
            title: "@",
            options: "=",
            actionArgument: "="
        },
        controller: ["$scope", "$timeout", function(e, n) {
            e.confirmation = !1,
            e.onClick = function() {
                e.confirmation || (e.confirmation = !0,
                n(function() {
                    e.confirmation = !1
                }
                , 4e3))
            }
            ,
            e.onOptionClick = function(n) {
                n.action.call(null , e.actionArgument)
            }
        }
        ]
    }
}
]),
angular.module("pd.common").controller("CarouselInsiderController", ["$scope", "$rootScope", function(e, n) {
    var t = 0;
    n.$broadcast("opened.slide", {
        index: t
    }),
    e.onNext = function() {
        n.$broadcast("opened.slide", {
            index: ++t
        })
    }
    ,
    e.onPrev = function() {
        n.$broadcast("opened.slide", {
            index: --t
        })
    }
}
]),
angular.module("template/carousel/carousel.html", []).run(["$templateCache", function(e) {
    e.put("template/carousel/carousel.html", '<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev(); onPrev()" ng-swipe-left="next(); onNext()">\n   <div ng-controller="CarouselInsiderController">\n       <ol class="carousel-indicators" ng-show="slides.length > 1">\n            <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n       </ol>\n       <div class="carousel-inner" ng-transclude></div>\n       <a class="left carousel-control" ng-click="prev(); onPrev()" ng-show="slides.length > 1 && !isActive(slides[0])"><span class="glyphicon glyphicon-chevron-left"></span></a>\n       <a class="right carousel-control" ng-click="next(); onNext()" ng-show="slides.length > 1 && !isActive(slides[slides.length - 1])"><span class="glyphicon glyphicon-chevron-right"></span></a>\n   </div></div>\n')
}
]),
angular.module("pd.common").directive("contactIntegrationIcon", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/contact-integration-icon.html",
        scope: {
            integration: "="
        }
    }
}
]),
angular.module("pd.common").directive("contactUs", ["$window", "$q", "$timeout", function(e, n, t) {
    return {
        restrict: "A",
        link: function(o, i, a) {
            var s = function(n) {
                n.preventDefault(),
                e.Intercom && e.Intercom("show")
            }
              , l = function(e) {
                var o = n.defer();
                return _.isEmpty(a.contactUs) ? o.resolve(angular.element(e)) : t(function() {
                    o.resolve(angular.element(e).find(a.contactUs))
                }
                , 500),
                o.promise
            }
            ;
            l(i).then(function(e) {
                e.on("click", s),
                o.$on("$destroy", function() {
                    e.off("click", s)
                }
                )
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("contactsInvite", ["ContactsService", "AlertService", function(e, n) {
    return {
        restrict: "E",
        replace: !0,
        transclude: !0,
        templateUrl: "/views/common/contacts-invite.html",
        scope: {},
        link: function(e, n) {
            n.find("#contacts-selector").selectize({
                load: e.loadContact,
                valueField: "email",
                labelField: "email",
                searchField: ["email", "name"],
                options: [],
                create: e.createContact,
                createOnBlur: !0,
                render: {
                    item: e.contactRenderer,
                    option: e.contactRenderer
                },
                onItemAdd: e.addEmail,
                onItemRemove: e.removeEmail
            })
        },
        controller: ["$scope", "RewardsService", "NotificationCenter", "EmailValidationService", function(n, t, o, i) {
            function a(e) {
                var n = e.trim().replace("<", "").replace(">", "");
                return _.without(n.split(" "), _.isEmpty)
            }
            function s(e) {
                if (_.isObject(e))
                    return e.first_name + " " + e.last_name;
                if (_.isString(e)) {
                    var n = a(e);
                    return n.length > 1 ? _.initial(n).join(" ") : ""
                }
            }
            function l(e) {
                if (_.isObject(e))
                    return e.email;
                if (_.isString(e)) {
                    var n = a(e);
                    return n.length >= 1 ? _.last(n) : ""
                }
            }
            function r() {
                n.inviting = !1,
                angular.element.find("#contacts-selector")[0].selectize.clear(),
                c = []
            }
            n.loading = !1,
            n.inviting = !1;
            var c = [];
            n.addEmail = function(e) {
                c.push(e)
            }
            ,
            n.removeEmail = function(e) {
                c = _.without(c, e)
            }
            ;
            var d = function() {
                o.message("Invitations have been sent successfully."),
                r()
            }
            ;
            n.invite = function() {
                c && !_.isEmpty(c) ? (n.inviting = !0,
                t.inviteUsers(c).then(d, d)) : o.message("Please enter emails address of people who you would like to invite in PandaDoc")
            }
            ,
            n.createContact = function(e, n) {
                var t = e.split(" ");
                if (_.any(t, function(e) {
                    return i.isValid(e.trim())
                }
                )) {
                    var o = {
                        name: s(e),
                        email: l(e)
                    };
                    n(o)
                } else
                    n({})
            }
            ,
            n.loadContact = function(t, o) {
                n.loading = !0;
                var i = {
                    page: 1,
                    count: 30,
                    order_by: "name",
                    q: t
                };
                e.getContacts(i, function(e) {
                    var t = _.map(e, function(e) {
                        return {
                            name: s(e),
                            email: l(e)
                        }
                    }
                    );
                    n.loading = !1,
                    o(t)
                }
                )
            }
            ,
            n.contactRenderer = function(e, n) {
                return "<div>" + (e.name ? '<span class="name">' + n(e.name) + "</span>" : "") + (e.email ? '<span class="email">' + n(" <" + e.email + ">") + "</span>" : "") + "</div>"
            }
        }
        ]
    }
}
]),
angular.module("pd.common").directive("copyButton", ["$timeout", "$rootScope", function(e, n) {
    return {
        restrict: "A",
        link: function(t, o) {
            var i = angular.isDefined(o.attr("copy-button-silent"));
            e(function() {
                var e = new ZeroClipboard(angular.element(o));
                i || e.on("copy", function(e) {
                    var n = e.target.innerHTML;
                    e.target.innerHTML = "Copied!",
                    setTimeout(function() {
                        e.target.innerHTML = n
                    }
                    , 3e3)
                }
                ),
                e.on("copy", function(e) {
                    n.$broadcast("copyButton.copied", e.target)
                }
                )
            }
            , 200)
        }
    }
}
]).run(["$window", "Config", function(e, n) {
    ZeroClipboard.config({
        swfPath: "localhost" !== e.location.hostname ? n.staticBaseURL + "ZeroClipboard.swf" : "components/zeroclipboard/dist/ZeroClipboard.swf",
        trustedOrigins: [e.location.host],
        allowScriptAccess: "always"
    })
}
]),
angular.module("pd.common").directive("copyInClipboard", [function() {
    return {
        restrict: "E",
        replace: !0,
        transclude: !0,
        templateUrl: "/views/common/copy-in-clipboard.html",
        scope: {
            value: "="
        },
        controller: ["$scope", function(e) {
            e.$watch("value", function(n) {
                n && (e.valueModel = {
                    value: n
                })
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.common").directive("elementCopy", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/element-copy.html",
        scope: {
            selector: "@",
            pageSelector: "@",
            documentSelector: "@",
            page: "=",
            index: "=",
            width: "@"
        },
        link: function(e, n) {
            var t, o;
            e.$watch("page.isLoaded", function(i) {
                if (i) {
                    var a = angular.element(n);
                    o = angular.element(angular.element(e.documentSelector).find(e.pageSelector)[e.index]),
                    t = o.find(e.selector),
                    a.append(t.show()),
                    e.width && t.width(e.width)
                }
            }
            ),
            e.$on("$destroy", function() {
                o && t && o.append(t.hide())
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("fileProcess", ["$rootScope", "uploadcare", "AlertService", "$timeout", "FileProcessor", "ModalService", "$window", function(e, n, t, o, i, a, s) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/file-process.html",
        scope: {
            delegate: "&",
            options: "="
        },
        controller: ["$scope", "$rootScope", function(e, n) {
            e.$watch("options", function(n) {
                n && (n.new_file ? (e.fileName = n.new_file.name,
                i.processFile(n.new_file).then(o, a, t)) : n.new_revision && (e.fileName = n.new_revision.originalFilename,
                i.processNewRevision(n.new_revision).then(o, a, t)))
            }
            );
            var t = function(n) {
                e.pageInfo = n
            }
              , o = function(n) {
                e.delegate().processingDone({
                    uuid: n,
                    name: e.fileName
                })
            }
              , a = function() {
                s || e.delegate().processingError()
            }
            ;
            e.getProgress = function(e) {
                return {
                    width: 100 * e + "%"
                }
            }
            ;
            var s = !1;
            e.$on("$destroy", function() {
                i.stopProcessing(),
                s = !0
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.common").directive("fileUploader", ["$rootScope", "uploadcare", "$timeout", "AppAnalyticsService", "FeaturesService", "Constants", "ContextService", function(e, n, t, o, i, a, s) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/file-uploader.html",
        scope: {
            delegate: "&",
            showTemplates: "="
        },
        controller: ["$scope", "$rootScope", function(e, i) {
            var s = a.UPLOADCARE.DOC_FILE_PROVIDERS;
            e.fileName = "",
            e.uploadProgress = 0,
            e.isFailed = !1,
            e.getProgress = function(e) {
                return {
                    width: 100 * e + "%"
                }
            }
            ,
            e.$on("close.upload.dialog", function() {
                i.dialog && (i.dialog.silentDeath = !0,
                i.dialog.reject())
            }
            );
            var l = function() {
                i.dialog && (i.dialog.silentDeath = !0,
                i.dialog.reject()),
                i.dialog = n.openDialog(null , "file", {
                    tabs: s,
                    preferredTypes: a.DOC_PREFERRED_TYPES
                }),
                i.dialog.done(function(n) {
                    n.progress(function(n) {
                        var o = n.incompleteFileInfo.name;
                        t(function() {
                            e.fileName = o,
                            "uploading" === n.state ? e.uploadProgress = n.progress : "uploaded" === n.state && (e.uploadProgress = 1)
                        }
                        )
                    }
                    ),
                    n.fail(function() {
                        t(function() {
                            l()
                        }
                        )
                    }
                    ),
                    n.done(function(n) {
                        t(function() {
                            n.name = r(n.name),
                            e.delegate().uploadDone(n),
                            i.$broadcast("upload.done")
                        }
                        )
                    }
                    )
                }
                ).fail(function(n) {
                    t(function() {
                        i.$broadcast("upload.cancel")
                    }
                    ),
                    i.dialog.silentDeath !== !0 && t(n ? function() {
                        e.isFailed = !0
                    }
                     : function() {
                        e.delegate().cancelUpload()
                    }
                    )
                }
                )
            }
            ;
            l(),
            o.track(e.showTemplates ? "Start a new document" : "Start a new template");
            var r = function(e) {
                return -1 === e.indexOf(".") ? e : _.initial(e.split(".")).join(".")
            }
        }
        ]
    }
}
]),
angular.module("pd.common").directive("fileUploaderInline", ["$rootScope", "uploadcare", "$timeout", "AppAnalyticsService", "FeaturesService", "Constants", "AlertService", function(e, n, t, o, i, a, s) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/file-uploader-inline.html",
        scope: {
            delegate: "&",
            fuiLabelText: "@",
            fuiButtonText: "@"
        },
        link: function(e, t) {
            var o = t.find(".uploadcare-placeholder");
            if (e.createUploadcarePanel = function() {
                e.uploadcarePanel = n.openPanel(o, "file", {
                    tabs: a.UPLOADCARE.DOC_FILE_PROVIDERS,
                    preferredTypes: a.UPLOADCARE.DOC_PREFERRED_TYPES
                })
            }
            ,
            e.createUploadcarePanel(),
            e.fuiLabelText && t.find(".uploadcare-dialog-file-title").text(e.fuiLabelText),
            e.fuiButtonText) {
                var i = t.find(".uploadcare-dialog-big-button").get();
                i.length > 0 && i[0].childNodes && i[0].childNodes.length > 0 && 3 === i[0].childNodes[0].nodeType && (i[0].childNodes[0].nodeValue = e.fuiButtonText)
            }
        },
        controller: ["$scope", "$rootScope", function(e, n) {
            e.fileName = "",
            e.uploadProgress = 0,
            e.isFailed = !1,
            e.showUploadDialog = !0,
            e.$watch("uploadcarePanel", function() {
                e.uploadcarePanel.done(function(i) {
                    e.delegate().onStartUploading && e.delegate().onStartUploading(),
                    i.progress(function(n) {
                        if (null  !== n.incompleteFileInfo.size && n.incompleteFileInfo.size > a.UPLOADCARE.MAX_FILE_SIZE)
                            e.errorMessage = "Unfortunately at this time we only support files that are smaller than 100 MB in size. Please reduce the size of the file and try again.",
                            i.cancel();
                        else {
                            var o = n.incompleteFileInfo.name;
                            e.showUploadDialog = !1,
                            t(function() {
                                e.fileName = o,
                                "uploading" === n.state ? e.uploadProgress = n.progress : "uploaded" === n.state && (e.uploadProgress = 1)
                            }
                            )
                        }
                    }
                    ),
                    i.fail(function() {
                        t(function() {
                            e.showUploadDialog = !0;
                            var n = _.isUndefined(e.errorMessage) ? "Unable to upload file. Please try again." : e.errorMessage;
                            s.alert({
                                title: "Unable to upload file",
                                text: n
                            }),
                            delete e.errorMessage,
                            e.createUploadcarePanel()
                        }
                        )
                    }
                    ),
                    i.done(function(i) {
                        t(function() {
                            i.name = o(i.name),
                            e.delegate().uploadDone(i),
                            n.$broadcast("upload.done")
                        }
                        )
                    }
                    )
                }
                ).fail(function(o) {
                    t(function() {
                        n.$broadcast("upload.cancel")
                    }
                    ),
                    t(o ? function() {
                        e.isFailed = !0
                    }
                     : function() {
                        e.delegate().cancelUpload()
                    }
                    )
                }
                );
                var o = function(e) {
                    return -1 === e.indexOf(".") ? e : _.initial(e.split(".")).join(".")
                }
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.common").directive("focusInput", ["$timeout", function(e) {
    return {
        restrict: "A",
        link: function(n, t, o) {
            t.bind("click", function() {
                return e(function() {
                    function e(n, t) {
                        var o = n.parent()
                          , i = o.find(t);
                        return i.size() > 0 ? i : o.is("body") ? null  : e(o, t)
                    }
                    if ("closest" === o.focusInput) {
                        var n = "textarea"
                          , i = t.closest(n);
                        i.size() > 0 ? i.focus() : (i = e(t, n),
                        i && i.focus())
                    }
                }
                ),
                !0
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("focusMe", ["$timeout", function(e) {
    return {
        restrict: "A",
        link: function(n, t) {
            e(function() {
                if (t[0].focus(),
                t[0].createTextRange) {
                    var e = t[0].createTextRange();
                    e.moveStart("character", t[0].value.length),
                    e.collapse(),
                    e.select()
                } else if (t[0].setSelectionRange) {
                    t[0].focus();
                    var n = t[0].value.length;
                    t[0].setSelectionRange(n, n)
                }
            }
            , 200)
        }
    }
}
]),
angular.module("pd.common").controller("GlobalNotificationController", ["$scope", "$rootScope", "$timeout", "NotificationCenter", function(e, n, t, o) {
    e.messageQueue = [],
    e.message = "";
    var i = 1500
      , a = !1
      , s = this
      , l = function() {
        e.message = "",
        e.showNotificationPanel = !1,
        e.messageQueue = _.filter(e.messageQueue, function(e) {
            return !e.scheduledToRemove && e.timeToLive > 0
        }
        )
    }
    ;
    this.showNextNotification = function() {
        if (l(),
        0 === e.messageQueue.length)
            return void (a = !1);
        var n = e.messageQueue.shift();
        n && (n.timeToLive--,
        e.message = n,
        e.showNotificationPanel = !0,
        e.notificationsEnabled = o.notificationsEnabled,
        n.isPersistent && n.timeToLive > 0 && e.messageQueue.push(n)),
        e.messageQueue.length > 0 ? (a = !0,
        t(s.showNextNotification, i)) : (a = !1,
        t(function() {
            a || (e.showNotificationPanel = !1)
        }
        , i))
    }
    ,
    this.addMessage = function(n) {
        e.messageQueue.push(n),
        a || (a = !0,
        t(s.showNextNotification, 0))
    }
    ,
    this.removeMessage = function(n) {
        var t = _.find(e.messageQueue, {
            id: n
        });
        t && (t.scheduledToRemove = !0)
    }
    ,
    e.$on("global_notification.message", function(e, n) {
        s.addMessage(n)
    }
    ),
    e.$on("global_notification.message.remove", function(e, n) {
        s.removeMessage(n)
    }
    )
}
]).service("NotificationCenter", ["$rootScope", function(e) {
    var n = this;
    this.globalIdSequence = 1,
    this.notificationsEnabled = !0,
    this.disable = function() {
        n.notificationsEnabled = !1
    }
    ,
    this.enable = function() {
        n.notificationsEnabled = !0
    }
    ,
    this._sendNotification = function(t) {
        return t && !_.isEmpty(t.text) ? (t.id = n.globalIdSequence++,
        e.$broadcast("global_notification.message", t),
        t.id) : void 0
    }
    ,
    this.notification = function(e) {
        return n._sendNotification({
            text: e,
            isPersistent: !1,
            timeToLive: 1
        })
    }
    ,
    this.message = function(e, t) {
        return n._sendNotification({
            text: e,
            isPersistent: !1,
            timeToLive: t || 3
        })
    }
    ,
    this.status = function(e, t) {
        return n._sendNotification({
            text: e,
            isPersistent: !0,
            timeToLive: t || 3
        })
    }
    ,
    this.hideStatus = function(n) {
        e.$broadcast("global_notification.message.remove", n)
    }
}
]).directive("globalNotification", [function() {
    return {
        restrict: "E",
        scope: {
            showEvent: "@",
            hideEvent: "@",
            text: "@"
        },
        templateUrl: "/views/common/global-notification.html",
        replace: !0,
        transclude: !0,
        controller: "GlobalNotificationController"
    }
}
]),
angular.module("pd.common").directive("hasFeature", ["FeaturesService", "Constants", function(e, n) {
    return {
        restrict: "A",
        priority: 98,
        link: function(t, o) {
            o.hide();
            var i = o.attr("has-feature");
            e.checkAvailability(n.FEATURES[i]).then(function(e) {
                e ? o.show() : o.remove()
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("helpTooltip", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/common/help-tooltip.html",
        replace: !0,
        scope: {
            "class": "@",
            message: "@"
        }
    }
}
]),
angular.module("pd.common").directive("hideOnClick", ["$timeout", "$parse", function(e, n) {
    return {
        restrict: "A",
        link: function(t, o) {
            var i = $(o)
              , a = n(i.attr("hide-on-click"))() || {};
            a.hideWith = a.hideWith || "",
            a.spyOn = a.spyOn || "visible";
            var s = "mousedown"
              , l = _.reduce(a.hideWith.split("."), function(e, n) {
                return e[n]
            }
            , t)
              , r = function() {
                if (_.isFunction(l)) {
                    var n = arguments;
                    e(function() {
                        l.apply(null , n)
                    }
                    , 200)
                }
            }
            ;
            t.$watch(a.spyOn, function(n) {
                n === !0 ? e(function() {
                    angular.element(document).bind(s, r)
                }
                ) : angular.element(document).unbind(s, r)
            }
            , !0),
            t.$on("$destroy", function() {
                angular.element(document).unbind(s, r)
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("imageFileUploader", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/image-file-uploader.html",
        scope: {
            delegate: "=",
            text: "@",
            cssClass: "@",
            iconClass: "@"
        },
        controller: ["$scope", "UploadDialog", function(e, n) {
            e.showDialog = function() {
                n.show({
                    imagesOnly: !0
                }).then(function(n) {
                    e.delegate.imageUrlUploadDone(n)
                }
                )
            }
        }
        ]
    }
}
]),
angular.module("pd.common").directive("imagePickerPopover", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            image: "=",
            options: "="
        },
        templateUrl: "/views/common/image-picker-popover.html",
        controller: ["$scope", "AlertService", function(e, n) {
            e.toggle = function() {
                e.visible = !e.visible
            }
            ,
            e.hide = function() {
                e.visible = !1
            }
            ,
            e.selectImage = function(n) {
                e.image = _.extend(e.image, n)
            }
            ,
            e.imageUploaderDelegate = {
                imageUrlUploadDone: function(n) {
                    e.image = {
                        src: n,
                        preview: n + "?geometry=60x60"
                    }
                },
                imageUrlUploadFailed: function() {
                    n.alert({
                        title: "Unable to upload image",
                        text: "Please make sure you're uploading correct image."
                    })
                }
            }
        }
        ]
    }
}
]),
angular.module("pd.common").directive("indeterminate", [function() {
    return {
        restrict: "A",
        link: function(e, n, t) {
            e.$watch(t.indeterminate, function(e) {
                angular.element(n).prop("indeterminate", !!e)
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("itemsEditor", [function() {
    return {
        restrict: "E",
        scope: {
            items: "="
        },
        templateUrl: "/views/common/items-editor.html",
        controller: "ItemsEditorController"
    }
}
]).controller("ItemsEditorController", ["$scope", function(e) {
    var n = this;
    this.isDuplicate = function(n) {
        return _.contains(e.items, n)
    }
    ,
    e.$watch("item", function(t) {
        e.duplicate = n.isDuplicate(t)
    }
    ),
    e.keyup = function(n) {
        13 === n.keyCode && e.addItem()
    }
    ,
    e.addItem = function() {
        e.item && e.item.length > 0 && !n.isDuplicate(e.item) && (e.items.push(e.item),
        e.item = "")
    }
    ,
    e.removeItem = function(n) {
        e.items = _.reject(e.items, function(e) {
            return e === n
        }
        )
    }
}
]),
angular.module("pd.common").directive("numberEditor", ["BrowserUtils", "PricingTableValidator", "$rootScope", function(e, n, t) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/number-editor.html",
        scope: {
            editable: "=",
            model: "=",
            number: "=",
            percent: "=",
            currency: "=",
            onlyPositive: "=",
            decimalPlaces: "="
        },
        link: function(n, o) {
            n.showEditor = function() {
                n.editable && !n.editorVisible && (n.editorVisible = !0,
                e.safari || setTimeout(function() {
                    var e = o.find("input");
                    document.activeElement !== e[0] && e.click().focus()
                }
                , 50),
                t.$broadcast("text.editor.toolbar.hide"))
            }
        },
        controller: ["$scope", function(e) {
            e.valid = !0,
            e.tooLong = !1,
            e.negative = !1;
            var t = function(t) {
                e.tooLong = !n.validateNumberLength(t),
                e.negative = e.onlyPositive && !n.validatePositiveNumber(t),
                e.valid = !e.tooLong && !e.negative
            }
            ;
            e.hideEditor = function() {
                e.editorVisible && (e.editorVisible = !1,
                (_.isUndefined(e.numberModel.value) || null  === e.numberModel.value) && (e.numberModel = {
                    value: 0
                }),
                t(e.numberModel.value))
            }
            ,
            e.$watch("decimalPlaces", function(n) {
                var t = _.isUndefined(n) ? 2 : parseInt(n);
                t !== e.decimals && (e.decimals = t)
            }
            ),
            e.$watch("model." + e.number, function(n) {
                e.numberModel = {
                    value: n
                },
                t(n)
            }
            ),
            e.$watch("numberModel.value", function(n) {
                n = n || 0,
                e.model[e.number] = n
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.common").directive("allow", ["Constants", function(e) {
    return {
        restrict: "A",
        priority: 99,
        link: function(n, t) {
            var o = angular.element(t)
              , i = e.ROLES[o.attr("allow")] || e.ROLES.GUEST;
            i && (o.hide(),
            n.$watch("userRole", function(e) {
                e && (e >= i ? o.show() : o.remove())
            }
            ))
        }
    }
}
]),
angular.module("pd.common").directive("persistentNotification", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/common/persistent-notification.html",
        controller: "PersistentNotificationController"
    }
}
]).controller("PersistentNotificationController", ["$scope", "$rootScope", "$filter", "Constants", "WorkspacesService", "Config", "$sce", function(e, n, t, o, i, a, s) {
    if (a.application.app) {
        e.close = function() {
            n.hasPersistentNotification = !1,
            e.messages = []
        }
        ,
        e.$on("persistent-notification.close", e.close),
        e.$eventToObservable("subscription.updated").debounce(1e3).subscribe(function(e) {
            var n = _.first(e.additionalArguments).subscription;
            n && c(n)
        }
        );
        var l = function() {
            n.hasPersistentNotification = e.messages && e.messages.length > 0 ? !0 : !1
        }
          , r = {
            past_due: function(e) {
                return t("translate")("billing.subscription_state_past_due", {
                    credit_card_url: e.external_url ? "#/settings/account/subscription/checkout" : "#/settings/account/subscription/"
                })
            },
            canceled: function(e) {
                return t("translate")("billing.subscription_state_canceled", {
                    credit_card_url: e.external_url ? "#/settings/account/subscription/checkout" : "#/settings/account/subscription/"
                })
            },
            trial_ended: function(e) {
                return t("translate")("billing.subscription_state_trial_ended", {
                    billing_page_url: "#/settings/account/subscription/"
                })
            },
            trial_ended_user: function(e) {
                return t("translate")("billing.subscription_state_trial_ended_user")
            }
        }
          , c = function(n) {
            e.messages = [],
            a.userRole === o.ROLES.OWNER ? (r[n.state] && e.messages.push(r[n.state](n)),
            0 === n.docs_count && e.messages.push(t("translate")("billing.subscription_has_no_documents_owner", {
                billing_page_url: "#/settings/account/subscription/",
                rewards_page_url: "#/settings/rewards/"
            }))) : ("trial_ended" === n.state && e.messages.push(r.trial_ended_user(n)),
            0 === n.docs_count && e.messages.push(t("translate")("billing.subscription_has_no_documents_user", {
                rewards_page_url: "#/settings/rewards/"
            }))),
            l()
        }
        ;
        i.getWorkspace().then(function(e) {
            c(e.subscription)
        }
        )
    }
}
]),
angular.module("pd.common").directive("resendVerificationEmail", ["$rootScope", "$timeout", "ProfileService", function(e, n, t) {
    return {
        scope: {},
        restrict: "E",
        templateUrl: "/views/common/resend-verification-email.html",
        controller: ["$scope", function(o) {
            function i() {
                n(function() {
                    e.$broadcast("persistent-notification.close")
                }
                , 5e3)
            }
            o.state = "initial",
            o.resend = function() {
                o.state = "sending",
                t.resendVerificationEmail().then(function() {
                    o.state = "sent",
                    i()
                }
                , function() {
                    o.state = "error",
                    n(function() {
                        o.state = "initial"
                    }
                    , 1e4)
                }
                )
            }
        }
        ]
    }
}
]),
angular.module("pd.common").directive("roleOrMemberSelector", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/role-or-member-selector.html",
        scope: {
            selected: "=",
            disabled: "=",
            placeholder: "@"
        },
        controller: ["$scope", "$q", "WorkspacesService", "Constants", function(e, n, t, o) {
            e.roles = [o.ROLES.ADMIN, o.ROLES.OWNER];
            var i = function(n) {
                return -1 !== e.roles.indexOf(n.role)
            }
            ;
            e.hasMoreMembers = !1,
            t.getWorkspaceMembers().then(function(n) {
                e.defaultMembers = _.filter(n, i),
                e.members = _.filter(n, i),
                e.hasMoreMembers = n.next
            }
            ),
            e.findMembers = function(e) {
                var o = n.defer()
                  , s = {
                    page: 1,
                    count: 30,
                    order_by: "name",
                    q: e
                };
                return t.findWorkspaceMembers(s).then(function(e) {
                    o.resolve(_.map(_.filter(e, i), function(e) {
                        return e.user.name = _.escape(a(e.user)),
                        e.user
                    }
                    ))
                }
                ),
                o.promise
            }
            ,
            e.selectRole = function(n) {
                e.selected.role = n
            }
            ,
            e.removeSelectedRole = function() {
                e.selected.role = null 
            }
            ,
            e.selectMember = function(n) {
                e.selected.user = n
            }
            ,
            e.removeSelectedMember = function() {
                e.selected.user = null 
            }
            ;
            var a = function(e) {
                return e.first_name || e.last_name ? e.first_name + " " + e.last_name + " <" + e.email + ">" : e.email
            }
        }
        ]
    }
}
]),
angular.module("pd.common").directive("scrollProcessor", ["$timeout", function(e) {
    return {
        link: function(n, t, o) {
            var i = o.scrollProcessorScrollable ? angular.element(o.scrollProcessorScrollable) : t
              , a = o.scrollProcessorContainer ? angular.element(o.scrollProcessorContainer) : t
              , s = !1
              , l = function() {
                if (!s) {
                    var t = a.height() - i.scrollTop() - i.height();
                    0 >= t && (s = !0,
                    e(function() {
                        o.scrollProcessorOnScroll && n.$apply(o.scrollProcessorOnScroll),
                        s = !1
                    }
                    ))
                }
            }
            ;
            i.on("scroll", l),
            n.$on("$destroy", function() {
                return i.off("scroll", l)
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("selectOnClick", [function() {
    return {
        restrict: "A",
        link: function(e, n) {
            var t = angular.element(n)
              , o = function(e) {
                e.target.select()
            }
            ;
            t.on("click", o),
            e.$on("$destroy", function() {
                t.off("click", o)
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("selection", ["$parse", function(e) {
    return {
        restrict: "A",
        link: function(n, t) {
            t = $(t);
            var o = e(t.attr("selection"))() || {};
            o.single = o.single || !1,
            o.event = o.event || "selectionChange",
            o.action = o.action || "disable",
            o.fieldValue = o.fieldValue || !1,
            o.field = o.field || !1,
            o.condition = o.condition && _.isFunction(n[o.condition]) ? n[o.condition] : !1;
            var i = function(e) {
                t[e ? "show" : "hide"]()
            }
              , a = function(e) {
                t.prop("disabled", e ? "" : "disabled")
            }
              , s = "hide" === o.action ? i : a;
            n.$on(o.event, function(e, n) {
                if (0 === n.length)
                    s(!1);
                else if (o.single && n.length > 1)
                    s(!1);
                else if (o.field && !_.isUndefined(o.fieldValue)) {
                    var t = _.all(n, function(e) {
                        return e[o.field] === o.fieldValue
                    }
                    );
                    s(t)
                } else
                    s(o.condition ? _.all(n, o.condition) : !0)
            }
            ),
            s(!1)
        }
    }
}
]).directive("selectionCounter", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: !0,
        templateUrl: "/views/common/selection-counter.html",
        controller: ["$scope", "Constants", function(e, n) {
            e.$on(n.GRID.SELECTION_CHANGE, function(n, t) {
                e.selectedCount = t ? t.length : 0
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.common").directive("singleClickButton", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/single-click-button.html",
        scope: {
            "class": "@",
            text: "@",
            processingText: "@",
            disabled: "=",
            handler: "="
        },
        controller: ["$scope", function(e) {
            var n = function() {
                e.processing = !0
            }
              , t = function() {
                e.processing = !1
            }
            ;
            e.onClick = function() {
                n();
                var o = e.handler();
                o && o.then ? o.then(t, t) : t()
            }
        }
        ]
    }
}
]),
angular.module("pd.common").directive("spinner", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/common/spinner.html",
        replace: !0,
        scope: {
            visible: "=",
            "class": "@",
            style: "@"
        }
    }
}
]),
angular.module("pd.common").directive("sticky", ["$window", function(e) {
    return {
        restrict: "A",
        link: function(n, t, o) {
            var i = o.sticky ? angular.element(o.sticky) : t
              , a = o.stickyClass ? o.stickyClass : ""
              , s = o.inPlaceClass ? o.inPlaceClass : ""
              , l = angular.element(t)
              , r = 52
              , c = 100
              , d = angular.element(e)
              , u = !1;
            l.addClass(s).before('<div class="scroll-marker"></div>');
            var m = function(e) {
                return e.css({
                    position: "fixed",
                    top: r + "px",
                    width: e.css("width"),
                    left: e.offset().left
                })
            }
              , p = function(e) {
                return e.css({
                    position: "",
                    top: "",
                    width: "",
                    left: ""
                })
            }
              , g = function() {
                var e = angular.element(".scroll-marker")
                  , n = e.offset().top + e.height();
                r >= n && !u ? (u = !0,
                m(l).removeClass(s).addClass(a),
                angular.element(document.body).append(l)) : n > r + c && u && (u = !1,
                p(l).removeClass(a).addClass(s),
                e.after(l))
            }
              , f = function() {
                if (u) {
                    var e = angular.element(".scroll-marker");
                    l.css({
                        left: e.offset().left
                    })
                }
            }
            ;
            i.on("scroll", g),
            d.on("resize", f),
            n.$on("$destroy", function() {
                l.remove(),
                i.off("scroll", g),
                d.off("resize", f)
            }
            )
        }
    }
}
]),
angular.module("pd.common").directive("userInvitationDialog", ["ModalService", "Config", "AppAnalyticsService", "PublicConfigFactory", function(e, n, t, o) {
    return {
        restrict: "E",
        replace: !0,
        transclude: !0,
        template: "<div></div>",
        scope: {
            documentInfo: "="
        },
        controller: ["$scope", function(i) {
            var a = function() {
                return n.application.viewer
            }
              , s = function(n) {
                var o = _.assign({}, {
                    controller: "UserInvitationDialogController",
                    templateUrl: "/views/common/user-invitation-dialog.html",
                    resolve: {
                        documentInfo: function() {
                            return n
                        }
                    }
                });
                e.open(o),
                t.track("Viewed Activate Account Dialog")
            }
            ;
            i.$on("actor.completed.document", function() {
                a() && !n.isRegistered && o.getConf().then(function(e) {
                    var n = i.$watch("documentInfo", function(t) {
                        t && (n(),
                        e.show_not_registered_user_promo && s(t))
                    }
                    )
                }
                )
            }
            )
        }
        ]
    }
}
]).controller("UserInvitationDialogController", ["$scope", "$location", "$modalInstance", "documentInfo", "DocumentsService", "AppAnalyticsService", function(e, n, t, o, i, a) {
    if (o) {
        var s = _.find(o.document.recipients, function(e) {
            return e.contact.id === o.actor
        }
        );
        e.contact = s.contact,
        e.loadingRecentDocuments = !0,
        i.getRecentDocuments(function(n) {
            e.loadingRecentDocuments = !1,
            n && (e.recentDocuments = _.first(n, 2))
        }
        )
    }
    e.close = function() {
        t.close()
    }
    ,
    e.signup = function() {
        a.track("Clicked Activate Account Button"),
        document.location = "/signup?viewer_activation=1&email=" + encodeURIComponent(e.contact.email) + "&first_name=" + encodeURIComponent(e.contact.first_name) + "&last_name=" + encodeURIComponent(e.contact.last_name)
    }
}
]),
angular.module("pd.common").directive("documentAuditTimeline", ["Constants", function(e) {
    var n = "/views/common/directives/audit/includes/"
      , t = e.AUDIT_TRAIL.ACTIONS
      , o = e.DOCUMENT.STATUS
      , i = {}
      , a = {};
    return i[t.CREATED] = o.DRAFT,
    i[t.NEW_REVISION_CREATED] = o.DRAFT,
    i[t.SENT_FOR_APPROVAL] = o.WAITING_APPROVAL,
    i[t.APPROVED] = o.APPROVED,
    i[t.REJECTED] = o.REJECTED,
    i[t.SENT] = o.SENT,
    i[t.COMPLETED_BY_ALL] = o.COMPLETED,
    i[t.VIEWED] = o.VIEWED,
    i[t.COMPLETED_BY_RECIPIENT] = o.COMPLETED,
    a[t.CREATED] = n + "event-created.html",
    a[t.NEW_REVISION_CREATED] = n + "event-new-revision.html",
    a[t.SENT_FOR_APPROVAL] = n + "event-sent-for-approval.html",
    a[t.APPROVED] = n + "event-approved.html",
    a[t.REJECTED] = n + "event-rejected.html",
    a[t.SENT] = n + "event-sent.html",
    a[t.COMPLETED_BY_ALL] = n + "event-completed-by-all.html",
    a[t.VIEWED] = n + "event-viewed.html",
    a[t.COMPLETED_BY_RECIPIENT] = n + "event-completed-by-recipient.html",
    {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/directives/audit/document-audit-timeline.html",
        scope: {
            events: "="
        },
        controller: ["$scope", function(e) {
            e.$watch("events", function(e) {
                e && _.each(e, function(e) {
                    return e.status = i[e.action],
                    e.layout = a[e.action],
                    e
                }
                )
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.common").directive("documentStatusTimeline", [function() {
    return {
        restrict: "E",
        replace: !0,
        transclude: !0,
        templateUrl: "/views/common/directives/audit/document-status-timeline.html"
    }
}
]).directive("documentStatusItem", [function() {
    return {
        restrict: "E",
        require: "^documentStatusTimeline",
        replace: !0,
        transclude: !0,
        templateUrl: "/views/common/directives/audit/document-status-item.html",
        scope: {
            status: "=",
            description: "=",
            withoutDescription: "="
        }
    }
}
]),
function() {
    String.prototype.capitalize = function() {
        return this.charAt(0).toUpperCase() + this.slice(1)
    }
    ;
    var e = function(e, n, t) {
        return function(o, i, a) {
            var s = {};
            _.each(n, function(e) {
                var n = "event" + e.toLowerCase().capitalize();
                a[n] && (s[e] = function() {
                    var e = o.$eval(a[n]);
                    angular.isFunction(e) && e.apply(null , arguments)
                }
                )
            }
            ),
            _.each(t, function(e) {
                var n = "opt" + e.toLowerCase().capitalize();
                a[n] && (s[e] = o.$eval(a[n]))
            }
            ),
            $(i)[e](s)
        }
    }
      , n = angular.module("jui", []);
    n.directive("juiDraggable", [function() {
        var n = ["create", "start", "drag", "stop"]
          , t = ["disabled", "addClasses", "appendTo", "axis", "cancel", "connectToSortable", "containment", "cursor", "cursorAt", "delay", "distance", "grid", "handle", "helper", "iframeFix", "opacity", "refreshPositions", "revert", "revertDuration", "scope", "scroll", "scrollSensitivity", "scrollSpeed", "snap", "snapMode", "snapTolerance", "stack", "zIndex"];
        return {
            restrict: "A",
            link: e("draggable", n, t)
        }
    }
    ]),
    n.directive("juiDroppable", [function() {
        var n = ["create", "activate", "deactivate", "over", "out", "drop"]
          , t = ["disabled", "accept", "activeClass", "addClasses", "greedy", "hoverClass", "scope", "tolerance"];
        return {
            restrict: "A",
            link: e("droppable", n, t)
        }
    }
    ]),
    n.directive("juiResizable", [function() {
        var n = ["create", "start", "resize", "stop"]
          , t = ["disabled", "alsoResize", "animate", "animateDuration", "animateEasing", "aspectRatio", "autoHide", "cancel", "containment", "delay", "distance", "ghost", "grid", "handles", "helper", "maxHeight", "maxWidth", "minHeight", "minWidth"];
        return {
            restrict: "A",
            link: e("resizable", n, t)
        }
    }
    ])
}
(),
angular.module("pd.common").directive("signatureView", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/signature/signature-view.html",
        scope: {
            settings: "=",
            widgetInfo: "=",
            source: "=",
            editable: "=",
            showLabel: "=",
            label: "@"
        },
        controller: "SignatureViewController"
    }
}
]).directive("profileSignature", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/signature/profile-signature-view.html",
        scope: {
            profile: "="
        },
        controller: ["$scope", "SignatureTabs", "ModalService", "ProfileService", "WorkspacesService", function(e, n, t, o, i) {
            e.changeSignature = function() {
                i.getWorkspace().then(function(i) {
                    e.launched = !0;
                    var a = e.profile.signature ? n.MY : n.TYPE
                      , s = _.assign({}, {
                        controller: "SignatureDialogController",
                        templateUrl: "/views/common/signature/signature-dialog.html",
                        windowClass: "modal--signature",
                        resolve: {
                            buttonText: function() {
                                return "buttons.save"
                            },
                            selectedTab: function() {
                                return a
                            },
                            source: function() {
                                return e.profile.signature
                            },
                            mySignatureSupported: function() {
                                return !!e.profile.signature
                            },
                            settings: function() {
                                return i.settings
                            }
                        }
                    });
                    t.openSingleton(s).then(function(n) {
                        e.launched = !1,
                        n && n.data && (e.profile.signature = _.pick(n, "data", "dataFormat"),
                        o.updateProfile(e.profile))
                    }
                    , function() {
                        e.launched = !1
                    }
                    )
                }
                )
            }
        }
        ]
    }
}
]).controller("SignatureViewController", ["$scope", "SignatureTabs", "Constants", "ProfileService", "ModalService", "$timeout", "ElementClickBehavior", function(e, n, t, o, i, a, s) {
    var l = function(e, n) {
        return function() {
            e() && n()
        }
    }
      , r = function() {
        return e.editable
    }
      , c = !1
      , d = l(r, function() {
        if (!c) {
            c = !0;
            var t = e.source ? n.NONE : n.TYPE;
            o.getProfile().then(function(a) {
                !e.source && a.signature && a.signature.data && (t = n.MY);
                var s = _.assign({}, {
                    controller: "SignatureDialogController",
                    templateUrl: "/views/common/signature/signature-dialog.html",
                    windowClass: "modal--signature",
                    resolve: {
                        buttonText: function() {
                            return "buttons.accept_and_sign"
                        },
                        settings: function() {
                            return e.settings
                        },
                        selectedTab: function() {
                            return t
                        },
                        source: function() {
                            return e.source
                        },
                        mySignatureSupported: function() {
                            return !!a.signature
                        }
                    }
                });
                i.openSingleton(s).then(function(n) {
                    c = !1,
                    n && n.data && (e.source = n,
                    n.saveMySignature && (a.signature = _.pick(n, "data", "dataFormat"),
                    o.updateProfile(a)))
                }
                , function() {
                    c = !1
                }
                )
            }
            )
        }
    }
    )
      , u = l(r, function() {
        if (!c) {
            c = !0;
            var t = e.source ? n.NONE : n.TYPE
              , o = _.assign({}, {
                controller: "InitialsDialogController",
                templateUrl: "/views/common/signature/initials-dialog.html",
                windowClass: "modal--signature",
                resolve: {
                    buttonText: function() {
                        return "buttons.accept"
                    },
                    settings: function() {
                        return e.settings
                    },
                    selectedTab: function() {
                        return t
                    },
                    source: function() {
                        return e.source
                    }
                }
            });
            i.openSingleton(o).then(function(n) {
                c = !1,
                n && n.data && (e.source = n)
            }
            , function() {
                c = !1
            }
            )
        }
    }
    );
    e.$watch("widgetInfo", function(n) {
        if (n) {
            var o = n.widget.type === t.WIDGET.SIGNATURE;
            o ? (e.launchDialog = d,
            e.signature = !0,
            e.initials = !1) : (e.launchDialog = u,
            e.signature = !1,
            e.initials = !0)
        }
    }
    );
    var m;
    e.$watch("widgetInfo.dragging", function(e) {
        e && a.cancel(m)
    }
    ),
    e.$watch("widgetInfo.resizing", function(e) {
        e && a.cancel(m)
    }
    );
    var p = function(e) {
        return !e.widget.data || !e.widget.data.value
    }
      , g = s.getStream().filter(function(e) {
        return "widget-activate" === e.name
    }
    ).filter(function(n) {
        var t = e.widgetInfo;
        return t && n.widgetId === t.widget.id && p(t)
    }
    ).subscribe(function() {
        m = a(e.launchDialog, 500)
    }
    );
    e.$on("$destroy", function() {
        g.dispose()
    }
    )
}
]).controller("InitialsDialogController", ["$scope", "$rootScope", "$modalInstance", "selectedTab", "source", "SignatureTabs", "buttonText", "settings", function(e, n, t, o, i, a, s, l) {
    e.initials = !0,
    e.buttonText = s,
    e.model = {
        selectedTab: o
    },
    e.TABS = a,
    e.source = i,
    e.changeTab = function(n) {
        e.model.selectedTab = n
    }
    ,
    e.close = function() {
        n.$broadcast("signature.close"),
        t.close()
    }
    ,
    l ? (e.HAS_DRAW_TAB = l.allowed_initials_draw,
    e.HAS_TYPE_TAB = l.allowed_initials_type,
    e.model.selectedTab = e.HAS_TYPE_TAB ? a.TYPE : a.DRAW) : (e.HAS_DRAW_TAB = !0,
    e.HAS_TYPE_TAB = !0),
    e.sourceRegistry = {};
    var r = function(n) {
        n && ("type" !== n.type || n.options.text.length > 0) && (_.assign(n, {
            saveMySignature: e.model.saveMySignature
        }),
        e.$close(n))
    }
    ;
    e.done = function() {
        var n = e.sourceRegistry[e.model.selectedTab]();
        n && n.then ? n.then(r) : n && r(n)
    }
}
]).controller("SignatureDialogController", ["$scope", "$rootScope", "$modalInstance", "mySignatureSupported", "selectedTab", "source", "Config", "SignatureTabs", "buttonText", "settings", function(e, n, t, o, i, a, s, l, r, c) {
    e.signature = !0,
    e.buttonText = r,
    e.model = {
        saveMySignature: !1
    };
    var d = function() {
        var n = [{
            tab: l.DRAW,
            condition: e.HAS_DRAW_TAB
        }, {
            tab: l.TYPE,
            condition: e.HAS_TYPE_TAB
        }, {
            tab: l.UPLOAD,
            condition: e.HAS_UPLOAD_TAB
        }, {
            tab: l.MY,
            condition: o
        }]
          , t = _.filter(n, "condition")
          , a = _.any(t, {
            tab: i
        })
          , s = t.length ? _.first(t) : {
            tab: l.NONE
        };
        return a ? i : s.tab
    }
    ;
    c ? (e.HAS_DRAW_TAB = c.allowed_signature_draw,
    e.HAS_TYPE_TAB = c.allowed_signature_type,
    e.HAS_UPLOAD_TAB = c.allowed_signature_upload,
    e.model.selectedTab = d()) : (e.HAS_DRAW_TAB = !0,
    e.HAS_TYPE_TAB = !0,
    e.HAS_UPLOAD_TAB = !0,
    e.model.selectedTab = d()),
    e.mySignatureSupported = o,
    e.TABS = l,
    e.source = a,
    e.applicationMode = s.application.app || s.application.sdk,
    e.changeTab = function(n) {
        e.model.selectedTab = n
    }
    ,
    window.FileReader && (e.uploadSupported = !0),
    e.close = function() {
        n.$broadcast("signature.close"),
        t.close()
    }
    ,
    e.sourceRegistry = {};
    var u = function(n) {
        n && ("type" !== n.type || n.options.text.length > 0) && (_.assign(n, {
            saveMySignature: e.model.saveMySignature
        }),
        e.$close(n))
    }
    ;
    e.done = function() {
        var n = e.sourceRegistry[e.model.selectedTab]();
        n && n.then ? n.then(u) : n && u(n)
    }
}
]),
angular.module("pd.common").directive("signatureColorPicker", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/signature/signature-color-picker.html",
        controller: "SignatureColorPickerController"
    }
}
]).controller("SignatureColorPickerController", ["$scope", "$rootScope", "SignatureColors", "LocalStoreService", function(e, n, t, o) {
    e.buttons = [t.BLACK, t.BLUE, t.RED],
    e.current = t[o.getString("signatureColor")] || t.BLACK,
    e.selectColor = function(t) {
        e.current = t,
        o.setString("signatureColor", t.label),
        n.$broadcast("signature.color.changed", t)
    }
}
]).constant("SignatureColors", {
    BLACK: {
        r: 0,
        g: 0,
        b: 0,
        label: "BLACK"
    },
    BLUE: {
        r: 26,
        g: 97,
        b: 204,
        label: "BLUE"
    },
    RED: {
        r: 202,
        g: 51,
        b: 51,
        label: "RED"
    }
}),
angular.module("pd.common").directive("signatureMy", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/signature/signature-my.html",
        controller: "SignatureMyController"
    }
}
]).controller("SignatureMyController", ["$scope", "ProfileService", "SignatureTabs", function(e, n, t) {
    n.getProfile().then(function(n) {
        n.signature && n.signature.data && (e.mysignature = n.signature)
    }
    ),
    e.sourceRegistry[t.MY] = function() {
        return e.mysignature ? _.assign({}, e.mysignature, {
            type: "my"
        }) : void 0
    }
}
]),
angular.module("pd.common").service("SignaturePadService", ["LocalStoreService", "SignatureColors", "$rootScope", function(e, n, t) {
    var o = function(e) {
        return "rgb(" + [e.r, e.g, e.b].join(",") + ")"
    }
      , i = n[e.getString("signatureColor") || "BLACK"]
      , a = {
        "background-color": "rgba(0,0,0,0)",
        "decor-color": "rgba(0,0,0,0)",
        color: o(i)
    };
    return t.$on("signature.color.changed", function(e, n) {
        a.color = o(n)
    }
    ),
    {
        generateId: function() {
            return "signaturepadid" + Math.round(1e3 * Math.random())
        },
        createSignaturePad: function(e) {
            return $("#" + e + " .draw-signature__canvas").empty().jSignature(a)
        },
        reset: function(e) {
            e.jSignature("reset")
        },
        toDataURL: function(e) {
            return e.jSignature("getData")
        }
    }
}
]).controller("SignaturePadController", ["$scope", "SignatureUtils", "SignaturePadService", "SignatureTabs", "$timeout", function(e, n, t, o, i) {
    var a = !1;
    e.signaturePadId = t.generateId(),
    e.$watch("model.selectedTab", function(n) {
        !a && n && n === o.DRAW && (a = !0,
        i(function() {
            e.signaturePad = t.createSignaturePad(e.signaturePadId)
        }
        ))
    }
    )
}
]).directive("signaturePad", ["CanvasService", "SignatureTabs", "$q", "SignaturePadService", function(e, n, t, o) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/signature/signature-pad.html",
        controller: "SignaturePadController",
        link: function(i, a) {
            var s, l, r = function() {
                return a.find("canvas")[0]
            }
            ;
            i.$watch("signaturePad", function(e) {
                e && (l = r().toDataURL())
            }
            ),
            i.$on("signature.color.changed", function(n, t) {
                var o = r();
                o && (e.changeColor(o, t),
                s = t)
            }
            ),
            i.clear = function() {
                o.reset(i.signaturePad);
                var n = r();
                n && s && e.changeColor(n, s)
            }
            ,
            i.sourceRegistry[n.DRAW] = function() {
                var n = t.defer()
                  , o = r();
                return o.toDataURL() === l ? void n.resolve() : (e.crop(o).then(function(e) {
                    e.type = "draw",
                    n.resolve(e)
                }
                ),
                n.promise)
            }
        }
    }
}
]),
angular.module("pd.common").directive("signatureType", ["SignatureTabs", "$q", "WidgetRegistry", "Constants", "CanvasService", "SignatureColors", "LocalStoreService", function(e, n, t, o, i, a, s) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/signature/signature-type.html",
        controller: "SignatureTypeController",
        link: function(l) {
            var r = function(e) {
                return "rgb(" + [e.r, e.g, e.b].join(",") + ")"
            }
            ;
            l.color = a[s.getString("signatureColor") || "BLACK"],
            l.$on("signature.color.changed", function(e, n) {
                l.color = n
            }
            ),
            l.sourceRegistry[e.TYPE] = function() {
                var e = n.defer()
                  , a = t.getWidgetSizingModel(o.WIDGET.SIGNATURE)
                  , s = document.createElement("canvas");
                s.width = 50 * a.initial.width,
                s.height = 50 * a.initial.height;
                var c = s.getContext("2d");
                return c.fillStyle = r(l.color),
                c.textAlign = "center",
                c.textBaseline = "middle",
                c.font = l.fontSizes[l.selectedFont] + 'px "' + l.selectedFont + '"',
                c.fillText(l.signatureModel.text, s.width / 2, s.height / 2, .9 * s.width),
                i.crop(s).then(function(n) {
                    _.assign(n, {
                        type: "type",
                        options: {
                            text: l.signatureModel.text,
                            font: l.selectedFont
                        }
                    }),
                    e.resolve(n)
                }
                ),
                e.promise
            }
        }
    }
}
]).controller("SignatureTypeController", ["$scope", "ProfileService", "$filter", function(e, n, t) {
    e.fonts = ["ff-market-web", "madre-script", "felt-tip-roman", "lakeside", "bistro-script-web", "lush"],
    e.fontSizes = {
        "ff-market-web": 200,
        "madre-script": 140,
        "felt-tip-roman": 200,
        lakeside: 200,
        "bistro-script-web": 200,
        lush: 200
    },
    e.signatureModel = {
        text: ""
    },
    e.source && e.source.options && e.source.options.text ? (e.signatureModel.text = e.source.options.text,
    e.selectedFont = e.source.options.font) : (n.getProfile().then(function(n) {
        var o = e.signature ? "fullName" : "initials";
        e.signatureModel.text = t(o)(n)
    }
    ),
    e.selectedFont = e.fonts[0]),
    e.selectFont = function(n) {
        e.selectedFont = n
    }
}
]),
angular.module("pd.common").directive("signatureUpload", ["SignatureUtils", "$timeout", function(e, n) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/common/signature/signature-upload.html",
        controller: "SignatureUploadController",
        link: function(t, o) {
            o.find("input[type=file]").change(function(o) {
                var i = o.target.files[0]
                  , a = new FileReader;
                a.onload = function(o) {
                    var i = document.getElementById("uploadPreview")
                      , a = i.getContext("2d")
                      , s = document.createElement("img");
                    s.src = o.target.result,
                    n(function() {
                        var n = s.width / s.height
                          , o = i.width / i.height
                          , l = n > o ? i.width / s.width : i.height / s.height
                          , r = s.width * l
                          , c = s.height * l
                          , d = (i.width - r) / 2
                          , u = (i.height - c) / 2;
                        a.clearRect(0, 0, i.width, i.height),
                        a.drawImage(s, d, u, r, c),
                        t.$apply(function() {
                            t.fileSource = e.getJSON(i.toDataURL())
                        }
                        )
                    }
                    , 10)
                }
                ,
                a.readAsDataURL(i)
            }
            )
        }
    }
}
]).controller("SignatureUploadController", ["$scope", "SignatureTabs", "$q", "CanvasService", "SignatureUtils", "BrowserUtils", function(e, n, t, o, i, a) {
    e.fileSource = null ,
    e.sourceRegistry[n.UPLOAD] = function() {
        if (e.fileSource) {
            var n = t.defer()
              , s = document.getElementById("uploadPreview");
            if (a.safari) {
                var l = i.getJSON(s.toDataURL());
                l.type = "upload",
                n.resolve(l)
            } else
                o.crop(s).then(function(e) {
                    e.type = "upload",
                    n.resolve(e)
                }
                );
            return n.promise
        }
        return null 
    }
    ,
    e.clearFile = function() {
        e.fileSource = null 
    }
}
]),
angular.module("pd.common").service("SignatureUtils", [function() {
    return {
        getJSON: function(e) {
            var n, t = "data:";
            n = 0 === e.indexOf(t) ? e.substring(t.length) : e;
            var o = n.split(",");
            return {
                dataFormat: o[0],
                data: o[1]
            }
        }
    }
}
]).constant("SignatureTabs", {
    DRAW: "DRAW",
    TYPE: "TYPE",
    UPLOAD: "UPLOAD",
    MY: "MY",
    NONE: "NONE"
}),
angular.module("pd.common").filter("actions", function() {
    var e = 5
      , n = function(e) {
        return e.actor ? [e.actor.id, e.document.id, e.type].join("-") : ["none", e.document.id, e.type].join("-")
    }
      , t = function(e, t) {
        var i = _.groupBy(e, n);
        return _.reduce(i, function(e, n) {
            return e.concat(o(n, t))
        }
        , [])
    }
      , o = function(e, n) {
        if (!e || 1 === e.length)
            return e;
        var t, o = [];
        return _.each(e, function(e) {
            var i = moment(e.date_created);
            (!t || i.isBefore(t)) && (t = i.subtract(n, "minutes"),
            o.push(e))
        }
        ),
        o
    }
    ;
    return function(n) {
        return t(n, e)
    }
}
),
angular.module("pd.common").filter("appBaseUrl", ["Config", "$sce", function(e, n) {
    return function(t, o) {
        var i = e.applicationUrl + (t.length > 0 && "/" !== t[0] ? "/" : "") + t;
        return o ? n.trustAsResourceUrl(i) : i
    }
}
]),
angular.module("pd.common").filter("catalogItemPrice", ["$filter", function(e) {
    var n = e("cy");
    return function(e) {
        return n(e.price, e.currency)
    }
}
]),
angular.module("pd.common").filter("contactNameHighlight", function() {
    var e = function(e) {
        return e.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1")
    }
    ;
    return function(n, t) {
        var o = n.replace("&lt;", "").replace("&gt;", "")
          , i = t ? o.replace(new RegExp(e(t),"gi"), "<strong>$&</strong>") : o
          , a = i.split(" ");
        return _.initial(a).concat([_.last(a)]).join(" ")
    }
}
),
angular.module("pd.common").filter("cy", ["$filter", "CurrencyService", "CurrencyFormatException", function(e, n, t) {
    var o = e("currency")
      , i = function(e, n, t) {
        var i = o(e, n, t);
        return Number(e) < 0 ? i.replace("(", "-").replace(")", "") : i
    }
    ;
    return function(e, o, a, s) {
        var l = n.getCurrencyByCode(o) || n.getDefaultCurrency()
          , r = _.isUndefined(a) ? l.decimal_digits : a
          , c = t.getException(o);
        if (_.isNaN(parseInt(r, 10)) && (r = 2),
        s) {
            var d = Math.abs(e % 1);
            0 === d && (r = 0)
        }
        return "no-symbol" === o ? i(e, "", r) : "%" === o ? i(e, "", r) + "%" : c ? c.apply(i(e, "", r)) : l.code === l.symbol ? l.code + i(e, "", r) : i(e, l.symbol, r)
    }
}
]),
angular.module("pd.common").filter("errorMessage", ["$filter", function(e) {
    return function(n, t) {
        var o = [];
        return t.data && "object" == typeof t.data && (o = _(t.data).map(function(t, o) {
            return _.reduce(t, function(t, i) {
                var a = n + ".errors." + o + "." + i.toLowerCase().replace(/[^a-z\s]+/g, "").split(" ").join("_");
                return t.push(e("translate")(a)),
                t
            }
            , [])
        }
        ).flatten().value()),
        o
    }
}
]),
angular.module("pd.common").filter("floor", function() {
    return function(e) {
        return Math.floor(e)
    }
}
),
angular.module("pd.common").filter("folderBreadcrumb", ["$filter", function(e) {
    return function(n) {
        return {
            name: n.name,
            id: n.id,
            owner: n.owner,
            parent: n.parent,
            url: e("folderUrl")(n)
        }
    }
}
]),
angular.module("pd.common").filter("folderUrl", ["ContextService", "$stateParams", function(e, n) {
    var t = {
        documents: function(e) {
            return "#/documents/f/" + e.id
        },
        templates: function(e) {
            return "#/templates/f/" + e.id
        },
        library: function(e) {
            return "#/library/f/" + e.id
        },
        catalog: function(e) {
            var t = e.data_source || n.dataSourceId;
            return "#/catalog/" + t + "/" + e.id
        }
    }
      , o = function() {
        return e.when({
            documents: function() {
                return "documents"
            },
            templates: function() {
                return "templates"
            },
            library: function() {
                return "library"
            },
            catalog: function() {
                return "catalog"
            }
        })
    }
    ;
    return function(e, n) {
        return n = n || o(),
        t[n](e)
    }
}
]),
angular.module("pd.common").filter("fullName", function() {
    return function(e, n) {
        var t = "";
        return e && (t += e.first_name || "",
        t += e.first_name && e.last_name ? " " : "",
        t += e.last_name || "",
        0 === t.length ? t += e.email || "" : _(n).isObject() && n.email && (t += " <" + e.email + ">")),
        t
    }
}
),
angular.module("pd.common").filter("fullPrice", function() {
    return function(e, n) {
        return 1 === n.members.length ? e : [e, "x", n.members.length, "users"].join(" ")
    }
}
),
angular.module("pd.common").filter("hideZeroFractionPart", ["$filter", function(e) {
    var n = e("number")
      , t = "0";
    return function(e) {
        return e && _.isNumber(e) ? n(Number(e.toString())) : t
    }
}
]),
angular.module("pd.common").filter("initials", function() {
    var e = function(e) {
        return e[0].toUpperCase() + "."
    }
    ;
    return function(n) {
        var t = [];
        if (n) {
            if (!n.first_name && !n.last_name)
                return n.email;
            n.first_name && t.push(e(n.first_name)),
            n.last_name && t.push(e(n.last_name))
        }
        return t.join("")
    }
}
),
angular.module("pd.common").filter("linkToDocument", ["Constants", function(e) {
    return function(n, t) {
        if (!n)
            return "";
        var o;
        return o = n.type === e.DOCUMENT.TYPE.TEMPLATE ? "#/templates/" : t && e.DOCUMENT.ACTION.RECEIVED === t.type ? "#/inbox/" : "#/documents/",
        o + n.id
    }
}
]),
angular.module("pd.common").filter("moment", [function() {
    return function(e) {
        return e ? moment(e).fromNow() : e
    }
}
]).filter("duration", [function() {
    var e = {
        years: "year",
        years_plural: "years",
        months: "month",
        months_plural: "months",
        days: "day",
        days_plural: "days",
        hours: "hour",
        hours_plural: "hours",
        minutes: "min",
        minutes_plural: "min",
        seconds: "sec",
        seconds_plural: "sec",
        delimiter: " "
    }
      , n = function(n, t) {
        return n + e.delimiter + (1 === n ? e[t] : e[t + "_plural"])
    }
    ;
    return function(t) {
        var o = moment.duration(t, "seconds")
          , i = ["years", "months", "days", "hours", "minutes", "seconds"].reduce(function(e, t) {
            var i = o[t]();
            return 0 !== i && e.push(n(i, t)),
            e
        }
        , [])
          , a = i.join(e.delimiter)
          , s = _.isEmpty(i) ? "" : _.head(i)
          , l = i.length > 1 ? _.tail(i).join(e.delimiter) : "";
        return {
            full: a,
            head: s,
            headNumber: _.first(s.split(e.delimiter)),
            headDuration: _.last(s.split(e.delimiter)),
            tail: l
        }
    }
}
]).filter("fromNowShort", [function() {
    var e = [{
        what: "seconds",
        to: "sec"
    }, {
        what: "a second",
        to: "1 sec"
    }, {
        what: "minutes",
        to: "min"
    }, {
        what: "a minute",
        to: "1 min"
    }, {
        what: "hours",
        to: "h"
    }, {
        what: "an hour",
        to: "1 h"
    }, {
        what: "days",
        to: "d"
    }, {
        what: "a day",
        to: "1 d"
    }, {
        what: "weeks",
        to: "w"
    }, {
        what: "a week",
        to: "1 w"
    }, {
        what: "months",
        to: "mon"
    }, {
        what: "a month",
        to: "1 mon"
    }, {
        what: "years",
        to: "y"
    }, {
        what: "an year",
        to: "1 y"
    }];
    return function(n) {
        return _.reduce(e, function(e, n) {
            return e.replace(n.what, n.to)
        }
        , moment(n).fromNow())
    }
}
]).filter("fromUTC", [function() {
    return function(e) {
        return new Date(e.year(),e.month(),e.date())
    }
}
]).filter("toUTC", [function() {
    return function(e) {
        return moment.utc([e.getFullYear(), e.getMonth(), e.getDate()])
    }
}
]),
angular.module("pd.common").filter("rootFolder", ["$filter", function(e) {
    var n = e("translate")
      , t = e("folderUrl")
      , o = {
        documents: {
            name: n("folders.documents"),
            domain: "folders"
        },
        templates: {
            name: n("folders.templates"),
            domain: "template-folders"
        },
        library: {
            name: n("folders.library"),
            domain: "library/folders"
        },
        catalog: {
            name: n("folders.catalog"),
            domain: "catalog/folders"
        }
    };
    return function(e, n, i) {
        return {
            id: e.id,
            name: o[n].name,
            url: t(e, n),
            owner: i,
            root: !0
        }
    }
}
]),
angular.module("pd.common").filter("staticBaseUrl", ["Config", function(e) {
    return function(n) {
        return e.staticBaseURL + n
    }
}
]),
angular.module("pd.common").filter("tokenSelector", function() {
    return function(e) {
        return 'span[data-token-id="' + e.name + '"]'
    }
}
).filter("tokensInNaturalOrder", function() {
    var e = function() {
        var e = angular.element(".document").find("span[data-token-id]")
          , n = {};
        return _.filter(_.map(e, angular.element), function(e) {
            var t = e.attr("data-token-id");
            return n[t] ? !1 : (n[t] = !0,
            !0)
        }
        )
    }
    ;
    return function(n) {
        return _.reduce(e(), function(e, t) {
            var o = _.find(n, {
                name: t.attr("data-token-id")
            });
            return o && e.push(o),
            e
        }
        , [])
    }
}
),
angular.module("pd.common").filter("truncate", function() {
    return function(e, n, t) {
        return e = e || "",
        isNaN(n) && (n = 10),
        void 0 === t && (t = "…"),
        e.length <= n || e.length - t.length <= n ? e : String(e).substring(0, n - t.length) + t
    }
}
),
angular.module("pd.common").filter("uuid", function() {
    return function() {
        return "xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
            var n = 16 * Math.random() | 0
              , t = "x" === e ? n : 3 & n | 8;
            return t.toString(16)
        }
        )
    }
}
).filter("uuid-short", function() {
    return function() {
        return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4)
    }
}
),
angular.module("pd.common").controller("ContentLibraryItemsListMixin", ["$scope", "LibraryService", function(e, n) {
    var t = {
        page: 1,
        count: 30,
        order_by: "name"
    }
      , o = !1;
    e.CLIListMixin = {
        parents: [],
        folders: [],
        items: [],
        parentFolder: null ,
        loadingItems: !1,
        loadingFolders: !1,
        hasMoreItems: !0,
        filterModel: {}
    };
    var i = function() {
        e.CLIListMixin.hasMoreItems = !0,
        e.CLIListMixin.items = [],
        t.page = 1
    }
    ;
    e.$toObservable("CLIListMixin.filterModel.filter").filter(function(e) {
        return !o && e.newValue !== e.oldValue
    }
    ).debounce(700).map(function(e) {
        return e.newValue
    }
    )["do"](i).subscribe(function(n) {
        n ? (e.CLIListMixin.filtering = !0,
        e.CLIListMixin.loadLibraryItems(n)) : "" === n && (e.CLIListMixin.filtering = !1,
        e.CLIListMixin.loadLibraryItems())
    }
    ),
    n.getRootFolder().then(function(n) {
        n.isRoot = !0,
        e.CLIListMixin.parents.push(n)
    }
    ),
    e.$watchCollection("CLIListMixin.parents", function(n) {
        e.CLIListMixin.parentFolder = _.last(n)
    }
    ),
    e.CLIListMixin.down = function(n) {
        e.CLIListMixin.parents.push(n)
    }
    ,
    e.CLIListMixin.up = function() {
        e.CLIListMixin.parents = _.initial(e.CLIListMixin.parents)
    }
    ,
    e.$on("$destroy", function() {
        o = !0
    }
    ),
    e.CLIListMixin.loadLibraryItems = function(i) {
        if (!e.CLIListMixin.loadingItems && e.CLIListMixin.hasMoreItems) {
            e.CLIListMixin.loadingItems = !0;
            var a;
            a = i ? _.assign({}, t, {
                q: i
            }) : _.assign({}, t, {
                folder_id: e.CLIListMixin.parentFolder.id
            }),
            n.getItems(a).then(function(n) {
                o || (e.CLIListMixin.items = e.CLIListMixin.items.concat(n),
                e.CLIListMixin.loadingItems = !1,
                e.CLIListMixin.hasMoreItems = n.next ? !0 : !1,
                t.page = t.page + 1)
            }
            )
        }
    }
    ,
    e.CLIListMixin.loadFolders = function() {
        e.CLIListMixin.loadingFolders = !0;
        var i = e.CLIListMixin.parentFolder
          , a = _.assign({}, t, {
            parent: i.id
        });
        n.getFolders(a).then(function(n) {
            o || (e.CLIListMixin.folders = n,
            e.CLIListMixin.loadingFolders = !1)
        }
        )
    }
    ,
    e.$watch("CLIListMixin.parentFolder", function(n) {
        n && (i(),
        e.CLIListMixin.folders = [],
        e.CLIListMixin.loadLibraryItems(),
        e.CLIListMixin.loadFolders())
    }
    )
}
]),
angular.module("pd.common").run(function() {
    function e(n, t) {
        return _.defaults(n, t),
        _.each(n, function(n, o) {
            _.isPlainObject(n) && _.isPlainObject(t[o]) && e(n, t[o])
        }
        ),
        n
    }
    _.mixin({
        defaultsRecursively: e
    })
}
),
angular.module("pd.common").run(function() {
    var e = function(e) {
        return _.isString(e) ? e.replace(/(\r\n|\n|\r)/gm, " ") : e
    }
    ;
    _.mixin({
        nl2space: e
    })
}
),
angular.module("pd.common").run(function() {
    function e(e) {
        return p[e]
    }
    function n(e) {
        return function(n) {
            for (var i = -1, a = o(t(n)), s = a.length, l = ""; ++i < s; )
                l = e(l, a[i], i);
            return l
        }
    }
    function t(n) {
        return n = s(n),
        n && n.replace(u, e).replace(m, "")
    }
    function o(e, n, t) {
        return t && i(e, n, t) && (n = null ),
        e = s(e),
        e.match(n || f) || []
    }
    function i(e, n, t) {
        if (!_.isObject(t))
            return !1;
        var o = typeof n;
        if ("number" == o ? c(t) && a(n, t.length) : "string" == o && n in t) {
            var i = t[n];
            return e === e ? e === i : i !== i
        }
        return !1
    }
    function a(e, n) {
        return e = "number" == typeof e ? e : parseFloat(e),
        n = null  == n ? d : n,
        e > -1 && e % 1 == 0 && n > e
    }
    function s(e) {
        return "string" == typeof e ? e : null  == e ? "" : e + ""
    }
    function l(e) {
        return function(n) {
            return null  == n ? void 0 : n[e]
        }
    }
    function r(e) {
        return "number" == typeof e && e > -1 && e % 1 == 0 && d >= e
    }
    function c(e) {
        return null  != e && r(g(e))
    }
    var d = 9007199254740991
      , u = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g
      , m = /[\u0300-\u036f\ufe20-\ufe23]/g
      , p = {
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss"
    }
      , g = l("length")
      , f = function() {
        var e = "[A-Z\\xc0-\\xd6\\xd8-\\xde]"
          , n = "[a-z\\xdf-\\xf6\\xf8-\\xff]+";
        return RegExp(e + "+(?=" + e + n + ")|" + e + "?" + n + "|" + e + "+|[0-9]+", "g")
    }
    ()
      , b = n(function(e, n, t) {
        return e + (t ? "_" : "") + n.toLowerCase()
    }
    );
    _.mixin({
        snakeCase: b
    })
}
),
angular.module("pd.common").provider("BrowserUtils", [function() {
    this.$get = function() {
        return $.browser
    }
}
]),
angular.module("pd.common").provider("$download", [function() {
    this.$get = ["$rootScope", "$timeout", "Config", "WorkspacesService", "SubscriptionService", "InactiveSubscriptionDialog", function(e, n, t, o, i, a) {
        var s = function(t) {
            var o = function() {
                n(function() {
                    e.$broadcast("download.completed")
                }
                , 1500)
            }
            ;
            $("<iframe/>").ready(o).hide().prop("src", t).appendTo("body")
        }
          , l = function(n, t) {
            t && t.isRecipient ? s(n) : o.getWorkspace().then(function(t) {
                var o = t.subscription;
                i.isActive(o) || i.isFree(o) || i.isTrial(o) ? s(n) : (e.$broadcast("download.completed"),
                a.open())
            }
            )
        }
        ;
        return function(e, n) {
            t.application.app || t.application.sdk ? l(e, n) : s(e)
        }
    }
    ]
}
]),
angular.module("pd.common").provider("singleEvent", [function() {
    this.$get = function() {
        return function(e, n, t) {
            var o = e.$on(n, function() {
                o(),
                t.apply(null , arguments)
            }
            )
        }
    }
}
]).factory("postponed", ["$timeout", function(e) {
    return function(n) {
        return function() {
            var t = arguments;
            e(function() {
                n.apply(null , t)
            }
            )
        }
    }
}
]),
angular.module("pd.common").factory("wrapMethodInPromise", ["$q", function(e) {
    return function(n, t) {
        return function() {
            var o = e.defer();
            return o.resolve(n.apply(t, arguments)),
            o.promise
        }
    }
}
]).factory("wrapInPromise", ["$q", function(e) {
    return function(n) {
        var t = e.defer();
        return t.resolve(n),
        t.promise
    }
}
]),
angular.module("pd.common").provider("singleWatch", [function() {
    this.$get = function() {
        return function(e, n, t) {
            var o = e.$watch(n, function(e) {
                _.isUndefined(e) || (o(),
                t.apply(null , arguments))
            }
            )
        }
    }
}
]).factory("watchWithDelay", ["$timeout", "Config", function(e, n) {
    return function(t, o, i, a) {
        a = a || n.liveFilteringDelay;
        var s;
        return t.$watch(o, function(n, t) {
            n !== t && (e.cancel(s),
            s = e(function() {
                i(n, t)
            }
            , a))
        }
        )
    }
}
]),
angular.module("pd.common").provider("scrollToElement", [function() {
    this.$get = function() {
        return function(e, n, t) {
            e ? $(e).scrollTo(n, t) : $.scrollTo(n, t)
        }
    }
}
]),
angular.module("pd.common").provider("Universal", [function() {
    var e = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && screen.width < 500 || location.search.match(/isPhone=1/);
    this.templateUrl = function(n) {
        return e ? n.replace(/(\.html)$/, ".phone.html") : n
    }
    ,
    this.isPhone = e,
    this.$get = function() {
        return {
            templateUrl: this.templateUrl,
            isPhone: this.isPhone
        }
    }
}
]),
angular.module("pd.common").provider("uploadcare", [function() {
    var e = null 
      , n = function(n) {
        return e || (e = window.uploadcare,
        e && e.tabsCss.addUrl(n.staticBaseURL + "styles/uploadcare.css")),
        e
    }
    ;
    this.$get = ["Config", function(e) {
        return n(e)
    }
    ]
}
]),
angular.module("pd.common").service("AlertService", ["ModalService", function(e) {
    this.alert = function(n) {
        n.title = void 0 === n.title ? "Error" : n.title,
        n.text = n.text || n.title || "",
        n.okText = n.okText || "Ok",
        n.isList = "object" == typeof n.text;
        var t = {
            controller: "AlertDialogController",
            templateUrl: "/views/common/alert.html",
            resolve: {
                params: function() {
                    return n
                }
            }
        };
        return e.open(t)
    }
}
]).controller("AlertDialogController", ["$scope", "$modalInstance", "params", function(e, n, t) {
    _.assign(e, t)
}
]),
angular.module("pd.common").service("CanvasService", ["$q", "SignatureUtils", function(e, n) {
    var t = 5
      , o = function(e, n, t) {
        return n * t * 4 + 4 * e
    }
      , i = function(e) {
        for (var n = e.getContext("2d"), t = n.getImageData(0, 0, e.width, e.height).data, i = {
            x_max: 0,
            x_min: e.width,
            y_max: 0,
            y_min: e.height,
            width: function() {
                return this.x_max - this.x_min
            },
            height: function() {
                return this.y_max - this.y_min
            }
        }, a = 0; a < e.height; a++)
            for (var s = 0; s < e.width; s++) {
                var l = o(s, a, e.width)
                  , r = l + 3;
                0 !== t[r] && (i.x_max = Math.max(i.x_max, s),
                i.x_min = Math.min(i.x_min, s),
                i.y_max = Math.max(i.y_max, a),
                i.y_min = Math.min(i.y_min, a))
            }
        return i
    }
    ;
    this.crop = function(o) {
        var a = e.defer()
          , s = function(e) {
            a.resolve(n.getJSON(o.toDataURL())),
            window.Raven && window.Raven.captureException(e)
        }
        ;
        try {
            var l = i(o)
              , r = new Image
              , c = Math.min(l.width() + t, o.width)
              , d = Math.min(l.height() + t, o.height)
              , u = Math.min(o.width / c, o.height / d)
              , m = c * u * .98
              , p = d * u * .98
              , g = l.x_min < t ? l.x_min : l.x_min - t
              , f = l.y_min < t ? l.y_min : l.y_min - t
              , b = n.getJSON(o.toDataURL());
            r.src = "data:" + b.dataFormat + "," + b.data,
            r.onload = function() {
                try {
                    var e = document.createElement("canvas");
                    e.width = o.width,
                    e.height = o.height;
                    var t = e.getContext("2d");
                    t.drawImage(r, g, f, c, d, (e.width - m) / 2, .85 * (e.height - p), m, p),
                    a.resolve(n.getJSON(e.toDataURL()))
                } catch (i) {
                    s(i)
                }
            }
        } catch (v) {
            s(v)
        }
        return a.promise
    }
    ,
    this.changeColor = function(e, n) {
        for (var t = e.getContext("2d"), o = t.getImageData(0, 0, e.width, e.height), i = 0; i < o.data.length; i += 4)
            0 !== o.data[i + 3] && (o.data[i] = n.r,
            o.data[i + 1] = n.g,
            o.data[i + 2] = n.b);
        t.strokeStyle = t.fillStyle = t.shadowColor = "rgb(" + [n.r, n.g, n.b].join(",") + ")",
        t.putImageData(o, 0, 0)
    }
}
]),
angular.module("pd.common").service("ColorService", [function() {
    var e = 20;
    this.assignColor = function(n) {
        return n ? (_.each(n, function(n, t) {
            n.color = t % e + 1
        }
        ),
        n) : void 0
    }
}
]),
angular.module("pd.common").service("ConfirmationService", ["ModalService", "$q", function(e, n) {
    var t = !1
      , o = {
        text: "Are you sure?",
        title: "Are you sure?",
        okText: "Yes",
        noText: "No"
    };
    this.confirm = function(i) {
        var a = n.defer();
        if (t)
            return a.reject(),
            a;
        t = !0,
        _.defaults(i, o);
        var s = _.assign({}, {
            controller: "ConfirmationController",
            templateUrl: "/views/common/confirmation-dialog.html",
            windowClass: "modal--maxw500",
            resolve: {
                title: function() {
                    return i.title
                },
                text: function() {
                    return i.text
                },
                okText: function() {
                    return i.okText
                },
                noText: function() {
                    return i.noText
                },
                noButton: function() {
                    return i.noButton === !1 ? !1 : !0
                }
            }
        });
        return e.open(s).then(function(e) {
            t = !1,
            e === !0 ? a.resolve() : a.reject()
        }
        , function(e) {
            t = !1,
            a.reject(e)
        }
        ),
        a.promise
    }
}
]).controller("ConfirmationController", ["$scope", "$modalInstance", "title", "text", "okText", "noText", "noButton", function(e, n, t, o, i, a, s) {
    e.title = t,
    e.text = o,
    e.okText = i,
    e.noText = a,
    e.noButton = s,
    e.yes = function() {
        n.close(!0)
    }
    ,
    e.no = function(e) {
        n.dismiss(e)
    }
}
]),
angular.module("pd.common").service("ContextService", ["$state", "$stateParams", "$q", "$timeout", "Constants", function(e, n, t, o, i) {
    var a = function(n) {
        var t = e.current.name;
        return -1 !== t.indexOf(n) && -1 === t.indexOf("tools-" + n)
    }
    ;
    this.isContentLibrary = function() {
        return a("library")
    }
    ,
    this.isDocuments = function() {
        return a("documents")
    }
    ,
    this.isTemplates = function() {
        return a("templates")
    }
    ,
    this.isState = function(e) {
        return a(e)
    }
    ,
    this.when = function(e, n) {
        var t = _.find(_.keys(e), function(e) {
            var n = e.split(", ");
            return _.any(n, a)
        }
        );
        if (t) {
            var o = e[t];
            return o.apply(null , n)
        }
        return e.otherwise ? e.otherwise.apply(null , n) : void 0
    }
    ;
    var s, l = [];
    this.openDocTool = function(i, a, r) {
        var c = t.defer()
          , d = this;
        return a = a || {},
        r = r || {},
        e.current && -1 !== e.current.name.indexOf(i) && _.isEqual(a, n) ? (o(c.resolve, 100),
        c.promise) : (_.each(l, function(e) {
            e.reject()
        }
        ),
        l = [c],
        o.cancel(s),
        s = o(function() {
            a = a || n,
            r = r || {},
            _.defaults(r, {
                location: "replace"
            });
            var t = d.when({
                documents: function() {
                    return "documents.details."
                },
                templates: function() {
                    return "templates.details."
                },
                inbox: function() {
                    return "inbox.details."
                },
                library: function() {
                    return "library.details."
                }
            });
            e.go(t + i, a, r).then(c.resolve)
        }
        , 100),
        c.promise)
    }
    ,
    this.openDocumentState = function(t, o, i) {
        o = o || n;
        var a = this.when({
            documents: function() {
                return "documents."
            },
            templates: function() {
                return "templates."
            },
            inbox: function() {
                return "inbox."
            },
            library: function() {
                return "library."
            }
        });
        e.go(a + t, o, i)
    }
    ,
    this.openWidgetsDocTool = function(e) {
        var n = e.document.type
          , t = "tools-widgets";
        return (i.DOCUMENT.TYPE.EDITABLE_DOCUMENT === n || i.DOCUMENT.TYPE.EDITABLE_TEMPLATE === n) && (t = "tools-content"),
        this.openDocTool(t)
    }
}
]),
angular.module("pd.common").service("CurrencyService", ["CurrencyList", "Constants", function(e, n) {
    var t = this;
    this.currency_list = e,
    _.each(_.keys(t.currency_list), function(e) {
        var o = t.currency_list[e];
        t.currency_list[e].display_name = o.code + ", " + o.name_plural,
        t.currency_list[e].group = _.contains(n.MAIN_CURRENCIES, e) ? "" : "All currencies"
    }
    ),
    this.getCurrencyList = function() {
        return this.currency_list
    }
    ,
    this.getCurrencyByCode = function(e) {
        return this.currency_list[e]
    }
    ,
    this.getDefaultCurrency = function() {
        return this.currency_list[n.DEFAULT_CURRENCY]
    }
}
]).service("CurrencyFormatException", ["$locale", function(e) {
    var n = function(n, t, o) {
        var i = n.split(e.NUMBER_FORMATS.CURRENCY_SYM).join("")
          , a = _.first(i.split(e.NUMBER_FORMATS.DECIMAL_SEP))
          , s = _.include(i, e.NUMBER_FORMATS.DECIMAL_SEP) ? _.last(i.split(e.NUMBER_FORMATS.DECIMAL_SEP)) : ""
          , l = a.split(e.NUMBER_FORMATS.GROUP_SEP).join(o);
        return s && (l += t + s),
        l
    }
      , t = {
        SEK: {
            apply: function(e) {
                return n(e, ",", " ") + " kr"
            }
        },
        ZAR: {
            apply: function(e) {
                return "R" + n(e, ",", " ")
            }
        },
        CHF: {
            apply: function(e) {
                return "CHF " + n(e, ".", "'")
            }
        }
    };
    this.getException = function(e) {
        return t[e]
    }
}
]).constant("CurrencyList", {
    AED: {
        symbol: "AED",
        name: "United Arab Emirates Dirham",
        symbol_native: "د.إ.‏",
        decimal_digits: 2,
        rounding: 0,
        code: "AED",
        name_plural: "UAE dirhams"
    },
    AFN: {
        symbol: "AFN",
        name: "Afghan Afghani",
        symbol_native: "؋",
        decimal_digits: 0,
        rounding: 0,
        code: "AFN",
        name_plural: "Afghan Afghanis"
    },
    ALL: {
        symbol: "ALL",
        name: "Albanian Lek",
        symbol_native: "Lek",
        decimal_digits: 0,
        rounding: 0,
        code: "ALL",
        name_plural: "Albanian lekë"
    },
    AMD: {
        symbol: "AMD",
        name: "Armenian Dram",
        symbol_native: "դր.",
        decimal_digits: 0,
        rounding: 0,
        code: "AMD",
        name_plural: "Armenian drams"
    },
    AOA: {
        symbol: "AOA",
        name: "Angolan Kwanza",
        symbol_native: "Kz",
        decimal_digits: 2,
        rounding: 0,
        code: "AOA",
        name_plural: "Angolan kwanzas"
    },
    ARS: {
        symbol: "ARS",
        name: "Argentine Peso",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "ARS",
        name_plural: "Argentine pesos"
    },
    AUD: {
        symbol: "$",
        name: "Australian Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "AUD",
        name_plural: "Australian dollars"
    },
    AWG: {
        symbol: "AWG",
        name: "Aruban Florin",
        symbol_native: "Afl.",
        decimal_digits: 2,
        rounding: 0,
        code: "AWG",
        name_plural: "Aruban florin"
    },
    AZN: {
        symbol: "AZN",
        name: "Azerbaijani Manat",
        symbol_native: "ман.",
        decimal_digits: 2,
        rounding: 0,
        code: "AZN",
        name_plural: "Azerbaijani manats"
    },
    BAM: {
        symbol: "BAM",
        name: "Bosnia-Herzegovina Convertible Mark",
        symbol_native: "KM",
        decimal_digits: 2,
        rounding: 0,
        code: "BAM",
        name_plural: "Bosnia-Herzegovina convertible marks"
    },
    BBD: {
        symbol: "BBD",
        name: "Barbadian Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "BBD",
        name_plural: "Barbadian dollars"
    },
    BDT: {
        symbol: "BDT",
        name: "Bangladeshi Taka",
        symbol_native: "৳",
        decimal_digits: 2,
        rounding: 0,
        code: "BDT",
        name_plural: "Bangladeshi takas"
    },
    BGN: {
        symbol: "BGN",
        name: "Bulgarian Lev",
        symbol_native: "лв.",
        decimal_digits: 2,
        rounding: 0,
        code: "BGN",
        name_plural: "Bulgarian leva"
    },
    BHD: {
        symbol: "BHD",
        name: "Bahraini Dinar",
        symbol_native: "د.ب.‏",
        decimal_digits: 3,
        rounding: 0,
        code: "BHD",
        name_plural: "Bahraini dinars"
    },
    BIF: {
        symbol: "BIF",
        name: "Burundian Franc",
        symbol_native: "FBu",
        decimal_digits: 0,
        rounding: 0,
        code: "BIF",
        name_plural: "Burundian francs"
    },
    BMD: {
        symbol: "BMD",
        name: "Bermudan Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "BMD",
        name_plural: "Bermudan dollars"
    },
    BND: {
        symbol: "BND",
        name: "Brunei Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "BND",
        name_plural: "Brunei dollars"
    },
    BOB: {
        symbol: "BOB",
        name: "Bolivian Boliviano",
        symbol_native: "Bs",
        decimal_digits: 2,
        rounding: 0,
        code: "BOB",
        name_plural: "Bolivian bolivianos"
    },
    BRL: {
        symbol: "R$",
        name: "Brazilian Real",
        symbol_native: "R$",
        decimal_digits: 2,
        rounding: 0,
        code: "BRL",
        name_plural: "Brazilian reals"
    },
    BWP: {
        symbol: "BWP",
        name: "Botswanan Pula",
        symbol_native: "P",
        decimal_digits: 2,
        rounding: 0,
        code: "BWP",
        name_plural: "Botswanan pulas"
    },
    BYR: {
        symbol: "BYR",
        name: "Belarusian Ruble",
        symbol_native: "BYR",
        decimal_digits: 0,
        rounding: 0,
        code: "BYR",
        name_plural: "Belarusian rubles"
    },
    BZD: {
        symbol: "BZD",
        name: "Belize Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "BZD",
        name_plural: "Belize dollars"
    },
    CAD: {
        symbol: "CA$",
        name: "Canadian Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "CAD",
        name_plural: "Canadian dollars"
    },
    CDF: {
        symbol: "CDF",
        name: "Congolese Franc",
        symbol_native: "FrCD",
        decimal_digits: 2,
        rounding: 0,
        code: "CDF",
        name_plural: "Congolese francs"
    },
    CHF: {
        symbol: "CHF",
        name: "Swiss Franc",
        symbol_native: "CHF",
        decimal_digits: 2,
        rounding: .05,
        code: "CHF",
        name_plural: "Swiss francs"
    },
    CLP: {
        symbol: "CLP",
        name: "Chilean Peso",
        symbol_native: "$",
        decimal_digits: 0,
        rounding: 0,
        code: "CLP",
        name_plural: "Chilean pesos"
    },
    CNY: {
        symbol: "CN¥",
        name: "Chinese Yuan",
        symbol_native: "CN¥",
        decimal_digits: 2,
        rounding: 0,
        code: "CNY",
        name_plural: "Chinese yuan"
    },
    COP: {
        symbol: "COP",
        name: "Colombian Peso",
        symbol_native: "$",
        decimal_digits: 0,
        rounding: 0,
        code: "COP",
        name_plural: "Colombian pesos"
    },
    CRC: {
        symbol: "CRC",
        name: "Costa Rican Colón",
        symbol_native: "₡",
        decimal_digits: 0,
        rounding: 0,
        code: "CRC",
        name_plural: "Costa Rican colóns"
    },
    CVE: {
        symbol: "CVE",
        name: "Cape Verdean Escudo",
        symbol_native: "CVE",
        decimal_digits: 2,
        rounding: 0,
        code: "CVE",
        name_plural: "Cape Verdean escudos"
    },
    CZK: {
        symbol: "CZK",
        name: "Czech Republic Koruna",
        symbol_native: "Kč",
        decimal_digits: 2,
        rounding: 0,
        code: "CZK",
        name_plural: "Czech Republic korunas"
    },
    DJF: {
        symbol: "DJF",
        name: "Djiboutian Franc",
        symbol_native: "Fdj",
        decimal_digits: 0,
        rounding: 0,
        code: "DJF",
        name_plural: "Djiboutian francs"
    },
    DKK: {
        symbol: "DKK",
        name: "Danish Krone",
        symbol_native: "kr",
        decimal_digits: 2,
        rounding: 0,
        code: "DKK",
        name_plural: "Danish kroner"
    },
    DOP: {
        symbol: "DOP",
        name: "Dominican Peso",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "DOP",
        name_plural: "Dominican pesos"
    },
    DZD: {
        symbol: "DZD",
        name: "Algerian Dinar",
        symbol_native: "د.ج.‏",
        decimal_digits: 2,
        rounding: 0,
        code: "DZD",
        name_plural: "Algerian dinars"
    },
    EGP: {
        symbol: "EGP",
        name: "Egyptian Pound",
        symbol_native: "ج.م.‏",
        decimal_digits: 2,
        rounding: 0,
        code: "EGP",
        name_plural: "Egyptian pounds"
    },
    ERN: {
        symbol: "ERN",
        name: "Eritrean Nakfa",
        symbol_native: "Nfk",
        decimal_digits: 2,
        rounding: 0,
        code: "ERN",
        name_plural: "Eritrean nakfas"
    },
    ETB: {
        symbol: "ETB",
        name: "Ethiopian Birr",
        symbol_native: "ብር",
        decimal_digits: 2,
        rounding: 0,
        code: "ETB",
        name_plural: "Ethiopian birrs"
    },
    EUR: {
        symbol: "€",
        name: "Euro",
        symbol_native: "€",
        decimal_digits: 2,
        rounding: 0,
        code: "EUR",
        name_plural: "Euros"
    },
    GBP: {
        symbol: "£",
        name: "British Pound Sterling",
        symbol_native: "£",
        decimal_digits: 2,
        rounding: 0,
        code: "GBP",
        name_plural: "British pounds sterling"
    },
    GEL: {
        symbol: "GEL",
        name: "Georgian Lari",
        symbol_native: "GEL",
        decimal_digits: 2,
        rounding: 0,
        code: "GEL",
        name_plural: "Georgian laris"
    },
    GHS: {
        symbol: "GHS",
        name: "Ghanaian Cedi",
        symbol_native: "GHS",
        decimal_digits: 2,
        rounding: 0,
        code: "GHS",
        name_plural: "Ghanaian cedis"
    },
    GNF: {
        symbol: "GNF",
        name: "Guinean Franc",
        symbol_native: "FG",
        decimal_digits: 0,
        rounding: 0,
        code: "GNF",
        name_plural: "Guinean francs"
    },
    GTQ: {
        symbol: "GTQ",
        name: "Guatemalan Quetzal",
        symbol_native: "Q",
        decimal_digits: 2,
        rounding: 0,
        code: "GTQ",
        name_plural: "Guatemalan quetzals"
    },
    GYD: {
        symbol: "GYD",
        name: "Guyanaese Dollar",
        symbol_native: "GYD",
        decimal_digits: 0,
        rounding: 0,
        code: "GYD",
        name_plural: "Guyanaese dollars"
    },
    HKD: {
        symbol: "HK$",
        name: "Hong Kong Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "HKD",
        name_plural: "Hong Kong dollars"
    },
    HNL: {
        symbol: "HNL",
        name: "Honduran Lempira",
        symbol_native: "L",
        decimal_digits: 2,
        rounding: 0,
        code: "HNL",
        name_plural: "Honduran lempiras"
    },
    HRK: {
        symbol: "HRK",
        name: "Croatian Kuna",
        symbol_native: "kn",
        decimal_digits: 2,
        rounding: 0,
        code: "HRK",
        name_plural: "Croatian kunas"
    },
    HUF: {
        symbol: "HUF",
        name: "Hungarian Forint",
        symbol_native: "Ft",
        decimal_digits: 0,
        rounding: 0,
        code: "HUF",
        name_plural: "Hungarian forints"
    },
    IDR: {
        symbol: "IDR",
        name: "Indonesian Rupiah",
        symbol_native: "Rp",
        decimal_digits: 0,
        rounding: 0,
        code: "IDR",
        name_plural: "Indonesian rupiahs"
    },
    ILS: {
        symbol: "₪",
        name: "Israeli New Sheqel",
        symbol_native: "₪",
        decimal_digits: 2,
        rounding: 0,
        code: "ILS",
        name_plural: "Israeli new sheqels"
    },
    INR: {
        symbol: "₹",
        name: "Indian Rupee",
        symbol_native: "₹",
        decimal_digits: 2,
        rounding: 0,
        code: "INR",
        name_plural: "Indian rupees"
    },
    IQD: {
        symbol: "IQD",
        name: "Iraqi Dinar",
        symbol_native: "د.ع.‏",
        decimal_digits: 0,
        rounding: 0,
        code: "IQD",
        name_plural: "Iraqi dinars"
    },
    IRR: {
        symbol: "IRR",
        name: "Iranian Rial",
        symbol_native: "﷼",
        decimal_digits: 0,
        rounding: 0,
        code: "IRR",
        name_plural: "Iranian rials"
    },
    ISK: {
        symbol: "ISK",
        name: "Icelandic Króna",
        symbol_native: "kr",
        decimal_digits: 0,
        rounding: 0,
        code: "ISK",
        name_plural: "Icelandic krónur"
    },
    JMD: {
        symbol: "JMD",
        name: "Jamaican Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "JMD",
        name_plural: "Jamaican dollars"
    },
    JOD: {
        symbol: "JOD",
        name: "Jordanian Dinar",
        symbol_native: "د.أ.‏",
        decimal_digits: 3,
        rounding: 0,
        code: "JOD",
        name_plural: "Jordanian dinars"
    },
    JPY: {
        symbol: "¥",
        name: "Japanese Yen",
        symbol_native: "￥",
        decimal_digits: 0,
        rounding: 0,
        code: "JPY",
        name_plural: "Japanese yen"
    },
    KES: {
        symbol: "KES",
        name: "Kenyan Shilling",
        symbol_native: "Ksh",
        decimal_digits: 2,
        rounding: 0,
        code: "KES",
        name_plural: "Kenyan shillings"
    },
    KHR: {
        symbol: "KHR",
        name: "Cambodian Riel",
        symbol_native: "៛",
        decimal_digits: 2,
        rounding: 0,
        code: "KHR",
        name_plural: "Cambodian riels"
    },
    KMF: {
        symbol: "KMF",
        name: "Comorian Franc",
        symbol_native: "CF",
        decimal_digits: 0,
        rounding: 0,
        code: "KMF",
        name_plural: "Comorian francs"
    },
    KRW: {
        symbol: "₩",
        name: "South Korean Won",
        symbol_native: "₩",
        decimal_digits: 0,
        rounding: 0,
        code: "KRW",
        name_plural: "South Korean won"
    },
    KWD: {
        symbol: "KWD",
        name: "Kuwaiti Dinar",
        symbol_native: "د.ك.‏",
        decimal_digits: 3,
        rounding: 0,
        code: "KWD",
        name_plural: "Kuwaiti dinars"
    },
    KZT: {
        symbol: "KZT",
        name: "Kazakhstani Tenge",
        symbol_native: "₸",
        decimal_digits: 2,
        rounding: 0,
        code: "KZT",
        name_plural: "Kazakhstani tenges"
    },
    LBP: {
        symbol: "LBP",
        name: "Lebanese Pound",
        symbol_native: "ل.ل.‏",
        decimal_digits: 0,
        rounding: 0,
        code: "LBP",
        name_plural: "Lebanese pounds"
    },
    LKR: {
        symbol: "LKR",
        name: "Sri Lankan Rupee",
        symbol_native: "රු.",
        decimal_digits: 2,
        rounding: 0,
        code: "LKR",
        name_plural: "Sri Lankan rupees"
    },
    LRD: {
        symbol: "LRD",
        name: "Liberian Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "LRD",
        name_plural: "Liberian dollars"
    },
    LTL: {
        symbol: "LTL",
        name: "Lithuanian Litas",
        symbol_native: "Lt",
        decimal_digits: 2,
        rounding: 0,
        code: "LTL",
        name_plural: "Lithuanian litai"
    },
    LVL: {
        symbol: "LVL",
        name: "Latvian Lats",
        symbol_native: "Ls",
        decimal_digits: 2,
        rounding: 0,
        code: "LVL",
        name_plural: "Latvian lati"
    },
    LYD: {
        symbol: "LYD",
        name: "Libyan Dinar",
        symbol_native: "د.ل.‏",
        decimal_digits: 3,
        rounding: 0,
        code: "LYD",
        name_plural: "Libyan dinars"
    },
    MAD: {
        symbol: "MAD",
        name: "Moroccan Dirham",
        symbol_native: "د.م.‏",
        decimal_digits: 2,
        rounding: 0,
        code: "MAD",
        name_plural: "Moroccan dirhams"
    },
    MDL: {
        symbol: "MDL",
        name: "Moldovan Leu",
        symbol_native: "MDL",
        decimal_digits: 2,
        rounding: 0,
        code: "MDL",
        name_plural: "Moldovan lei"
    },
    MGA: {
        symbol: "MGA",
        name: "Malagasy Ariary",
        symbol_native: "MGA",
        decimal_digits: 0,
        rounding: 0,
        code: "MGA",
        name_plural: "Malagasy Ariaries"
    },
    MKD: {
        symbol: "MKD",
        name: "Macedonian Denar",
        symbol_native: "MKD",
        decimal_digits: 2,
        rounding: 0,
        code: "MKD",
        name_plural: "Macedonian denari"
    },
    MMK: {
        symbol: "MMK",
        name: "Myanma Kyat",
        symbol_native: "K",
        decimal_digits: 0,
        rounding: 0,
        code: "MMK",
        name_plural: "Myanma kyats"
    },
    MOP: {
        symbol: "MOP",
        name: "Macanese Pataca",
        symbol_native: "MOP",
        decimal_digits: 2,
        rounding: 0,
        code: "MOP",
        name_plural: "Macanese patacas"
    },
    MUR: {
        symbol: "MUR",
        name: "Mauritian Rupee",
        symbol_native: "MUR",
        decimal_digits: 0,
        rounding: 0,
        code: "MUR",
        name_plural: "Mauritian rupees"
    },
    MXN: {
        symbol: "MX$",
        name: "Mexican Peso",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "MXN",
        name_plural: "Mexican pesos"
    },
    MYR: {
        symbol: "MYR",
        name: "Malaysian Ringgit",
        symbol_native: "RM",
        decimal_digits: 2,
        rounding: 0,
        code: "MYR",
        name_plural: "Malaysian ringgits"
    },
    MZN: {
        symbol: "MZN",
        name: "Mozambican Metical",
        symbol_native: "MTn",
        decimal_digits: 2,
        rounding: 0,
        code: "MZN",
        name_plural: "Mozambican meticals"
    },
    NAD: {
        symbol: "NAD",
        name: "Namibian Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "NAD",
        name_plural: "Namibian dollars"
    },
    NGN: {
        symbol: "NGN",
        name: "Nigerian Naira",
        symbol_native: "₦",
        decimal_digits: 2,
        rounding: 0,
        code: "NGN",
        name_plural: "Nigerian nairas"
    },
    NIO: {
        symbol: "NIO",
        name: "Nicaraguan Córdoba",
        symbol_native: "C$",
        decimal_digits: 2,
        rounding: 0,
        code: "NIO",
        name_plural: "Nicaraguan córdobas"
    },
    NOK: {
        symbol: "NOK",
        name: "Norwegian Krone",
        symbol_native: "kr",
        decimal_digits: 2,
        rounding: 0,
        code: "NOK",
        name_plural: "Norwegian kroner"
    },
    NPR: {
        symbol: "NPR",
        name: "Nepalese Rupee",
        symbol_native: "नेरू",
        decimal_digits: 2,
        rounding: 0,
        code: "NPR",
        name_plural: "Nepalese rupees"
    },
    NZD: {
        symbol: "NZ$",
        name: "New Zealand Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "NZD",
        name_plural: "New Zealand dollars"
    },
    OMR: {
        symbol: "OMR",
        name: "Omani Rial",
        symbol_native: "ر.ع.‏",
        decimal_digits: 3,
        rounding: 0,
        code: "OMR",
        name_plural: "Omani rials"
    },
    PAB: {
        symbol: "PAB",
        name: "Panamanian Balboa",
        symbol_native: "B/.",
        decimal_digits: 2,
        rounding: 0,
        code: "PAB",
        name_plural: "Panamanian balboas"
    },
    PEN: {
        symbol: "PEN",
        name: "Peruvian Nuevo Sol",
        symbol_native: "S/.",
        decimal_digits: 2,
        rounding: 0,
        code: "PEN",
        name_plural: "Peruvian nuevos soles"
    },
    PGK: {
        symbol: "K",
        name: "Papua New Guinean kina",
        symbol_native: "K",
        decimal_digits: 2,
        rounding: 0,
        code: "PGK",
        name_plural: "Papua New Guinean kina"
    },
    PHP: {
        symbol: "PHP",
        name: "Philippine Peso",
        symbol_native: "₱",
        decimal_digits: 2,
        rounding: 0,
        code: "PHP",
        name_plural: "Philippine pesos"
    },
    PKR: {
        symbol: "PKR",
        name: "Pakistani Rupee",
        symbol_native: "₨",
        decimal_digits: 0,
        rounding: 0,
        code: "PKR",
        name_plural: "Pakistani rupees"
    },
    PLN: {
        symbol: "PLN",
        name: "Polish Zloty",
        symbol_native: "zł",
        decimal_digits: 2,
        rounding: 0,
        code: "PLN",
        name_plural: "Polish zlotys"
    },
    PYG: {
        symbol: "PYG",
        name: "Paraguayan Guarani",
        symbol_native: "₲",
        decimal_digits: 0,
        rounding: 0,
        code: "PYG",
        name_plural: "Paraguayan guaranis"
    },
    QAR: {
        symbol: "QAR",
        name: "Qatari Rial",
        symbol_native: "ر.ق.‏",
        decimal_digits: 2,
        rounding: 0,
        code: "QAR",
        name_plural: "Qatari rials"
    },
    RON: {
        symbol: "RON",
        name: "Romanian Leu",
        symbol_native: "RON",
        decimal_digits: 2,
        rounding: 0,
        code: "RON",
        name_plural: "Romanian lei"
    },
    RSD: {
        symbol: "RSD",
        name: "Serbian Dinar",
        symbol_native: "дин.",
        decimal_digits: 0,
        rounding: 0,
        code: "RSD",
        name_plural: "Serbian dinars"
    },
    RUB: {
        symbol: "RUB",
        name: "Russian Ruble",
        symbol_native: "руб.",
        decimal_digits: 2,
        rounding: 0,
        code: "RUB",
        name_plural: "Russian rubles"
    },
    RWF: {
        symbol: "RWF",
        name: "Rwandan Franc",
        symbol_native: "FR",
        decimal_digits: 0,
        rounding: 0,
        code: "RWF",
        name_plural: "Rwandan francs"
    },
    SAR: {
        symbol: "SAR",
        name: "Saudi Riyal",
        symbol_native: "ر.س.‏",
        decimal_digits: 2,
        rounding: 0,
        code: "SAR",
        name_plural: "Saudi riyals"
    },
    SDG: {
        symbol: "SDG",
        name: "Sudanese Pound",
        symbol_native: "SDG",
        decimal_digits: 2,
        rounding: 0,
        code: "SDG",
        name_plural: "Sudanese pounds"
    },
    SEK: {
        symbol: "SEK",
        name: "Swedish Krona",
        symbol_native: "kr",
        decimal_digits: 2,
        rounding: 0,
        code: "SEK",
        name_plural: "Swedish kronor"
    },
    SGD: {
        symbol: "SGD",
        name: "Singapore Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "SGD",
        name_plural: "Singapore dollars"
    },
    SOS: {
        symbol: "SOS",
        name: "Somali Shilling",
        symbol_native: "SOS",
        decimal_digits: 0,
        rounding: 0,
        code: "SOS",
        name_plural: "Somali shillings"
    },
    STD: {
        symbol: "STD",
        name: "São Tomé and Príncipe Dobra",
        symbol_native: "Db",
        decimal_digits: 0,
        rounding: 0,
        code: "STD",
        name_plural: "São Tomé and Príncipe dobras"
    },
    SYP: {
        symbol: "SYP",
        name: "Syrian Pound",
        symbol_native: "ل.س.‏",
        decimal_digits: 0,
        rounding: 0,
        code: "SYP",
        name_plural: "Syrian pounds"
    },
    THB: {
        symbol: "฿",
        name: "Thai Baht",
        symbol_native: "฿",
        decimal_digits: 2,
        rounding: 0,
        code: "THB",
        name_plural: "Thai baht"
    },
    TND: {
        symbol: "TND",
        name: "Tunisian Dinar",
        symbol_native: "د.ت.‏",
        decimal_digits: 3,
        rounding: 0,
        code: "TND",
        name_plural: "Tunisian dinars"
    },
    TOP: {
        symbol: "TOP",
        name: "Tongan Paʻanga",
        symbol_native: "T$",
        decimal_digits: 2,
        rounding: 0,
        code: "TOP",
        name_plural: "Tongan paʻanga"
    },
    TRY: {
        symbol: "TRY",
        name: "Turkish Lira",
        symbol_native: "TL",
        decimal_digits: 2,
        rounding: 0,
        code: "TRY",
        name_plural: "Turkish Lira"
    },
    TTD: {
        symbol: "TTD",
        name: "Trinidad and Tobago Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "TTD",
        name_plural: "Trinidad and Tobago dollars"
    },
    TWD: {
        symbol: "NT$",
        name: "New Taiwan Dollar",
        symbol_native: "NT$",
        decimal_digits: 2,
        rounding: 0,
        code: "TWD",
        name_plural: "New Taiwan dollars"
    },
    TZS: {
        symbol: "TZS",
        name: "Tanzanian Shilling",
        symbol_native: "TSh",
        decimal_digits: 0,
        rounding: 0,
        code: "TZS",
        name_plural: "Tanzanian shillings"
    },
    UAH: {
        symbol: "UAH",
        name: "Ukrainian Hryvnia",
        symbol_native: "₴",
        decimal_digits: 2,
        rounding: 0,
        code: "UAH",
        name_plural: "Ukrainian hryvnias"
    },
    UF: {
        symbol: "UF",
        name: "Unidad de Fomento",
        symbol_native: "UF",
        decimal_digits: 0,
        rounding: 0,
        code: "UF",
        name_plural: "Unidad de Fomento"
    },
    UGX: {
        symbol: "UGX",
        name: "Ugandan Shilling",
        symbol_native: "USh",
        decimal_digits: 0,
        rounding: 0,
        code: "UGX",
        name_plural: "Ugandan shillings"
    },
    USD: {
        symbol: "$",
        name: "US Dollar",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "USD",
        name_plural: "US dollars"
    },
    UYU: {
        symbol: "UYU",
        name: "Uruguayan Peso",
        symbol_native: "$",
        decimal_digits: 2,
        rounding: 0,
        code: "UYU",
        name_plural: "Uruguayan pesos"
    },
    UZS: {
        symbol: "UZS",
        name: "Uzbekistan Som",
        symbol_native: "UZS",
        decimal_digits: 0,
        rounding: 0,
        code: "UZS",
        name_plural: "Uzbekistan som"
    },
    VEF: {
        symbol: "VEF",
        name: "Venezuelan Bolívar",
        symbol_native: "Bs.F.",
        decimal_digits: 2,
        rounding: 0,
        code: "VEF",
        name_plural: "Venezuelan bolívars"
    },
    VND: {
        symbol: "₫",
        name: "Vietnamese Dong",
        symbol_native: "₫",
        decimal_digits: 0,
        rounding: 0,
        code: "VND",
        name_plural: "Vietnamese dong"
    },
    XAF: {
        symbol: "FCFA",
        name: "CFA Franc BEAC",
        symbol_native: "FCFA",
        decimal_digits: 0,
        rounding: 0,
        code: "XAF",
        name_plural: "CFA francs BEAC"
    },
    XOF: {
        symbol: "CFA",
        name: "CFA Franc BCEAO",
        symbol_native: "CFA",
        decimal_digits: 0,
        rounding: 0,
        code: "XOF",
        name_plural: "CFA francs BCEAO"
    },
    YER: {
        symbol: "YER",
        name: "Yemeni Rial",
        symbol_native: "ر.ي.‏",
        decimal_digits: 0,
        rounding: 0,
        code: "YER",
        name_plural: "Yemeni rials"
    },
    ZAR: {
        symbol: "ZAR",
        name: "South African Rand",
        symbol_native: "R",
        decimal_digits: 2,
        rounding: 0,
        code: "ZAR",
        name_plural: "South African rand"
    },
    ZMK: {
        symbol: "ZMK",
        name: "Zambian Kwacha",
        symbol_native: "ZK",
        decimal_digits: 0,
        rounding: 0,
        code: "ZMK",
        name_plural: "Zambian kwachas"
    }
}),
angular.module("pd.common").service("CustomCssService", ["Config", function(e) {
    var n = "customCssLink"
      , t = "oldCustomCssLink";
    this.loadTheme = function(o, i, a) {
        var s, l = (new Date).getTime();
        $("#" + n).attr("id", t),
        s = $("<link>", {
            href: e.APIBaseURL + o.css_url + "&v2=" + l + (i ? "&compile=" + i : ""),
            type: "text/css",
            rel: "stylesheet",
            media: "screen,print",
            id: n
        }),
        s.on("load", function() {
            $("#" + t).remove(),
            a && a.onLoad && a.onLoad()
        }
        ),
        s.appendTo("head")
    }
    ,
    this.cleanCss = function() {
        $("#" + t).remove(),
        $("#" + n).remove()
    }
}
]),
angular.module("pd.common").service("DoubleClickService", ["$timeout", function(e) {
    this.differ = function(n, t) {
        var o;
        return function() {
            var i = arguments;
            o ? (e.cancel(o),
            t.apply(null , i),
            o = null ) : o = e(function() {
                n.apply(null , i),
                o = null 
            }
            , 300)
        }
    }
}
]),
angular.module("pd.common").service("EditorDialog", ["ModalService", function(e) {
    this.open = function(n, t) {
        var o = {
            templateUrl: "/views/common/dialogs/editor-dialog.html",
            controller: "EditorDialogController",
            resolve: {
                content: function() {
                    return "" + n
                },
                aceParams: function() {
                    return t
                }
            }
        };
        return e.open(o)
    }
}
]).controller("EditorDialogController", ["$scope", "content", "aceParams", function(e, n, t) {
    var o;
    e.editorLoaded = function(e) {
        o = e,
        o.focus(),
        t.onLoad && t.onLoad(e)
    }
    ,
    e.content = n,
    e.aceParams = _.defaults({
        onLoad: e.editorLoaded
    }, t)
}
]),
angular.module("pd.common").service("EmailValidationService", [function() {
    var e = "(\\s*)([a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)"
      , n = new RegExp("^" + e + "$","i");
    this.isValid = function(e) {
        return e && n.test(e)
    }
}
]),
angular.module("pd.common").service("FileProcessor", ["FileService", "$q", "Constants", function(e, n, t) {
    var o, i = 2e3, a = 5, s = !1, l = 0, r = function(e) {
        return function() {
            l += 1,
            s = !1,
            l >= a && (c(),
            e.reject())
        }
    }
    , c = function() {
        clearInterval(o),
        l = 0,
        s = !1
    }
    , d = function(n, a) {
        return c(),
        o = setInterval(function() {
            s || (s = !0,
            e.getFileProcessingProgress(n.uuid).then(function(e) {
                s = !1,
                e.is_error ? (c(),
                a.reject()) : e.is_done || 100 === e.progress ? (clearInterval(o),
                a.resolve(n.uuid)) : a.notify({
                    pages_done: e.pages_done,
                    pages_total: e.pages_total,
                    progress: t.FILE_PROCESSING_PROVIDER.DOC_PROCESSOR === n.provider ? e.progress / 100 : .5
                })
            }
            , r(a)))
        }
        , i),
        a.promise
    }
    , u = function(e, t) {
        c();
        var a = n.defer();
        return o = setInterval(function() {
            s || (s = !0,
            t(e).then(function(e) {
                clearInterval(o),
                d(e, a)
            }
            , r(a)))
        }
        , i),
        a.promise
    }
    ;
    this.processNewRevision = function(n) {
        return u(n, e.startNewRevisionProcessing)
    }
    ,
    this.processFile = function(n) {
        return u(n, e.startProcessing)
    }
    ,
    this.stopProcessing = function() {
        c()
    }
}
]),
angular.module("pd.common").service("GetMeAsContactService", ["ProfileService", "ContactsService", "$q", function(e, n, t) {
    this.get = function() {
        var n = t.defer();
        return e.getProfile().then(function(e) {
            e.actor ? o(e).then(n.resolve, function() {
                i(e).then(n.resolve, n.reject)
            }
            ) : i(e).then(n.resolve, n.reject)
        }
        ),
        n.promise
    }
    ;
    var o = function(e) {
        return n.getContactById(e.actor)
    }
      , i = function(e) {
        var t = _.pick(e, ["first_name", "last_name", "email"]);
        return n.addContact(t)
    }
}
]),
angular.module("pd.common").service("GoogleFontsService", ["$window", function(e) {
    return e.WebFontConfig || (e.WebFontConfig = {
        google: {
            families: []
        }
    }),
    {
        loadFonts: function(n) {
            var t = _.map(n, function(e) {
                return e = e.replace(" ", "+"),
                e += "::latin"
            }
            );
            e.WebFontConfig.google.families = _.union(e.WebFontConfig.google.families, t);
            var o = document.createElement("script");
            o.src = ("https:" == document.location.protocol ? "https" : "http") + "://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js",
            o.type = "text/javascript",
            o.async = "true";
            var i = document.getElementsByTagName("script")[0];
            i.parentNode.insertBefore(o, i)
        }
    }
}
]),
angular.module("pd.common").service("HelpService", ["ModalService", "LocalStoreService", "$rootScope", function(e, n, t) {
    this._welcomeDialogs = [],
    this.registerWelcomeDialog = function(e, n) {
        this._welcomeDialogs.push(_.assign({
            key: e
        }, n))
    }
    ,
    this.dialog = function(o) {
        var i = _.where(this._welcomeDialogs, {
            key: o
        })[0];
        if (i && !n.getBool(i.profileStateName)) {
            var a = _.assign(i || {}, {
                controller: "HelpServiceWelcomeDialogController",
                resolve: {
                    config: function() {
                        return i
                    }
                }
            })
              , s = function() {
                n.set(i.profileStateName, !0),
                _.isFunction(i.done) && i.done(),
                t.$broadcast("help.dialog.closed", {
                    dialog: o
                })
            }
            ;
            e.open(a).then(s, s),
            t.$broadcast("help.dialog.opened", {
                dialog: o
            })
        }
    }
}
]).controller("HelpServiceWelcomeDialogController", ["$scope", "$modalInstance", "config", function(e, n, t) {
    _.assign(e, t),
    e.close = function() {
        n.close()
    }
}
]),
angular.module("pd.common").service("HotKeysService", [function() {
    return {
        bind: function(e, n, t, o) {
            Mousetrap.bind(n, function(n, o) {
                return e.$apply(t(n, o))
            }
            , o),
            e.$on("$destroy", function() {
                Mousetrap.unbind(n, o)
            }
            )
        }
    }
}
]),
angular.module("pd.common").service("Html5MessageService", ["$window", function(e) {
    var n = e.addEventListener ? {
        method: "addEventListener",
        name: "message"
    } : {
        method: "attachEvent",
        name: "onmessage"
    }
      , t = [];
    window[n.method](n.name, function(e) {
        if (e && e.data)
            try {
                var n = JSON.parse(e.data);
                if (n.message) {
                    var o = _.filter(t, {
                        message: n.message
                    });
                    _.each(o, function(e) {
                        e.handler.call(null , n.data)
                    }
                    )
                }
            } catch (e) {}
    }
    , !1);
    var o = function(e, n) {
        e && e.postMessage(n, "*")
    }
    ;
    this.postToParent = function(n, t) {
        t = t || {};
        var i = JSON.stringify({
            event: n,
            data: t
        });
        o(e.parent, i)
    }
    ,
    this.post = function(e, n) {
        o(e, n)
    }
    ,
    this.subscribe = function(e, n) {
        var o = _.uniqueId("message-subscription-");
        return t.push({
            id: o,
            message: e,
            handler: n
        }),
        function() {
            t = _.without(t, {
                id: o
            })
        }
    }
}
]),
angular.module("pd.common").service("HtmlEditorDialog", ["EditorDialog", "ConfirmationService", "$q", function(e, n, t) {
    this.open = function(o, i) {
        var a = t.defer()
          , s = function(t) {
            t.indexOf("http://") + 1 === 0 ? a.resolve(t) : n.confirm({
                title: "Your document has not been saved",
                text: "It looks like your HTML code contains an insecure content loaded over 'http://'. PandaDoc uses secure HTTPS connection, so some browsers might block your content. Please make sure you use HTTPS for all your resources.",
                okText: "Proceed",
                noText: "Back to Editing"
            }).then(function() {
                a.resolve(t)
            }
            , function() {
                e.open(t, i).then(s)
            }
            )
        }
        ;
        return e.open(o, i).then(s),
        a.promise
    }
}
]),
angular.module("pd.common").service("LocalStoreService", ["localStorageService", function(e) {
    this.get = function(n) {
        return e.get(n)
    }
    ,
    this.set = function(n, t) {
        e.set(n, t)
    }
    ,
    this.setString = function(n, t) {
        e.set(n, t)
    }
    ,
    this.getString = function(e) {
        var n = this.get(e);
        if (n)
            try {
                return angular.fromJson(n)
            } catch (t) {}
        return n
    }
    ,
    this.getBool = function(e) {
        var n = this.get(e);
        return n === !0 || "true" === n
    }
    ,
    this.getObject = function(e) {
        return this.get(e) || {}
    }
}
]),
angular.module("pd.common").service("ModalService", ["$modal", "$q", "$modalStack", "$timeout", function(e, n, t, o) {
    var i = [];
    this.isOpened = function(e) {
        return -1 !== i.indexOf(e)
    }
    ,
    this.open = function(t) {
        var o = n.defer()
          , a = e.open(t);
        a.opened.then(function() {
            t.controller && -1 === i.indexOf(t.controller) && i.push(t.controller),
            a.result.then(o.resolve, o.reject)
        }
        );
        var s = function() {
            t.controller && (i = _.reject(i, function(e) {
                return e === t.controller
            }
            ))
        }
        ;
        return a.result.then(s, s),
        o.promise
    }
    ;
    var a, s;
    this.openSingleton = function(t) {
        s && (o.cancel(s),
        s = null ),
        a && a.dismiss();
        var i = n.defer();
        return s = o(function() {
            a = e.open(t),
            a.opened.then(function() {
                a.result.then(function(e) {
                    i.resolve(e),
                    a = null 
                }
                , function(e) {
                    i.reject(e),
                    a = null 
                }
                )
            }
            )
        }
        , 50),
        i.promise
    }
}
]),
angular.module("pd.common").service("MultipleRequestService", ["$q", function(e) {
    var n = function(e, n, t, o) {
        return n[t] = e,
        o + 1
    }
      , t = function(e, n, t, o) {
        n === t ? o.resolve(e) : o.notify(e)
    }
    ;
    this.execute = function(o, i) {
        if (o && !_.isEmpty(o)) {
            var a = e.defer()
              , s = o.length
              , l = 0
              , r = [];
            return _.each(o, function(e, o) {
                e.request.apply(null , e.args).then(function(e) {
                    l = n(e, r, o, l),
                    t(r, l, s, a)
                }
                , function(e) {
                    i === !0 ? a.reject(e) : (l = n([], r, o, l),
                    t(r, l, s, a))
                }
                )
            }
            ),
            a.promise
        }
    }
}
]),
angular.module("pd.common").service("NotificationFilterService", ["$q", "ProfileService", "Config", "$rootScope", "Constants", function(e, n, t, o, i) {
    var a, s = [], l = function(e) {
        return e.type && e.type === i.DOCUMENT.ACTION.ALL_RECIPIENTS_COMPLETED
    }
    , r = function(e) {
        var n = e.actor || e.owner;
        return a.email !== n.email
    }
    , c = function(e) {
        return r(e) || l(e)
    }
    , d = function(e, n) {
        c(e) ? n.resolve(e) : n.reject("not interested")
    }
    ;
    this.filterNotification = function(n) {
        var t = e.defer();
        return a ? d(n, t) : s.push({
            deferred: t,
            notification: n
        }),
        t.promise
    }
    ;
    var u = function(e) {
        a = e,
        _.each(s, function(e) {
            d(e.notification, e.deferred)
        }
        ),
        s = []
    }
    ;
    t.application.app || t.application.sdk ? n.getProfile().then(u) : (t.application.viewer || t.application.session_view) && o.$on("profile.initialized", function(e, n) {
        u(n)
    }
    )
}
]),
angular.module("pd.common").service("OnboardingService", ["ModalService", "LocalStoreService", "$rootScope", "$http", "Config", "$interpolate", "PropertiesService", "ProfileService", "$q", "$timeout", "NotificationCenter", function(e, n, t, o, i, a, s, l, r, c, d) {
    var u = this;
    this.dialog = function(e, n) {
        var t = u._getConfig(e);
        t && (t.showImmediately ? u._dialog(e, n) : (u._dialogs.push({
            key: e,
            callback: n
        }),
        1 === u._dialogs.length && u._showNextDialog()))
    }
    ,
    this.banner = function(e, n) {
        s.get().then(function(t) {
            l.getProfile().then(function(o) {
                var i = _.find(e, function(e) {
                    var n = u._getConfig(e);
                    return n && (u._isDebug(e) || !u._isOnboardingShownForScope(t, n, e) && u._isCorrectDates(o, n))
                }
                );
                i && n(i)
            }
            )
        }
        )
    }
    ,
    this.markOnboardingAsShown = function(e) {
        var n = u._getConfig(e);
        n && s.set(n.tag, n.onboardingId, !0)
    }
    ,
    this.registerOnboarding = function(e, n) {
        this._onboardingConfigs.push(_.assign({
            key: e
        }, n))
    }
    ,
    this.loadData = function(e) {
        o.get(i.staticBaseURL + i.onboardingBaseUrl + e.onboardingId + ".json").then(function(n) {
            n.data && _.isObject(n.data) && _.isObject(n.data["public"]) && _.extend(e, u._interpolate(n.data["public"], e))
        }
        )
    }
    ,
    this._onboardingConfigs = [],
    this._dialogs = [],
    this._currentDialog = null ,
    this._queue = [],
    this._interpolate = function(e, n) {
        var t = _.isArray(e) ? [] : {};
        return _.each(e, function(e, o) {
            t[o] = _.isString(e) ? a(e)(n) : _.isObject(e) ? u._interpolate(e, n) : e
        }
        ),
        t
    }
    ,
    this._openDialog = function(n, o) {
        var i = _.assign(n || {}, {
            controller: "OnboardingServiceDialogController",
            resolve: {
                config: function() {
                    return n
                }
            },
            windowTemplateUrl: "/views/onboarding/layout-" + n.layout + ".html"
        })
          , a = function() {
            _.isFunction(n.done) && n.done(),
            o && o(!0),
            t.$broadcast("onboarding.dialog.closed", {
                dialog: n.onboardingId
            }),
            n.showImmediately || (u.markOnboardingAsShown(n.onboardingId),
            c(function() {
                u._showNextDialog()
            }
            , 800))
        }
        ;
        e.open(i).then(a, a),
        t.$broadcast("onboarding.dialog.opened", {
            dialog: n.onboardingId
        })
    }
    ,
    this._isOnboardingShownForScope = function(e, n, t) {
        return _.has(e, n.tag) && _.has(e[n.tag], t) && e[n.tag][t]
    }
    ,
    this._isDebug = function(e) {
        return n.getBool("onboarding-debug") || n.getBool(e)
    }
    ,
    this._isCorrectDates = function(e, n) {
        var t = moment.utc(e.date_registered ? e.date_registered : e.date_joined)
          , o = n.before ? moment.utc(n.before, "YYYY-MM-DD:HH:mm:ss") : t
          , i = n.after ? moment.utc(n.after, "YYYY-MM-DD:HH:mm:ss") : t
          , a = (t.isBefore(o) || t.isSame(o)) && (t.isAfter(i) || t.isSame(i));
        return a
    }
    ,
    this._runDeferdActions = function() {
        _.each(u._queue, function(e) {
            e.resolve(!0)
        }
        ),
        u._queue = []
    }
    ,
    this._showNextDialog = function() {
        u._dialogs.length > 0 ? (d.disable(),
        u._currentDialog && (u._dialogs.shift(),
        u._currentDialog = null ),
        u._dialogs.length > 0 ? (u._currentDialog = u._dialogs[0],
        u._dialog(u._currentDialog.key, u._currentDialog.callback)) : (u._runDeferdActions(),
        d.enable())) : (d.enable(),
        u._runDeferdActions())
    }
    ,
    this._getConfig = function(e) {
        var n;
        return n = _.where(u._onboardingConfigs, {
            key: e
        })[0],
        n && (n.onboardingId = e),
        n
    }
    ,
    this._dialog = function(e, n) {
        var t = u._getConfig(e);
        t && (t.showImmediately ? u._openDialog(t, n) : s.get().then(function(o) {
            l.getProfile().then(function(i) {
                u._isDebug(e) || !u._isOnboardingShownForScope(o, t, e) && u._isCorrectDates(i, t) ? u._openDialog(t, n) : (n && n(!1),
                u._showNextDialog())
            }
            )
        }
        ))
    }
    ,
    this.whenNotActive = function() {
        var e = r.defer();
        return u._currentDialog ? u._queue.push(e) : e.resolve(!0),
        e.promise
    }
}
]).controller("OnboardingServiceDialogController", ["$scope", "$stateParams", "$modalInstance", "config", "ProfileService", "DocumentsService", function(e, n, t, o, i, a) {
    _.assign(e, o),
    e.onboardingId = o.onboardingId,
    o.loadProfile && i.getProfile().then(function(n) {
        e.profile = n
    }
    ),
    o.loadDocument ? a.getDocumentById(n.documentId).then(function(n) {
        n && (e.documentName = n.name,
        e.ready = !0)
    }
    , function() {
        t.close()
    }
    ) : e.ready = !0,
    e.close = function() {
        t.close()
    }
}
]).run(["OnboardingService", function(e) {
    e.registerOnboarding("pre-qualification-sample-document", {
        templateUrl: "/views/onboarding/controllers/onboarding-greeting.html",
        backdrop: "static",
        keyboard: !1,
        loadProfile: !0,
        tag: "organization",
        layout: "dark",
        after: "2015-03-27:08:00:00"
    }),
    e.registerOnboarding("dashboard-poll", {
        templateUrl: "/views/onboarding/controllers/onboarding-poll.html",
        backdrop: "static",
        keyboard: !1,
        loadProfile: !0,
        nextStepTemplateUrl: "/views/onboarding/views/pre-qualification-organization-info.html",
        createSampleDocument: !0,
        tag: "organization",
        layout: "dark",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("dashboard-introduce-slides", {
        templateUrl: "/views/onboarding/controllers/onboarding-slides.html",
        backdrop: "static",
        keyboard: !1,
        tag: "user",
        layout: "light",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("member-dashboard-introduce-slides", {
        templateUrl: "/views/onboarding/controllers/onboarding-slides.html",
        backdrop: "static",
        keyboard: !1,
        tag: "user",
        layout: "light",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("qr-dashboard-introduce-slides", {
        templateUrl: "/views/onboarding/controllers/onboarding-slides.html",
        backdrop: "static",
        keyboard: !1,
        tag: "user",
        layout: "light",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("qr-dashboard-poll", {
        templateUrl: "/views/onboarding/controllers/onboarding-poll.html",
        backdrop: "static",
        keyboard: !1,
        loadProfile: !0,
        nextStepTemplateUrl: "/views/onboarding/views/pre-qualification-organization-info.html",
        createSampleDocument: !0,
        tag: "organization",
        layout: "dark",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("qr-template-introduce-slides", {
        templateUrl: "/views/onboarding/controllers/onboarding-slides.html",
        backdrop: "static",
        keyboard: !1,
        tag: "user",
        layout: "light",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("qr-template-poll", {
        templateUrl: "/views/onboarding/controllers/onboarding-poll.html",
        backdrop: "static",
        keyboard: !1,
        loadProfile: !0,
        loadDocument: !0,
        nextStepTemplateUrl: "/views/onboarding/views/pre-qualification-organization-info.html",
        createSampleDocument: !0,
        tag: "organization",
        layout: "dark",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("sign-google-doc-dashboard-poll", {
        templateUrl: "/views/onboarding/controllers/onboarding-poll.html",
        backdrop: "static",
        keyboard: !1,
        loadProfile: !0,
        nextStepTemplateUrl: "/views/onboarding/views/pre-qualification-organization-info.html",
        createSampleDocument: !0,
        tag: "organization",
        layout: "dark",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("template-introduce-slides", {
        templateUrl: "/views/onboarding/controllers/onboarding-slides.html",
        backdrop: "static",
        keyboard: !1,
        tag: "user",
        layout: "light",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("template-poll", {
        templateUrl: "/views/onboarding/controllers/onboarding-poll.html",
        backdrop: "static",
        keyboard: !1,
        loadProfile: !0,
        loadDocument: !0,
        nextStepTemplateUrl: "/views/onboarding/views/pre-qualification-organization-info.html",
        createSampleDocument: !0,
        tag: "organization",
        layout: "dark",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("yammer-dashboard-poll", {
        templateUrl: "/views/onboarding/controllers/onboarding-poll.html",
        backdrop: "static",
        keyboard: !1,
        loadProfile: !0,
        nextStepTemplateUrl: "/views/onboarding/views/pre-qualification-organization-info.html",
        createSampleDocument: !0,
        tag: "organization",
        layout: "dark",
        after: "2015-02-05:10:00:00"
    }),
    e.registerOnboarding("invite-members-banner", {
        tag: "organization",
        after: "2015-03-27:08:00:00"
    }),
    e.registerOnboarding("convert-template-banner", {
        tag: "organization",
        after: "2015-03-27:08:00:00"
    }),
    e.registerOnboarding("join-webinar-banner", {
        tag: "organization",
        after: "2015-03-27:08:00:00"
    }),
    e.registerOnboarding("request-demo-banner", {
        tag: "organization",
        after: "2015-03-27:08:00:00"
    }),
    e.registerOnboarding("request-demo-dialog", {
        templateUrl: "/views/onboarding/views/request-demo-dialog.html",
        backdrop: "static",
        keyboard: !1,
        loadProfile: !0,
        layout: "light",
        showImmediately: !0
    }),
    e.registerOnboarding("join-webinar-dialog", {
        templateUrl: "/views/onboarding/views/join-webinar-dialog.html",
        backdrop: "static",
        keyboard: !1,
        loadProfile: !0,
        layout: "light",
        showImmediately: !0
    })
}
]),
angular.module("pd.common").service("PermissionsService", ["$q", "AlertService", "PermissionRules", function(e, n, t) {
    var o = function(e) {
        n.alert({
            title: "Unable to " + e + " selected objects",
            text: "You don't have permissions to " + e + " selected objects."
        })
    }
    ;
    this.checkPermissions = function(n, i, a) {
        a = a || t.DEFAULT;
        var s = e.defer();
        return a.hasPermissions(n).then(function(e) {
            e ? s.resolve() : (o(i),
            s.reject())
        }
        ),
        s.promise
    }
}
]).factory("PermissionRules", ["Config", "ProfileService", "Constants", "wrapMethodInPromise", function(e, n, t, o) {
    var i = function(e, n) {
        return e.owner && e.owner.id === n.id
    }
      , a = function(e, n) {
        return e.recipients && _.any(e.recipients, function(e) {
            return e.contact.email === n.email
        }
        )
    }
      , s = function(n) {
        return _.contains(n, e.userRole)
    }
      , l = function(e) {
        return e = _.isArray(e) ? e : [e],
        n.getProfile().then(function(n) {
            return _.all(e, function(e) {
                return i(e, n) || a(e, n)
            }
            )
        }
        )
    }
      , r = function(e, n) {
        return n = n || [],
        l(e).then(function(e) {
            return e || s(n)
        }
        )
    }
    ;
    return {
        DEFAULT: {
            hasPermissions: function(e) {
                return r(e, [t.ROLES.OWNER, t.ROLES.ADMIN])
            }
        },
        ROOT_ACCESS: {
            hasPermissions: o(function() {
                return !0
            }
            )
        },
        ITEM_OWNER_OR_RECIPIENT: {
            hasPermissions: l
        },
        ITEM_OWNER_OR_RECIPIENT_OR_USER_ROLE: {
            hasPermissions: r
        },
        WORKSPACE_OWNER_OR_ADMIN: {
            hasPermissions: o(function() {
                return s([t.ROLES.OWNER, t.ROLES.ADMIN])
            }
            )
        }
    }
}
]),
angular.module("pd.common").service("RecipientService", ["Constants", function(e) {
    var n = function(e, n) {
        return _.any(n, function(n) {
            return e.contact && e.contact.id === n.widget.actor || e.id === n.widget.role
        }
        )
    }
      , t = function(t, o) {
        var i = n(t, o);
        return i ? e.RECIPIENTS.TYPE.SIGNER : e.RECIPIENTS.TYPE.CC
    }
    ;
    this.assignType = function(e, n) {
        return _.forEach(e, function(e) {
            e.type = t(e, n)
        }
        ),
        e
    }
    ,
    this.isOnlyRecipient = function(e, n) {
        return 1 === n.length && n[0].contact.email === e.email
    }
    ,
    this.getRecipientAction = function(n, t) {
        var o = e.RECIPIENTS.ACTIONS.NONE
          , i = e.RECIPIENTS.ACTIONS;
        if (t.recipients) {
            var a = _.find(t.recipients, function(e) {
                return e.contact.email === n.email
            }
            );
            if (a) {
                var s = a.type === e.RECIPIENTS.TYPE.SIGNER;
                o = s && !a.is_done ? i.SIGN : s && a.is_done ? i.SIGNED : i.CC
            }
        }
        return o
    }
}
]),
angular.module("pd.common").factory("RequestIndicator", ["NotificationCenter", function(e) {
    var n, t = {}, o = function() {
        return {
            "default": "loadingIndicator.loading",
            getList: "loadingIndicator.loading",
            get: "loadingIndicator.loading",
            post: "loadingIndicator.saving",
            put: "loadingIndicator.saving",
            patch: "loadingIndicator.saving",
            remove: "loadingIndicator.deleting"
        }
    }
    , i = function(e) {
        if (e.data.detail) {
            var n = e.data.detail;
            return n.message ? n.message : n
        }
        var t = _.first(_.values(e.data));
        return _.isArray(t) ? _.first(t) : t
    }
    , a = [/documents\/process/g, /google-drive\/process/g, /documents\/.+\/state/g, /packages\/./g, /workspaces\/.+\/activate/g, /approvals\/.+\/request/g, /approvals\/.+\/reject/g, /approvals\/.+\/approve/g, /integrations\/status/g], s = function(e) {
        return _.any(a, function(n) {
            return n.test(e)
        }
        )
    }
    ;
    return {
        onRequest: function(i, a) {
            if (n || (n = o()),
            !s(i)) {
                t[i] && (e.hideStatus(t[i].messageId),
                delete t[i]);
                var l = n[a] ? n[a] : n["default"];
                t[i] = {
                    messageId: e.status(l)
                }
            }
        },
        onResponse: function(n) {
            var o = t[n];
            o && (e.hideStatus(o.messageId),
            delete t[n])
        },
        onError: function(n) {
            if (_.forOwn(t, function(n) {
                e.hideStatus(n.messageId)
            }
            ),
            t = {},
            !(n.config && n.config.url && s(n.config.url))) {
                var o = i(n);
                o && o.trim() && e.message(o)
            }
        }
    }
}
]).run(["$rootScope", "RequestIndicator", "Constants", function(e, n, t) {
    var o = function(e) {
        return function() {
            e.apply(null , _.rest(arguments))
        }
    }
    ;
    e.$on(t.EVENTS.REQUEST, o(n.onRequest)),
    e.$on(t.EVENTS.RESPONSE, o(n.onResponse)),
    e.$on(t.EVENTS.REQUEST_ERROR, o(n.onError))
}
]),
angular.module("pd.common").service("ScrollToTokenService", ["scrollToElement", "$filter", function(e, n) {
    return {
        scrollTo: function(t) {
            var o = 350
              , i = angular.element(".document")
              , a = n("tokenSelector")(t);
            e(i, a, {
                duration: o,
                offset: -100
            })
        }
    }
}
]),
angular.module("pd.common").service("TextFieldDialogService", ["ModalService", "$q", function(e, n) {
    var t = !1
      , o = {
        title: "Rename",
        value: "",
        help_text: "",
        buttonText: "Save",
        allowEmpty: !1,
        placeholder: ""
    };
    this.show = function(i) {
        var a = n.defer();
        if (t)
            return a.reject(),
            a;
        t = !0,
        _.defaults(i, o);
        var s = _.assign({}, {
            controller: "TextFieldDialogController",
            templateUrl: "/views/common/text-field-dialog-dialog.html",
            windowClass: "modal--maxw400",
            resolve: {
                title: function() {
                    return i.title
                },
                value: function() {
                    return i.value
                },
                help_text: function() {
                    return i.help_text
                },
                buttonText: function() {
                    return i.buttonText
                },
                allowEmpty: function() {
                    return i.allowEmpty
                },
                placeholder: function() {
                    return i.placeholder
                }
            }
        });
        return e.open(s).then(function(e) {
            t = !1,
            e ? a.resolve(e) : i.allowEmpty ? a.resolve("") : a.reject()
        }
        , function() {
            t = !1,
            a.reject()
        }
        ),
        a.promise
    }
}
]).controller("TextFieldDialogController", ["$scope", "$modalInstance", "title", "value", "help_text", "buttonText", "allowEmpty", "placeholder", function(e, n, t, o, i, a, s, l) {
    e.title = t,
    e.help_text = i,
    e.valueModel = {
        value: o
    },
    e.buttonText = a,
    e.allowEmpty = s,
    e.placeholder = l,
    e.save = function() {
        n.close(e.valueModel.value)
    }
}
]);
var exceptions = angular.module("pd.exceptions", []);
exceptions.config(["$provide", function(e) {
    e.decorator("$exceptionHandler", ["Config", "$delegate", function(e, n) {
        if (!e)
            throw new Error("Raven config must be set before using this");
        return Raven.config(e.ravenURL, {
            whitelistUrls: e.ravenWhitelistUrls
        }).install(),
        function(e, t) {
            n(e, t),
            Raven.captureException(e, t)
        }
    }
    ])
}
]),
exceptions.value("Raven", Raven),
angular.module("pd.directives", []),
angular.module("pd.directives").directive("brandedLogo", ["$rootScope", "PublicConfigFactory", "Config", function(e, n, t) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/directives/branded-logo/branded-logo.html",
        link: function(o) {
            o.logoUrl = null ;
            var i = function() {
                return t.application.app || t.application.sdk
            }
              , a = function(e) {
                return i() && e.icon_src ? e.icon_src : e.main_logo
            }
            ;
            n.getConf().then(function(e) {
                o.logoUrl = a(e.branding)
            }
            ),
            e.$on("branding.logoChanged", function(e, n) {
                o.logoUrl = a(n)
            }
            ),
            e.$on("branding.iconChanged", function(e, n) {
                o.logoUrl = a(n)
            }
            )
        }
    }
}
]),
angular.module("pd.directives").directive("breadcrumbs", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/directives/breadcrumbs/breadcrumbs.html",
        scope: !0,
        controller: ["$scope", "$rootScope", "$state", "$stateParams", "Config", "FoldersLoaderService", "$q", "$filter", function(e, n, t, o, i, a, s, l) {
            e.isApp = i.application.app || i.application.sdk;
            var r = function(e) {
                for (var n = [], o = e; o; )
                    n.push(o),
                    o = o.parent ? t.get(o.parent) : null ;
                return n.reverse()
            }
              , c = function(e) {
                var n = r(e);
                return _.cloneDeep(_.reduce(n, function(e, n) {
                    return n.breadcrumbs ? e.concat(n.breadcrumbs) : e
                }
                , []))
            }
              , d = function(e, n) {
                var t = s.defer();
                return a.getFolderParents(n, e).then(function(e) {
                    t.resolve(_.map(e, function(e) {
                        return e.root ? e : l("folderBreadcrumb")(e)
                    }
                    ))
                }
                ),
                t.promise
            }
              , u = function(e, n) {
                return _.isEmpty(n) ? e : _.reduce(e, function(e, t) {
                    return "folders" !== t.ref || e.replaced ? "folders" !== t.ref && e.breadcrumbs.push(t) : (e.replaced = !0,
                    _.each(n, function(e) {
                        e.ref = t.ref,
                        e.folderType = t.folderType
                    }
                    ),
                    e.breadcrumbs = e.breadcrumbs.concat(n)),
                    e
                }
                , {
                    replaced: !1,
                    breadcrumbs: []
                }).breadcrumbs
            }
              , m = function(n, t) {
                t = t || o.folderId;
                var i = _.filter(n, function(e) {
                    return e.ref && "folders" !== e.ref
                }
                )
                  , a = _.filter(n, {
                    ref: "folders"
                })
                  , l = s.defer();
                if (_.each(i, function(n) {
                    var t = _.find(e.breadcrumbs, {
                        ref: n.ref
                    });
                    t && _.assign(n, t)
                }
                ),
                a.length && t)
                    d(_.first(a).folderType, t).then(function(e) {
                        l.resolve(u(n, e))
                    }
                    );
                else if (a.length) {
                    var r = _.filter(e.breadcrumbs, {
                        ref: _.first(a).ref,
                        folderType: _.first(a).folderType
                    });
                    l.resolve(u(n, r))
                } else
                    l.resolve(n);
                return l.promise
            }
              , p = function(n) {
                m(n).then(function(n) {
                    e.breadcrumbs = n
                }
                )
            }
              , g = function(e) {
                e.breadcrumbs && p(c(e))
            }
              , f = function(e) {
                var n = "PandaDoc"
                  , t = e[e.length - 1];
                t && t.name && (n = t.name + " / " + n,
                window.document.title = n)
            }
            ;
            e.$on("object.loaded", function(n, t) {
                var o = _.find(e.breadcrumbs, {
                    ref: t.ref
                });
                o && _.assign(o, t.breadcrumb)
            }
            ),
            e.$on("folder.loaded", function(n, t) {
                t.folder && t.folder.id && m(e.breadcrumbs, t.folder.id).then(function(n) {
                    e.breadcrumbs = _.cloneDeep(n)
                }
                )
            }
            ),
            e.$on("$stateChangeSuccess", function(e, n) {
                g(n)
            }
            ),
            e.breadcrumbs = c(t.get(t.current.name)),
            m(e.breadcrumbs).then(function(n) {
                e.breadcrumbs = _.cloneDeep(n)
            }
            ),
            e.$watch("breadcrumbs", f)
        }
        ]
    }
}
]),
angular.module("pd.directives").directive("imageOnLoad", [function() {
    return {
        restrict: "A",
        link: function(e, n, t) {
            t.imageOnLoad && _.isFunction(e[t.imageOnLoad]) && n.bind("load", e[t.imageOnLoad])
        }
    }
}
]),
angular.module("pd.directives").directive("navpanel", [function() {
    return {
        restrict: "E",
        scope: {
            theme: "@"
        },
        templateUrl: "/views/directives/navpanel/navpanel.html",
        replace: !0,
        transclude: !0
    }
}
]).directive("navpanelExpandable", [function() {
    return {
        restrict: "E",
        scope: {
            theme: "@"
        },
        templateUrl: "/views/directives/navpanel/navpanel-expandable.html",
        replace: !0,
        transclude: !0
    }
}
]).directive("navpanelSet", [function() {
    return {
        require: "^navpanel",
        restrict: "E",
        scope: {
            position: "@"
        },
        replace: !0,
        transclude: !0,
        templateUrl: "/views/directives/navpanel/navpanel-set.html",
        controller: function() {}
    }
}
]).controller("NavpanelButtonController", ["$scope", "$element", "$state", "$rootScope", function(e, n, t, o) {
    e.$watch("route", function(e) {
        e && r(t.current, e) ? i() : a()
    }
    , !0),
    e.$on("$stateChangeSuccess", function(n, t) {
        e.route && r(t, e.route) ? i() : a()
    }
    );
    var i = function() {
        e.isActive = !0
    }
      , a = function() {
        e.isActive = !1
    }
      , s = function(e, n) {
        return -1 !== e.name.indexOf("tools-" + n)
    }
      , l = function(e, n) {
        var t = e.name.indexOf(n);
        return 0 === t || e.parent && 0 === e.parent.indexOf(n)
    }
      , r = function(n, t) {
        return n ? _.any(t.split(" "), function(t) {
            return e.docTool ? s(n, t) : l(n, t)
        }
        ) : !1
    }
    ;
    e.href || n.find("a").click(function(e) {
        e.preventDefault()
    }
    ),
    (e.showBadge || e.showSimpleBadge) && e.badgeName && (e.badgeCount = o.badges[e.badgeName],
    e.$on("badge.update", function(n, t) {
        t.name === e.badgeName && (e.badgeCount = t.value)
    }
    ))
}
]).directive("navpanelButton", ["$controller", function(e) {
    return {
        require: "^navpanel-set",
        restrict: "E",
        scope: {
            name: "@",
            href: "@",
            clickAction: "&",
            customClass: "@",
            icon: "@",
            route: "@",
            buttonContent: "@",
            showBadge: "@",
            showSimpleBadge: "@",
            badgeName: "@",
            docTool: "@",
            target: "@",
            tooltipText: "@",
            tooltipPosition: "@"
        },
        replace: !0,
        templateUrl: "/views/directives/navpanel/navpanel-button.html",
        link: function(n, t) {
            e("NavpanelButtonController", {
                $scope: n,
                $element: t
            })
        }
    }
}
]),
angular.module("pd.directives").directive("patientImage", ["$timeout", function(e) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            imageSrc: "=",
            imageWidth: "=",
            "class": "@"
        },
        templateUrl: "/views/directives/patient-image.html",
        link: function(n, t) {
            var o = 2e3
              , i = function() {
                return "&_time=" + (new Date).getTime()
            }
            ;
            n.src = n.imageSrc,
            n.imageStyle = {
                width: 96,
                height: 124
            },
            n.loading = !0,
            n.$watch("imageSrc", function(a) {
                if (a) {
                    var s = t.find("img.image-to-load");
                    s.load(function() {
                        e(function() {
                            n.loading = !1,
                            n.imageStyle = {}
                        }
                        )
                    }
                    ),
                    s.error(function() {
                        e(function() {
                            n.src = n.imageSrc + i()
                        }
                        , o)
                    }
                    )
                }
            }
            )
        }
    }
}
]),
angular.module("pd.directives").directive("postMessageForm", [function() {
    return {
        restrict: "E",
        replace: !0,
        transclude: !0,
        templateUrl: "/views/directives/post-message-form.html",
        scope: {
            document: "=",
            placeholder: "@"
        },
        controller: ["$scope", "$rootScope", "TimelineService", "IntercomService", function(e, n, t, o) {
            e.messageModel = {
                message: ""
            },
            e.sendingMessage = !1;
            var i = function(t) {
                e.messageModel.message = "",
                e.sendingMessage = !1,
                n.$broadcast("message.added", t)
            }
              , a = function() {
                e.sendingMessage = !1
            }
            ;
            e.sendMessage = function() {
                if (e.document.sample && e.messageModel.message) {
                    var n = "Comment was left on sample document: " + e.messageModel.message;
                    o.sendMessage(n)
                }
                e.sendingMessage = !0;
                var s = {
                    text: e.messageModel.message
                }
                  , l = {};
                e.document ? (l.document_id = e.document.id,
                t.sendDocumentMessage(s, l).then(function(e) {
                    i(e)
                }
                , a)) : t.sendDashboardMessage(s, l).then(function(e) {
                    i(e)
                }
                , a)
            }
        }
        ]
    }
}
]),
angular.module("pd.directives").controller("ProfileWidgetController", ["$scope", "ProfileService", "WorkspacesService", "Config", function(e, n, t, o) {
    e.togglePopover = function() {
        e.isPopoverVisible = !e.isPopoverVisible
    }
    ,
    n.getProfile().then(function(n) {
        e.profile = n
    }
    );
    var i = function() {
        t.getWorkspaces().then(function(n) {
            e.workspaces = n
        }
        )
    }
    ;
    i(),
    e.$on("workspace.created", i),
    e.$on("branding.logoChanged", i),
    e.$on("branding.iconChanged", i);
    var a = function() {
        window.location = o.applicationUrl + "/logout"
    }
    ;
    e.logout = function() {
        n.logout().then(a, a)
    }
}
]).directive("profileWidget", ["$timeout", function(e) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/directives/profile/profile-widget.html",
        controller: "ProfileWidgetController",
        link: function(n) {
            var t = function() {
                n.isPopoverVisible = !1,
                n.$apply()
            }
            ;
            n.$watch("isPopoverVisible", function(n) {
                n === !0 ? e(function() {
                    angular.element(document).bind("click", t)
                }
                ) : angular.element(document).unbind("click", t)
            }
            , !0)
        }
    }
}
]),
angular.module("pd.directives").directive("trialNotification", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/directives/trial-notification/trial-notification.html",
        scope: !0,
        controller: "TrialNotificationController"
    }
}
]).controller("TrialNotificationController", ["$scope", "WorkspacesService", "Constants", "$sce", "Config", "SubscriptionService", function(e, n, t, o, i, a) {
    e.visible = !1;
    var s = 10
      , l = function(n) {
        e.isOwner = i.userRole === t.ROLES.OWNER,
        n && a.isTrial(n) && !a.isNotActive(n) ? (e.visible = !0,
        e.daysLeft = Math.ceil(moment(n.trial_ended_at).diff(moment(), "days", !0)),
        e.showSubscribeMessage = e.daysLeft <= s,
        n.external_url && (e.chargify_external_url = o.trustAsResourceUrl(n.external_url))) : e.visible = !1;
    
    }
    ;
    n.getWorkspace().then(function(e) {
        l(e.subscription)
    }
    ),
    e.$eventToObservable("subscription.updated").debounce(1e3).subscribe(function(e) {
        var n = _.first(e.additionalArguments).subscription;
        n && l(n)
    }
    )
}
]),
angular.module("pd.directives").directive("docToolsList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/directives/doctools/doc-tools-list.html",
        scope: {
            documentInfo: "=",
            documentContentInfo: "="
        },
        controller: "DocToolsListController"
    }
}
]),
angular.module("pd.directives").controller("DocToolsListController", ["$scope", "$rootScope", "$stateParams", "ToolsManager", "$controller", "$state", "$timeout", "ContextService", "ElementClickBehavior", "BrowserUtils", function(e, n, t, o, i, a, s, l, r, c) {
    e.$state = a,
    e.$watch("documentInfo", function(n) {
        n && o.getToolsList(n, e.docToolContext).then(function(n) {
            e.tools = n,
            _.each(_.filter(n, function(e) {
                return e.controller.initiateImmediately
            }
            ), function(e) {
                e.ctrl = d(e)
            }
            )
        }
        )
    }
    ),
    e.$on("$stateChangeSuccess", function(n, t) {
        e.showToolContent = t.data.hasRightDetailsPanel
    }
    ),
    e.showToolContent = a.current.data.hasRightDetailsPanel,
    e.toolAction = function(n) {
        n.ctrl || (n.ctrl = d(n));
        var t = v(n);
        t && n.ctrl[n.action ? n.action : "action"](e.documentInfo)
    }
    ;
    var d = function(n) {
        var t = {
            $scope: e,
            tool: n
        }
          , o = n.controller.injections ? _.assign(t, n.controller.injections) : t;
        return i(n.controller.name, o)
    }
      , u = function(n) {
        var o = {
            widget: n.widgetId,
            block: n.blockId,
            row: n.rowId,
            section: null 
        }
          , i = e.documentContentInfo.isEditableContent ? "tools-content" : "tools-widgets"
          , s = -1 !== a.current.name.indexOf(i) && _.isEqual(t, o);
        s || l.openDocTool(i, o)
    }
      , m = function() {
        var n = e.documentContentInfo.isEditableContent ? "tools-content" : "tools-widgets";
        -1 !== a.current.name.indexOf(n) && (t.block || t.widget) && l.openDocTool(n, {
            widget: null ,
            block: null ,
            row: null ,
            section: null 
        })
    }
      , p = r.getStream()
      , g = [];
    g.push(p.filter(function(e) {
        return ("block-click" === e.name || "block-part-click" === e.name) && e.blockId
    }
    ).filter(function(n) {
        return e.showToolContent || c.desktop || n.forceSettingsOpen
    }
    ).subscribe(u)),
    g.push(p.filter(function(e) {
        return "widget-click" === e.name && e.widgetId
    }
    ).filter(function() {
        return e.showToolContent || c.desktop
    }
    ).subscribe(u)),
    g.push(p.filter(function(e) {
        return "close-settings" === e.name
    }
    ).filter(function() {
        return e.showToolContent || c.desktop
    }
    ).subscribe(m)),
    e.$on("$destroy", function() {
        _.each(e.tools, function(e) {
            e.ctrl = null 
        }
        ),
        _.each(g, function(e) {
            e.dispose()
        }
        )
    }
    );
    var f = ["Download", "Downloading", "Send", "Create doc", "Complete", "Send for approval", "Print", "Convert to template", "Converting to template"]
      , b = function(e) {
        var n = _.last(a.current.name.split("."))
          , t = e.route.split(" ");
        return _.any(t, function(e) {
            return -1 !== n.indexOf(e)
        }
        )
    }
      , v = function(t) {
        return _.contains(f, t.name) ? !0 : b(t) ? (e.showToolContent = !1,
        l.openDocumentState("details"),
        s(function() {
            a.current.data.hasDocToolsPanel = !1,
            n.$broadcast("doc.tools.panel.hide")
        }
        ),
        !1) : (e.showToolContent = !0,
        s(function() {
            n.$broadcast("doc.tools.panel.show")
        }
        ),
        !0)
    }
}
]),
angular.module("pd.directives").directive("actionsFeed", [function() {
    return {
        restrict: "E",
        scope: {
            documentRelated: "=",
            documentInfo: "="
        },
        templateUrl: "/views/directives/feed/actions-feed.html",
        replace: !0,
        controller: "ActionsFeedController"
    }
}
]),
angular.module("pd.directives").directive("messagesFeed", [function() {
    return {
        restrict: "E",
        scope: {
            documentRelated: "=",
            documentInfo: "=",
            allowMessages: "="
        },
        templateUrl: "/views/directives/feed/messages-feed.html",
        replace: !0,
        controller: "MessagesFeedController"
    }
}
]).directive("message", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/directives/feed/message.html",
        scope: {
            message: "=",
            hasCommentForm: "=",
            messages: "=",
            documentInfo: "="
        },
        controller: "MessageController"
    }
}
]),
angular.module("pd.directives").directive("recentDocuments", [function() {
    return {
        restrict: "E",
        scope: !0,
        templateUrl: "/views/directives/feed/recent-documents.html",
        replace: !0,
        controller: ["$scope", "DocumentsService", "AppAnalyticsService", function(e, n, t) {
            n.getRecentDocuments().then(function(n) {
                e.recentDocuments = n
            }
            ),
            e.trackOpen = function() {
                t.track("Opened recent document")
            }
        }
        ]
    }
}
]),
angular.module("pd.directives").controller("ActionsFeedController", ["$scope", "TimelineService", "$filter", "Constants", "NotificationFilterService", function(e, n, t, o, i) {
    var a = {
        page: 1,
        count: 30,
        order_by: "-date_created"
    };
    e.hasMoreActions = !0,
    e.actions = [],
    e.loading = !1;
    var s = function(e) {
        return e.date_updated = e.date_created,
        e.document && (e.document.linkToDocument = t("linkToDocument")(e.document, e),
        e.document.isTemplate = e.document.type === o.DOCUMENT.TYPE.TEMPLATE || e.document.type === o.DOCUMENT.TYPE.EDITABLE_TEMPLATE),
        (e.type === o.DOCUMENT.ACTION.ALL_RECIPIENTS_COMPLETED || e.type === o.DOCUMENT.ACTION.INVOICE_SENT) && (e.actor = null ),
        e
    }
      , l = function() {
        return e.hasMoreActions && !e.loading
    }
      , r = function(e) {
        var n = _.map(t("actions")(e), s);
        return t("orderBy")(n, "-date_updated")
    }
      , c = function(n) {
        return !e.documentInfo || e.documentInfo.document && n && n.document && n.document.id === e.documentInfo.document.id
    }
    ;
    e.getActions = function() {
        l() && (e.loading = !0,
        n.getActions(a).then(function(n) {
            var t = r(n);
            e.actions = e.actions.concat(t),
            e.hasMoreActions = n.next ? !0 : !1,
            a.page++,
            e.loading = !1
        }
        ))
    }
    ,
    e.$on("notification." + o.NOTIFICATION.TYPE.ACTION, function(e, n) {
        c(n) && i.filterNotification(n).then(d)
    }
    );
    var d = function(n) {
        e.actions.unshift(s(n))
    }
    ;
    e.documentRelated ? e.$watch("documentInfo", function(n) {
        n && (a.document_id = e.documentInfo.document.id,
        e.getActions())
    }
    ) : e.getActions()
}
]),
angular.module("pd.directives").controller("MessageController", ["$scope", "$attrs", "$rootScope", "TimelineService", "ProfileService", "scrollToElement", "$timeout", "ContextService", "IntercomService", function(e, n, t, o, i, a, s, l, r) {
    e.sendingComment = !1,
    i.getProfile().then(function(n) {
        e.profile = n
    }
    ),
    e.$watch("message.messages", function() {
        e.message.messages.length > 0 && (e.commentsVisible = !0)
    }
    ),
    e.toggleComments = function() {
        e.commentsVisible = !e.commentsVisible
    }
    ;
    var c = function() {
        if (e.messages && !_.isEmpty(e.messages)) {
            var n = e.messages.indexOf(e.message);
            e.messages.splice(n, 1),
            e.messages.unshift(e.message),
            s(function() {
                var n = l.when({
                    dashboard: function() {
                        return angular.element(".scrollpane__bd")
                    },
                    otherwise: function() {
                        return angular.element(".doctools")
                    }
                });
                a(n, "#timeline-message-" + e.message.id, {
                    duration: 500,
                    offset: -100
                })
            }
            , 500)
        }
    }
    ;
    e.hasCommentForm && (e.commentModel = {
        comment: ""
    },
    e.sendComment = function(n) {
        if (!e.sendingComment) {
            e.sendingComment = !0;
            var t = {
                messageId: e.message.id
            };
            e.message.document && (t.document_id = e.message.document.id),
            o.sendComment(t, n).then(function(t) {
                if (e.documentInfo && e.documentInfo.document.sample && n) {
                    var o = "Comment was left on sample document: " + n;
                    r.sendMessage(o)
                }
                e.sendingComment = !1,
                e.message.messages.push(t),
                e.commentModel.comment = "",
                c()
            }
            , function() {
                e.sendingComment = !1
            }
            )
        }
    }
    )
}
]),
angular.module("pd.directives").controller("MessagesFeedController", ["$scope", "TimelineService", "$filter", "Constants", "NotificationFilterService", "ContextService", function(e, n, t, o, i, a) {
    var s = {
        page: 1,
        count: 30,
        order_by: "-date_created",
        isTemplate: a.isTemplates()
    };
    e.hasMoreMessages = !0,
    e.messages = [],
    e.loading = !1;
    var l = function() {
        return e.hasMoreMessages && !e.loading
    }
    ;
    e.getMessages = function() {
        l() && (e.loading = !0,
        n.getMessages(s).then(function(n) {
            var o = t("orderBy")(d(n), "-date_updated");
            e.messages = 1 === s.page ? _.map(o, m) : e.messages.concat(_.map(o, m)),
            s.page++,
            e.loading = !1,
            e.hasMoreMessages = n.next ? !0 : !1
        }
        ))
    }
    ,
    e.$on("message.added", function(n, t) {
        e.messages.unshift(m(t))
    }
    );
    var r = function(n) {
        return n && n.document && n.document.sample ? !1 : !e.documentInfo || e.documentInfo.document && n && n.document && n.document.id === e.documentInfo.document.id
    }
    ;
    e.$on("notification." + o.NOTIFICATION.TYPE.MESSAGE, function(e, n) {
        i.filterNotification(n).then(c)
    }
    );
    var c = function(n) {
        if (r(n))
            if (n.parent) {
                var t = _.find(e.messages, function(e) {
                    return e.isMessage && e.id === n.parent
                }
                );
                t.messages || (t.messages = []);
                var o = e.messages.indexOf(t);
                e.messages.splice(o, 1),
                t.messages.push(m(n)),
                e.messages.unshift(t)
            } else
                e.messages.unshift(m(n))
    }
      , d = function(e) {
        return _.each(e, function(e) {
            _.isEmpty(e.messages) ? e.date_updated = e.date_created : (e.messages = t("orderBy")(e.messages, "date_created"),
            e.date_updated = _.last(e.messages).date_created)
        }
        ),
        e
    }
      , u = function(n) {
        return n.removed ? !1 : e.documentRelated && e.documentInfo ? n.type !== o.DOCUMENT.TYPE.DOCUMENT && n.type !== o.DOCUMENT.TYPE.EDITABLE_DOCUMENT ? !0 : (e.documentInfo.isOwner || e.documentInfo.isRecipient) && e.documentInfo.isSentOrCompleted : !1
    }
      , m = function(e) {
        return e.isMessage = !0,
        e.editable = e.document && u(e.document),
        e.isOldRevision = e.document && e.revision_number && e.revision_number !== e.document.revision_number,
        e.document && (e.document.linkToDocument = t("linkToDocument")(e.document, e),
        e.document.isTemplate = e.document.type === o.DOCUMENT.TYPE.TEMPLATE || e.document.type === o.DOCUMENT.TYPE.EDITABLE_TEMPLATE),
        e
    }
    ;
    e.documentRelated ? e.$watch("documentInfo", function(n) {
        n && !e.loading && (e.hasMoreMessages = !0,
        e.messages = [],
        e.loading = !1,
        s.document_id = e.documentInfo.document.id,
        s.page = 1,
        e.getMessages())
    }
    ) : e.getMessages()
}
]),
angular.module("pd.directives").directive("fileDrop", ["rx", function(e) {
    return {
        restrict: "A",
        link: function(n, t, o) {
            var i = n[o.fileDrop]
              , a = e.Observable.fromEvent(t, "dragover")
              , s = e.Observable.fromEvent(t, "drop")
              , l = function(e) {
                e.preventDefault()
            }
              , r = a.subscribe(l)
              , c = s["do"](l).map(function(e) {
                var n = e.originalEvent ? e.originalEvent.dataTransfer.files : e.dataTransfer.files;
                return _.first(n)
            }
            ).subscribe(i);
            n.$on("$destroy", function() {
                r.dispose(),
                c.dispose()
            }
            )
        }
    }
}
]),
angular.module("pd.directives").directive("fileSelect", ["rx", function(e) {
    return {
        restrict: "A",
        link: function(n, t, o) {
            var i = n[o.fileSelect]
              , a = e.Observable.fromEvent(t.find('input[type="file"]'), "change").map(function(e) {
                return _.first(e.currentTarget.files)
            }
            ).subscribe(i);
            n.$on("$destroy", function() {
                a.dispose()
            }
            )
        }
    }
}
]),
angular.module("pd.directives").directive("foldersList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/directives/folders/folders-list.html",
        scope: {
            service: "=",
            folderType: "=",
            permissions: "="
        },
        controller: "FoldersListController"
    }
}
]),
angular.module("pd.directives").controller("FoldersListController", ["$scope", "$filter", "TextFieldDialogService", "NotificationCenter", "$rootScope", "$stateParams", "FoldersCacheService", "ConfirmationService", "AlertService", "$state", "$timeout", "PermissionRules", "FoldersLoaderService", "$location", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p) {
    e.folders = [],
    e.editMode = !1,
    e.loadingParentFolder = !0;
    var g = a.folderId
      , f = function() {
        return e.permissions ? e.permissions : u.DEFAULT
    }
    ;
    m.loadFolder(g, e.folderType).then(function(n) {
        e.currentFolder = n,
        n.parent ? m.loadFolder(n.parent, e.folderType).then(function(n) {
            e.currentFolderParent = n,
            e.loadingParentFolder = !1
        }
        ) : e.loadingParentFolder = !1
    }
    ),
    e.$watch("currentFolder", function(n) {
        n && f().hasPermissions(n).then(function(n) {
            e.hasPermissions = n
        }
        )
    }
    ),
    e.up = function() {
        p.path(n("folderUrl")(e.currentFolderParent).replace("#", ""))
    }
    ,
    e.down = function(t) {
        s.add(t, e.currentFolder),
        p.path(n("folderUrl")(t).replace("#", ""))
    }
    ,
    e.$on("addfolder", function(n, t) {
        t.parent = e.currentFolder.id,
        e.service.addFolder(t).then(function() {
            o.notification('Folder "' + I(t.name) + '" was successfully created'),
            w()
        }
        )
    }
    ),
    e.renameFolder = function(n) {
        t.show({
            title: "Rename folder",
            value: n.name
        }).then(function(t) {
            n.name = t,
            e.service.updateFolder(n).then(function() {
                o.notification('Folder "' + I(n.name) + '" was successfully updated'),
                w(),
                i.$broadcast("folder.updated", {
                    folder: n
                })
            }
            )
        }
        )
    }
    ,
    e.editModeOn = function() {
        e.editMode = !0
    }
    ,
    e.editModeOff = function() {
        e.editMode = !1
    }
    ,
    e.deleteFolder = function(n) {
        n && l.confirm({
            title: "Confirmation",
            text: 'Are you sure you want to delete "' + I(n.name) + '" folder?'
        }).then(function() {
            e.service.removeFolder(n.id).then(function() {
                o.notification('Folder "' + I(n.name) + '" was successfully deleted'),
                w(),
                i.$broadcast("folder.removed", {
                    folder: n
                })
            }
            , function() {
                r.alert({
                    text: "You cannot delete the selected folder because it is not empty."
                })
            }
            )
        }
        )
    }
    ;
    var b = 1
      , v = !0
      , h = function() {
        b = 1,
        v = !0
    }
      , w = function(n) {
        n || (h(),
        e.folders = []),
        e.loadingFolders = !0,
        e.service.getFolders(k()).then(y)
    }
      , k = function() {
        return {
            count: 30,
            page: b,
            order_by: "name",
            parent: g
        }
    }
      , y = function(n) {
        e.loadingFolders = !1,
        v = n.next ? !0 : !1,
        b += 1,
        e.folders = e.folders.concat(n),
        _.each(e.folders, function(e) {
            f().hasPermissions(e).then(function(n) {
                e.editable = n
            }
            )
        }
        )
    }
      , I = function(e) {
        return n("truncate")(e, 30)
    }
    ;
    w(),
    e.moreFolders = function() {
        v && !e.loadingFolders && w(!0)
    }
}
]),
angular.module("pd.directives").directive("checkboxCell", [function() {
    return {
        templateUrl: "/views/directives/grid/checkbox-cell.html",
        replace: !0,
        restrict: "E",
        scope: {
            selectionModel: "=",
            item: "="
        }
    }
}
]),
angular.module("pd.directives").directive("grid", ["$timeout", function(e) {
    return {
        restrict: "A",
        controller: "GridController",
        link: function(n, t, o) {
            var i = angular.element(t)
              , a = i.find("table");
            a.find("tfoot").hide(),
            n.$watchCollection("allItems", function(t) {
                t && t.length > 0 && n.hasNext && e(function() {
                    i.height() > a.height() && n.moreItems()
                }
                )
            }
            ),
            e(function() {
                var e = i.find("th.header.row--clickable");
                e.on("click", s),
                n.$on("$destroy", function() {
                    e.off("click", s)
                }
                )
            }
            , 1500);
            var s = function(t) {
                e(function() {
                    n.selectionModel.all = !n.selectionModel.all
                }
                ),
                t.stopPropagation()
            }
            ;
            n.updateUrl = o.updateUrl ? "true" === o.updateUrl : !0
        }
    }
}
]).controller("GridController", ["$scope", "$rootScope", "$location", "ngTableParams", "SelectionModel", "Constants", function(e, n, t, o, i, a) {
    function s() {
        w.deselectAll(),
        e.allItems = []
    }
    function l() {
        s();
        var n = m(e.tableParams, h);
        u(n) ? e.tableParams.reload() : e.tableParams.page(1)
    }
    function r(t, o, i, a) {
        e.gridOptions.store.getItems(i, function(l) {
            a && s(),
            e.hasNext = !_.isEmpty(l.next),
            o.total(l.totalCount),
            e.allItems = e.allItems.concat(l),
            t.resolve(e.allItems),
            e.isEmpty = 0 === l.totalCount,
            e.isNotFound = e.isEmpty && !_.isEmpty(h),
            e.updateUrl && g(o, h),
            f = i,
            n.$broadcast("grid.data.loaded", e.allItems)
        }
        )
    }
    function c(e, n) {
        var t = m(n, h);
        d(t, f) ? r(e, n, t) : u(t) ? r(e, n, t, !0) : (e.reject(),
        l())
    }
    function d(e, n) {
        return n && Number(e.page) === Number(n.page) + 1
    }
    function u(e) {
        return 1 === Number(e.page)
    }
    function m(n, t) {
        var o = n.url()
          , i = _.pick(o, ["page", "count"])
          , a = _.transform(o, function(e, n, t) {
            if (-1 !== t.indexOf("sorting[")) {
                var o = t.replace("sorting[", "").replace("]", "");
                e.order_by = "asc" === n ? o : "-" + o.replace(",", ",-")
            }
        }
        , {})
          , s = _.assign(i, a);
        return t && (s.q = t),
        _.isFunction(e.gridOptions.toQueryParameters) ? e.gridOptions.toQueryParameters(s) : s
    }
    function p(e, n) {
        var t = _.omit(e.url(), ["page", "count"]);
        return n && (t.q = n),
        t
    }
    function g(e, n) {
        var o = p(e, n);
        _.isEqual({}, t.search()) ? (t.search(o),
        t.replace()) : t.search(_.extend(t.search(), o))
    }
    e.allItems = [],
    e.hasNext = !0;
    var f, b = function() {
        return e.allItems
    }
    , v = _.assign({}, e.gridOptions.properties, {
        page: 1,
        count: 20
    }), h = t.search().q, w = i.create(e, b);
    e.isEmpty = !1,
    e.tableParams = new o(angular.extend({}, v, _.omit(t.search(), ["page", "q", "count"])),{
        groupBy: e.gridOptions.groupBy,
        total: 0,
        getData: c
    }),
    e.$on(a.GRID.RELOAD, l),
    e.$on(a.GRID.FILTERING, function(e, n) {
        n && !_.isUndefined(n.filter) && (h = n.filter),
        l()
    }
    ),
    e.$on("$stateChangeStart", function() {
        t.search({}),
        t.replace()
    }
    ),
    e.moreItems = function() {
        if (!e.tableParams.settings().$loading && e.hasNext) {
            var n = e.tableParams.url().page;
            e.tableParams.page(Number(n) + 1)
        }
    }
    ,
    e.select = function(e, n) {
        w.select(n),
        e.stopPropagation()
    }
    ,
    e.selectAll = function(e) {
        e.stopPropagation()
    }
}
]),
angular.module("pd.directives").directive("gridFilter", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/directives/grid/filter.html",
        scope: !0,
        controller: ["$scope", "$location", "$timeout", "Config", "$rootScope", "Constants", function(e, n, t, o, i, a) {
            e.filterModel = {
                filter: n.search().q
            };
            var s;
            e.$watch("filterModel.filter", function(e, n) {
                (e || n) && e !== n && (s && t.cancel(s),
                s = t(function() {
                    i.$broadcast(a.GRID.FILTERING, {
                        filter: angular.copy(e)
                    })
                }
                , o.liveFilteringDelay))
            }
            , !0)
        }
        ]
    }
}
]),
angular.module("pd.directives").factory("SelectionModel", ["$rootScope", "Constants", function(e, n) {
    return {
        create: function(t, o) {
            t.selectionModel = {
                all: !1,
                checkboxes: {},
                selected: []
            },
            t.$watch("selectionModel.all", function(e) {
                _.each(o(), function(n) {
                    t.selectionModel.checkboxes[n.id] = e
                }
                )
            }
            , !0),
            t.$watch("selectionModel.checkboxes", function(i) {
                var a = o();
                t.selectionModel.selected = _.filter(a, function(e) {
                    return i[e.id]
                }
                );
                var s = 0 !== a.length && t.selectionModel.selected.length === a.length
                  , l = 0 === t.selectionModel.selected.length;
                (s || l) && (t.selectionModel.all = s),
                $("#select_all").prop("indeterminate", !s && !l),
                e.$broadcast(n.GRID.SELECTION_CHANGE, t.selectionModel.selected, s)
            }
            , !0);
            var i = function() {
                t.selectionModel.all = !1,
                t.selectionModel.checkboxes = {},
                t.selectionModel.selected = []
            }
              , a = function(e) {
                t.selectionModel.checkboxes[e.id] = !t.selectionModel.checkboxes[e.id]
            }
              , s = function() {
                t.selectionModel.all = !t.selectionModel.all
            }
            ;
            return {
                deselectAll: i,
                select: a,
                selectAll: s
            }
        }
    }
}
]),
angular.module("pd.directives").directive("inboxBadge", [function() {
    return {
        restrict: "E",
        scope: !0,
        templateUrl: "/views/directives/inbox/inbox-badge.html",
        replace: !0,
        controller: ["$scope", "DocumentsService", "Constants", "$timeout", "$state", "$rootScope", function(e, n, t, o, i, a) {
            var s = function() {
                n.getIncompleteDocuments({
                    count: 1
                }).then(function(n) {
                    e.count = n.totalCount
                }
                )
            }
              , l = [t.DOCUMENT.ACTION.EDITED, t.DOCUMENT.ACTION.SENT, t.DOCUMENT.ACTION.COMPLETED, t.DOCUMENT.ACTION.RECEIVED]
              , r = function(e) {
                return _.contains(l, e.type)
            }
              , c = function() {
                o(s, 1e3)
            }
            ;
            e.$on("notification." + t.NOTIFICATION.TYPE.ACTION, function(e, n) {
                r(n) && c()
            }
            ),
            a.$on("movetofolder", c),
            e.$on("document.removed.from.inbox", c),
            s(),
            e.openInbox = function() {
                i.go("inbox")
            }
        }
        ]
    }
}
]),
angular.module("pd.directives").directive("invoices", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/directives/invoices/invoices.html",
        scope: {
            documentInfo: "=",
            type: "="
        },
        controller: "InvoicesController"
    }
}
]),
angular.module("pd.directives").controller("InvoicesController", ["$scope", "ContextService", "InvoicesService", "MultipleRequestService", "NotificationCenter", "Constants", "scrollToElement", "BlocksService", "$timeout", "IntegrationsService", function(e, n, t, o, i, a, s, l, r, c) {
    e.isTemplates = n.isTemplates(),
    e.selectedRoleModel = {
        roleId: ""
    },
    e.selectedContactModel = {
        contactId: ""
    },
    e.$watch("documentInfo", function(e) {
        e && d()
    }
    );
    var d = function() {
        e.loadingInvoices = !0;
        var n = e.documentInfo
          , o = e.isTemplates;
        t.getInvoices(e.type, n.document.id).then(function(t) {
            e.invoices = t,
            _.isEmpty(t) ? o && !_.isEmpty(n.document.roles) ? e.selectedRoleModel.roleId = _.first(n.document.roles).id : o || _.isEmpty(n.document.recipients) || (e.selectedContactModel.contactId = _.first(n.document.recipients).contact.id) : o ? e.selectedRoleModel.roleId = _.first(t).role : o || (e.selectedContactModel.contactId = _.first(t).contact),
            e.loadingInvoices = !1
        }
        ),
        c.getIntegrationSettingsForDocument(e.type, n.document.id).then(function(n) {
            e.integrationSettings = n
        }
        )
    }
    ;
    e.$watch("integrationSettings", function(n, t) {
        n && t && !_.isEqual(n, t) && c.updateIntegrationSettingsForDocument(e.type, e.documentInfo.document.id, n)
    }
    , !0),
    e.addInvoice = function() {
        var n = {
            amount_of_total: e.invoices.length ? 0 : 100,
            send_automatically: !1,
            document: e.documentInfo.document.id,
            description: ""
        };
        e.isTemplates && e.selectedRoleModel.roleId ? n.role = e.selectedRoleModel.roleId : e.selectedContactModel.contactId && (n.contact = e.selectedContactModel.contactId),
        e.creatingInvoice = !0,
        t.createInvoice(n, e.type).then(function(n) {
            e.invoices.push(n),
            e.creatingInvoice = !1
        }
        , function() {
            e.creatingInvoice = !1
        }
        )
    }
    ,
    e.toggleInvoice = function(e) {
        e.expanded = !e.expanded
    }
    ,
    e.removeInvoice = function(n) {
        n.confirmDelete ? (n.removing = !0,
        t.removeInvoice(e.type, n).then(function() {
            e.invoices = _.without(e.invoices, n)
        }
        )) : (n.confirmDelete = !0,
        r(function() {
            n.confirmDelete = !1
        }
        , 3e3))
    }
    ,
    e.isTemplates ? e.$watch("selectedRoleModel.roleId", function(n, t) {
        n !== t && _.each(e.invoices, function(e) {
            e.role = n
        }
        )
    }
    ) : e.$watch("selectedContactModel.contactId", function(n, t) {
        n !== t && _.each(e.invoices, function(e) {
            e.contact = n
        }
        )
    }
    ),
    e.validate = function(e) {
        e.amount_of_total || (e.amount_of_total = 0)
    }
    ;
    var u = ["id", "amount_of_total", "send_automatically", "contact", "role", "description"];
    e.$toObservable("invoices", !0).debounce(700).map(function(n) {
        var o = n.newValue
          , i = n.oldValue;
        return _.reduce(o, function(n, o) {
            var a = _.find(i, {
                id: o.id
            });
            if (a) {
                var s = _.pick(o, u)
                  , l = _.pick(a, u);
                _.isEqual(s, l) || _.isUndefined(s.amount_of_total) || n.push({
                    request: function() {
                        return t.updateInvoice(e.type, s)
                    }
                })
            }
            return n
        }
        , [])
    }
    ).filter(function(e) {
        return !_.isEmpty(e)
    }
    ).subscribe(function(e) {
        o.execute(e)
    }
    ),
    e.generateInvoices = function() {
        e.generatingInvoices = !0,
        t.generateInvoices(e.documentInfo.document.id).then(function() {
            e.generatingInvoices = !1;
            var n = e.invoices.length ? "Invoices were successfully created in Xero" : "Invoice was successfully created in Xero";
            i.message(n, 11),
            d()
        }
        , function(n) {
            e.generatingInvoices = !1,
            n.data && n.data.errors && (_.any(n.data.errors, function(e) {
                return "The access token has expired" === e
            }
            ) ? e.$emit("invoices.generation.failed") : i.message(_.first(n.data.errors), 11))
        }
        )
    }
    ,
    e.hasLinkedInvoices = function() {
        return e.invoices && _.any(e.invoices, "external_id")
    }
    ,
    e.$watchCollection("documentInfo.blockList.blocks", function(n) {
        n && (e.pricingTables = _.filter(n, function(e) {
            return e.type.handle === a.BLOCK_TYPES.PRICING_TABLE
        }
        ))
    }
    ),
    e.$toObservable("pricingTables", !0).debounce(700).map(function(e) {
        var n = e.newValue
          , t = e.oldValue;
        return _.reduce(n, function(e, n) {
            var o = _.find(t, {
                id: n.id
            });
            return o && n.pricingtable.use_in_xero !== o.pricingtable.use_in_xero && e.push({
                request: function() {
                    return l.updateBlockIntegrationsSettings(n.id, {
                        use_in_xero: n.pricingtable.use_in_xero
                    })
                }
            }),
            e
        }
        , [])
    }
    ).filter(function(e) {
        return !_.isEmpty(e)
    }
    ).subscribe(function(e) {
        o.execute(e)
    }
    ),
    e.scrollTo = function(e) {
        var n = angular.element(".document")
          , t = "#" + e.id;
        s(n, t, {
            duration: 50,
            offset: -100
        })
    }
    ,
    e.hasOptionalOrQtyEditableRows = function(e) {
        var n = _.reduce(e.data.sections, function(e, n) {
            return e.concat(n.rows)
        }
        , []);
        return _.any(n, function(e) {
            return e.options.optional || e.options.qty_editable
        }
        )
    }
    ,
    e.hasFlexibleTotal = function() {
        return e.pricingTables && _.any(e.pricingTables, e.hasOptionalOrQtyEditableRows)
    }
    ,
    e.hasPricingTablesForExport = function() {
        return e.pricingTables && _.any(e.pricingTables, function(e) {
            return e.pricingtable.use_in_xero
        }
        )
    }
}
]),
angular.module("pd.directives").directive("leftPanel", [function() {
    return {
        restrict: "E",
        scope: !0,
        templateUrl: "/views/directives/leftpanel/leftpanel.html",
        replace: !0,
        controller: ["$scope", "$rootScope", "$controller", function(e, n, t) {
            t("LeftPanelWorkspacesController", {
                $scope: e
            }),
            t("LeftPanelButtonsController", {
                $scope: e
            }),
            e.collapseLeftPanel = function() {
                return n.$broadcast("left.panel.collapse"),
                !0
            }
        }
        ]
    }
}
]),
angular.module("pd.directives").directive("leftPanelExpander", [function() {
    return {
        restrict: "E",
        scope: !0,
        templateUrl: "/views/directives/leftpanel/leftpanel-expander.html",
        replace: !0,
        controller: ["$scope", "$rootScope", function(e, n) {
            e.expanded = !1,
            e.toggle = function() {
                var t = e.expanded ? "collapse" : "expand";
                n.$broadcast("left.panel." + t)
            }
            ,
            e.$on("left.panel.expand", function() {
                e.expanded = !0
            }
            ),
            e.$on("left.panel.collapse", function() {
                e.expanded = !1
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.directives").controller("LeftPanelButtonsController", ["$scope", "Constants", "FeaturesService", "DocumentsService", "BadgeService", "$timeout", "FoldersService", "$q", function(e, n, t, o, i, a, s, l) {
    var r = {
        top: [{
            route: "dashboard",
            name: "app.dashboard",
            href: "#/dashboard/",
            icon: "dashboard",
            showSimpleBadge: !1,
            badgeName: "dashboard"
        }, {
            route: "documents",
            name: "app.documents",
            href: "#/documents/f/",
            icon: "folder-open"
        }, {
            route: "templates",
            name: "app.templates",
            href: "#/templates/f/",
            icon: "templates"
        }, {
            route: "library",
            name: "app.library",
            href: "#/library/f/",
            icon: "library",
            feature: n.FEATURES.LIBRARY
        }, {
            route: "catalog",
            name: "app.catalog",
            href: "#/catalog/",
            icon: "catalog",
            feature: n.FEATURES.CATALOG
        }, {
            route: "contacts",
            name: "app.contacts",
            href: "#/contacts",
            icon: "contacts-3"
        }],
        bottom: [{
            route: "settings",
            name: "app.settings",
            href: "#/settings/",
            icon: "settings"
        }, {
            route: "help",
            name: "app.help",
            href: "https://www.pandadoc.com/faqs/",
            icon: "help",
            target: "_blank"
        }]
    }
      , c = ["documents", "templates", "library"]
      , d = function() {
        var e = l.defer();
        return _.each(c, function(n, t) {
            s.getRootFolder(n).then(function(o) {
                var i = _.find(r.top, {
                    route: n
                });
                i.href = i.href + o.id,
                t === c.length - 1 && e.resolve()
            }
            )
        }
        ),
        e.promise
    }
      , u = function() {
        o.getWaitingForApprovalDocuments({
            count: 1
        }).then(function(e) {
            i.setBadge("dashboard", e.totalCount)
        }
        )
    }
    ;
    d().then(function() {
        e.navigation = r,
        _.each([].concat(e.navigation.top).concat(e.navigation.bottom), function(e) {
            _.isUndefined(e.feature) ? e.visible = !0 : t.checkAvailability(e.feature).then(function(n) {
                e.visible = n
            }
            )
        }
        ),
        t.checkAvailability(n.FEATURES.WORKFLOW).then(function(n) {
            _.find(e.navigation.top, {
                route: "dashboard"
            }).showSimpleBadge = n,
            n && (u(),
            e.$on("notification.approval", function() {
                a(u, 1e3)
            }
            ))
        }
        )
    }
    )
}
]),
angular.module("pd.directives").controller("LeftPanelWorkspacesController", ["$scope", "Constants", "WorkspacesService", "$rootScope", "WorkspaceSwitcher", "ProfileService", function(e, n, t, o, i, a) {
    var s = function() {
        a.getProfile().then(function(n) {
            t.getWorkspaces().then(function(t) {
                e.currentWorkspace = _.find(t, {
                    id: n.workspace
                }),
                e.workspaces = _.reject(t, {
                    id: e.currentWorkspace.id
                })
            }
            )
        }
        )
    }
    ;
    e.expandWorkspaces = function() {
        if (e.workspaces && e.workspaces.length > 0)
            e.isWorkspacesExpanded = !e.isWorkspacesExpanded,
            e.isWorkspacesExpanded && o.$broadcast("left.panel.expand");
        else {
            var n = l ? "expand" : "collapse";
            o.$broadcast("left.panel." + n)
        }
    }
    ;
    var l = !0;
    e.$on("left.panel.collapse", function() {
        e.isWorkspacesExpanded && (e.isWorkspacesExpanded = !1),
        l = !0
    }
    ),
    e.$on("left.panel.expand", function() {
        l = !1
    }
    ),
    e.switchToWorkspace = function(e) {
        i.switchToWorkspace(e, "dashboard")
    }
    ,
    e.$on("workspace.updated", s),
    e.$on("workspace.created", s),
    e.$on("branding.logoChanged", s),
    e.$on("branding.iconChanged", s),
    s()
}
]),
angular.module("pd.dashboard", []).config(["$stateProvider", function(e) {
    e.state("dashboard", {
        parent: "app.base",
        url: "^/dashboard/",
        views: {
            "@app": {
                controller: "DashboardController",
                templateUrl: "/views/dashboard/dashboard.html"
            }
        },
        breadcrumbs: [{
            name: "Dashboard",
            url: "#/dashboard/"
        }],
        data: {
            backgroundType: "white"
        }
    })
}
]),
angular.module("pd.dashboard").controller("DashboardController", ["$scope", "AppAnalyticsService", "$controller", "Constants", "ProfileService", "OnboardingService", "HelpService", "$location", "Config", function(e, n, t, o, i, a, s, l, r) {
    n.track("Viewed Dashboard"),
    i.getProfile().then(function(e) {
        r.isWorkspaceOwner() ? "template" === e.signup_source ? (a.dialog("template-poll"),
        a.dialog("template-introduce-slides")) : "qr-template" === e.signup_source ? (a.dialog("qr-template-poll"),
        a.dialog("qr-template-introduce-slides")) : "quoteroller" === e.signup_source ? (a.dialog("qr-dashboard-poll"),
        a.dialog("qr-dashboard-introduce-slides")) : "sign-google-doc" === e.signup_backend ? a.dialog("sign-google-doc-dashboard-poll", function() {
            s.dialog("dashboard-from-google")
        }
        ) : "yammer-sso" === e.signup_backend ? a.dialog("yammer-dashboard-poll", function() {
            s.dialog("dashboard-from-yammer")
        }
        ) : (a.dialog("dashboard-poll"),
        a.dialog("dashboard-introduce-slides")) : a.dialog("member-dashboard-introduce-slides");
        var n = l.search().next || !1;
        n && l.path(n)
    }
    ),
    t("DashboardDocumentsInfoController", {
        $scope: e
    }),
    t("DashboardDocumentsSectionController", {
        $scope: e
    }),
    e.WAITING_APPROVAL = o.DOCUMENT.STATUS.WAITING_APPROVAL,
    e.showRightSection = function(n) {
        e.rightSection = n
    }
    ,
    e.RIGHT_SECTIONS = [{
        name: "dashboard.comments",
        isCommentsSection: !0
    }, {
        name: "dashboard.actions",
        isActionsSection: !0
    }],
    e.rightSection = _.first(e.RIGHT_SECTIONS)
}
]),
angular.module("pd.dashboard").controller("DashboardDocumentsInfoController", ["$scope", "Constants", "DocumentsService", "DashboardService", "$filter", function(e, n, t, o, i) {
    var a = function() {
        return {
            barColor: "#59B671",
            trackColor: "#e0e0e0",
            scaleColor: !1,
            size: 115,
            lineWidth: 8
        }
    }
    ;
    e.getPieChartOptions = function(e) {
        return _.extend(a(), {
            barColor: n.DOCUMENT.STATUS_COLORS[e]
        })
    }
    ;
    var s = function(t) {
        var o = n.DOCUMENT.STATUS[t];
        return _.find(e.DOCUMENT_SECTIONS, {
            name: o
        })
    }
      , l = function(e) {
        var t = _.keys(n.DOCUMENT.STATUS);
        return _.reduce(t, function(n, t) {
            var o = e["document." + t.toLowerCase()]
              , i = s(t);
            return i ? n + o : n
        }
        , 0)
    }
    ;
    e.loadDocumentsInfo = function(t) {
        e.loadingDocumentsCount = !0,
        o.getDocumentsCount(t).then(function(t) {
            var o = _.keys(n.DOCUMENT.STATUS)
              , a = l(t);
            _.each(o, function(e) {
                var n = t["document." + e.toLowerCase()]
                  , o = s(e);
                o && (o.count = n,
                o.percent = 0 === a ? 0 : i("number")(100 * n / a, 2))
            }
            ),
            e.loadingDocumentsCount = !1
        }
        )
    }
}
]),
angular.module("pd.dashboard").controller("DashboardDocumentsSectionController", ["$scope", "Constants", "DocumentsService", "BadgeService", "FeaturesService", "LocalStoreService", "$timeout", function(e, n, t, o, i, a, s) {
    e.showSection = function(n) {
        e.documentSection = n
    }
    ;
    var l = function(n) {
        var o = _.isArray(n) ? _.first(n) : n;
        return {
            name: o,
            count: 0,
            percent: 0,
            documents: [],
            hasMoreDocuments: !0,
            documentsRequestParams: {
                page: 1,
                count: 20,
                status: n,
                period: c()
            },
            loadDocuments: function() {
                var e = this;
                return t.getFlatDocuments(e.documentsRequestParams).then(function(n) {
                    1 === e.documentsRequestParams.page && (e.documents = []),
                    e.documents = e.documents.concat(n),
                    e.hasMoreDocuments = n.next ? !0 : !1,
                    e.documentsRequestParams.page++,
                    e.triedLoadingDocs = !0
                }
                )
            },
            reloadDocuments: function() {
                return this.documentsRequestParams.page = 1,
                this.hasMoreDocuments = !0,
                this.loadDocuments()
            },
            setPeriod: function(e) {
                this.documentsRequestParams.period = e
            },
            pieChartOptions: e.getPieChartOptions(o)
        }
    }
      , r = function() {
        e.waitingForApprovalDocumentsCount = o.getBadge("dashboard"),
        e.$on("badge.update", function(n, t) {
            "dashboard" === t.name && (e.waitingForApprovalDocumentsCount = t.value)
        }
        )
    }
    ;
    i.checkAvailability(n.FEATURES.WORKFLOW).then(function(t) {
        t ? (e.DOCUMENT_SECTIONS = [l([n.DOCUMENT.STATUS.SENT]), l([n.DOCUMENT.STATUS.WAITING_APPROVAL, n.DOCUMENT.STATUS.APPROVED, n.DOCUMENT.STATUS.REJECTED]), l([n.DOCUMENT.STATUS.VIEWED]), l([n.DOCUMENT.STATUS.COMPLETED]), l([n.DOCUMENT.STATUS.DRAFT])],
        r()) : e.DOCUMENT_SECTIONS = [l([n.DOCUMENT.STATUS.SENT]), l([n.DOCUMENT.STATUS.VIEWED]), l([n.DOCUMENT.STATUS.COMPLETED]), l([n.DOCUMENT.STATUS.DRAFT])],
        e.documentSection = _.first(e.DOCUMENT_SECTIONS),
        e.period = c()
    }
    ),
    e.$watch("DOCUMENT_SECTIONS", function(t) {
        t && (_.each(t, function(e) {
            e.isVisible = e.name !== n.DOCUMENT.STATUS.WAITING_APPROVAL || 0 !== e.count
        }
        ),
        e.visibleSectionsCount = _.reduce(t, function(e, n) {
            return n.isVisible ? e + 1 : e
        }
        , 0))
    }
    , !0),
    e.loadDocuments = function() {
        var n = e.documentSection;
        !e.loadingDocuments && n.hasMoreDocuments && (e.loadingDocuments = !0,
        n.loadDocuments().then(function() {
            e.loadingDocuments = !1
        }
        ))
    }
    ,
    e.$watch("documentSection", function(e) {
        e && _.isEmpty(e.documents) && m()
    }
    ),
    e.$on(n.GRID.FILTERING, function(n, t) {
        var o;
        o = t.filter ? function(e) {
            e.documentsRequestParams.q = t.filter,
            e.documents = []
        }
         : function(e) {
            delete e.documentsRequestParams.q,
            e.documents = []
        }
        ,
        _.each(e.DOCUMENT_SECTIONS, o),
        m()
    }
    ),
    e.periods = _.values(n.TIME_PERIODS);
    var c = function() {
        if (e.period)
            return e.period;
        var t = a.getString("dashboard.period")
          , o = n.TIME_PERIODS.MONTH;
        return t ? t.replace('"', "").replace('"', "") : o
    }
      , d = function(e) {
        a.setString("dashboard.period", e)
    }
    ;
    e.$watch("period", function(n) {
        n && (d(n),
        _.each(e.DOCUMENT_SECTIONS, function(t) {
            t.setPeriod(n),
            t !== e.documentSection && (t.documents = [])
        }
        ),
        m(),
        e.loadDocumentsInfo(n))
    }
    );
    var u, m = function() {
        s.cancel(u),
        e.loadingDocuments = !0,
        u = s(function() {
            e.documentSection.reloadDocuments().then(function() {
                e.loadingDocuments = !1
            }
            )
        }
        , 300)
    }
    ;
    t.getDocuments({
        page: 1,
        count: 1
    }).then(function(n) {
        e.hasDocs = !_.isEmpty(n)
    }
    )
}
]),
angular.module("pd.dashboard").controller("DashboardRightPannelController", ["$scope", "PropertiesService", "Config", function(e, n, t) {
    e.banners = null ,
    n.get().then(function(n) {
        var o = 0;
        n && n.organization && n.organization.company_size && (o = parseInt(n.organization.company_size));
        var i = [];
        t.isWorkspaceOwner() && (o > 0 && (i.push(o > 20 ? "request-demo-banner" : "join-webinar-banner"),
        o > 1 && i.push("convert-template-banner")),
        i.push("invite-members-banner")),
        e.banners = i
    }
    ),
    e.$on("onboarding-banners.show", function() {
        e.hasBanners = !0
    }
    ),
    e.$on("onboarding-banners.hide", function() {
        e.hasBanners = !1
    }
    )
}
]),
angular.module("pd.dashboard").controller("DashboardWelcomeDialogController", ["$scope", "$state", "ProfileService", "$location", function(e, n, t, o) {
    e.nextUrl = o.search().next || !1,
    t.getProfile().then(function(n) {
        e.data = n,
        "template" === n.signup_source && (e.isSignupSourceTemplate = !0),
        e.greetingMessage = n.first_name ? n.first_name + ", you Rock!" : "You Rock!",
        null  === e.data.company_size && (e.data.company_size = 0)
    }
    ),
    e.get_next_screen = function(n) {
        n ? (e.data.account_type = 0,
        e.screen = 3) : (e.data.account_type = 1,
        e.screen = 2)
    }
    ,
    e.screen = 1,
    e.business_options = {
        0: "1-5 people",
        1: "6-10 people",
        2: "11-20 people",
        3: "21-50 people",
        4: "50+ people"
    };
    var i = function(e) {
        t.updateProfile(e, {
            welcome: !0
        })
    }
    ;
    e.clickClose = function(n) {
        i(n),
        e.close(),
        e.nextUrl && o.path(e.nextUrl)
    }
    ,
    e.goNext = function(t) {
        i(t),
        e.close(),
        e.nextUrl ? o.path(e.nextUrl).replace() : n.go("documents.new", {})
    }
}
]).run(["HelpService", function(e) {
    var n = "dashboardWelcomeDialogShowed";
    e.registerWelcomeDialog("dashboard", {
        templateUrl: "/views/dashboard/dashboard-welcome.html",
        profileStateName: n,
        backdrop: "static",
        keyboard: !1
    })
}
]),
angular.module("pd.dashboard").controller("GoogleWelcomeDialogController", ["$scope", "Constants", "ProfileService", function(e, n, t) {
    t.getProfile().then(function(n) {
        e.greetingMessage = n.first_name ? n.first_name + ", you Rock!" : "You Rock!"
    }
    ),
    e.addonLink = n.GOOGLE_DOCS_ADD_ON
}
]).run(["HelpService", function(e) {
    var n = "dashboardWelcomeDialogShowed";
    e.registerWelcomeDialog("dashboard-from-google", {
        templateUrl: "/views/dashboard/dashboard-welcome-from-google.html",
        profileStateName: n
    })
}
]),
angular.module("pd.dashboard").controller("YammerWelcomeDialogController", ["$scope", "YammerContactsSyncDialog", "ProfileService", function(e, n, t) {
    t.getProfile().then(function(n) {
        e.greetingMessage = n.first_name ? n.first_name + ", you Rock!" : "You Rock!"
    }
    ),
    e.startIntegration = function() {
        e.$close(),
        n.open()
    }
}
]).run(["HelpService", function(e) {
    var n = "dashboardWelcomeDialogShowed";
    e.registerWelcomeDialog("dashboard-from-yammer", {
        templateUrl: "/views/dashboard/dashboard-welcome-from-yammer.html",
        profileStateName: n
    })
}
]),
angular.module("pd.contacts", ["pd.common"]).config(["$stateProvider", function(e) {
    e.state("contacts", {
        parent: "app.base",
        url: "^/contacts",
        views: {
            "@app": {
                controller: "ContactsController",
                templateUrl: "/views/contacts/list.html"
            }
        },
        breadcrumbs: [{
            name: "Contacts",
            url: "#/contacts"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("contacts.add", {
        parent: "contacts",
        url: "^/contacts/add",
        views: {
            "@app": {
                controller: "AddContactController",
                templateUrl: "/views/contacts/add.html"
            }
        },
        breadcrumbs: [{
            name: "Add"
        }]
    }),
    e.state("contacts.details", {
        parent: "contacts",
        url: "^/contacts/:contactId",
        views: {
            "@app": {
                controller: "ContactDetailsController",
                templateUrl: "/views/contacts/details.html"
            },
            "left-section@contacts.details": {
                templateUrl: "/views/contacts/card.html"
            },
            "right-section@contacts.details": {
                templateUrl: "/views/contacts/documents-list.html"
            }
        },
        breadcrumbs: [{
            ref: "contact"
        }]
    }),
    e.state("contacts.details.edit", {
        parent: "contacts.details",
        url: "^/contacts/edit/:contactId",
        views: {
            "left-section@contacts.details": {
                controller: "ContactEditController",
                templateUrl: "/views/contacts/edit.html"
            }
        },
        breadcrumbs: [{
            name: "Edit"
        }]
    })
}
]),
angular.module("pd.contacts").controller("ContactDetailsController", ["$scope", "$rootScope", "$state", "$stateParams", "$filter", "ContactsService", "DocumentsService", function(e, n, t, o, i, a, s) {
    a.getContactById(o.contactId, function(n) {
        e.contact = n
    }
    ),
    e.$watch("contact", function(e) {
        e && n.$broadcast("object.loaded", {
            ref: "contact",
            obj: e,
            breadcrumb: {
                name: i("fullName")(e),
                url: "#/contacts/" + e.id
            }
        })
    }
    ),
    e.getDocuments = function(n, t) {
        s.getContactDocuments(o.contactId, n, function(n) {
            e.documentsCount = n.totalCount,
            t(n)
        }
        )
    }
    ,
    e.backToContacts = function() {
        t.go("contacts")
    }
    ,
    e.edit = function() {
        t.go("contacts.details.edit", {
            contactId: o.contactId
        })
    }
    ,
    e.sendDocumentToContact = function(e) {
        t.go("documents.new", {
            contactId: e.id
        })
    }
}
]),
angular.module("pd.contacts").controller("ContactEditController", ["$scope", "$rootScope", "$state", "$stateParams", "ContactsService", "NotificationCenter", "AlertService", function(e, n, t, o, i, a, s) {
    var l = ["first_name", "last_name", "email", "company"];
    e.contactHasChanged = !1,
    e.isEditContactFormValid = !1,
    e.$watch("contact", function(n, t) {
        n && !t ? e.originalContact = _.pick(n, l) : n && t && (e.originalContact || (e.originalContact = _.pick(n, l)),
        e.contactHasChanged = !_.isEqual(e.originalContact, _.pick(e.contact, l)),
        e.isEditContactFormValid = e.contactHasChanged && r(e.contact))
    }
    , !0);
    var r = function(e) {
        return !_.isEmpty(e.email)
    }
    ;
    e.backToDetails = function() {
        t.go("contacts.details", {
            contactId: o.contactId
        })
    }
    ,
    e.updateContact = function() {
        i.updateContact(e.contact).then(function() {
            e.backToDetails(),
            a.notification("Client has been updated.")
        }
        , function() {
            s.alert({
                text: "This email is already associated with another contact"
            })
        }
        )
    }
    ,
    e.resetChanges = function() {
        _.assign(e.contact, _.pick(e.originalContact, l))
    }
}
]),
angular.module("pd.contacts").controller("ContactsController", ["$scope", "$state", "ContactsService", "ConfirmationService", "NotificationCenter", "AlertService", "Constants", "ProfileService", "Config", function(e, n, t, o, i, a, s, l, r) {
    e.$on(s.GRID.SELECTION_CHANGE, function(n, t) {
        e.selected = t
    }
    ),
    e.gridOptions = {
        store: {
            getItems: t.getContacts
        },
        properties: {
            sorting: {
                name: "asc"
            }
        },
        toQueryParameters: function(e) {
            return "name" === e.order_by ? e.order_by = "first_name,last_name" : "-name" === e.order_by && (e.order_by = "-first_name,-last_name"),
            e
        }
    },
    l.getProfile().then(function(n) {
        e.profile = n
    }
    ),
    e.addContact = function() {
        n.go("contacts.add")
    }
    ,
    e.removeContact = function() {
        o.confirm({
            text: "Do you want to remove selected contact(-s)?"
        }).then(function() {
            var n = _.map(e.selected, function(e) {
                return e.id
            }
            );
            t.removeContacts(n).then(function() {
                e.$broadcast(s.GRID.RELOAD)
            }
            , function() {
                a.alert({
                    text: "You cannot delete the selected contact(s) because you have documents associated with them."
                })
            }
            )
        }
        )
    }
}
]).controller("AddContactController", ["$scope", "$rootScope", "$state", "ContactsService", "NotificationCenter", "AlertService", function(e, n, t, o, i, a) {
    e.contact = {
        email: "",
        first_name: "",
        last_name: "",
        company: ""
    },
    e.addContact = function() {
        o.addContact(e.contact).then(function(e) {
            i.notification("Client has been added."),
            t.go("contacts.details", {
                contactId: e.id
            })
        }
        , function() {
            a.alert({
                title: "Contact can not be created",
                text: "This contact already exists."
            })
        }
        )
    }
    ,
    e.back = function() {
        t.go("contacts")
    }
}
]),
angular.module("pd.doctools", []),
angular.module("pd.doctools").run(["HelpService", function(e) {
    e.registerWelcomeDialog("analytics", {
        templateUrl: "/views/doctools/analytics/analytics-welcome.html",
        profileStateName: "analyticsWelcomeDialogShowed"
    })
}
]),
angular.module("pd.doctools").constant("meta.analytics", {
    name: "Analytics",
    controller: {
        name: "DocumentAnalyticsActionController"
    },
    icon: "analytics",
    route: "analytics"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    (t.application.app || t.application.sdk) && (e.state("documents.details.tools-analytics", {
        parent: "documents.details",
        url: "^/documents/:documentId/analytics",
        views: {
            "tool-content@documents.details": {
                controller: "DocumentToolAnalyticsController",
                templateUrl: "/views/doctools/analytics/analytics.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-analytics", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/analytics",
        views: {
            "tool-content@inbox.details": {
                controller: "DocumentToolAnalyticsController",
                templateUrl: "/views/doctools/analytics/analytics.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]).controller("DocumentAnalyticsActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-analytics")
    }
}
]),
angular.module("pd.doctools").controller("DocumentToolAnalyticsController", ["$scope", "DocumentAnalyticsService", "FeaturesService", "Constants", "scrollToElement", "$filter", "ToolsManager", "ContextService", "HelpService", "AppAnalyticsService", function(e, n, t, o, i, a, s, l, r, c) {
    var d = .12
      , u = ".editable-document-content";
    t.checkAvailability(o.FEATURES.DOCUMENT_ANALYTICS).then(function(n) {
        e.available = n
    }
    ),
    c.track("Viewed document analytics"),
    e.$watch("documentInfo", function(t) {
        if (t) {
            if (!s.hasToolAccess(t, "analytics"))
                return void l.openDocTool("tools-timeline");
            var o = t.document;
            o.recipients.length > 0 ? e.selectedRecipient = o.recipients[0] : e.noRecipients = !0;
            var i = {
                d: o.id,
                r: o.revision.number
            };
            n.getDocumentInfo(i).then(function(n) {
                e.documentAnalytics = n && n.results ? p(o.recipients, n.results) : p(o.recipients, [])
            }
            )
        }
    }
    ),
    e.$watch("selectedRecipient", function(t) {
        if (t) {
            var o = e.documentInfo.document
              , i = {
                d: o.id,
                r: o.revision.number,
                rc: t.id
            };
            e.loadingAnalytics = !0,
            n.getRecipientInfo(i).then(function(n) {
                e.documentContentInfo.isEditableContent && m(),
                n && n.results ? (e.recipientAnalytics = b(n.results),
                e.hasRecipientAnalytics = _.find(e.recipientAnalytics, function(e) {
                    return e.info
                }
                )) : (e.recipientAnalytics = b([]),
                e.hasRecipientAnalytics = !1),
                e.loadingAnalytics = !1
            }
            )
        }
    }
    );
    var m = function() {
        var e = angular.element("#cloned-content-container").empty()
          , n = angular.element(u)[0]
          , t = angular.element(n.cloneNode(!0));
        t.css("transform", "scale(" + d + ")"),
        t.css("transform-origin", "top left"),
        e.append(t)
    }
    ;
    e.pieChartOptions = {
        barColor: "#59B671",
        trackColor: "rgba(128,128,128,.5)",
        scaleColor: !1,
        size: 50,
        lineWidth: 4
    };
    var p = function(e, n) {
        return _.map(e, function(e) {
            var t = _.find(n, function(n) {
                return n.recipient === e.id
            }
            );
            return {
                recipient: e,
                opened: t ? t.opened : !1
            }
        }
        )
    }
      , g = function(e, n) {
        var t = _.find(n, function(n) {
            return n.page === e.number
        }
        );
        if (!t)
            return 0;
        var o = _.reduce(n, function(e, n) {
            return e + n.time_spent
        }
        , 0);
        return Math.round(t.time_spent / o * 100)
    }
      , f = function(e, n) {
        return _.map(e.pages, function(e, t) {
            var o = {
                page: e,
                index: t
            }
              , i = _.find(n, function(n) {
                return n.content ? n.content === e.content && n.page === e.number : n.page === e.number
            }
            );
            return i && (o.info = {},
            o.info.timeSpent = a("duration")(i.time_spent),
            o.info.count = i.count,
            o.info.lastOpened = i.last_opened,
            o.info.percent = g(e, n)),
            o
        }
        )
    }
      , b = function(n) {
        if (e.documentContentInfo.isEditableContent) {
            var t, i = angular.element(u), a = i.height(), s = i.width() / o.EDITABLE_DOCUMENT_PAGE_ASPECT_RATIO, l = a % s, r = 100 * l / s, c = e.documentInfo.document.revision.content.id;
            return t = r < o.ANALYTICS.LAST_PAGE_THRESHOLD ? _.map(_.range(Math.floor(a / s)), function(e, n, t) {
                return {
                    number: n + 1,
                    content: c,
                    isLoaded: !0,
                    height: n === t.length - 1 ? (s + l) * d : s * d
                }
            }
            ) : _.map(_.range(Math.ceil(a / s)), function(e) {
                return {
                    number: e + 1,
                    content: c,
                    isLoaded: !0,
                    height: s * d
                }
            }
            ),
            f({
                pages: t,
                content: c
            }, n)
        }
        return f(e.documentContentInfo, n)
    }
    ;
    e.dropdown = {
        isOpen: !1
    },
    e.select = function(n) {
        e.selectedRecipient = n,
        e.dropdown.isOpen = !1
    }
    ,
    e.scrollToPage = function(e) {
        var n = 350
          , t = "#page-" + e.number + "-" + e.content
          , o = angular.element(".document")
          , a = angular.element(t).offset();
        n = a ? 10 * Math.ceil(Math.sqrt(Math.abs(o.scrollTop() - a.top))) + 250 : n,
        n = Math.min(n, 1e3),
        i(o, t, {
            duration: n,
            offset: -100
        })
    }
    ,
    e.scrollToBlock = function(e) {
        var n = angular.element(u)
          , t = n.width() / o.EDITABLE_DOCUMENT_PAGE_ASPECT_RATIO
          , i = t * (e.number - 1);
        angular.element(".document-scrollable-marker").scrollTop(i)
    }
    ,
    r.dialog("analytics")
}
]),
angular.module("pd.doctools").constant("meta.approval", {
    name: "Send for approval",
    controller: {
        name: "SendForApprovalDocToolController",
        initiateImmediately: !0
    },
    styleModifier: "btn--navpanel-offset btn--navpanel-green btn--navpanel-longtitle",
    icon: "send color--white"
}),
angular.module("pd.doctools").controller("SendForApprovalDocToolController", ["$scope", "tool", "DocumentLifecycleService", function(e, n, t) {
    e.$watch("documentInfo.document.approval", function(e) {
        n.hidden = !e
    }
    ),
    this.action = function() {
        t.sendForApproval(e.documentInfo)
    }
}
]),
angular.module("pd.doctools").service("SendForApprovalDialog", ["ModalService", function(e) {
    this.open = function(n) {
        var t = {
            templateUrl: "/views/doctools/approval/dialogs/send-for-approval-dialog.html",
            controller: "SendForApprovalDialogController",
            resolve: {
                documentInfo: function() {
                    return n
                }
            }
        };
        return e.open(t)
    }
}
]).controller("SendForApprovalDialogController", ["$scope", "documentInfo", "DocumentsApprovalService", "$rootScope", "$filter", "DocumentUpdateStatus", "ContextService", "AlertService", function(e, n, t, o, i, a, s, l) {
    e.documentInfo = n,
    e.messageModel = {
        message: ""
    };
    var r = _.first(n.document.approval.moderators);
    r.role ? (e.moderatedByRole = !0,
    e.moderatorName = i("translate")("roles." + r.role)) : e.moderatorName = i("fullName")(r.user),
    e.send = function() {
        e.sending = !0,
        a.whenReady().then(function() {
            t.sendForApproval(n.document, e.messageModel.message).then(function() {
                o.$broadcast("document.sent.for.approval", n.document),
                s.openDocTool("tools-timeline")
            }
            , function(e) {
                e && e.data && ("approval_not_assigned" === e.data.type || "invalid_moderator" === e.data.type) && l.alert({
                    title: "Unable to send for approval",
                    text: "This document requires approval but a user who is responsible for this has been removed. Please contact your administrator to set up Approval process properly for this document/template."
                })
            }
            ),
            e.$close()
        }
        )
    }
}
]),
angular.module("pd.doctools").constant("meta.comments", {
    name: "Comments",
    controller: {
        name: "DocumentCommentsActionController"
    },
    styleModifier: "btn--navpanel",
    icon: "comments-2",
    route: "comments"
}).config(["$stateProvider", function(e) {
    e.state("documents.details.tools-comments", {
        parent: "documents.details",
        url: "^/documents/:documentId/comments",
        views: {
            "tool-content@documents.details": {
                templateUrl: "/views/doctools/comments/comments.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-comments", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/comments",
        views: {
            "tool-content@inbox.details": {
                templateUrl: "/views/doctools/comments/comments.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    })
}
]).controller("DocumentCommentsActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-comments")
    }
}
]),
angular.module("pd.doctools").constant("meta.complete", {
    name: "Complete",
    controller: {
        name: "CompleteDocToolController",
        initiateImmediately: !0
    },
    styleModifier: "btn--navpanel-offset btn--navpanel-green",
    icon: "doc-accepted color--white"
}),
angular.module("pd.doctools").controller("CompleteBeforeSendingErrorDialogController", ["$scope", "empty", "documentInfo", "WidgetHighlightService", function(e, n, t, o) {
    var i = function(e) {
        return e.widget.title
    }
    ;
    e.empty = _.map(n, i).join(", "),
    e.close = function() {
        a(n),
        e.$close()
    }
    ;
    var a = function(e) {
        var n = _.first(e);
        o.highlightWidget(n.widget)
    }
}
]),
angular.module("pd.doctools").controller("CompleteDocToolController", ["$scope", "tool", "ProfileService", "DocumentLifecycleService", "RecipientService", function(e, n, t, o, i) {
    e.$watch("documentInfo.document.recipients", function(n) {
        n && a(e.documentInfo)
    }
    , !0),
    e.$watch("documentInfo.document.approval", function() {
        e.documentInfo && a(e.documentInfo)
    }
    );
    var a = function(e) {
        t.getProfile().then(function(t) {
            n.hidden = i.isOnlyRecipient(t, e.document.recipients) ? e.document.approval ? !e.isApproved : !1 : !0
        }
        )
    }
    ;
    this.action = function() {
        o.selfComplete(e.documentInfo)
    }
}
]),
angular.module("pd.doctools").run(["HelpService", function(e) {
    e.registerWelcomeDialog("content", {
        templateUrl: "/views/doctools/widgets/content-welcome.html",
        profileStateName: "contentWelcomeDialogShowed"
    })
}
]),
angular.module("pd.doctools").constant("meta.content", {
    name: "Content",
    controller: {
        name: "ContentActionController"
    },
    icon: "block",
    route: "content"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    if (t.application.app || t.application.sdk) {
        var o = {
            templateUrl: "/views/doctools/content/content.html",
            controller: "ContentDocToolController"
        };
        e.state("documents.details.tools-content", {
            parent: "documents.details",
            url: "^/documents/:documentId/content?block&widget&row&section",
            views: {
                "tool-content@documents.details": o
            },
            data: {
                hasRightDetailsPanel: !0
            }
        }),
        e.state("templates.details.tools-content", {
            parent: "templates.details",
            url: "^/templates/:templateId/content?block&widget&row&section",
            views: {
                "tool-content@templates.details": o
            },
            data: {
                hasRightDetailsPanel: !0
            }
        }),
        e.state("inbox.details.tools-content", {
            parent: "inbox.details",
            url: "^/inbox/:documentId/content?block&widget&row&section",
            views: {
                "tool-content@inbox.details": o
            },
            data: {
                hasRightDetailsPanel: !0
            }
        }),
        e.state("library.details.tools-content", {
            parent: "library.details",
            url: "^/library/:documentId/content?new&block&widget&row&section",
            views: {
                "tool-content@library.details": o
            },
            data: {
                hasRightDetailsPanel: !0
            }
        })
    }
}
]).controller("ContentActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-content")
    }
}
]),
angular.module("pd.doctools").controller("ContentDocToolBlocksController", ["$scope", "$rootScope", "BlocksService", "ConfirmationService", "TextFieldDialogService", "LibraryService", "ElementClickBehavior", "FeaturesService", "NotificationCenter", "$controller", "BlockControllersService", "Constants", "ContextService", "$stateParams", "ConvertBlockToCLIDialog", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g) {
    var f = [u.BLOCK_TYPES.HEADER, u.BLOCK_TYPES.FOOTER, u.BLOCK_TYPES.COVER]
      , b = function(e) {
        return m.isState("library") ? _.filter(e, function(e) {
            return -1 === f.indexOf(e.handle)
        }
        ) : e
    }
    ;
    e.$watch("documentInfo", function(n) {
        if (n && (t.getAvailableBlocks().then(function(n) {
            e.blocks = b(n)
        }
        ),
        p.block)) {
            var o = _.find(n.blockList.blocks, {
                id: p.block
            });
            if (o.type.handle === u.BLOCK_TYPES.PAGE_BREAK)
                return;
            t.getLayouts(o.type.id).then(function(n) {
                e.layouts = n,
                e.block = o,
                e.section = e.SECTIONS.BLOCK_SETTINGS
            }
            )
        }
    }
    );
    var v = [];
    e.$watch("block.type", function(n) {
        n && n.handle && (e.blockSettingsTemplate = "/views/blocks/settings/" + n.handle + ".html",
        _.each(d.getBlockSettingsControllers(e.block), function(n) {
            -1 === v.indexOf(n) && (c(n, {
                $scope: e
            }),
            v.push(n))
        }
        ))
    }
    ),
    e.changeLayout = function(n) {
        e.block.layout = n
    }
    ,
    e.$on("block.delete", e.closeBlockSettings),
    e.saveAsTemplate = function(e) {
        i.show({
            title: "Save as template",
            placeholder: "Template Name"
        }).then(function(n) {
            a.getRootFolder().then(function(t) {
                a.createItem({
                    name: n,
                    block: e.id
                }, {
                    folder_id: t.id
                }).then(function() {
                    r.notification('Content Template "' + n + '" was successfully created')
                }
                )
            }
            )
        }
        )
    }
    ,
    l.checkAvailability(u.FEATURES.LIBRARY).then(function(n) {
        e.defaultMenuItems = n ? [{
            label: "Duplicate block",
            action: "duplicateBlock"
        }, {
            label: "Add to content library",
            action: "addBlockToContentLibrary"
        }, {
            label: "Remove block",
            action: "removeBlock",
            className: "color--red"
        }] : [{
            label: "Duplicate block",
            action: "duplicateBlock"
        }, {
            label: "Remove block",
            action: "removeBlock",
            className: "color--red"
        }]
    }
    ),
    e.addBlockToContentLibrary = function() {
        g.open(e.block)
    }
    ,
    e.duplicateBlock = function() {
        n.$broadcast("block.duplicate", e.block)
    }
    ,
    e.removeBlock = function() {
        o.confirm({
            text: "Remove this content block?",
            okText: "Remove",
            noText: "Cancel"
        }).then(function() {
            n.$broadcast("block.delete", e.block)
        }
        )
    }
}
]),
angular.module("pd.doctools").controller("ContentDocToolController", ["$scope", "$controller", "Constants", "ToolsManager", "ContextService", "$stateParams", "$state", "ElementClickBehavior", function(e, n, t, o, i, a, s, l) {
    e.TOP_LEVEL_SECTIONS = {
        BLOCKS: "blocks",
        WIDGETS: "widgets",
        TOKENS: "tokens"
    },
    e.SECTIONS = angular.extend({
        BLOCK_SETTINGS: "block_settings",
        WIDGET_SETTINGS: "widget_settings"
    }, e.TOP_LEVEL_SECTIONS),
    e.section = a.section || e.SECTIONS.BLOCKS,
    e.showSection = function(e) {
        s.go(s.current.name, {
            section: e,
            widget: null ,
            block: null ,
            row: null 
        }, {
            location: "replace"
        })
    }
    ;
    var r = null ;
    e.closeSettings = function() {
        l.fireEvent({
            name: "unhighlight"
        }),
        s.go(s.current.name, {
            section: r,
            widget: null ,
            block: null ,
            row: null 
        }, {
            location: "replace"
        })
    }
    ,
    e.$on("$stateChangeSuccess", function(e, n, t, o, i) {
        o && o.name === n.name && i.section && (r = i.section)
    }
    ),
    e.$watch("documentInfo", function(t) {
        t && (o.hasToolAccess(t, "content") ? (e.isTemplates = i.isTemplates() || i.isContentLibrary(),
        n("ContentDocToolBlocksController", {
            $scope: e
        }),
        n("ContentDocToolWidgetsController", {
            $scope: e
        }),
        e.supportTokens = e.documentContentInfo.isEditableContent,
        e.supportTokens && e.isTemplates ? n("ContentDocToolTemplateTokensController", {
            $scope: e
        }) : e.supportTokens && !e.isTemplates && n("ContentDocToolDocumentTokensController", {
            $scope: e
        })) : i.openDocTool("tools-timeline"))
    }
    );
    var c = s.current.name;
    e.$on("$stateChangeStart", function(e, n) {
        c !== n.name && l.fireEvent({
            name: "unhighlight"
        })
    }
    )
}
]),
angular.module("pd.doctools").controller("ContentDocToolDocumentTokensController", ["$scope", "Constants", "TokensService", "ScrollToTokenService", "$filter", "$timeout", "$rootScope", function(e, n, t, o, i, a, s) {
    e.prefix = n.TOKENS.PREFIX,
    e.postfix = n.TOKENS.POSTFIX;
    var l = function(e) {
        return angular.element(i("tokenSelector")(e)).length
    }
    ;
    e.loading = !0,
    e.totalCount = 0,
    e.$watch("section", function(n) {
        n === e.TOP_LEVEL_SECTIONS.TOKENS && (e.loading = !0,
        e.totalCount = 0,
        a(function() {
            e.documentInfo.tokens = i("tokensInNaturalOrder")(e.documentInfo.tokens),
            _.each(e.documentInfo.tokens, function(n) {
                n.count = l(n),
                e.totalCount = e.totalCount + n.count
            }
            ),
            e.loading = !1
        }
        , 500))
    }
    ),
    e.$on("remove.token", function(n, t) {
        t.token.count = t.token.count - 1,
        e.totalCount = e.totalCount - 1
    }
    ),
    e.onTokenClick = function(e) {
        o.scrollTo(e),
        s.$broadcast("token.name.click", {
            token: e
        })
    }
    ,
    e.onTokenValueClick = function(e) {
        o.scrollTo(e),
        "predefined" !== e.type && s.$broadcast("token.value.click", {
            token: e
        })
    }
}
]),
angular.module("pd.doctools").controller("ContentDocToolTemplateTokensController", ["$scope", "Constants", "TokensService", "singleWatch", "$timeout", "ScrollToTokenService", "$filter", "$interval", function(e, n, t, o, i, a, s, l) {
    e.prefix = n.TOKENS.PREFIX,
    e.postfix = n.TOKENS.POSTFIX;
    var r, c = function(e) {
        return angular.element(s("tokenSelector")(e)).length
    }
    , d = function(n, o) {
        var i = _.filter(n, function(e) {
            return 0 === e.count || !!_.find(o, {
                name: e.name
            })
        }
        );
        return _.isEmpty(i) || t.deleteTokens(e.documentInfo.blockList.id, i),
        _.filter(n, function(e) {
            return e.count > 0
        }
        )
    }
    , u = function() {
        _.each(e.roleTokens, function(e) {
            _.each(e.tokens, function(e) {
                e.count = c(e)
            }
            )
        }
        ),
        _.each(e.customTokens, function(e) {
            e.count = c(e)
        }
        ),
        _.each(e.predefinedTokens, function(e) {
            e.count = c(e)
        }
        );
        var n = d(e.customTokens, e.predefinedTokens);
        e.customTokens = s("tokensInNaturalOrder")(n)
    }
    , m = function(n) {
        l.cancel(r);
        var t = _.filter(n, {
            type: "custom"
        })
          , o = _.filter(n, {
            type: "predefined"
        });
        e.roleTokens = _.map(e.documentInfo.document.roles, function(e) {
            return {
                role: e,
                showTokens: !0,
                toggleTokens: function() {
                    this.showTokens = !this.showTokens
                },
                tokens: _.filter(n, {
                    role_id: e.id
                })
            }
        }
        ),
        e.customTokens = t,
        e.predefinedTokens = _.sortBy(o, "name"),
        e.initializingCustomTokens = !0,
        i(function() {
            u(),
            e.initializingCustomTokens = !1
        }
        , 1500),
        r = l(u, 5e3)
    }
    ;
    e.$on("$destroy", function() {
        l.cancel(r)
    }
    ),
    e.$watch("section", function(n) {
        n === e.TOP_LEVEL_SECTIONS.TOKENS ? o(e, "documentInfo.document.id", function(n) {
            e.loadingTokens = !0,
            t.getTokens(n).then(function(n) {
                m(n),
                e.loadingTokens = !1
            }
            )
        }
        ) : l.cancel(r)
    }
    ),
    e.scrollToToken = function(e) {
        a.scrollTo(e)
    }
    ,
    e.$on("copyButton.copied", function(e, n) {
        if (!n.withTickSymbol) {
            n.withTickSymbol = !0;
            var t = n.innerHTML;
            n.innerHTML = t + "&#x2713;",
            setTimeout(function() {
                n.innerHTML = t,
                n.withTickSymbol = !1
            }
            , 800)
        }
    }
    ),
    e.showCustomTokens = !0,
    e.showPredefinedTokens = !0,
    e.toggleCustomTokens = function() {
        e.showCustomTokens = !e.showCustomTokens
    }
    ,
    e.togglePredefinedTokens = function() {
        e.showPredefinedTokens = !e.showPredefinedTokens
    }
}
]),
angular.module("pd.doctools").controller("ContentDocToolWidgetsController", ["$scope", "$rootScope", "WidgetRegistry", "HelpService", "OnboardingService", "ContextService", "$state", "$timeout", "$stateParams", "FeaturesService", "Constants", function(e, n, t, o, i, a, s, l, r, c, d) {
    e.$watch("documentInfo", function(n) {
        if (n) {
            var o = t.getWidgetsForDoc(n);
            c.getAvailableFeatures().then(function(n) {
                var t = _.contains(n, d.FEATURES.MASKED_FIELD)
                  , i = _.contains(n, d.FEATURES.UPLOAD_FIELD);
                e.widgets = _.filter(o, function(e) {
                    return e["static"] ? !1 : e.type === d.WIDGET.MASKED ? t : e.type === d.WIDGET.UPLOAD ? i : !0
                }
                )
            }
            ),
            r.widget && (e.widgetInfo = _.find(n.widgetsInfo, function(e) {
                return e.widget.id === r.widget
            }
            ),
            e.section = e.SECTIONS.WIDGET_SETTINGS)
        }
    }
    );
    var u = s.current.name;
    i.whenNotActive().then(function() {
        l(function() {
            a.isState(u) && o.dialog("content")
        }
        , 500)
    }
    )
}
]),
angular.module("pd.doctools").constant("meta.create-template", {
    name: "Convert to template",
    controller: {
        name: "TemplateCreateFromDocumentActionController"
    },
    icon: "templates"
}).controller("TemplateCreateFromDocumentActionController", ["$state", "$stateParams", "DocumentsService", "meta.create-template", "NotificationCenter", function(e, n, t, o, i) {
    var a = function() {
        o.working = !0,
        o.name = "Converting to template"
    }
      , s = function() {
        o.working = !1,
        o.name = "Convert to template"
    }
    ;
    this.action = function() {
        o.working || (a(),
        t.createTemplateFromDocument(n.documentId).then(function(t) {
            s();
            var o = _.find(t, {
                doc_id: n.documentId
            }).template_id;
            e.go("templates.details", {
                templateId: o
            }).then(function() {
                i.message("Document was successfully converted to template", 11)
            }
            )
        }
        , function() {
            s(),
            i.message("Failed to convert this document to template", 11)
        }
        ))
    }
}
]),
angular.module("pd.doctools").constant("meta.create", {
    name: "Create doc",
    styleModifier: "btn--navpanel-offset btn--navpanel-green",
    controller: {
        name: "DocumentCreateFromTemplateActionController"
    },
    icon: "templates"
}).controller("DocumentCreateFromTemplateActionController", ["$state", "$stateParams", function(e, n) {
    this.action = function() {
        e.go("documents.create-from-template", {
            templateId: n.templateId
        })
    }
}
]),
angular.module("pd.doctools").controller("DocumentDesignController", ["$scope", "ContextService", "ToolsManager", "AppAnalyticsService", "$state", "$stateParams", "ThemesService", "CustomCssService", "ConfirmationService", "Config", "Constants", "ProfileService", function(e, n, t, o, i, a, s, l, r, c, d, u) {
    var m = this;
    this.profile = null ,
    this.contentId = function() {
        return e.documentInfo.document.revision.content.id
    }
    ,
    this.applyTheme = function(n) {
        s.applyTheme(m.contentId(), n).then(function(n) {
            e.documentInfo.document.revision.content.theme = n,
            e.currentTheme = n,
            l.loadTheme(n)
        }
        )
    }
    ,
    this.applyDefaultTheme = function() {
        var n = e.documentInfo ? e.documentInfo.document : null ;
        if (n && !n.revision.content.theme) {
            var t = m.getDefaultTheme();
            t && m.applyTheme(t.id)
        }
    }
    ,
    this.documentHasPublicTheme = function() {
        return e.currentTheme && e.currentTheme["public"]
    }
    ,
    this.documentHasCustomTheme = function() {
        return e.currentTheme && !e.currentTheme.display
    }
    ,
    this.getDefaultTheme = function() {
        var n = null ;
        return e.themes && (n = _.findWhere(e.themes, {
            name: "Basic",
            "public": !0
        })),
        n
    }
    ,
    o.track("Viewed document design"),
    u.getProfile().then(function(n) {
        m.profile = n,
        s.getThemes({}, function(n) {
            e.themes = n,
            m.applyDefaultTheme()
        }
        )
    }
    ),
    e.currentTheme = null ,
    e.$watch("documentInfo.document", function() {
        m.applyDefaultTheme()
    }
    ),
    e.$watch("documentInfo.document.revision.content.theme", function(n) {
        e.currentTheme = n
    }
    ),
    e.documentHasPublicTheme = function() {
        return m.documentHasPublicTheme()
    }
    ,
    e.openPreferences = function() {
        n.openDocTool("tools-more")
    }
    ,
    e.editTheme = function() {
        n.openDocTool("tools-theme")
    }
    ,
    e.applyTheme = function(e) {
        m.documentHasCustomTheme() ? r.confirm({
            title: "Confirmation",
            text: "This document already has a custom theme. If you change to a different theme you'll lose the previous settings. Are you sure you want to proceed?"
        }).then(function() {
            m.applyTheme(e)
        }
        ) : m.applyTheme(e)
    }
    ,
    e.deleteAllowed = function(e) {
        return _.contains([d.ROLES.ADMIN, d.ROLES.OWNER], c.userRole) || m.profile.uuid === e.user
    }
    ,
    e.deleteTheme = function(n) {
        r.confirm({
            title: "Confirmation",
            text: "Are you sure you want to delete this theme? It won’t affect existing documents which are using this theme."
        }).then(function() {
            s.removeTheme(n.id).then(function() {
                e.themes = _.reject(e.themes, function(e) {
                    return e.id === n.id
                }
                )
            }
            )
        }
        )
    }
}
]),
angular.module("pd.doctools").controller("DocumentEditCssController", ["$scope", "ContextService", "ToolsManager", "AppAnalyticsService", "$state", "$stateParams", "ThemesService", "CustomCssService", function(e, n, t, o, i, a, s, l) {
    var r, c = this, d = {
        onLoad: function() {
            e.$apply(function() {
                e.working = !1,
                r && r.focus()
            }
            )
        }
    };
    this.contentId = function() {
        return e.documentInfo.document.revision.content.id
    }
    ,
    this.setThemeToScope = function(n) {
        s.getThemeById(n).then(function(n) {
            e.theme = n,
            e.loading = !1,
            l.loadTheme(e.theme, !0, d)
        }
        )
    }
    ,
    this.save = function() {
        e.working = !0,
        s.updateTheme(c.contentId(), e.theme.id, {
            custom_css: e.theme.custom_css
        }).then(function(n) {
            var t = n && n.id && n.id !== e.theme.id;
            t ? c.setThemeToScope(n.id) : l.loadTheme(e.theme, !0, d)
        }
        )
    }
    ,
    o.track("Viewed document design edit css"),
    e.loading = !0,
    e.$watch("documentInfo.document.revision.content.theme", function(e) {
        e && c.setThemeToScope(e.id)
    }
    ),
    e.openTheme = function() {
        n.openDocTool("tools-theme")
    }
    ,
    e.save = function() {
        c.save()
    }
    ,
    e.editorLoaded = function(e) {
        r = e,
        r.commands.addCommand({
            name: "Save",
            bindKey: {
                win: "Ctrl-S",
                mac: "Command-S"
            },
            exec: function() {
                c.save()
            }
        }),
        r.focus()
    }
    ,
    e.$on("$destroy", function() {
        e.documentInfo.document.revision.content.theme = e.theme
    }
    )
}
]),
angular.module("pd.doctools").controller("DocumentThemeController", ["$scope", "ContextService", "ToolsManager", "AppAnalyticsService", "ThemesService", "Constants", "CustomCssService", "TextFieldDialogService", "$timeout", function(e, n, t, o, i, a, s, l, r) {
    o.track("Viewed document theme");
    var c = this
      , d = {
        onLoad: function() {
            e.$apply(function() {
                e.working = !1
            }
            )
        }
    };
    this.contentId = function() {
        return e.documentInfo.document.revision.content.id
    }
    ,
    this.paperSizes = function() {
        return [{
            id: a.THEME.PAPER_SIZE.US_LETTER,
            label: "US Letter"
        }, {
            id: a.THEME.PAPER_SIZE.A4,
            label: "A4"
        }]
    }
    ,
    this.saveTheme = function() {
        var n = ["styles", "paper_size", "background_image"]
          , t = _.pick(e.theme, n);
        c.saveThemeWithParams(t)
    }
    ,
    this.saveThemeWithParams = function(n) {
        e.working = !0,
        i.updateTheme(c.contentId(), e.theme.id, n).then(function(n) {
            var t = n && n.id && n.id !== e.theme.id;
            t ? c.setThemeToScope(n.id) : s.loadTheme(e.theme, !0, d)
        }
        )
    }
    ,
    this.setThemeToScope = function(n) {
        i.getThemeById(n).then(function(n) {
            e.documentInfo.document.revision.content.theme = n,
            e.theme = n,
            e.loading = !1,
            e.mainColorModel = {
                color: n.styles.main_color
            },
            e.headingFont = n.styles.heading_font ? n.styles.heading_font.name : "",
            e.textFont = n.styles.text_font ? n.styles.text_font.name : "",
            s.loadTheme(e.theme, !0, d)
        }
        )
    }
    ,
    this.isDefaultImage = function(e) {
        return _.isObject(_.findWhere(a.THEME.BACKGROUND_IMAGES, {
            src: e.src ? e.src : null 
        }))
    }
    ,
    e.loading = !0,
    e.working = !0,
    e.backgroundImages = a.THEME.BACKGROUND_IMAGES,
    e.headingFonts = a.THEME.HEADING_FONTS,
    e.textFonts = a.THEME.TEXT_FONTS,
    e.paperSizes = c.paperSizes(),
    e.backgroundOptions = a.THEME.BACKGROUND_OPTIONS,
    e.$watch("mainColorModel.color", function(n) {
        n && e.theme && (e.theme.styles.main_color = n)
    }
    ),
    e.onFontChanged = function() {
        e.theme.styles.heading_font = _.findWhere(e.headingFonts, {
            name: e.headingFont
        }),
        e.theme.styles.text_font = _.findWhere(e.textFonts, {
            name: e.textFont
        })
    }
    ,
    e.save = function() {
        c.saveTheme()
    }
    ,
    e.openDesign = function() {
        n.openDocTool("tools-design")
    }
    ,
    e.editCss = function() {
        n.openDocTool("tools-edit-css")
    }
    ,
    e.saveAsNewTheme = function() {
        l.show({
            title: "Name your theme",
            value: "",
            placeholder: "Theme name"
        }).then(function(e) {
            var n = {
                name: e,
                display: !0
            };
            c.saveThemeWithParams(n)
        }
        )
    }
    ;
    var u = e.$watch("documentInfo.document.revision.content.theme", function(e) {
        e && (u(),
        c.setThemeToScope(e.id))
    }
    )
      , m = null ;
    e.$watch("theme", function(e, n) {
        n && n.id === e.id && (m && r.cancel(m),
        m = r(function() {
            c.saveTheme()
        }
        , 1e3))
    }
    , !0),
    e.$watch("theme.background_image", function(e, n) {
        n && e && !c.isDefaultImage(e) && (e.backgroundType = c.isDefaultImage(n) ? "fill" : n.backgroundType)
    }
    ),
    e.$on("$destroy", function() {
        e.documentInfo.document.revision.content.theme = e.theme
    }
    )
}
]),
angular.module("pd.doctools").constant("meta.design", {
    name: "Design",
    controller: {
        name: "DocumentDesignActionController"
    },
    icon: "design",
    route: "design"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    (t.application.app || t.application.sdk) && (e.state("documents.details.tools-design", {
        parent: "documents.details",
        url: "^/documents/:documentId/design",
        views: {
            "tool-content@documents.details": {
                controller: "DocumentDesignController",
                templateUrl: "/views/doctools/design/design.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("templates.details.tools-design", {
        parent: "templates.details",
        url: "^/templates/:templateId/design",
        views: {
            "tool-content@templates.details": {
                controller: "DocumentDesignController",
                templateUrl: "/views/doctools/design/design.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-design", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/design",
        views: {
            "tool-content@inbox.details": {
                controller: "DocumentDesignController",
                templateUrl: "/views/doctools/design/design.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("library.details.tools-design", {
        parent: "library.details",
        url: "^/library/:documentId/design?new",
        views: {
            "tool-content@library.details": {
                controller: "DocumentDesignController",
                templateUrl: "/views/doctools/design/design.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("documents.details.tools-theme", {
        parent: "documents.details",
        url: "^/documents/:documentId/theme",
        views: {
            "tool-content@documents.details": {
                controller: "DocumentThemeController",
                templateUrl: "/views/doctools/design/theme.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("templates.details.tools-theme", {
        parent: "templates.details",
        url: "^/templates/:templateId/theme",
        views: {
            "tool-content@templates.details": {
                controller: "DocumentThemeController",
                templateUrl: "/views/doctools/design/theme.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-theme", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/theme",
        views: {
            "tool-content@inbox.details": {
                controller: "DocumentThemeController",
                templateUrl: "/views/doctools/design/theme.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("library.details.tools-theme", {
        parent: "library.details",
        url: "^/library/:documentId/theme?new",
        views: {
            "tool-content@library.details": {
                controller: "DocumentThemeController",
                templateUrl: "/views/doctools/design/theme.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("documents.details.tools-edit-css", {
        parent: "documents.details",
        url: "^/documents/:documentId/edit-css",
        views: {
            "tool-content@documents.details": {
                controller: "DocumentEditCssController",
                templateUrl: "/views/doctools/design/edit-css.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("templates.details.tools-edit-css", {
        parent: "templates.details",
        url: "^/templates/:templateId/edit-css",
        views: {
            "tool-content@templates.details": {
                controller: "DocumentEditCssController",
                templateUrl: "/views/doctools/design/edit-css.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-edit-css", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/edit-css",
        views: {
            "tool-content@inbox.details": {
                controller: "DocumentEditCssController",
                templateUrl: "/views/doctools/design/edit-css.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("library.details.tools-edit-css", {
        parent: "library.details",
        url: "^/library/:documentId/edit-css?new",
        views: {
            "tool-content@library.details": {
                controller: "DocumentEditCssController",
                templateUrl: "/views/doctools/design/edit-css.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]).controller("DocumentDesignActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-design")
    }
}
]),
angular.module("pd.doctools").constant("meta.download", {
    name: "Download",
    controller: {
        name: "DocumentDownloadActionController"
    },
    icon: "download"
}).config(["$stateProvider", function(e) {
    e.state("documents.details.tools-download", {
        parent: "documents.details",
        url: "^/documents/:documentId/download",
        views: {
            "tool-content@documents.details": {
                controller: "ImmediateDocumentDownloadController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    })
}
]).run(["meta.download", "$rootScope", function(e, n) {
    var t = function() {
        e.buttonContent = "/views/doctools/download/active-download-button.html",
        e.name = "Downloading",
        e.styleModifier = "download-in-progress"
    }
      , o = function() {
        e.buttonContent = "",
        e.name = "Download",
        e.styleModifier = ""
    }
    ;
    n.$on("download.started", t),
    n.$on("download.completed", o)
}
]).controller("ImmediateDocumentDownloadController", ["$scope", "$rootScope", "DownloadService", "ContextService", function(e, n, t, o) {
    e.$watch("documentInfo", function(i) {
        i && (n.$broadcast("download.started"),
        t.download(e.documentInfo),
        o.openDocTool("tools-timeline"))
    }
    )
}
]).controller("DocumentDownloadActionController", ["$rootScope", "$scope", "DownloadService", function(e, n, t) {
    this.action = function() {
        e.$broadcast("download.started"),
        t.download(n.documentInfo)
    }
}
]),
angular.module("pd.doctools").controller("DocumentEditController", ["$scope", "$stateParams", "$rootScope", "$state", "Constants", "DocumentsService", "ContextService", "ToolsManager", "ConfirmationService", function(e, n, t, o, i, a, s, l, r) {
    e.$watch("documentInfo", function(n) {
        if (n) {
            if (!l.hasToolAccess(n, "edit"))
                return void s.openDocTool("tools-timeline");
            e.canRearrangeWidgets = n.isOwner && (n.isSentOrCompleted || n.isApproved || n.isRejected || n.isWaitingForApproval)
        }
    }
    );
    var c = n.documentId || n.templateId
      , d = function(n) {
        return function() {
            e.documentInfo.isSentOrCompleted ? r.confirm({
                title: "Document editing",
                text: "Would you like to edit this document? Once you're done, you will need to resend it",
                okText: "Edit"
            }).then(n) : n()
        }
    }
    ;
    e.newRevision = d(function() {
        e.editing = !0,
        s.when({
            "documents, inbox": function() {
                o.go("documents.upload", {
                    documentId: c
                })
            },
            templates: function() {
                o.go("templates.upload", {
                    templateId: c
                })
            }
        })
    }
    ),
    e.rearrangeWidgets = d(function() {
        e.editing = !0,
        a.newRevision(c, {
            type: i.REVISIONS.COPY
        }).then(function() {
            t.$broadcast("document.newrevision"),
            e.editing = !1
        }
        , function() {
            e.editing = !1
        }
        )
    }
    )
}
]),
angular.module("pd.doctools").constant("meta.edit", {
    name: "Edit",
    controller: {
        name: "DocumentEditActionController"
    },
    styleModifier: "btn--navpanel",
    icon: "edit",
    route: "edit"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    (t.application.app || t.application.sdk) && (e.state("documents.details.tools-edit", {
        parent: "documents.details",
        url: "^/documents/:documentId/edit",
        views: {
            "tool-content@documents.details": {
                controller: "DocumentEditController",
                templateUrl: "/views/doctools/edit/edit.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("templates.details.tools-edit", {
        parent: "templates.details",
        url: "^/templates/:templateId/edit",
        views: {
            "tool-content@templates.details": {
                controller: "DocumentEditController",
                templateUrl: "/views/doctools/edit/edit.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-edit", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/edit",
        views: {
            "tool-content@inbox.details": {
                controller: "DocumentEditController",
                templateUrl: "/views/doctools/edit/edit.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]).controller("DocumentEditActionController", ["ContextService", "Constants", "DocumentsService", "$rootScope", "ConfirmationService", function(e, n, t, o, i) {
    this.action = function(a) {
        if (a.document.type === n.DOCUMENT.TYPE.EDITABLE_DOCUMENT) {
            var s = function() {
                t.newRevision(a.document.id, {
                    type: n.REVISIONS.COPY
                }).then(function() {
                    o.$broadcast("document.newrevision")
                }
                )
            }
            ;
            i.confirm({
                title: "Document editing",
                text: "Would you like to edit this document? Once you're done, you will need to resend it",
                okText: "Edit"
            }).then(s)
        } else
            e.openDocTool("tools-edit")
    }
}
]),
angular.module("pd.doctools").controller("DocumentEmbedController", ["$scope", "TemplatesService", "Constants", "FeaturesService", "AppAnalyticsService", "Config", "$window", "ConfirmationService", "AlertService", "ContextService", "$filter", function(e, n, t, o, i, a, s, l, r, c, d) {
    o.checkAvailability(t.FEATURES.EMBED).then(function(n) {
        e.available = n
    }
    ),
    i.track("Viewed template embed settings"),
    e.staticBaseURL = a.staticBaseURL,
    e.host = s.location.host,
    e.documentationUrl = "https://developers.pandadoc.com/docs-new.html#embed-a-template-into-your-application-or-web-site",
    e.$watch("documentInfo.document.token", function(n) {
        n && (e.directLink = a.applicationUrl + "/templates/" + n + "/embed",
        e.embed_id = "e" + d("limitTo")(n, 8))
    }
    );
    var u = function() {
        return e.documentInfo.document.roles && 1 === e.documentInfo.document.roles.length
    }
    ;
    e.embed = function() {
        if (!u()) {
            var t = function() {
                c.openDocTool("tools-roles")
            }
            ;
            return void r.alert({
                title: "Unable to get embed code",
                text: "Only templates with one role can be embedded."
            }).then(t, t)
        }
        e.embedding = !0,
        n.createToken(e.documentInfo.document.id).then(function(n) {
            e.embedding = !1,
            e.documentInfo.document.token = n.token,
            i.track("Enabled embedding for template")
        }
        , function() {
            e.embedding = !1
        }
        )
    }
    ,
    e.disable = function() {
        l.confirm({
            title: "Disable embedding",
            text: "Once embedding is disabled, this template will not be available on your web page anymore. If you want to re-enable it after, please replace the embed code with a new one."
        }).then(function() {
            e.disabling = !0,
            n.deleteToken(e.documentInfo.document.id).then(function() {
                e.disabling = !1,
                e.documentInfo.document.token = null ,
                i.track("Disabled embedding for template")
            }
            , function() {
                e.disabling = !1
            }
            )
        }
        )
    }
}
]),
angular.module("pd.doctools").constant("meta.embed", {
    name: "Embed",
    controller: {
        name: "DocumentEmbedActionController"
    },
    styleModifier: "btn--navpanel",
    icon: "embed",
    route: "embed"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    t.application.app && e.state("templates.details.tools-embed", {
        parent: "templates.details",
        url: "^/templates/:templateId/embed",
        views: {
            "tool-content@templates.details": {
                controller: "DocumentEmbedController",
                templateUrl: "/views/doctools/embed/embed.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    })
}
]).controller("DocumentEmbedActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-embed")
    }
}
]),
angular.module("pd.doctools").controller("IntegrationDocToolButtonController", ["ContextService", "IntegrationsService", "Constants", "tool", "integration", "Config", function(e, n, t, o, i, a) {
    o.hidden = !0,
    n.getIntegrationStatus(i).then(function(e) {
        e.enabled ? n.getIntegrationSettings(i).then(function(e) {
            var n = _.isUndefined(e.role) || a.userRole >= e.role;
            o.hidden = !n
        }
        ) : o.hidden = !0
    }
    ),
    this.action = function() {
        e.openDocTool("tools-" + o.route)
    }
}
]),
angular.module("pd.doctools").controller("IntegrationDocToolController", ["$scope", "integration", "IntegrationsService", "Constants", "InvoicesService", "ContextService", "AppAnalyticsService", "$window", "$filter", "AlertService", "$timeout", "Config", function(e, n, t, o, i, a, s, l, r, c, d, u) {
    e.integration = n;
    var m;
    e.$watch("isIntegrationEnabled", function(t) {
        if (t === !1) {
            var i = e.$eventToObservable("notification." + o.NOTIFICATION.TYPE.INTEGRATION).debounce(1e3).map(function(e) {
                return _.first(e.additionalArguments)
            }
            ).filter(function(e) {
                return e.integration === n
            }
            )["do"](function() {
                m && m.close()
            }
            );
            i.filter(function(e) {
                return "activated" === e.action
            }
            ).subscribe(function() {
                s.track("Integration connect finished", {
                    integration_type: n
                }),
                d(function() {
                    e.isIntegrationEnabled = !0
                }
                )
            }
            ),
            i.filter(function(e) {
                return "auth error" === e.action && e.code
            }
            ).subscribe(function(e) {
                var t = "integration." + n + ".errors." + e.code
                  , o = r("translate")(t);
                o && o !== t && c.alert({
                    title: "Authentication error",
                    text: o
                })
            }
            )
        }
    }
    ),
    e.loading = !0,
    t.getIntegrationStatus(n).then(function(n) {
        return n.enabled ? (e.isIntegrationEnabled = n.active,
        void (e.loading = !1)) : a.openDocTool(a.isTemplates() ? "tools-content" : "tools-timeline")
    }
    ),
    e.connect = function() {
        s.track("Integration connect started", {
            integration_type: n
        });
        var e = u.integrations[n].url || "/auth/login/" + n + "/";
        m = l.open(e, "integration", "width=800, height=500"),
        m.focus()
    }
    ,
    e.$on("invoices.generation.failed", function() {
        e.isIntegrationEnabled = !1
    }
    )
}
]),
angular.module("pd.doctools").controller("XeroIntegrationDocToolController", ["$scope", "$controller", "Constants", "FeaturesService", "ContextService", "IntegrationsService", "Config", function(e, n, t, o, i, a, s) {
    var l = function() {
        return i.openDocTool(i.isTemplates() ? "tools-content" : "tools-timeline")
    }
    ;
    o.checkAvailability(t.FEATURES.XERO).then(function(e) {
        e ? a.getIntegrationSettings(t.INTEGRATIONS.XERO).then(function(e) {
            var n = _.isUndefined(e.role) || s.userRole >= e.role;
            n || l()
        }
        ) : l()
    }
    ),
    n("IntegrationDocToolController", {
        $scope: e,
        integration: t.INTEGRATIONS.XERO
    })
}
]),
angular.module("pd.doctools").constant("meta.xero", {
    name: "Xero",
    controller: {
        name: "IntegrationDocToolButtonController",
        initiateImmediately: !0,
        injections: {
            integration: "xero"
        }
    },
    icon: "xero",
    route: "xero"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = {
        controller: "XeroIntegrationDocToolController",
        templateUrl: "/views/doctools/integrations/xero.html"
    };
    e.state("documents.details.tools-xero", {
        parent: "documents.details",
        url: "^/documents/:documentId/xero",
        views: {
            "tool-content@documents.details": t
        },
        data: {
            hasRightDetailsPanel: !0
        }
    });
    var o = n.$get();
    (o.application.app || o.application.sdk) && (e.state("templates.details.tools-xero", {
        parent: "templates.details",
        url: "^/templates/:templateId/xero",
        views: {
            "tool-content@templates.details": t
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-xero", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/xero",
        views: {
            "tool-content@inbox.details": t
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]),
angular.module("pd.doctools").controller("LibraryDocToolController", ["$scope", "$rootScope", "ContextService", "RoleAssignmentDialog", "$controller", function(e, n, t, o, i) {
    i("ContentLibraryItemsListMixin", {
        $scope: e
    }),
    e.inserting = !1,
    e.dragStart = function(e, n) {
        n.helper.addClass("doc-block--drag-preview")
    }
    ;
    var a = function(e) {
        return function(t) {
            n.$broadcast("library.item.insert", {
                item: e,
                assignments: t
            })
        }
    }
    ;
    e.insertLibraryItem = function(n) {
        if (!e.inserting) {
            var i = a(n);
            !n.roles || _.isEmpty(n.roles) || t.isTemplates() ? i() : o.open(n, e.documentInfo.document.recipients).then(i, i),
            e.inserting = !0
        }
    }
    ,
    e.$on("library.item.insert.started", function() {
        e.inserting = !0
    }
    ),
    e.$on("library.item.insert.completed", function() {
        e.inserting = !1
    }
    ),
    e.$on("library.item.insert.failed", function() {
        e.inserting = !1
    }
    )
}
]),
angular.module("pd.doctools").constant("meta.library", {
    name: "Library",
    controller: {
        name: "LibraryActionController"
    },
    icon: "library",
    route: "library"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    if (t.application.app || t.application.sdk) {
        var o = {
            templateUrl: "/views/doctools/library/library.html",
            controller: "LibraryDocToolController"
        };
        e.state("documents.details.tools-library", {
            parent: "documents.details",
            url: "^/documents/:documentId/library",
            views: {
                "tool-content@documents.details": o
            },
            data: {
                hasRightDetailsPanel: !0
            }
        }),
        e.state("templates.details.tools-library", {
            parent: "templates.details",
            url: "^/templates/:templateId/library",
            views: {
                "tool-content@templates.details": o
            },
            data: {
                hasRightDetailsPanel: !0
            }
        }),
        e.state("inbox.details.tools-library", {
            parent: "inbox.details",
            url: "^/inbox/:documentId/library",
            views: {
                "tool-content@inbox.details": o
            },
            data: {
                hasRightDetailsPanel: !0
            }
        })
    }
}
]).controller("LibraryActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-library")
    }
}
]),
angular.module("pd.doctools").controller("MoreDocToolsListController", ["$scope", "$controller", "ToolsManager", function(e, n, t) {
    e.$watch("documentInfo", function(n) {
        n && t.getToolsList(n, "more").then(function(n) {
            e.preferencesTools = n,
            _.each(_.filter(n, function(e) {
                return e.controller.initiateImmediately
            }
            ), function(e) {
                e.ctrl = o(e)
            }
            )
        }
        )
    }
    ),
    e.toolAction = function(n) {
        n.ctrl || (n.ctrl = o(n)),
        n.ctrl[n.action ? n.action : "action"](e.documentInfo)
    }
    ,
    e.$on("$destroy", function() {
        _.each(e.preferencesTools, function(e) {
            e.ctrl = null 
        }
        )
    }
    );
    var o = function(t) {
        var o = {
            $scope: e,
            tool: t
        }
          , i = t.controller.injections ? _.assign(o, t.controller.injections) : o;
        return n(t.controller.name, i)
    }
}
]),
angular.module("pd.doctools").constant("meta.more", {
    name: "More",
    controller: {
        name: "MoreDocToolsActionController"
    },
    icon: "doctools-more",
    route: "more design theme edit-css revisions workflow"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    (t.application.app || t.application.sdk) && (e.state("documents.details.tools-more", {
        parent: "documents.details",
        url: "^/documents/:documentId/more",
        views: {
            "tool-content@documents.details": {
                templateUrl: "/views/doctools/more/moredoctools-list.html",
                controller: "MoreDocToolsListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-more", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/more",
        views: {
            "tool-content@inbox.details": {
                templateUrl: "/views/doctools/more/moredoctools-list.html",
                controller: "MoreDocToolsListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("templates.details.tools-more", {
        parent: "templates.details",
        url: "^/templates/:templateId/more",
        views: {
            "tool-content@templates.details": {
                templateUrl: "/views/doctools/more/moredoctools-list.html",
                controller: "MoreDocToolsListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("library.details.tools-more", {
        parent: "library.details",
        url: "^/library/:documentId/more?new",
        views: {
            "tool-content@library.details": {
                templateUrl: "/views/doctools/more/moredoctools-list.html",
                controller: "MoreDocToolsListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]).controller("MoreDocToolsActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-more")
    }
}
]),
angular.module("pd.doctools").controller("PeopleListController", ["$scope", "$stateParams", "$q", "DocumentsService", "Config", "ColorService", "RecipientService", "Constants", "$timeout", "NotificationCenter", "ConfirmationService", "$filter", "ProfileService", "AlertService", "$rootScope", "FeaturesService", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g, f) {
    e.SIGNER = l.RECIPIENTS.TYPE.SIGNER,
    f.checkAvailability(l.FEATURES.COPY_DIRECT_LINK).then(function(n) {
        e.hasCopyDirectLink = n
    }
    );
    var b = function(e) {
        e.menuVisible = !1,
        e.showMenu = function() {
            e.menuVisible = !0
        }
        ,
        e.hideMenu = function(n) {
            n && n.target && angular.element(n.target).hasClass("recipient-link") || (e.menuVisible = !1)
        }
    }
    ;
    e.$watch("documentInfo", function(n) {
        if (n) {
            _.each(n.document.recipients, b);
            var t = n.isFromMyWorkspace && i.userRole === l.ROLES.OWNER
              , o = n.isFromMyWorkspace && i.userRole === l.ROLES.ADMIN;
            if (e.hasMenu = n.isSentAndNotCompleted && (n.isOwner || t || o),
            e.hasSendReminderOption = n.isSentAndNotCompleted && (n.isOwner || t || o),
            e.hasRemoveRecipientOption = n.isSentAndNotCompleted && n.isOwner,
            e.recipientReorderAllowed = n.permissions.canEditDocumentContent,
            n.isSentAndNotCompleted && n.document.has_ordering) {
                var a = _.find(n.document.recipients, {
                    is_done: !1,
                    type: l.RECIPIENTS.TYPE.SIGNER
                });
                a && (a.currentSigner = !0)
            }
        }
    }
    ),
    e.$watch("documentInfo.document.has_ordering", function(n) {
        var t = i.application.app || i.application.sdk
          , o = e.documentInfo && e.documentInfo.isFromMyWorkspace && i.isWorkspaceOwner()
          , a = e.documentInfo && e.documentInfo.isFromMyWorkspace && i.isWorkspaceAdmin()
          , s = e.documentInfo && e.documentInfo.isApprover
          , l = e.documentInfo && e.documentInfo.isOwner;
        e.showSigningOrderHelpMessage = n && t && (l || o || a || s)
    }
    ),
    e.addRecipient = function(n) {
        k(n) ? p.alert({
            title: "Recipient can not be added",
            text: "This recipient already added."
        }) : e.documentInfo.isSent ? d.confirm({
            title: "Add new recipient",
            text: "You're about to add " + u("fullName")(n) + " to this document. An email with a link to this document will be automatically sent when document is available for signing."
        }).then(function() {
            v(n)
        }
        ) : v(n)
    }
    ,
    e.removeRecipient = function(n) {
        if (h(n))
            return void c.notification("You cannot remove recipients while fields are still assigned to them");
        if (e.profile)
            if (e.profile.actor === n.contact.id)
                w(n);
            else {
                var t = "Do you want to remove " + _.escape(u("fullName")(n.contact)) + " from the list? This person won't have access to the document anymore.";
                d.confirm({
                    text: t
                }).then(function() {
                    w(n)
                }
                )
            }
        else
            m.getProfile().then(function(t) {
                e.profile = t,
                e.removeRecipient(n)
            }
            );
        return !1
    }
    ,
    e.sendReminder = function(e) {
        o.sendReminder(e.id).then(function() {
            c.notification("A reminder email has been sent to " + u("fullName")(e.contact))
        }
        )
    }
    ;
    var v = function(t) {
        o.addRecipient(n.documentId, t.id).then(function(n) {
            b(n),
            e.documentInfo.document.recipients.push(n),
            a.assignColor(e.documentInfo.document.recipients),
            s.assignType(e.documentInfo.document.recipients, e.documentInfo.widgetsInfo)
        }
        )
    }
      , h = function(n) {
        return _.any(e.documentInfo.widgetsInfo, function(e) {
            return e.widget.actor === n.contact.id
        }
        )
    }
      , w = function(n) {
        o.removeRecipient(e.documentInfo.document.id, n.id).then(function() {
            var t = e.documentInfo.document.recipients.indexOf(n);
            e.documentInfo.document.recipients.splice(t, 1),
            g.$broadcast("recipient.delete", n)
        }
        , function() {
            p.alert({
                text: "This recipient has fields assigned in current or previous versions of the document."
            })
        }
        )
    }
      , k = function(n) {
        return _.any(e.documentInfo.document.recipients, function(e) {
            return e.contact.id === n.id
        }
        )
    }
    ;
    e.$watch("documentInfo", function(e) {
        if (e && e.document.has_ordering)
            if (e.isSentAndNotCompleted) {
                var n = _.find(e.document.recipients, {
                    is_done: !1,
                    type: l.RECIPIENTS.TYPE.SIGNER
                })
                  , t = e.document.recipients.length;
                n && (t = e.document.recipients.indexOf(n)),
                _.each(e.document.recipients, function(e, n) {
                    e.gotEmail = t >= n
                }
                )
            } else
                e.isCompleted && _.each(e.document.recipients, function(e, n) {
                    e.gotEmail = !0
                }
                )
    }
    ),
    e.$watch("documentInfo.document.has_ordering", function(n, t) {
        _.isUndefined(n) || _.isUndefined(t) || n === t || !e.recipientReorderAllowed || (n ? o.setRecipientsOrder(e.documentInfo.document, e.documentInfo.document.recipients) : o.disableRecipientsOrder(e.documentInfo.document))
    }
    ),
    e.$watch("documentInfo.document.recipients", function(n, t) {
        if (n && t && e.recipientReorderAllowed && e.documentInfo.document.has_ordering && n.length > 0 && n.length === t.length) {
            var i = _.any(n, function(e, n) {
                return e.id !== t[n].id
            }
            );
            i && o.setRecipientsOrder(e.documentInfo.document, n)
        }
    }
    , !0),
    e.recipientsSortableOptions = {
        axis: "y",
        tolerance: "pointer"
    }
}
]),
angular.module("pd.doctools").constant("meta.people", {
    name: "Recipients",
    controller: {
        name: "PeopleActionController"
    },
    icon: "contacts-2",
    route: "people"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    e.state("documents.details.tools-people", {
        parent: "documents.details",
        url: "^/documents/:documentId/people",
        views: {
            "tool-content@documents.details": {
                templateUrl: "/views/doctools/people/list.html",
                controller: "PeopleListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    });
    var t = n.$get();
    (t.application.app || t.application.sdk) && (e.state("inbox.details.tools-people", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/people",
        views: {
            "tool-content@inbox.details": {
                templateUrl: "/views/doctools/people/list.html",
                controller: "PeopleListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("templates.details.tools-people", {
        parent: "templates.details",
        url: "^/templates/:templateId/people",
        views: {
            "tool-content@templates.details": {
                templateUrl: "/views/doctools/people/list.html",
                controller: "PeopleListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]).controller("PeopleActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-people")
    }
}
]),
angular.module("pd.doctools").constant("meta.print", {
    name: "Print",
    controller: {
        name: "PrintActionController"
    },
    icon: "print"
}).controller("PrintActionController", ["$rootScope", "$scope", "DownloadService", "$window", "WorkspacesService", "SubscriptionService", "InactiveSubscriptionDialog", "Config", function(e, n, t, o, i, a, s, l) {
    this.download = function() {
        var e = o.open("", "_blank");
        t.getDownloadUrl(n.documentInfo, function(n) {
            e.location = n.url + "&autoprint=true&inline=true",
            e.focus()
        }
        )
    }
    ,
    this.action = function() {
        if (l.application.app || l.application.sdk)
            if (n.documentInfo && n.documentInfo.isRecipient)
                this.download();
            else {
                var e = this;
                i.getWorkspace().then(function(n) {
                    var t = n.subscription;
                    a.isActive(t) || a.isFree(t) || a.isTrial(t) ? e.download() : s.open()
                }
                )
            }
        else
            this.download()
    }
}
]),
angular.module("pd.doctools").controller("DocumentRevisionsController", ["$scope", "DocumentsService", "Constants", "$download", "AppAnalyticsService", "ContextService", "TemplatesService", "$stateParams", "ToolsManager", function(e, n, t, o, i, a, s, l, r) {
    function c(n) {
        _.isEmpty(n) || (e.currentRevision = _.head(n),
        e.previousRevisions = _.tail(n),
        e.loading = !1)
    }
    e.$watch("documentInfo", function(e) {
        return e && !r.hasToolAccess(e, "revisions") ? void a.openDocTool("tools-timeline") : void 0
    }
    ),
    i.track("Viewed document revisions"),
    e.loading = !0,
    a.when({
        "documents, inbox": function() {
            n.getDocumentRevisions(l.documentId).then(c)
        },
        templates: function() {
            s.getTemplateRevisions(l.templateId).then(c)
        }
    }),
    e.openPreferences = function() {
        a.openDocTool("tools-more")
    }
    ,
    e.downloadRevision = function(t) {
        var i = l.documentId || l.templateId
          , r = t.number;
        a.when({
            "documents, inbox": function() {
                n.getDownloadPDFUrl(i, {
                    revision_id: r
                }).then(function(n) {
                    o(n.url, e.documentInfo)
                }
                )
            },
            templates: function() {
                s.getDownloadPDFUrl(i, {
                    revision_id: r
                }).then(function(n) {
                    o(n.url, e.documentInfo)
                }
                )
            }
        })
    }
}
]),
angular.module("pd.doctools").constant("meta.revisions", {
    name: "Versions",
    controller: {
        name: "DocumentRevisionsActionController"
    },
    icon: "revision",
    route: "revisions"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    (t.application.app || t.application.sdk) && (e.state("documents.details.tools-revisions", {
        parent: "documents.details",
        url: "^/documents/:documentId/revisions",
        views: {
            "tool-content@documents.details": {
                controller: "DocumentRevisionsController",
                templateUrl: "/views/doctools/revisions/revisions.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("templates.details.tools-revisions", {
        parent: "templates.details",
        url: "^/templates/:templateId/revisions",
        views: {
            "tool-content@templates.details": {
                controller: "DocumentRevisionsController",
                templateUrl: "/views/doctools/revisions/revisions.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-revisions", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/revisions",
        views: {
            "tool-content@inbox.details": {
                controller: "DocumentRevisionsController",
                templateUrl: "/views/doctools/revisions/revisions.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]).controller("DocumentRevisionsActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-revisions")
    }
}
]),
angular.module("pd.doctools").constant("meta.roles", {
    name: "Roles",
    controller: {
        name: "RolesActionController"
    },
    icon: "contacts-2",
    route: "roles"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    t.application.app && (e.state("templates.details.tools-roles", {
        parent: "templates.details",
        url: "^/templates/:templateId/roles",
        views: {
            "tool-content@templates.details": {
                templateUrl: "/views/doctools/roles/roles.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("library.details.tools-roles", {
        parent: "library.details",
        url: "^/library/:documentId/roles?new",
        views: {
            "tool-content@library.details": {
                templateUrl: "/views/doctools/roles/roles.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]).controller("RolesActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-roles")
    }
}
]),
angular.module("pd.doctools").controller("DocumentSendConfirmationController", ["$scope", "$modalInstance", function(e, n) {
    e.timeline = function() {
        n.close()
    }
}
]),
angular.module("pd.doctools").controller("DocumentSendController", ["$scope", "$modalInstance", "documentInfo", "ProfileService", "finalize", "recipient", "DocumentsService", "$q", "ModalService", "Config", "Constants", "$rootScope", "ContextService", "DocumentErrorService", "DocumentUpdateStatus", "$filter", "FeaturesService", "WorkspacesService", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g, f, b, v) {
    e.document = t.document,
    e.messageModel = {
        message: ""
    },
    b.checkAvailability(d.FEATURES.SEND_DOCUMENT_AS).then(function(n) {
        e.canChangeSender = n && (c.isWorkspaceOwner() || c.isWorkspaceAdmin())
    }
    ),
    e.recipients = t.document.recipients,
    e.recipientsCount = t.document.recipients.length,
    e.allShown = !0,
    e.shortRecipients = null ,
    e.recipientsCount > 6 && (e.shortRecipients = t.document.recipients.slice(0, 4),
    e.allShown = !1),
    e.toggleShowAll = function() {
        e.allShown = !e.allShown
    }
    ;
    var h = function(e) {
        return f("fullName")(e) + ' sent you "' + t.document.name + '" document'
    }
      , w = function() {
        var n = l.defer()
          , o = {
            documentId: e.document.id,
            message: e.messageModel.message,
            subject: e.subjectModel.subject,
            sender: e.sender ? e.sender.id : t.document.owner.id
        };
        return g.whenReady().then(function() {
            i ? s.sendDocument(o).then(function() {
                s.completeDocument(e.document.id, a.id).then(n.resolve, n.reject)
            }
            , n.reject) : s.sendDocument(o).then(n.resolve, n.reject)
        }
        ),
        n.promise
    }
      , k = function(e) {
        u.$broadcast("document.sent", e.document),
        m.openDocTool("tools-timeline", {
            documentId: e.document.id
        })
    }
      , y = function(e) {
        r.open({
            controller: "DocumentSendConfirmationController",
            templateUrl: "/views/doctools/send/send-confirmation-dialog.html"
        }).then(function() {
            k(e)
        }
        , function(n) {
            d.EVENTS.STATE_CHANGE !== n && k(e)
        }
        )
    }
    ;
    e.send = function() {
        e.sending = !0,
        w().then(function() {
            e.$close(),
            y(t)
        }
        , function(n) {
            e.$close(),
            p.handleError(n)
        }
        )
    }
    ,
    e.$watch("canChangeSender", function(n) {
        o.getProfile().then(function(o) {
            var i = h(o);
            e.subjectModel = {
                subject: i,
                initialSubject: i
            },
            e.sender = o,
            n && (e.allSenders = [o],
            t.document.owner.id !== o.id && e.allSenders.push(t.document.owner),
            v.getWorkspaceMembers().then(function(n) {
                var i = _.filter(n, function(e) {
                    return (e.role === d.ROLES.ADMIN || e.role === d.ROLES.OWNER) && e.user.id !== o.id && e.user.id !== t.document.owner.id
                }
                );
                e.allSenders = e.allSenders.concat(_.map(i, "user")),
                e.senders = _.reject(e.allSenders, {
                    id: e.sender.id
                })
            }
            ))
        }
        )
    }
    ),
    e.selectSender = function(n) {
        if (e.sender = n,
        e.senders = _.reject(e.allSenders, {
            id: e.sender.id
        }),
        e.subjectModel.subject === e.subjectModel.initialSubject) {
            var t = h(n);
            e.subjectModel = {
                subject: t,
                initialSubject: t
            }
        }
    }
}
]),
angular.module("pd.doctools").controller("EmailNotVerifiedController", ["$scope", "$modalInstance", "profile", "ProfileService", "NotificationCenter", function(e, n, t, o, i) {
    e.profile = t,
    e.resend = function(n) {
        e.resending || (n.preventDefault(),
        e.resending = !0,
        o.resendVerificationEmail().then(e.$close, e.$close))
    }
    ,
    e.$on("profile.email-verified", function() {
        e.$close(),
        i.message('Your email "' + t.email + '" was successfully verified', 7)
    }
    )
}
]),
angular.module("pd.doctools").controller("SendDocToolController", ["$scope", "tool", "ProfileService", "DocumentLifecycleService", "RecipientService", function(e, n, t, o, i) {
    e.$watch("documentInfo.document.recipients", function(n) {
        n && a(e.documentInfo)
    }
    , !0),
    e.$watch("documentInfo.document.approval", function() {
        e.documentInfo && a(e.documentInfo)
    }
    );
    var a = function(e) {
        t.getProfile().then(function(t) {
            n.hidden = i.isOnlyRecipient(t, e.document.recipients) ? !0 : e.document.approval ? !e.isApproved : !1
        }
        )
    }
    ;
    this.action = function() {
        o.send(e.documentInfo)
    }
}
]),
angular.module("pd.doctools").constant("meta.send", {
    name: "Send",
    controller: {
        name: "SendDocToolController",
        initiateImmediately: !0
    },
    styleModifier: "btn--navpanel-offset btn--navpanel-green",
    icon: "send"
}),
angular.module("pd.doctools").controller("DocumentTimelineToolController", ["$scope", "DocumentsService", "FeaturesService", "Constants", "Config", function(e, n, t, o, i) {
    e.SECTIONS = {
        COMMENTS: "comments",
        AUDIT_TRAIL: "audit_trail",
        ACTIONS: "actions"
    },
    e.section = e.SECTIONS.COMMENTS,
    e.show = function(n) {
        e.section = n
    }
    ,
    (i.application.app || i.application.sdk) && e.$watch("documentInfo", function(i) {
        i && t.checkAvailability(o.FEATURES.AUDIT_TRAIL).then(function(t) {
            e.hasAccessToAuditTrail = t && i.isFromMyWorkspace && (i.isOwner || a() || s()),
            e.hasAccessToAuditTrail && n.getAuditTrail(i.document).then(r)
        }
        )
    }
    ),
    e.$watch("section", function(t) {
        e.SECTIONS.AUDIT_TRAIL === t && e.documentInfo && e.hasAccessToAuditTrail && n.getAuditTrail(e.documentInfo.document).then(r)
    }
    ),
    e.$on("open.audit.trail", function() {
        e.section = e.SECTIONS.AUDIT_TRAIL
    }
    );
    var a = function() {
        return i.userRole === o.ROLES.OWNER
    }
      , s = function() {
        return i.userRole === o.ROLES.ADMIN
    }
      , l = [o.AUDIT_TRAIL.ACTIONS.COMPLETED_BY_RECIPIENT]
      , r = function(n) {
        e.documentHistory = _.map(n, function(e) {
            return _.contains(l, e.action) || (e.data.country = null ,
            e.data.city = null ),
            e
        }
        ).reverse()
    }
}
]),
angular.module("pd.doctools").constant("meta.timeline", {
    name: "Timeline",
    controller: {
        name: "TimelineActionController"
    },
    icon: "timeline",
    route: "timeline"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    e.state("documents.details.tools-timeline", {
        parent: "documents.details",
        url: "^/documents/:documentId/timeline",
        views: {
            "tool-content@documents.details": {
                controller: "DocumentTimelineToolController",
                templateUrl: "/views/doctools/timeline/feed.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    });
    var t = n.$get();
    (t.application.app || t.application.sdk) && e.state("inbox.details.tools-timeline", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/timeline",
        views: {
            "tool-content@inbox.details": {
                controller: "DocumentTimelineToolController",
                templateUrl: "/views/doctools/timeline/feed.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    })
}
]).controller("TimelineActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-timeline")
    }
}
]),
angular.module("pd.doctools").controller("DocumentTOCController", ["$scope", "Constants", "scrollToElement", "$sce", function(e, n, t, o) {
    e.$watch("documentInfo.blockList", function(t) {
        if (t) {
            var i = _.find(t.blocks, function(e) {
                return e.type.handle === n.BLOCK_TYPES.TOC
            }
            );
            i && (e.toc = _.map(i.data.content, function(e) {
                var n = _.cloneDeep(e);
                return n.text = o.trustAsHtml(n.text),
                n
            }
            ))
        }
    }
    ),
    e.scrollTo = function(e) {
        var n, o = 350, i = ".document";
        n = e.blockAnchor ? 'div[anchor="' + e.blockAnchor + '"]' : 'div[uref="' + e.blockUref + '"]',
        t(i, n, {
            duration: o,
            offset: -100
        })
    }
}
]),
angular.module("pd.doctools").constant("meta.toc", {
    name: "Content",
    controller: {
        name: "DocumentTOCActionController"
    },
    styleModifier: "btn--navpanel",
    icon: "toc",
    route: "toc"
}).config(["$stateProvider", function(e) {
    e.state("documents.details.tools-toc", {
        parent: "documents.details",
        url: "^/documents/:documentId/toc",
        views: {
            "tool-content@documents.details": {
                controller: "DocumentTOCController",
                templateUrl: "/views/doctools/toc/toc.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-toc", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/toc",
        views: {
            "tool-content@inbox.details": {
                controller: "DocumentTOCController",
                templateUrl: "/views/doctools/toc/toc.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    })
}
]).controller("DocumentTOCActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-toc")
    }
}
]),
angular.module("pd.doctools").run(["HelpService", function(e) {
    e.registerWelcomeDialog("widgets", {
        templateUrl: "/views/doctools/widgets/widgets-welcome.html",
        profileStateName: "widgetsWelcomeDialogShowed"
    })
}
]),
angular.module("pd.doctools").controller("WidgetsListController", ["$scope", "WidgetRegistry", "HelpService", "ToolsManager", "ContextService", "ProfileService", "Constants", "OnboardingService", "$stateParams", "ElementClickBehavior", "$state", "FeaturesService", function(e, n, t, o, i, a, s, l, r, c, d, u) {
    e.$watch("documentInfo", function(t) {
        if (t) {
            if (!o.hasToolAccess(t, "widgets"))
                return void i.openDocTool("tools-timeline");
            u.getAvailableFeatures().then(function(o) {
                var i = _.contains(o, s.FEATURES.MASKED_FIELD)
                  , a = _.contains(o, s.FEATURES.UPLOAD_FIELD)
                  , l = _.filter(n.getWidgetsForDoc(t), function(e) {
                    return e.type === s.WIDGET.MASKED ? i : e.type === s.WIDGET.UPLOAD ? a : !0
                }
                );
                e.fieldWidgets = _.filter(l, {
                    "static": !1
                }),
                e.staticWidgets = _.filter(l, {
                    "static": !0
                })
            }
            ),
            e.widgetInfo = null ,
            e.settingsVisible = !1,
            e.widgetsVisible = !0,
            r.widget && (e.widgetInfo = _.find(t.widgetsInfo, function(e) {
                return e.widget.id === r.widget
            }
            ),
            e.settingsVisible = !0,
            e.widgetsVisible = !1)
        }
    }
    ),
    a.getProfile().then(function(e) {
        "template" === e.signup_source && (l.dialog("template-poll"),
        l.dialog("template-introduce-slides", function() {
            t.dialog("widgets")
        }
        ))
    }
    ),
    e.closeWidgetSettings = function() {
        c.fireEvent({
            name: "close-settings"
        })
    }
    ;
    var m = d.current.name;
    e.$on("$stateChangeStart", function(e, n) {
        m !== n.name && c.fireEvent({
            name: "unhighlight"
        })
    }
    )
}
]),
angular.module("pd.doctools").constant("meta.widgets", {
    name: "Fields",
    controller: {
        name: "WidgetsActionController"
    },
    icon: "widget",
    route: "widgets"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    (t.application.app || t.application.sdk) && (e.state("documents.details.tools-widgets", {
        parent: "documents.details",
        url: "^/documents/:documentId/widgets?widget",
        views: {
            "tool-content@documents.details": {
                templateUrl: "/views/doctools/widgets/list.html",
                controller: "WidgetsListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("templates.details.tools-widgets", {
        parent: "templates.details",
        url: "^/templates/:templateId/widgets?widget",
        views: {
            "tool-content@templates.details": {
                templateUrl: "/views/doctools/widgets/list.html",
                controller: "WidgetsListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("inbox.details.tools-widgets", {
        parent: "inbox.details",
        url: "^/inbox/:documentId/widgets?widget",
        views: {
            "tool-content@inbox.details": {
                templateUrl: "/views/doctools/widgets/list.html",
                controller: "WidgetsListController"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]).controller("WidgetsActionController", ["ContextService", "$rootScope", function(e, n) {
    this.action = function() {
        e.openDocTool("tools-widgets")
    }
}
]),
angular.module("pd.doctools").controller("WorkflowDetailsController", ["$scope", "ContextService", "Constants", "DocumentsApprovalService", function(e, n, t, o) {
    e.goBackToMore = function() {
        n.openDocTool("tools-more")
    }
    ,
    e.STATUS = t.DOCUMENT.STATUS,
    e.selected = {
        role: null ,
        user: null 
    },
    e.approval = null ,
    e.$watch("documentInfo.document", function(t) {
        if (t && (_.isObject(t.approval) ? (e.approval = _.cloneDeep(t.approval),
        e.approval.enabled = !0) : n.isTemplates() && (e.approval = {
            moderators: [],
            is_editable: !0
        },
        e.approval.enabled = !1),
        _.isObject(t.approval))) {
            var o = _.first(t.approval.moderators);
            o && o.role ? e.selected.role = o.role : o && o.user && (e.selected.user = o.user)
        }
    }
    ),
    e.$watch("selected", function(n, t) {
        if (!_.isEqual(n, t))
            if (e.approval.enabled && a() && !n.role && !n.user)
                e.approval.moderators = [];
            else if (e.approval.enabled && !a()) {
                var o = {};
                n.role && (o.role = n.role),
                n.user && (o.user = n.user.id),
                e.approval.moderators.push(o)
            }
    }
    , !0),
    e.enableApproval = function() {
        e.approval.enabled = !0
    }
    ,
    e.disableApproval = function() {
        e.approval.enabled = !1,
        e.selected = {
            role: null ,
            user: null 
        },
        e.documentInfo.document.approval && l(e.documentInfo.document.approval).then(r)
    }
    ;
    var i = function(e, n) {
        return o.addModerator(e, n).then(function(n) {
            return e.moderators = [n],
            e
        }
        )
    }
      , a = function() {
        return e.approval && !_.isEmpty(e.approval.moderators)
    }
      , s = function(n) {
        var t = e.documentInfo.document;
        return o.enableApproval(t).then(function(e) {
            return i(e, n)
        }
        )
    }
      , l = function(n) {
        var t = e.documentInfo.document;
        return o.disableApproval(t, n).then(function() {
            return null 
        }
        )
    }
      , r = function(n) {
        var t = e.approval.enabled;
        e.approval = n ? _.cloneDeep(n) : {
            moderators: [],
            is_editable: !0
        },
        e.approval.enabled = t,
        e.documentInfo.document.approval = n
    }
    ;
    e.$watchCollection("approval.moderators", function(n) {
        if (n) {
            var t = _.first(n)
              , o = e.documentInfo.document.approval;
            t && !o ? s(t).then(r) : !t && o && l(o).then(r)
        }
    }
    )
}
]),
angular.module("pd.doctools").constant("meta.workflow", {
    name: "Workflow",
    controller: {
        name: "WorkflowActionController"
    },
    icon: "workflow",
    route: "workflow"
}).config(["$stateProvider", "ConfigProvider", function(e, n) {
    var t = n.$get();
    (t.application.app || t.application.sdk) && (e.state("documents.details.tools-workflow", {
        parent: "documents.details",
        url: "^/documents/:documentId/workflow",
        views: {
            "tool-content@documents.details": {
                controller: "WorkflowDetailsController",
                templateUrl: "/views/doctools/workflow/workflow.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }),
    e.state("templates.details.tools-workflow", {
        parent: "templates.details",
        url: "^/templates/:templateId/workflow",
        views: {
            "tool-content@templates.details": {
                controller: "WorkflowDetailsController",
                templateUrl: "/views/doctools/workflow/workflow.html"
            }
        },
        data: {
            hasRightDetailsPanel: !0
        }
    }))
}
]).controller("WorkflowActionController", ["ContextService", function(e) {
    this.action = function() {
        e.openDocTool("tools-workflow")
    }
}
]),
angular.module("pd.settings", ["pd.common", "uiSwitch"]).config(["$urlRouterProvider", "$stateProvider", "ConfigProvider", "Constants", function(e, n, t, o) {
    var i = t.$get();
    n.state("settings", {
        parent: "app.base",
        url: "^/settings/",
        "abstract": !0,
        views: {
            "@app": {
                templateUrl: "/views/settings/base.html",
                controller: "SettingsController"
            }
        },
        breadcrumbs: [{
            name: "Settings",
            url: "#/settings/"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.when("/settings/", "/settings/profile/"),
    n.state("settings.profile", {
        parent: "settings",
        url: "^/settings/profile/",
        views: {
            "settings_content@settings": {
                templateUrl: "/views/settings/profile.html",
                controller: "ProfileController"
            }
        },
        breadcrumbs: [{
            name: "Profile",
            url: "#/settings/profile/"
        }]
    }),
    n.state("settings.rewards", {
        parent: "settings",
        url: "^/settings/rewards/",
        views: {
            "settings_content@settings": {
                templateUrl: "/views/settings/rewards/rewards.html",
                controller: "RewardsController"
            }
        },
        breadcrumbs: [{
            name: "Rewards",
            url: "#/settings/rewards/"
        }]
    }),
    n.state("settings.workspaces", {
        parent: "settings",
        url: "^/settings/workspaces/",
        views: {
            "settings_content@settings": {
                templateUrl: "/views/settings/workspaces/workspaces.html",
                controller: "WorkspacesSettingsController"
            }
        },
        breadcrumbs: [{
            name: "Workspaces",
            url: "#/settings/workspaces/"
        }]
    }),
    i.userRole >= o.ROLES.ADMIN && (n.state("settings.team", {
        parent: "settings",
        url: "^/settings/team/",
        views: {
            "settings_content@settings": {
                templateUrl: "/views/settings/team/team.html",
                controller: "TeamController"
            }
        },
        breadcrumbs: [{
            name: "Team",
            url: "#/settings/team/"
        }]
    }),
    n.state("settings.team.unavailable", {
        parent: "settings",
        url: "^/settings/team/unavailable/",
        views: {
            "settings_content@settings": {
                templateUrl: "/views/settings/team/team-unavailable.html"
            }
        },
        breadcrumbs: [{
            name: "Team",
            url: "#/settings/team/"
        }]
    })),
    i.userRole === o.ROLES.OWNER && (n.state("settings.branding", {
        parent: "settings",
        url: "^/settings/branding/",
        views: {
            "settings_content@settings": {
                templateUrl: "/views/settings/branding/branding.html",
                controller: "BrandingSettingsController"
            }
        },
        breadcrumbs: [{
            name: "Branding",
            url: "#/settings/branding/"
        }]
    }),
    n.state("settings.account", {
        parent: "settings",
        url: "^/settings/account/",
        views: {
            "settings_content@settings": {
                templateUrl: "/views/settings/account/account.html",
                controller: "AccountController"
            }
        }
    }),
    n.state("settings.account.subscription", {
        parent: "settings.account",
        url: "^/settings/account/subscription/",
        views: {
            "content@settings.account": {
                templateUrl: "/views/settings/account/subscription.html",
                controller: "AccountSubscriptionController"
            }
        },
        breadcrumbs: [{
            name: "Account",
            url: "#/settings/account/subscription/"
        }]
    }),
    n.state("settings.account.subscription.checkout", {
        parent: "settings.account.subscription",
        url: "^/settings/account/subscription/checkout",
        views: {
            "content@settings.account": {
                templateUrl: "/views/settings/account/subscription-checkout.html",
                controller: "AccountSubscriptionCheckoutController"
            }
        },
        breadcrumbs: [{
            name: "Checkout",
            url: "#/settings/account/subscription/checkout/"
        }]
    }),
    e.when("/settings/account/", "/settings/account/subscription/"),
    e.when("/settings/billing/", "/settings/account/subscription/"),
    n.state("settings.account.pay-as-you-go", {
        parent: "settings.account",
        url: "^/settings/account/pay-as-you-go/",
        views: {
            "content@settings.account": {
                templateUrl: "/views/settings/billing/stripe/billing-packages.html",
                controller: "StripeBillingController"
            }
        },
        breadcrumbs: [{
            name: "Pay as You Go",
            url: "#/settings/account/pay-as-you-go/"
        }]
    }),
    n.state("settings.workspace", {
        parent: "settings",
        url: "^/settings/workspace/",
        views: {
            "settings_content@settings": {
                templateUrl: "/views/settings/workspace/workspace.html",
                controller: "WorkspaceSettingsController"
            }
        },
        breadcrumbs: [{
            name: "Workspace",
            url: "#/settings/workspace/"
        }]
    }))
}
]),
angular.module("pd.settings").controller("AccountController", ["$scope", "$state", "Constants", "FeaturesService", function(e, n, t, o) {}
]),
angular.module("pd.settings").controller("AccountHistoryController", ["$scope", "$state", "Constants", "FeaturesService", function(e, n, t, o) {}
]),
angular.module("pd.settings").controller("AccountManagementController", ["$scope", "$state", "Constants", "FeaturesService", function(e, n, t, o) {}
]),
angular.module("pd.settings").controller("AccountSubscriptionCheckoutController", ["$scope", "WorkspacesService", "Constants", "BillingService", "$filter", "$state", "NotificationCenter", "$rootScope", "SubscriptionService", "CouponDialog", "AppAnalyticsService", "$q", function(e, n, t, o, i, a, s, l, r, c, d, u) {
    d.track("Viewed Manage Billing Details");
    var m = t.PLANS.INTERVAL.MONTHLY
      , p = t.PLANS.INTERVAL.ANNUAL
      , g = t.PLANS.TYPE.PROFESSIONAL
      , f = t.PLANS.TYPE.BUSINESS
      , b = t.PLANS.TYPE.ENTERPRISE
      , v = {};
    v[g] = {},
    v[g][m] = "pd_plans_v2_professional_mn_1_10",
    v[g][p] = "pd_plans_v2_professional_an_1_10",
    v[f] = {},
    v[f][m] = "pd_plans_v2_business_mn_1_10",
    v[f][p] = "pd_plans_v2_business_an_1_10",
    v[b] = {},
    v[b][m] = "pd_plans_v2_enterprise_mn_1_plus",
    v[b][p] = "pd_plans_v2_enterprise_an_1_plus";
    var h = null 
      , w = function(e) {
        var n = u.defer();
        return h ? n.resolve(h) : (h = {
            annual: null ,
            monthly: null 
        },
        e.plan.handle !== b && e.plan.is_active ? o.chargify.getPlans().then(function(t) {
            "pd_plans_v2_enterprise_an_10_plus" === e.plan.handle ? h.annual = _.find(t, {
                handle: "pd_plans_v2_enterprise_an_10_plus"
            }) : e.plan.interval === p ? (h.annual = _.find(t, {
                handle: v[e.plan.type][p]
            }),
            h.monthly = _.find(t, {
                handle: v[e.plan.type][m]
            })) : (h.monthly = _.find(t, {
                handle: v[e.plan.type][m]
            }),
            h.annual = _.find(t, {
                handle: v[e.plan.type][p]
            })),
            n.resolve(h)
        }
        ) : (h.annual = e.plan,
        n.resolve(h))),
        n.promise
    }
      , k = function(n) {
        if (n) {
            if (e.subscription = n,
            e.isEnterprise = n.plan.type === b,
            e.isSubscriptionInTrial = r.isTrial(n),
            e.isSubscriptionFree = n.plan && t.PLANS.TYPE.FREE === n.plan.type,
            e.isChargifySubscription = n.plan && t.PAYMENT_PROVIDERS.CHARGIFY === n.plan.provider,
            e.isTrialEnded = n.plan && r.isTrialEnded(n),
            e.isSubscriptionFree)
                return void e.backToPlans();
            w(n).then(function(t) {
                e.annualPlan = t.annual,
                e.monthlyPlan = t.monthly,
                e.annualPlan && (e.annualPlan.monthlyPrice = i("number")(e.annualPlan.price / 12, 0)),
                e.monthlyPlan && (e.monthlyPlan.monthlyPrice = i("number")(e.monthlyPlan.price, 0)),
                e.selectedPlan = e.annualPlan.id === n.plan.id ? e.annualPlan : e.monthlyPlan,
                e.selectedPlanModel || (e.selectedPlanModel = {
                    selected: e.selectedPlan.id
                }),
                e.loading = !1
            }
            )
        }
    }
    ;
    e.loading = !0,
    n.getWorkspace().then(function(e) {
        k(e.subscription)
    }
    ),
    e.$eventToObservable("subscription.updated").debounce(2e3).subscribe(function(n) {
        var t = _.first(n.additionalArguments).subscription;
        t && (k(t),
        e.checkoutFormUrl = e.checkoutFormUrl + "?time=" + (new Date).getTime())
    }
    ),
    e.$watch("selectedPlanModel.selected", function(n) {
        if (e.selectedPlan && n !== e.selectedPlan.id) {
            e.switchingToNewPlan = !0;
            var t = _.cloneDeep(e.subscription)
              , i = e.annualPlan.id === n ? e.annualPlan : e.monthlyPlan;
            o.chargify.changePlan(t, i).then(function(n) {
                n && (l.$broadcast("subscription.updated", {
                    subscription: n
                }),
                e.selectedPlan = i),
                e.switchingToNewPlan = !1
            }
            , function(n) {
                r.onSubscriptionUpdateError(i, n),
                e.switchingToNewPlan = !1
            }
            )
        }
    }
    ),
    e.showRedeemCouponDialog = function() {
        c.open()
    }
    ,
    e.backToPlans = function() {
        a.go("settings.account.subscription")
    }
    ,
    e.checkoutFormUrl = "/payments/billing_info/",
    e.$on("subscription.billing-info-updated", function(n, t) {
        200 === Number(t.status) ? a.go("settings.account.subscription").then(function() {
            s.status("Subscription activated")
        }
        ) : (e.checkoutFormUrl = e.checkoutFormUrl + "?time=" + (new Date).getTime(),
        s.message("Payment failed. Please check your credit card details and try again.", 11))
    }
    )
}
]),
angular.module("pd.settings").controller("AccountSubscriptionController", ["$scope", "WorkspacesService", "Constants", "BillingService", "$filter", "$rootScope", "SubscriptionService", "ConfirmationService", "$timeout", function(e, n, t, o, i, a, s, l, r) {
    e.MONTHLY = t.PLANS.INTERVAL.MONTHLY,
    e.ANNUAL = t.PLANS.INTERVAL.ANNUAL,
    e.PROFESSIONAL = t.PLANS.TYPE.PROFESSIONAL,
    e.BUSINESS = t.PLANS.TYPE.BUSINESS,
    e.ENTERPRISE = t.PLANS.TYPE.ENTERPRISE,
    e.selectedPlanType = e.ANNUAL,
    e.changePlanTypeSelection = function(n) {
        e.selectedPlanType = n
    }
    ,
    e.loading = !0,
    o.chargify.getPlans().then(function(n) {
        e.plans = n;
        var o = t.PLANS.INTERVAL;
        _.each(_.filter(n, {
            interval: o.MONTHLY
        }), function(e) {
            e.monthlyPrice = i("number")(e.price, 0)
        }
        ),
        _.each(_.filter(n, {
            interval: o.ANNUAL
        }), function(e) {
            e.monthlyPrice = i("number")(e.price / 12, 0)
        }
        ),
        e.freePlan = _.find(n, {
            type: t.PLANS.TYPE.FREE
        }),
        e.loading = !1
    }
    );
    var c = function(n) {
        n && (e.subscription = n,
        e.currentPlan = n.plan,
        e.isSubscriptionActive = s.isActive(n),
        e.isSubscriptionInTrial = s.isTrial(n),
        e.isSubscriptionFree = e.currentPlan && t.PLANS.TYPE.FREE === e.currentPlan.type,
        e.isChargifySubscription = e.currentPlan && t.PAYMENT_PROVIDERS.CHARGIFY === e.currentPlan.provider)
    }
    ;
    n.getWorkspace().then(function(e) {
        c(e.subscription)
    }
    ),
    e.$eventToObservable("subscription.updated").debounce(1e3).subscribe(function(e) {
        var n = _.first(e.additionalArguments).subscription;
        n && c(n)
    }
    );
    var d = function() {
        e.isCancelingInProgress = !0;
        var n = _.cloneDeep(e.subscription);
        o.chargify.changePlan(n, e.freePlan).then(function(n) {
            n && a.$broadcast("subscription.updated", {
                subscription: n
            }),
            r(function() {
                e.isCancelingInProgress = !1
            }
            , 3e3)
        }
        , function(n) {
            e.isCancelingInProgress = !1,
            s.onSubscriptionUpdateError(e.freePlan, n)
        }
        )
    }
    ;
    e.cancelSubscription = function() {
        l.confirm({
            title: "Cancel Subscription",
            text: "Would you like to cancel your current subscription? <br><br>Please note, upon cancellation of your subscription you will no longer be able to send or download documents.<br><br>Additionally, your team members will no longer have access to login to PandaDoc.",
            okText: "Proceed and Cancel"
        }).then(d)
    }
}
]),
angular.module("pd.settings").directive("oldSubscriptionPlan", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            subscription: "="
        },
        templateUrl: "/views/settings/account/old-subscription-plan.html",
        controller: ["$scope", "Constants", "$sce", "$state", "$rootScope", function(e, n, t, o, i) {
            e.PROFESSIONAL = n.PLANS.TYPE.PROFESSIONAL,
            e.BUSINESS = n.PLANS.TYPE.BUSINESS,
            e.ENTERPRISE = n.PLANS.TYPE.ENTERPRISE,
            e.MONTHLY = n.PLANS.INTERVAL.MONTHLY,
            e.ANNUAL = n.PLANS.INTERVAL.ANNUAL,
            e.featureListCollapsed = !0,
            e.$watch("subscription", function(n) {
                n && n.external_url && (e.updateBillingDetailsUrl = t.trustAsResourceUrl(n.external_url))
            }
            ),
            e.checkout = function() {
                o.go("settings.account.subscription.checkout")
            }
            ,
            e.$on("subscription.switching.to.another.plan", function() {
                e.switchingToAnotherPlan = !0
            }
            ),
            e.$eventToObservable("subscription.updated").debounce(1e3).subscribe(function() {
                e.switchingToAnotherPlan = !1
            }
            ),
            e.hovered = !0,
            e.$on("plan.hovered", function(n, t) {
                e.hovered = e.subscription && t.plan.id === e.subscription.plan.id
            }
            ),
            e.$on("plan.unhovered", function() {
                e.hovered = !0
            }
            ),
            e.onMouseOver = function() {
                e.subscription && !e.switchingToAnotherPlan && i.$broadcast("plan.hovered", {
                    plan: e.subscription.plan
                })
            }
            ,
            e.onMouseLeave = function() {
                e.subscription && !e.switchingToAnotherPlan && i.$broadcast("plan.unhovered")
            }
        }
        ]
    }
}
]),
angular.module("pd.settings").directive("subscriptionPlan", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            plans: "=",
            subscription: "=",
            type: "="
        },
        templateUrl: "/views/settings/account/subscription-plan.html",
        controller: ["$scope", "Constants", "$sce", "$state", "SwitchToNewPlanDialog", "SubscriptionService", "BillingService", "$rootScope", function(e, n, t, o, i, a, s, l) {
            e.PROFESSIONAL = n.PLANS.TYPE.PROFESSIONAL,
            e.BUSINESS = n.PLANS.TYPE.BUSINESS,
            e.ENTERPRISE = n.PLANS.TYPE.ENTERPRISE,
            e.MONTHLY = n.PLANS.INTERVAL.MONTHLY,
            e.ANNUAL = n.PLANS.INTERVAL.ANNUAL,
            e.featureListCollapsed = !0,
            e.annual = !0;
            var r = function() {
                e.isCurrentPlan() ? (e.getAnnualPlan() && e.subscription.plan.id === e.getAnnualPlan().id ? e.plan = e.getAnnualPlan() : e.getMonthlyPlan() && e.subscription.plan.id === e.getMonthlyPlan().id && (e.plan = e.getMonthlyPlan()),
                e.hovered = !0) : e.plan = e.getAnnualPlan()
            }
            ;
            e.getAnnualPlan = function() {
                return _.find(e.plans, {
                    interval: n.PLANS.INTERVAL.ANNUAL,
                    type: e.type
                })
            }
            ,
            e.getMonthlyPlan = function() {
                return _.find(e.plans, {
                    interval: n.PLANS.INTERVAL.MONTHLY,
                    type: e.type
                })
            }
            ,
            e.$watch("plans", function(e) {
                e && r()
            }
            ),
            e.$watch("subscription", function(n) {
                n && (n.external_url && (e.updateBillingDetailsUrl = t.trustAsResourceUrl(n.external_url)),
                r())
            }
            ),
            e.isCurrentPlan = function() {
                if (!e.subscription || !e.subscription.plan)
                    return !1;
                var n = e.subscription.plan;
                return e.getAnnualPlan() && e.getAnnualPlan().id === n.id || e.getMonthlyPlan() && e.getMonthlyPlan().id === n.id
            }
            ,
            e.hasAnnualAndMonthlyVariations = function() {
                return e.getAnnualPlan() && e.getMonthlyPlan()
            }
            ,
            e.checkout = function() {
                o.go("settings.account.subscription.checkout")
            }
            ,
            e.select = function() {
                if (a.isTrial(e.subscription) || a.isTrialEnded(e.subscription)) {
                    var n = _.cloneDeep(e.subscription);
                    l.$broadcast("subscription.switching.to.another.plan", {
                        plan: e.plan
                    }),
                    s.chargify.changePlan(n, e.plan).then(function(e) {
                        e && l.$broadcast("subscription.updated", {
                            subscription: e
                        })
                    }
                    , function(n) {
                        a.onSubscriptionUpdateError(e.plan, n),
                        e.switchingToAnotherPlan = !1,
                        e.switchingToThisPlan = !1
                    }
                    )
                } else {
                    var t = {
                        currentPlan: e.subscription.plan,
                        subscription: e.subscription,
                        monthlyPlan: e.getMonthlyPlan(),
                        annualPlan: e.getAnnualPlan(),
                        "default": e.plan
                    };
                    i.open(t).then(function() {
                        l.$broadcast("subscription.switching.to.another.plan", {
                            plan: e.plan
                        })
                    }
                    )
                }
            }
            ,
            e.$eventToObservable("subscription.updated").debounce(1e3).subscribe(function() {
                e.switchingToAnotherPlan = !1,
                e.switchingToThisPlan = !1
            }
            ),
            e.$on("subscription.switching.to.another.plan", function(n, t) {
                e.switchingToAnotherPlan = !0,
                t.plan.id === e.plan.id && (e.switchingToThisPlan = !0)
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.settings").directive("subscriptionState", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            subscription: "="
        },
        templateUrl: "/views/settings/account/subscription-state.html",
        controller: ["$scope", "SubscriptionService", "Constants", "$filter", function(e, n, t, o) {
            e.$watch("subscription", function(i) {
                i && (e.subscription = i,
                e.currentPlan = i.plan,
                e.isSubscriptionActive = n.isActive(i),
                e.isSubscriptionInTrial = n.isTrial(i),
                e.isSubscriptionInTrialEnded = n.isTrialEnded(i),
                e.isSubscriptionFree = e.currentPlan && t.PLANS.TYPE.FREE === e.currentPlan.type,
                e.isSubscriptionAnnual = e.currentPlan && t.PLANS.INTERVAL.ANNUAL === e.currentPlan.interval,
                e.isSubscriptionEnterprise = e.currentPlan && t.PLANS.TYPE.ENTERPRISE === e.currentPlan.type,
                e.isSubscriptionInTrial && (e.trialDaysLeft = Math.ceil(moment(i.trial_ended_at).diff(moment(), "days", !0))),
                e.isChargifySubscription = e.currentPlan && t.PAYMENT_PROVIDERS.CHARGIFY === e.currentPlan.provider,
                i.plan.monthlyPrice = e.isSubscriptionAnnual ? o("number")(i.plan.price / 12, 0) : o("number")(i.plan.price, 0))
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.settings").service("SwitchToNewPlanDialog", ["Constants", "ModalService", "BillingService", "$rootScope", "SubscriptionService", function(e, n, t, o, i) {
    this.open = function(a) {
        var s = {
            templateUrl: "/views/settings/account/confirm-account-change.html",
            resolve: {
                options: function() {
                    return a
                }
            },
            controller: ["$scope", "options", function(n, a) {
                n.currentPlan = a.currentPlan,
                n.newPlan = a["default"],
                n.isAnnual = n.newPlan.interval === e.PLANS.INTERVAL.ANNUAL,
                n.chooseMonthlyPlan = function() {
                    n.newPlan = a.monthlyPlan,
                    n.isAnnual = !1
                }
                ,
                n.chooseAnnualPlan = function() {
                    n.newPlan = a.annualPlan,
                    n.isAnnual = !0
                }
                ,
                n.confirmSubscription = function() {
                    n.switchingToNewPlan = !0;
                    var e = _.cloneDeep(a.subscription);
                    t.chargify.changePlan(e, n.newPlan).then(function(e) {
                        e && o.$broadcast("subscription.updated", {
                            subscription: e
                        }),
                        n.switchingToNewPlan = !1,
                        n.$close()
                    }
                    , function(e) {
                        i.onSubscriptionUpdateError(n.newPlan, e),
                        n.switchingToNewPlan = !1,
                        n.$dismiss()
                    }
                    )
                }
            }
            ]
        };
        return n.open(s)
    }
}
]),
angular.module("pd.settings").controller("BillingController", ["$scope", "$controller", "BillingService", function(e, n, t) {
    t.hasChargifySubscription().then(function(t) {
        e.ready = !0,
        e.chargify = t,
        e.stripe = !t,
        t ? n("ChargifyBillingController", {
            $scope: e
        }) : n("StripeBillingController", {
            $scope: e
        })
    }
    )
}
]),
angular.module("pd.settings").controller("ChargifyBillingController", ["$scope", "$state", "AppAnalyticsService", "BillingService", "WorkspacesService", "Constants", "$stateParams", "$sce", function(e, n, t, o, i, a, s, l) {
    t.track("Viewed Billing"),
    e.monthly = a.BILLING.INTERVAL.MONTHLY,
    e.annual = a.BILLING.INTERVAL.ANNUAL,
    e.manageBillingDetails = function() {
        t.track("Viewed Manage Billing Details")
    }
    ,
    e.$on("subscription.chargify-created", function(e, t) {
        n.go("settings.billing", {}, {
            reload: !0,
            inherit: !1
        })
    }
    ),
    e.$on("subscription.change-plan", function(n, t) {
        var i = t.plan;
        (e.subscription.external_id || i.handle === a.BILLING.FREE_PLAN_HANDLE) && o.chargify.changePlan(e.subscription, i).then(r)
    }
    );
    var r = function(t) {
        t.plan.handle === a.SUBSCRIPTIONS.FREE ? n.go("settings.billing", {}, {
            reload: !0
        }) : (e.subscription = t,
        e.plans = null ,
        o.chargify.getPlans().then(function(n) {
            e.plans = n,
            e.freePlan = _.find(n, {
                handle: "free"
            }),
            e.professionalPlan = _.find(n, {
                handle: "professional"
            }),
            e.professionalAnnualPlan = _.find(n, {
                handle: "professional-annual"
            }),
            e.businessPlan = _.find(n, {
                handle: "business"
            }),
            e.businessAnnualPlan = _.find(n, {
                handle: "business-annual"
            }),
            e.currentPlan = _.find(n, {
                id: e.subscription.plan.id
            })
        }
        ))
    }
    ;
    i.getWorkspace().then(function(n) {
        e.showMonthly = !1,
        e.subscription = n.subscription,
        e.workspace = n,
        e.chargifyUrl = l.trustAsResourceUrl(e.subscription.external_url),
        o.chargify.getPlans().then(function(n) {
            e.plans = n,
            e.freePlan = _.find(n, {
                handle: "free"
            }),
            e.professionalPlan = _.find(n, {
                handle: "professional"
            }),
            e.professionalAnnualPlan = _.find(n, {
                handle: "professional-annual"
            }),
            e.businessPlan = _.find(n, {
                handle: "business"
            }),
            e.businessAnnualPlan = _.find(n, {
                handle: "business-annual"
            }),
            e.currentPlan = _.find(n, {
                id: e.subscription.plan.id
            })
        }
        )
    }
    )
}
]),
angular.module("pd.settings").service("CouponDialog", ["ModalService", function(e) {
    this.open = function() {
        var n = {
            templateUrl: "/views/settings/coupons.html",
            controller: "CouponDialogController"
        };
        return e.open(n)
    }
}
]).controller("CouponDialogController", ["$scope", "$rootScope", "$state", "BillingService", function(e, n, t, o) {
    e.coupon = {
        code: "",
        text: ""
    },
    e.sendCouponCode = function() {
        e.loading = !0,
        o.sendCouponCode(e.coupon.code).then(function(n) {
            n.error ? (e.coupon.status = "error",
            e.coupon.text = "This coupon code has already been redeemed for your workspace") : (e.coupon.status = "success",
            e.coupon.text = n.description),
            e.loading = !1
        }
        , function(n) {
            e.loading = !1,
            e.coupon.status = "error",
            e.coupon.text = "This coupon code is incorrect or already inactive"
        }
        )
    }
}
]),
angular.module("pd.settings").directive("chargifyIframeWrapper", ["$window", "$rootScope", function(e, n) {
    return {
        restrict: "A",
        link: function(t, o) {
            function i(e) {
                /chargify\.com$/i.test(e.origin) && t.$apply(function() {
                    o.css({
                        height: e.data.scrollHeight + 10 + "px"
                    }),
                    n.$broadcast("chargify.loaded")
                }
                )
            }
            e.addEventListener("message", i, !1),
            t.$on("$destroy", function() {
                e.removeEventListener("message", i)
            }
            )
        }
    }
}
]),
angular.module("pd.settings").controller("StripeBillingController", ["$scope", "AppAnalyticsService", "BillingService", "$filter", "ProfileService", "Config", "WorkspacesService", "$window", "$timeout", "SuccessfulPaymentDialog", "ModalService", "$q", "Constants", "ConfirmationService", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p) {
    n.track("Viewed Billing"),
    e.packages = [],
    s.getWorkspaceMembers().then(function(n) {
        e.workspaceMembersCount = n.length,
        t.stripe.getPlans().then(function(n) {
            e.packages = e.packages.concat(_.map(n, function(e) {
                return e.plan = !0,
                e
            }
            )),
            e.unlimitedPrice = _.first(n).price
        }
        ),
        t.stripe.getPackages().then(function(n) {
            e.packages = _.map(n, function(e) {
                return e["package"] = !0,
                e
            }
            ).concat(e.packages),
            e.model = {
                selected: _.find(n, {
                    "default": !0
                })
            }
        }
        )
    }
    ),
    s.getWorkspace().then(function(n) {
        e.subscription = n.subscription
    }
    ),
    e.$watch("subscription", function(n) {
        n && (e.hasSubscription = n.plan && n.plan.handle === m.SUBSCRIPTIONS.ENTERPRISE,
        e.subscription.next_assessment_date && (e.nextPayment = moment(e.subscription.next_assessment_date).format("D MMMM, YYYY")))
    }
    );
    var g, f = function(n) {
        return n["package"] ? [n.count, " docs ", "$" + o("number")(n.price_per_doc / 100, 2), "/doc"].join("") : 1 === e.workspaceMembersCount ? ["$" + o("number")(n.price, 2), "/user/mo"].join("") : [e.workspaceMembersCount, " users x ", "$" + o("number")(n.price, 2), "/user/mo"].join("")
    }
    , b = function(n) {
        return n["package"] ? n.price_per_doc * n.count : n.price * e.workspaceMembersCount * 100
    }
    , v = function(e) {
        return e["package"] ? "Pay" : "Subscribe for {{amount}}/mo"
    }
    ;
    e.stripe = "none";
    var h = function() {
        e.working = !1,
        e.stripe = "none"
    }
    ;
    e.deleteSubscription = function() {
        p.confirm({
            title: "Cancelling you subscription",
            text: "Are you sure to cancel your subscription?"
        }).then(function() {
            e.working = !0,
            e.deletingSubscription = !0,
            t.stripe.deleteSubscription().then(function() {
                e.hasSubscription = !1,
                e.deletingSubscription = !1,
                h()
            }
            , function() {
                e.deletingSubscription = !1,
                h()
            }
            )
        }
        )
    }
    ,
    e.buyUnlimited = function() {
        var n = _.find(e.packages, {
            plan: !0
        });
        e.stripe = "preparingUnlimited",
        e.working = !0,
        k(n).then(function(o) {
            e.stripe = "processingUnlimited",
            t.stripe.setupSubscription(n, o).then(function() {
                c.open({
                    count: -1
                }),
                h()
            }
            , h)
        }
        , h)
    }
    ,
    e.buy = function(n) {
        e.stripe = "preparing",
        e.working = !0,
        k(n).then(function(o) {
            e.stripe = "processing",
            n["package"] ? w(n, o).then(function() {
                c.open({
                    count: n.count
                }),
                h()
            }
            , h) : t.stripe.setupSubscription(n, o).then(function() {
                c.open({
                    count: -1
                }),
                h()
            }
            , h)
        }
        , h)
    }
    ;
    var w = function(n, t) {
        var o = u.defer();
        return n.post("", {
            token: t
        }).then(function() {
            o.resolve(n.count)
        }
        , function() {
            e.stripe = "none",
            d.open({
                templateUrl: "/views/common/dialogs/declined-payment-dialog.html"
            }),
            o.reject()
        }
        ),
        o.promise
    }
      , k = function(n) {
        var t = u.defer()
          , o = StripeCheckout.configure({
            key: n.publishable_key,
            image: a.staticBaseURL + "img/logo-pandadoc-128x128.png",
            token: function(e) {
                g && r.cancel(g),
                t.resolve(e.id)
            }
        });
        return i.getProfile().then(function(i) {
            o.open({
                name: "PandaDoc",
                description: f(n),
                amount: b(n),
                email: i.email,
                panelLabel: v(n),
                closed: function() {
                    g = r(t.reject, 300)
                },
                opened: function() {
                    r(function() {
                        e.stripe = "opened"
                    }
                    )
                }
            })
        }
        ),
        t.promise
    }
    ;
    e.$on("subscription.updated", function(n, t) {
        t.subscription && (e.subscription = t.subscription)
    }
    )
}
]),
angular.module("pd.settings").controller("BrandingSettingsController", ["$scope", "$rootScope", "BrandingService", "WorkspacesService", "AppAnalyticsService", "AlertService", function(e, n, t, o, i, a) {
    i.track("Viewed Branding Settings"),
    e.branding = null ,
    e.workspaceId = null ;
    var s = function() {
        return t.updateBranding(e.branding)
    }
    ;
    e.logoUploaderDelegate = {
        imageUrlUploadDone: function(t) {
            e.branding.main_logo = t,
            s().then(function() {
                n.$broadcast("branding.logoChanged", e.branding)
            }
            )
        },
        imageUrlUploadFailed: function() {
            a.alert({
                title: "Unable to change logo",
                text: "Unable to upload and change a logo. Please make sure you're uploading PNG or GIF image."
            })
        }
    },
    e.iconUploaderDelegate = {
        imageUrlUploadDone: function(t) {
            e.branding.icon_src = t,
            s().then(function() {
                n.$broadcast("branding.iconChanged", e.branding)
            }
            )
        },
        imageUrlUploadFailed: function() {
            a.alert({
                title: "Unable to change icon",
                text: "Unable to upload and change a icon. Please make sure you're uploading PNG or GIF image."
            })
        }
    },
    o.getWorkspace().then(function(n) {
        e.workspaceId = n.id
    }
    ),
    e.$watch("workspaceId", function() {
        e.workspaceId && t.getWorkspaceBranding(function(n) {
            e.branding = n
        }
        )
    }
    ),
    e.updateEmailBrandingSettings = s
}
]),
angular.module("pd.settings").controller("SettingsController", ["$scope", "FeaturesService", "Constants", "WorkspacesService", function(e, n, t, o) {
    e.$on("$stateChangeSuccess", function(n, t) {
        e.activeRoute = t.name
    }
    ),
    e.isBrandingAvailable = !1,
    e.isMultipleWorkspacesAvailable = !1,
    n.checkAvailability(t.FEATURES.BRANDING).then(function(n) {
        e.isBrandingAvailable = n
    }
    ),
    n.checkAvailability(t.FEATURES.MULTIPLE_WORKSPACES).then(function(n) {
        e.isMultipleWorkspacesAvailable = n
    }
    ),
    n.checkAvailability(t.FEATURES.WORKSPACE_SETTINGS).then(function(n) {
        e.isWorkspaceSettinsAvailable = n
    }
    ),
    o.getWorkspace().then(function(n) {
        e.isFreePlan = n.subscription.plan.handle === t.BILLING.FREE_PLAN_HANDLE
    }
    )
}
]),
angular.module("pd.settings").constant("IntegrationsResources", {
    nimble: {
        contactSync: !0,
        features: ["integration.nimble.contact_sync"],
        faq: "https://www.pandadoc.com/faqs/nimble-integration-pandadoc/"
    },
    quoteroller: {
        contactSync: !0,
        features: ["integration.quoteroller.contact_sync"],
        faq: "https://www.pandadoc.com/faqs/quote-roller-integration-pandadoc/"
    },
    harvest: {
        contactSync: !0,
        features: ["integration.harvest.contact_sync"],
        faq: "https://www.pandadoc.com/faqs/harvest-integration-pandadoc/"
    },
    google_oauth2: {
        contactSync: !0
    },
    capsulecrm: {
        connectionSettings: {
            connectTemplate: "/views/settings/integrations/connect/capsulecrm.html",
            helpLink: "http://support.capsulecrm.com/customer/portal/articles/382453-how-do-i-find-my-capsule-api-key-"
        },
        contactSync: !0,
        features: ["integration.capsulecrm.contact_sync"],
        faq: "https://www.pandadoc.com/faqs/capsule-integration-pandadoc/"
    },
    pipedrive: {
        features: ["integration.pipedrive.integration"],
        chromeAddOn: !0,
        chromeAddOnLink: "https://chrome.google.com/webstore/detail/sales-documents-generatio/ocmcjmdbdheghfhkcflmghcjecnebamg?utm_source=chrome-ntp-icon",
        faq: "https://www.pandadoc.com/faqs/pipedrive-integration-pandadoc/"
    },
    nutshell: {
        connectionSettings: {
            connectTemplate: "/views/settings/integrations/connect/nutshell.html",
            helpLink: "http://monosnap.com/image/EkiSjwyMi54eQDbThMDmNYRazSDjuq"
        },
        contactSync: !0,
        features: ["integration.nutshell.contact_sync"],
        faq: "https://www.pandadoc.com/faqs/nutshell-integration-pandadoc/"
    },
    basecampnew: {
        contactSync: !0,
        features: ["integration.basecampnew.contact_sync"],
        faq: "https://www.pandadoc.com/faqs/basecamp-integration-pandadoc/"
    },
    zohocrm: {
        chromeAddOn: !0,
        chromeAddOnLink: "https://chrome.google.com/webstore/detail/documents-automation-for/aigpcnlodbpopdjddjmkdjbedpjpjnij",
        features: ["integration.zohocrm.integration"],
        faq: "https://www.pandadoc.com/faqs/zohocrm-integration-pandadoc/"
    },
    insightly: {
        connectionSettings: {
            connectTemplate: "/views/settings/integrations/connect/insightly.html",
            helpLink: "https://insightly.com/login"
        },
        contactSync: !0,
        features: ["integration.insightly.contact_sync"]
    },
    yammer: {
        contactSync: !0,
        features: ["integration.yammer.contact_sync", "integration.yammer.sing_in"],
        faq: "https://www.pandadoc.com/faqs/yammer-integration-pandadoc"
    },
    pipeliner: {
        connectionSettings: {
            connectTemplate: "/views/settings/integrations/connect/pipeliner.html",
            helpLink: "https://workspace.pipelinersales.com/api_access"
        },
        contactSync: !0,
        features: ["integration.pipeliner.contact_sync"],
        faq: "https://www.pandadoc.com/faqs/pipeliner-crm-integration-pandadoc/"
    },
    pipelinedeals: {
        connectionSettings: {
            connectTemplate: "/views/settings/integrations/connect/pipelinedeals.html",
            helpLink: "https://www.pipelinedeals.com/admin/api"
        },
        contactSync: !0,
        features: ["integration.pipelinedeals.contact_sync"],
        faq: "https://www.pandadoc.com/faqs/pipelinedeals-integration-pandadoc/"
    },
    onepagecrm: {
        connectionSettings: {
            connectTemplate: "/views/settings/integrations/connect/onepagecrm.html",
            helpLink: ""
        },
        contactSync: !0,
        features: ["integration.onepagecrm.contact_sync"],
        faq: "https://www.pandadoc.com/faqs/onepagecrm-integration-pandadoc/"
    },
    salesforce: {
        connectionSettings: {
            connectTemplate: "/views/settings/integrations/connect/salesforce.html",
            helpLink: ""
        },
        settings: {
            settingsTemplate: "/views/settings/integrations/settings/salesforce.html"
        },
        features: ["integration.salesforce.create_documents", "integration.salesforce.inject_data", "integration.salesforce.track_status"],
        faq: "https://www.pandadoc.com/faqs/salesforce-integration-pandadoc/"
    },
    xero: {
        settings: {
            settingsTemplate: "/views/settings/integrations/settings/xero.html"
        },
        features: ["integration.xero.create_invoices"],
        faq: "https://www.pandadoc.com/faqs/xero-integration-with-pandadoc/"
    },
    webhook: {
        settings: {
            settingsTemplate: "/views/settings/integrations/settings/webhooks.html"
        },
        connectionSettings: {
            connectTemplate: "/views/settings/integrations/connect/webhooks.html",
            helpLink: ""
        }
    }
}),
angular.module("pd.settings").service("IntegrationsSettingsService", ["IntegrationsService", function(e) {
    var n, t = ["salesforce", "pipedrive"], o = ["harvest", "yammer"], i = function(e) {
        var n = _.filter(e, function(e) {
            return -1 !== t.indexOf(e.integration)
        }
        )
          , i = _.filter(e, function(e) {
            return -1 !== o.indexOf(e.integration)
        }
        )
          , a = _.filter(e, function(e) {
            return -1 === t.indexOf(e.integration) && -1 === o.indexOf(e.integration)
        }
        );
        return n.concat(a).concat(i)
    }
    ;
    this.loadIntegrations = function(t) {
        e.getIntegrations(function(e) {
            n = i(e),
            t(n)
        }
        )
    }
    ,
    this.getIntegrationByHandle = function(e) {
        return n ? _.find(n, {
            integration: e
        }) : null 
    }
}
]),
angular.module("pd.settings").controller("IntegrationSetupController", ["$scope", "$state", "$stateParams", "IntegrationsResources", "IntegrationsService", "$filter", "ConfirmationService", "Constants", "singleWatch", "AppAnalyticsService", "BrowserUtils", function(e, n, t, o, i, a, s, l, r, c, d) {
    if (e.goBackToIntegrationsList = function(e) {
        n.go("settings.integrations", {}, {
            reload: e
        })
    }
    ,
    r(e, "integrations", function() {
        return e.integration = e.getIntegrationByHandle(t.integrationHandle),
        e.integration ? void c.track("Viewed Integration Details", {
            integration_type: e.integration.integration
        }) : void e.goBackToIntegrationsList()
    }
    ),
    o[t.integrationHandle]) {
        var u = o[t.integrationHandle];
        u.connectionSettings && u.connectionSettings.connectTemplate && (e.connectionSettings = u.connectionSettings),
        u.settings && u.settings.settingsTemplate && (e.configurationSettings = u.settings),
        e.features = u.features,
        e.contactSync = u.contactSync,
        e.chromeAddOn = u.chromeAddOn,
        e.isChrome = d.chrome,
        e.chromeAddOnLink = u.chromeAddOnLink,
        e.faq = u.faq
    }
    e.disableIntegration = function() {
        if (e.integration.is_active) {
            var n = a("translate")("integration." + e.integration.integration + ".name");
            s.confirm({
                title: "Disconnect " + n + " integration?",
                text: "Are you sure you want to disconnect " + n + " integration?"
            }).then(function() {
                e.disabling = !0,
                i.disableIntegration(e.integration.integration).then(function() {
                    e.goBackToIntegrationsList(!0)
                }
                )
            }
            )
        }
    }
    ,
    e.$eventToObservable("notification." + l.NOTIFICATION.TYPE.INTEGRATION).debounce(1e3).map(function(e) {
        return _.first(e.additionalArguments)
    }
    ).filter(function(n) {
        return e.integration && e.integration.integration === n.integration && "activated" === n.action
    }
    ).subscribe(function() {
        e.contactSyncProgress = 10,
        e.contactSyncFailed = !1,
        e.contactSyncFinished = !1,
        e.contactSyncProcessing = !0,
        e.integration.is_active = !0
    }
    ),
    e.$eventToObservable("notification." + l.NOTIFICATION.TYPE.CONTACT_SYNC).map(function(e) {
        return _.first(e.additionalArguments)
    }
    ).filter(function(n) {
        return n.percent > 10 && e.contactSyncProcessing
    }
    ).subscribe(function(n) {
        e.contactSyncProgress = n.percent
    }
    ),
    e.$eventToObservable("notification." + l.NOTIFICATION.TYPE.INTEGRATION).debounce(2e3).map(function(e) {
        return _.first(e.additionalArguments)
    }
    ).filter(function(n) {
        return e.integration && e.contactSyncProcessing && "failed" === n.action
    }
    ).subscribe(function() {
        e.contactSyncFailed = !0,
        e.contactSyncProcessing = !1
    }
    ),
    e.$eventToObservable("notification." + l.NOTIFICATION.TYPE.INTEGRATION).debounce(2e3).map(function(e) {
        return _.first(e.additionalArguments)
    }
    ).filter(function(n) {
        return e.integration && e.contactSyncProcessing && "finished" === n.action
    }
    ).subscribe(function() {
        e.contactSyncFailed || (e.contactSyncFinished = !0,
        e.contactSyncProcessing = !1)
    }
    )
}
]),
angular.module("pd.settings").controller("IntegrationsSettingsController", ["$scope", "NotificationCenter", "AppAnalyticsService", "IntegrationsSettingsService", "Constants", "$filter", "$stateParams", "IntegrationsResources", "$state", function(e, n, t, o, i, a, s, l, r) {
    t.track("Viewed Integrations");
    var c = function() {
        o.loadIntegrations(function(n) {
            e.integrations = n,
            e.noIntegrations = 0 === n.length
        }
        )
    }
    ;
    if (e.getIntegrationByHandle = function(n) {
        return _.find(e.integrations, {
            integration: n
        })
    }
    ,
    c(),
    s.open)
        var d = e.$watch("integrations", function(n) {
            if (n) {
                d();
                var t = _.find(n, {
                    integration: s.open
                });
                e.showDescription(t)
            }
        }
        );
    e.contactSupport = function() {
        window.Intercom && window.Intercom("show")
    }
    ,
    e.showDescription = function(e) {
        r.go("settings.integrations.setup", {
            integrationHandle: e.integration
        })
    }
    ,
    e.hasSettings = function(e) {
        return l[e.integration] && l[e.integration].settings
    }
    ,
    e.$eventToObservable("notification." + i.NOTIFICATION.TYPE.INTEGRATION).debounce(1e3).map(function(e) {
        return _.first(e.additionalArguments)
    }
    ).filter(function(e) {
        return "activated" === e.action
    }
    ).subscribe(c),
    e.isAlwaysEnabled = function(e) {
        return e && e.integration && l[e.integration] && l[e.integration].chromeAddOn
    }
}
]),
angular.module("pd.settings").controller("CapsuleCustomSettingsController", ["$scope", "$state", "IntegrationsService", "IntegrationsResources", "$q", function(e, n, t, o, i) {
    var a = "capsulecrm"
      , s = ".capsulecrm.com";
    e.customSettingsHelpLink = o[a].connectionSettings.helpLink,
    e.params = {
        domain: "",
        access_token: "",
        is_active: !0
    };
    var l = [{
        name: "include .capsulecrm.com",
        rule: function(e) {
            return -1 !== e.indexOf(s)
        }
    }, {
        name: "include user's domain name",
        rule: function(e) {
            return e.length - s.length !== 0
        }
    }, {
        name: "user's domain name goes before ..capsulecrm.com",
        rule: function(e) {
            var n = e.indexOf(s)
              , t = e.length - s.length;
            return n === t
        }
    }, {
        name: "user's domain name doesn't have protocol prefix",
        rule: function(e) {
            return -1 === e.indexOf(":") && -1 === e.indexOf("//") && 0 !== e.indexOf("www.")
        }
    }]
      , r = function(e) {
        if (!e)
            return !1;
        var n = e.toLowerCase();
        return _.all(l, function(e) {
            return e.rule(n)
        }
        )
    }
    ;
    e.$watch("params.domain", function(n) {
        e.invalidDomain && (e.invalidDomain = !r(n))
    }
    , !0),
    e.disabled = !0,
    e.$watch("params.domain", function(n) {
        e.disabled = _.isEmpty(n) || _.isEmpty(e.params.access_token)
    }
    ),
    e.$watch("params.access_token", function(n) {
        e.disabled = _.isEmpty(n) || _.isEmpty(e.params.domain)
    }
    ),
    e.connect = function() {
        var o = i.defer();
        return e.invalidDomain = !r(e.params.domain),
        e.invalidDomain ? o.reject() : t.enableIntegration(a, e.params, function() {
            n.go("settings.integrations")
        }
        , o.reject),
        o.promise
    }
}
]),
angular.module("pd.settings").controller("GenericOAuthSettingsController", ["$scope", "$state", "$stateParams", "$window", "AlertService", "$timeout", "Constants", "IntegrationsResources", "Config", "AppAnalyticsService", "$filter", function(e, n, t, o, i, a, s, l, r, c, d) {
    var u, m = l[t.integrationHandle];
    e.connect = function() {
        c.track("Integration connect started", {
            integration_type: e.integration.integration
        }),
        m.connectionSettings || (u = o.open(e.integration.url, "integration", "width=800, height=500"),
        u.focus())
    }
    ;
    var p = e.$eventToObservable("notification." + s.NOTIFICATION.TYPE.INTEGRATION).debounce(1e3).map(function(e) {
        return _.first(e.additionalArguments)
    }
    ).filter(function(n) {
        return n.integration === e.integration.integration
    }
    )["do"](function() {
        u && u.close()
    }
    );
    p.filter(function(e) {
        return "activated" === e.action
    }
    ).subscribe(function() {
        c.track("Integration connect finished", {
            integration_type: e.integration.integration
        })
    }
    ),
    p.filter(function(e) {
        return "auth error" === e.action && e.code
    }
    ).subscribe(function(n) {
        var t = "integration." + e.integration.integration + ".errors." + n.code
          , o = d("translate")(t);
        o && o !== t && i.alert({
            title: "Authentication error",
            text: o
        })
    }
    )
}
]),
angular.module("pd.settings").controller("InsightlyCustomSettingsController", ["$scope", "$state", "IntegrationsService", "IntegrationsResources", "$q", function(e, n, t, o, i) {
    var a = "insightly";
    e.customSettingsHelpLink = o[a].connectionSettings.helpLink,
    e.params = {
        access_token: "",
        is_active: !0
    },
    e.disabled = !0,
    e.$watch("params.access_token", function(n) {
        e.disabled = _.isEmpty(n)
    }
    ),
    e.connect = function() {
        var o = i.defer();
        return t.enableIntegration(a, e.params, function() {
            n.go("settings.integrations")
        }
        , o.reject),
        o.promise
    }
}
]),
angular.module("pd.settings").controller("NutshellCustomSettingsController", ["$scope", "$state", "IntegrationsService", "IntegrationsResources", "$q", function(e, n, t, o, i) {
    var a = "nutshell";
    e.customSettingsHelpLink = o[a].connectionSettings.helpLink,
    e.params = {
        email: "",
        access_token: "",
        is_active: !0
    },
    e.disabled = !0,
    e.$watch("params.email", function(n) {
        e.disabled = _.isEmpty(n) || _.isEmpty(e.params.access_token)
    }
    ),
    e.$watch("params.access_token", function(n) {
        e.disabled = _.isEmpty(n) || _.isEmpty(e.params.email)
    }
    ),
    e.connect = function() {
        var o = i.defer();
        return t.enableIntegration(a, e.params, function() {
            n.go("settings.integrations")
        }
        , o.reject),
        o.promise
    }
}
]),
angular.module("pd.settings").controller("OnepagecrmCustomSettingsController", ["$scope", "$state", "IntegrationsService", "IntegrationsResources", "$q", function(e, n, t, o, i) {
    var a = "onepagecrm";
    e.customSettingsHelpLink = o[a].connectionSettings.helpLink,
    e.params = {
        login: "",
        password: "",
        is_active: !0
    },
    e.disabled = !0,
    e.$watch("params", function(n) {
        e.disabled = _.isEmpty(n.login) || _.isEmpty(n.password)
    }
    , !0),
    e.connect = function() {
        var o = i.defer();
        return t.enableIntegration(a, e.params, function() {
            n.go("settings.integrations")
        }
        , o.reject),
        o.promise
    }
}
]),
angular.module("pd.settings").controller("PipelinedealsCustomSettingsController", ["$scope", "$state", "IntegrationsService", "IntegrationsResources", "$q", function(e, n, t, o, i) {
    var a = "pipelinedeals";
    e.customSettingsHelpLink = o[a].connectionSettings.helpLink,
    e.params = {
        access_token: "",
        is_active: !0
    },
    e.disabled = !0,
    e.$watch("params.access_token", function(n) {
        e.disabled = _.isEmpty(n)
    }
    ),
    e.connect = function() {
        var o = i.defer();
        return t.enableIntegration(a, e.params, function() {
            n.go("settings.integrations")
        }
        , o.reject),
        o.promise
    }
}
]),
angular.module("pd.settings").controller("PipelinerCustomSettingsController", ["$scope", "$state", "IntegrationsService", "IntegrationsResources", "$q", function(e, n, t, o, i) {
    var a = "pipeliner";
    e.customSettingsHelpLink = o[a].connectionSettings.helpLink,
    e.params = {
        username: "",
        password: "",
        namespace: "",
        is_active: !0
    },
    e.disabled = !0,
    e.$watch("params", function(n) {
        e.disabled = _.isEmpty(n.username) || _.isEmpty(n.password) || _.isEmpty(n.namespace)
    }
    , !0),
    e.connect = function() {
        var o = i.defer();
        return t.enableIntegration(a, e.params, function() {
            n.go("settings.integrations")
        }
        , o.reject),
        o.promise
    }
}
]),
angular.module("pd.settings").controller("SalesforceCustomSettingsController", ["$scope", "$state", "IntegrationsService", "IntegrationsResources", "$q", function(e, n, t, o, i) {
    var a = "salesforce";
    e.customSettingsHelpLink = o[a].connectionSettings.helpLink,
    e.onEnable = function() {
        var e = i.defer();
        return t.enableIntegration(a, {
            is_active: !0
        }, function() {
            n.go("settings.integrations")
        }
        , e.reject),
        e.promise
    }
}
]),
angular.module("pd.settings").controller("WebhookConnectionSettingsController", ["$scope", "IntegrationsService", function(e, n) {
    e.connect = function() {
        return e.connecting = !0,
        n.connectWebhooksIntegration().then(function() {
            e.integration.is_active = !0,
            e.connecting = !1
        }
        )
    }
}
]),
angular.module("pd.settings").controller("WebhookCustomSettingsController", ["$scope", "IntegrationsService", "WebhookDetailsDialog", function(e, n, t) {
    e.loading = !0,
    e.webhooks = [],
    n.getWebhooks().then(function(n) {
        e.webhooks = n,
        e.loading = !1
    }
    ),
    e.showNewWebhookForm = function() {
        t.open({
            name: "",
            url: "",
            tokens: !1,
            products: !1,
            metadata: !1,
            fields: !1,
            is_active: !0
        })
    }
    ,
    e.$on("webhook.created", function(n, t) {
        e.webhooks.push(t.webhook)
    }
    ),
    e.$on("webhook.removed", function(n, t) {
        e.webhooks = _.reject(e.webhooks, {
            id: t.webhook.id
        })
    }
    )
}
]),
angular.module("pd.settings").controller("XeroSettingsController", ["$scope", "IntegrationsService", "CurrencyService", "Constants", "$state", "$stateParams", function(e, n, t, o, i, a) {
    var s = o.INTEGRATIONS.XERO;
    n.getIntegrationSettings(s).then(function(n) {
        e.settings = n
    }
    ),
    e.currencies = t.getCurrencyList(),
    e.roles = [o.ROLES.MEMBER, o.ROLES.ADMIN, o.ROLES.OWNER],
    e.save = function() {
        e.saving = !0,
        n.updateIntegrationSettings(s, e.settings).then(function() {
            i.go("settings.integrations")
        }
        , function() {
            e.saving = !1
        }
        )
    }
    ,
    e.showPermissions = !_.isUndefined(a.showXeroPermissions),
    n.getXeroTaxes().then(function(n) {
        e.taxes = n
    }
    )
}
]),
angular.module("pd.settings").directive("webhook", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            webhook: "="
        },
        templateUrl: "/views/settings/integrations/settings/webhook.html",
        controller: ["$scope", "WebhookDetailsDialog", function(e, n) {
            e.showDetails = function() {
                n.open(e.webhook)
            }
        }
        ]
    }
}
]),
angular.module("pd.settings").service("WebhookDetailsDialog", ["ModalService", function(e) {
    this.open = function(n) {
        var t = {
            templateUrl: "/views/settings/integrations/settings/webhook-details.html",
            controller: "WebhookDetailsDialogController",
            resolve: {
                webhook: function() {
                    return n
                }
            }
        };
        return e.open(t)
    }
}
]).controller("WebhookDetailsDialogController", ["$scope", "webhook", "IntegrationsService", "$rootScope", "$timeout", "ConfirmationService", function(e, n, t, o, i, a) {
    e.webhook = n;
    var s = ["name", "url", "products", "tokens", "fields", "metadata", "id", "is_active", "document_updated", "document_state_changed", "recipient_completed", "document_deleted"]
      , l = _.cloneDeep(_.pick(n, s));
    e.historyCollapsed = !0,
    e.toggleCallsHistory = function() {
        e.historyCollapsed = !e.historyCollapsed
    }
    ,
    e.cancel = function() {
        _.assign(n, l),
        e.$close()
    }
    ,
    e.hasChanges = function() {
        return !_.isEqual(_.pick(n, s), l)
    }
    ;
    var r = function(n) {
        e.saving = !1,
        n.data && n.data.url && (e.invalidUrl = !0)
    }
    ;
    e.save = function() {
        e.saving = !0,
        e.invalidUrl = !1,
        n.id ? t.updateWebhook(_.pick(n, s)).then(function(n) {
            e.saving = !1,
            l = _.cloneDeep(_.pick(n, s)),
            e.$close()
        }
        , r) : t.addWebhook(_.pick(n, s)).then(function(n) {
            e.saving = !1,
            o.$broadcast("webhook.created", {
                webhook: n
            }),
            e.$close()
        }
        , r)
    }
    ,
    e.removeWebhook = function(n) {
        n.confirmDelete ? (e.removing = !0,
        t.removeWebhook(n).then(function() {
            o.$broadcast("webhook.removed", {
                webhook: n
            }),
            e.removing = !1,
            e.$close()
        }
        )) : (n.confirmDelete = !0,
        i(function() {
            n.confirmDelete = !1
        }
        , 3e3))
    }
    ,
    e.webhook.id && (e.historyLoading = !0,
    t.loadWebhookHistory(n).then(function(n) {
        e.history = _.filter(n, function(e) {
            return e.last_sent
        }
        ),
        e.historyLoading = !1
    }
    )),
    e.regenerate = function() {
        a.confirm({
            text: "Do you want to regenerate a webhook shared key? You might need to changed your endpoint to properly verify webhook's signature."
        }).then(function() {
            e.regenerating = !0,
            t.regenerateWebhookSharedKey(n).then(function(t) {
                n.shared_key = t.shared_key,
                e.regenerating = !1
            }
            )
        }
        )
    }
}
]),
angular.module("pd.settings").config(["$urlRouterProvider", "$stateProvider", "ConfigProvider", "Constants", function(e, n, t, o) {
    var i = t.$get();
    i.userRole === o.ROLES.OWNER && (n.state("settings.integrations", {
        parent: "settings",
        url: "^/settings/integrations/?open&showXeroPermissions",
        views: {
            "settings_content@settings": {
                templateUrl: "/views/settings/integrations/integrations-list.html",
                controller: "IntegrationsSettingsController"
            }
        },
        breadcrumbs: [{
            name: "Integrations",
            url: "#/settings/integrations/"
        }]
    }),
    n.state("settings.integrations.setup", {
        parent: "settings.integrations",
        url: "^/settings/integrations/:integrationHandle/",
        views: {
            "integration_settings@settings.integrations": {
                templateUrl: "/views/settings/integrations/integration-setup.html",
                controller: "IntegrationSetupController"
            }
        }
    }))
}
]),
angular.module("pd.settings").controller("NotificationSettingsController", ["$scope", "SettingsService", "AppAnalyticsService", "$timeout", function(e, n, t, o) {
    t.track("Viewed Notification Settings"),
    e.notification = {};
    var i = ["document_opened", "document_completed", "recipient_completed", "comment_added"]
      , a = function() {
        return _.all(i, function(n) {
            return e.notification[n].state
        }
        )
    }
      , s = function() {
        return _.all(i, function(n) {
            return !e.notification[n].state
        }
        )
    }
    ;
    n.getEmailNotificationSettings(function(n) {
        _.each(i, function(t) {
            e.notification[t] = {
                name: t,
                state: n[t]
            }
        }
        ),
        e.notification.all = a(),
        e.loading = !1
    }
    );
    var l, r = {}, c = function(t) {
        l && o.cancel(l),
        r[t] = e.notification[t].state,
        l = o(function() {
            n.updateEmailNotificationSetting(r),
            r = {}
        }
        , 200)
    }
    ;
    _.each(i, function(n) {
        e.$watch("notification." + n + ".state", function(t, o) {
            if (!_.isUndefined(o)) {
                c(n);
                var i = a()
                  , l = s();
                (i || l) && (e.notification.all = i),
                e.indeterminate = !i && !l
            }
        }
        , !0)
    }
    ),
    e.$watch("notification.all", function(n, t) {
        _.isUndefined(n) || (_.isUndefined(t) ? e.indeterminate = !a() && !s() : _.each(i, function(t) {
            e.notification[t].state = n
        }
        ))
    }
    , !0)
}
]),
angular.module("pd.settings").controller("ProfileController", ["$scope", "$location", "$rootScope", "ProfileService", "NotificationCenter", "AppAnalyticsService", "AlertService", "UploadDialog", "Config", function(e, n, t, o, i, a, s, l, r) {
    a.track("Viewed a profile"),
    o.getProfile().then(function(n) {
        e.profile = n,
        e.originalProfile = angular.copy(n)
    }
    ),
    e.changePasswordFormVisible = !1,
    e.profileHasChanged = !1,
    e.isPasswordChangeFormValid = !1,
    e.passwordModel = {
        old_password: "",
        new_password: "",
        repeat_password: ""
    };
    var c = ["first_name", "last_name", "email"];
    e.showPasswordChangeForm = function() {
        e.changePasswordFormVisible = !0
    }
    ,
    e.hidePasswordChangeForm = function() {
        e.changePasswordFormVisible = !1,
        e.passwordModel.old_password = "",
        e.passwordModel.new_password = "",
        e.passwordModel.repeat_password = ""
    }
    ,
    e.updatePassword = function() {
        var n = {
            password: e.passwordModel.new_password,
            old_password: e.passwordModel.old_password
        };
        o.changePassword(n).then(function() {
            i.notification("Password was successfully changed"),
            e.hidePasswordChangeForm()
        }
        )
    }
    ,
    e.$watch("profile", function(n, t) {
        n && t && (e.profileHasChanged = !_.isEqual(_.pick(e.originalProfile, c), _.pick(n, c)))
    }
    , !0),
    e.$watch("passwordModel", function() {
        e.isPasswordChangeFormValid = !_.isEmpty(e.passwordModel.old_password) && !_.isEmpty(e.passwordModel.new_password) && !_.isEmpty(e.passwordModel.repeat_password) && e.passwordModel.new_password === e.passwordModel.repeat_password
    }
    , !0),
    e.updateProfile = function() {
        var n = _.pick(e.profile, c);
        n.first_name && n.last_name || s.alert({
            title: "Unable to update profile",
            text: "First name and last name are required"
        }),
        o.updateProfile(n).then(function(n) {
            i.notification("Profile has been updated."),
            e.originalProfile = angular.copy(n),
            e.profile = n,
            e.profileHasChanged = !1
        }
        )
    }
    ,
    e.resetChanges = function() {
        _.assign(e.profile, _.pick(e.originalProfile, c))
    }
    ,
    e.updateAvatar = function() {
        var n = {
            imagesOnly: !0,
            url: "profile/avatar",
            alias: "avatar",
            autoUpload: !1,
            responseField: "avatar",
            headers: {
                Authorization: r.authorizationStrategy.getScheme() + " " + r.authorizationStrategy.getToken()
            }
        };
        l.show(n).then(function(n) {
            e.profile.avatar = n
        }
        )
    }
}
]),
angular.module("pd.settings").controller("RewardsController", ["$scope", "ProfileService", "AppAnalyticsService", "NotificationCenter", "RewardsService", "$window", "ConfirmationService", function(e, n, t, o, i, a, s) {
    t.track("Viewed Rewards"),
    e.gridOptions = {
        store: {
            getItems: i.getRewards
        },
        properties: {
            sorting: {
                date_created: "desc"
            }
        }
    },
    e.contactModel = {
        name: "",
        lastContacts: []
    },
    e.invitingPandaDocContacts = !1,
    n.getProfile().then(function(n) {
        e.referralModel = {
            link: n.referral_url,
            encodedLink: function(e) {
                return encodeURIComponent(n.referral_url + e)
            }
        }
    }
    ),
    e.invitePandaDocContacts = function() {
        e.invitingPandaDocContacts || s.confirm({
            title: "Invite all your contacts",
            text: "You're about to send invites to all your PandaDoc contacts!",
            okText: "Let's do it!",
            noText: "Cancel"
        }).then(function() {
            e.invitingPandaDocContacts = !0,
            i.invitePandaDocContacts().then(function() {
                e.invitingPandaDocContacts = !1,
                o.message("Invites were successfully sent to your PandaDoc contacts")
            }
            )
        }
        )
    }
    ,
    e.share = function(e, n) {
        var o = angular.element(e.target).attr("href");
        return a.open(o, "_blank", "width=700, height=600"),
        e.preventDefault(),
        t.track("Shared referral link", {
            shared_in: n
        }),
        !1
    }
}
]),
angular.module("pd.settings").controller("TeamController", ["$scope", "$state", "Constants", "FeaturesService", function(e, n, t, o) {
    o.checkAvailability(t.FEATURES.TEAM).then(function(e) {
        e || n.go("settings.team.unavailable")
    }
    )
}
]),
angular.module("pd.settings").controller("TeamInvitationController", ["$scope", "$rootScope", "WorkspacesService", "AppAnalyticsService", "Constants", "NotificationCenter", "FeaturesService", "ProfileService", "IntegrationsService", "YammerContactsSyncDialog", "YammerContactsInviteDialog", "OnboardingService", function(e, n, t, o, i, a, s, l, r, c, d, u) {
    var m = "yammer";
    e.integrations = [],
    s.checkAvailability(i.FEATURES.TEAM).then(function(i) {
        i && (o.track("Viewed Team Invitation Form"),
        e.inviteUser = function(o, i) {
            i && (e.inviting = !0,
            t.getWorkspace().then(function(o) {
                t.inviteUser(o.id, i).then(function(t) {
                    t && t.restored ? (n.$broadcast("settings.team.member.restored"),
                    a.notification("User " + i + " was restored")) : (n.$broadcast("settings.team.invitation-sent"),
                    a.notification("Invitation was successfully sent to " + i)),
                    u.markOnboardingAsShown("invite-members-banner"),
                    e.userEmail = "",
                    e.inviting = !1
                }
                , function() {
                    e.inviting = !1
                }
                )
            }
            ))
        }
        ,
        l.getProfile().then(function(n) {
            n.signup_backend === m && e.integrations.push(m)
        }
        ),
        e.inviteFrom = function(n) {
            e.inviting = !0,
            r.getIntegrations(function(t) {
                var o = _.find(t, {
                    integration: n
                });
                o && o.is_active ? d.open() : c.open(),
                e.inviting = !1
            }
            )
        }
        )
    }
    )
}
]),
angular.module("pd.settings").controller("TeamInvitesListController", ["$scope", "WorkspacesService", "FeaturesService", "Constants", "AppAnalyticsService", "NotificationCenter", function(e, n, t, o, i, a) {
    t.checkAvailability(o.FEATURES.TEAM).then(function(t) {
        if (t) {
            i.track("Viewed Team Invitations");
            var o = function() {
                n.getWorkspace().then(function(t) {
                    n.getPendingInvites(t.id, function(n) {
                        e.pendingInvites = _.map(n, s)
                    }
                    )
                }
                )
            }
            ;
            o(),
            e.$on("settings.team.invitation-sent", function() {
                o()
            }
            )
        }
    }
    );
    var s = function(e) {
        return e.menuVisible = !1,
        e.showMenu = function() {
            e.menuVisible = !0
        }
        ,
        e.hideMenu = function() {
            e.menuVisible = !1
        }
        ,
        e
    }
    ;
    e.resendInvitation = function(e) {
        e.post("resend").then(function() {
            a.notification("Invitation was successfully resent to " + e.email)
        }
        )
    }
    ,
    e.deleteInvitation = function(n) {
        n.remove().then(function() {
            a.notification("Invitation was successfully cancelled"),
            e.pendingInvites = _.filter(e.pendingInvites, function(e) {
                return e.id !== n.id
            }
            )
        }
        )
    }
}
]),
angular.module("pd.settings").controller("TeamMembersController", ["$scope", "WorkspacesService", "AppAnalyticsService", "Constants", "Config", "FeaturesService", "ConfirmationService", function(e, n, t, o, i, a, s) {
    var l = {
        page: 1,
        count: 30
    }
      , r = !0;
    e.memberships = [],
    e.loadMoreMembers = function() {
        !e.loading && r && (e.loading = !0,
        n.getWorkspaceMembers(l).then(function(n) {
            e.memberships = e.memberships.concat(_.map(n, function(e) {
                return {
                    member: e,
                    edit: !1,
                    owner: e.role === o.ROLES.OWNER,
                    hasName: e.user.first_name || e.user.last_name
                }
            }
            )),
            e.loading = !1,
            l.page = l.page + 1,
            r = !!n.next
        }
        ))
    }
    ,
    a.checkAvailability(o.FEATURES.TEAM).then(function(n) {
        n && (t.track("Viewed Team Members"),
        e.isOwner = i.userRole === o.ROLES.OWNER,
        e.roles = [o.ROLES.ADMIN, o.ROLES.MEMBER],
        e.loadMoreMembers())
    }
    ),
    e.edit = function(n) {
        _.each(e.memberships, function(e) {
            e.edit = !1
        }
        ),
        e.isOwner && !n.owner && (n.edit = !0)
    }
    ,
    e.cancelEdit = function(e) {
        e.edit = !1
    }
    ,
    e.onRoleChange = function(n) {
        e.isOwner && (n.edit = !1,
        n.member.patch())
    }
    ,
    e.removeMember = function(n) {
        s.confirm({
            text: "Would you like to remove this user? The user won't have access to the workspace and documents once deleted."
        }).then(function() {
            n.member.remove().then(function() {
                var t = e.memberships.indexOf(n);
                e.memberships.splice(t, 1)
            }
            )
        }
        )
    }
    ,
    e.$on("settings.team.member.restored", function() {
        r = !0,
        l.page = 1,
        e.memberships = [],
        e.loadMoreMembers()
    }
    )
}
]),
angular.module("pd.settings").directive("teamInviteMember", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/settings/team/invitation.html",
        controller: "TeamInvitationController"
    }
}
]),
angular.module("pd.settings").directive("teamMembers", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/settings/team/members.html",
        controller: "TeamMembersController"
    }
}
]),
angular.module("pd.settings").directive("teamPendingInvites", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/settings/team/invites-list.html",
        controller: "TeamInvitesListController"
    }
}
]),
angular.module("pd.settings").controller("WorkspaceSettingsController", ["$scope", "WorkspacesService", "FeaturesService", "Constants", "$state", function(e, n, t, o, i) {
    t.checkAvailability(o.FEATURES.WORKSPACE_SETTINGS).then(function(e) {
        e || i.go("settings.profile")
    }
    ),
    n.getWorkspace().then(function(n) {
        e.workspace = n
    }
    ),
    e.$toObservable("workspace.settings", !0).filter(function() {
        return !!e.workspace
    }
    ).subscribe(function() {
        var n = e.workspace.settings;
        e.noSignatureTypeSelected = !n.allowed_signature_draw && !n.allowed_signature_type && !n.allowed_signature_upload,
        e.noInitialsTypeSelected = !n.allowed_initials_draw && !n.allowed_initials_type
    }
    ),
    e.save = function() {
        !e.workspace || e.noSignatureTypeSelected || e.noInitialsTypeSelected || (e.saving = !0,
        n.updateWorkspaceSettings(e.workspace.id, e.workspace.settings).then(function() {
            e.saving = !1
        }
        , function() {
            e.saving = !1
        }
        ))
    }
}
]),
angular.module("pd.settings").controller("WorkspaceSelectorController", ["$scope", "WorkspacesService", "ProfileService", "$modalInstance", "workspaces", "WorkspaceSwitcher", function(e, n, t, o, i, a) {
    var s = this;
    this.setupWorkspaces = function(n) {
        s.workspaces = n,
        e.profile && (e.workspaces = _.sortBy(n, function(n) {
            return n.owner.uuid !== e.profile.uuid
        }
        ))
    }
    ,
    t.getProfile().then(function(n) {
        e.profile = n,
        s.workspaces && s.setupWorkspaces(s.workspaces)
    }
    ),
    i ? s.setupWorkspaces(i) : n.getWorkspaces().then(function(e) {
        s.setupWorkspaces(e)
    }
    ),
    e.isCurrentWorkspace = function(n) {
        return e.profile && e.profile.workspace === n.id
    }
    ,
    e.isWorkspaceOwner = function(n) {
        return e.profile && n.owner.id === e.profile.id
    }
    ,
    e.switchToWorkspace = function(e) {
        a.switchToWorkspace(e, "dashboard")
    }
    ,
    e.$on("workspace.created", function() {
        n.getWorkspaces().then(function(e) {
            s.setupWorkspaces(e)
        }
        )
    }
    )
}
]),
angular.module("pd.settings").controller("WorkspacesSettingsController", ["$scope", "AppAnalyticsService", "OrganizationService", "TextFieldDialogService", "$state", "WorkspacesService", "Constants", "FeaturesService", "$rootScope", "WorkspaceSwitcher", function(e, n, t, o, i, a, s, l, r, c) {
    n.track("Viewed Workspaces Settings"),
    l.checkAvailability(s.FEATURES.MULTIPLE_WORKSPACES).then(function(e) {
        e || i.go("settings.profile")
    }
    );
    var d = this;
    this.reloadWorkspaces = function() {
        t.getWorkspaces().then(function(n) {
            e.workspaces = n
        }
        )
    }
    ,
    this.switchToWorkspace = function(e, n) {
        c.switchToWorkspace(e, n)
    }
    ,
    this.isCurrentWorkspace = function(n) {
        return e.profile && e.profile.workspace === n.id
    }
    ,
    e.createWorkspace = function() {
        o.show({
            title: "Create a new workspace",
            value: "",
            placeholder: "Workspace name",
            buttonText: "Create"
        }).then(function(e) {
            t.addWorkspace({
                name: e
            }).then(function(e) {
                d.reloadWorkspaces(),
                r.$broadcast("workspace.created", {
                    workspace: e
                })
            }
            )
        }
        )
    }
    ,
    e.editWorkspace = function(e) {
        o.show({
            title: "Name your workspace",
            value: e.name,
            placeholder: "Workspace name"
        }).then(function(n) {
            e.name !== n && (e.name = n,
            t.updateWorkspace(e))
        }
        )
    }
    ,
    e.editTeam = function(e) {
        d.switchToWorkspace(e, "settings.team")
    }
    ,
    e.editBranding = function(e) {
        d.switchToWorkspace(e, "settings.branding")
    }
    ,
    e.editIntegrations = function(e) {
        d.switchToWorkspace(e, "settings.integrations")
    }
    ,
    e.isCurrentWorkspace = function(e) {
        return d.isCurrentWorkspace(e)
    }
    ,
    d.reloadWorkspaces()
}
]),
angular.module("pd.settings").directive("workspaceSelector", [function() {
    return {
        restrict: "A",
        scope: {
            workspaces: "="
        },
        controller: ["$scope", "ModalService", function(e, n) {
            e.showWorkspaceSelectorDialog = function() {
                n.open({
                    controller: "WorkspaceSelectorController",
                    templateUrl: "/views/settings/workspaces/workspace-selector-dialog.html",
                    resolve: {
                        workspaces: function() {
                            return e.workspaces
                        }
                    }
                })
            }
        }
        ],
        link: function(e, n) {
            n.on("click", e.showWorkspaceSelectorDialog)
        }
    }
}
]),
angular.module("pd.documents", []).config(["$stateProvider", function(e) {
    e.state("documents", {
        parent: "app.base",
        url: "^/documents/f/:folderId",
        views: {
            "@app": {
                controller: "DocumentsController",
                templateUrl: "/views/documents/list.html"
            },
            "folders-section@documents": {
                templateUrl: "/views/documents/folders.html"
            },
            "documents-section@documents": {
                templateUrl: "/views/documents/documents.html",
                controller: "FolderDocumentsController"
            }
        },
        breadcrumbs: [{
            ref: "folders",
            folderType: "documents"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("documents.new", {
        parent: "app.base",
        url: "^/documents/new?contactId&folderId&documentId&documentName&deal_id",
        views: {
            "@app": {
                controller: "DocumentNewBaseController",
                templateUrl: "/views/documents/create/new.html"
            }
        },
        breadcrumbs: [{
            name: "New Document"
        }],
        data: {
            backgroundType: "default"
        }
    }),
    e.state("documents.upload", {
        parent: "documents.new",
        url: "^/documents/upload?contactId&folderId&documentId&documentName&deal_id",
        views: {
            "create-option@documents.new": {
                controller: "DocumentNewUploadController",
                templateUrl: "/views/documents/create/upload.html"
            }
        }
    }),
    e.state("documents.new-blank", {
        parent: "documents.new",
        url: "^/documents/blank?contactId&folderId&documentId&documentName&deal_id",
        views: {
            "create-option@documents.new": {
                controller: "DocumentNewBlankController",
                templateUrl: "/views/documents/create/blank.html"
            }
        }
    }),
    e.state("documents.new-from-template", {
        parent: "documents.new",
        url: "^/documents/from-template?contactId&folderId&documentId&documentName&deal_id",
        views: {
            "create-option@documents.new": {
                templateUrl: "/views/documents/create/new-from-template.html"
            }
        }
    }),
    e.state("documents.create", {
        parent: "app.base",
        url: "^/documents/new/:documentId?contactId",
        views: {
            "@app": {
                controller: "DocumentCreateController",
                templateUrl: "/views/documents/create.html"
            }
        },
        breadcrumbs: [{
            name: "New Document"
        }],
        data: {
            backgroundType: "default"
        }
    }),
    e.state("documents.create-from-template", {
        parent: "app.base",
        url: "^/documents/create-from-tmpl/:templateId?folderId&contactId&documentName&deal_id",
        views: {
            "@app": {
                controller: "DocumentCreateFromTemplateController",
                templateUrl: "/views/documents/create-from-template.html"
            }
        },
        breadcrumbs: [{
            name: "New Document"
        }],
        data: {
            backgroundType: "default"
        }
    }),
    e.state("documents.not-found", {
        parent: "app.base",
        url: "^/documents/not-found",
        views: {
            "@app": {
                templateUrl: "/views/documents/not-found.html"
            }
        },
        breadcrumbs: [{
            name: "Not Found"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("documents.switch-workspace", {
        parent: "app.base",
        url: "^/documents/switch-workspace/:documentId/",
        views: {
            "@app": {
                templateUrl: "/views/documents/switch-workspace.html",
                controller: "DocumentsSwitchWorkspaceController"
            }
        },
        breadcrumbs: [{
            ref: "document"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("documents.details", {
        parent: "app.base",
        url: "^/documents/:documentId?tool",
        views: {
            "@app": {
                controller: "DocumentDetailsController",
                templateUrl: "/views/documents/details.html"
            },
            "panel-right@documents.details": {
                templateUrl: "/views/documents/tools-panel.html"
            },
            "panel-center@documents.details": {
                templateUrl: "/views/documents/document.html"
            }
        },
        breadcrumbs: [{
            ref: "folders",
            folderType: "documents"
        }, {
            ref: "document"
        }],
        data: {
            hasRightPanel: !0,
            hasDocToolsPanel: !0,
            backgroundType: "default",
            hasDocStatusPanel: !0
        }
    }),
    e.state("documents.details.download", {
        parent: "app.base",
        url: "^/documents/:documentId?download",
        views: {
            "@app": {
                controller: "DocumentDetailsController",
                templateUrl: "/views/documents/details.html"
            },
            "panel-right@documents.details": {
                templateUrl: "/views/documents/tools-panel.html"
            },
            "panel-center@documents.details": {
                templateUrl: "/views/documents/document.html"
            }
        },
        breadcrumbs: [{
            ref: "folders",
            folderType: "documents"
        }, {
            ref: "document"
        }],
        data: {
            hasRightPanel: !0,
            hasDocToolsPanel: !0,
            backgroundType: "default",
            hasDocStatusPanel: !0
        }
    })
}
]),
angular.module("pd.documents").controller("DocumentCreateController", ["$scope", "$state", "$stateParams", "DocumentsService", "ContactsService", "MultipleRequestService", "ConfirmationService", "$filter", "ProfileService", "AlertService", function(e, n, t, o, i, a, s, l, r, c) {
    e.loading = !0,
    e.contactModel = {},
    e.readyToContinue = !0,
    r.getProfile().then(function(n) {
        e.profile = n
    }
    ),
    o.getDocumentById(t.documentId, function(n) {
        if (e.document = n,
        e.originalDocumentName = angular.copy(n.name),
        t.contactId) {
            var o = t.contactId.split("_")
              , s = _.map(o, function(e) {
                return {
                    request: i.getContactById,
                    args: [e]
                }
            }
            );
            a.execute(s).then(function(n) {
                _.each(n, e.addRecipient)
            }
            )
        }
        e.loading = !1
    }
    ),
    e.addRecipient = function(e) {
        g(e) ? c.alert({
            title: "Warning",
            text: "This recipient has been added already."
        }) : f(e)
    }
    ,
    e.removeRecipient = function(n) {
        if (e.profile && e.profile.actor === n.contact.id)
            p(n.id);
        else {
            var t = "Do you want to remove " + l("fullName")(n.contact) + " from the list? This person won't have access to the document anymore.";
            s.confirm({
                text: t
            }).then(function() {
                p(n.id)
            }
            )
        }
        return !1
    }
    ,
    e.next = function() {
        if (e.goingNext = !0,
        d()) {
            var n = u();
            i.addContact(n).then(function(e) {
                o.addRecipient(t.documentId, e.id).then(m)
            }
            , m)
        } else
            m()
    }
    ;
    var d = function() {
        var n = e.contactModel;
        return _.isEmpty(n.candidate) ? !_.isEmpty(n.name) : !_.isEmpty(n.candidate.email)
    }
      , u = function() {
        var n = e.contactModel;
        return n.candidate && n.candidate.email ? _.pick(n.candidate, ["first_name", "last_name", "email"]) : n.name ? {
            email: n.name
        } : void 0
    }
      , m = function() {
        e.document && e.originalDocumentName !== e.document.name ? e.document.patch().then(function() {
            n.go("documents.details", {
                documentId: t.documentId
            })
        }
        ) : n.go("documents.details", {
            documentId: t.documentId
        })
    }
      , p = function(n) {
        o.removeRecipient(t.documentId, n).then(function() {
            e.document.recipients = _.filter(e.document.recipients, function(e) {
                return e.id !== n
            }
            )
        }
        )
    }
      , g = function(n) {
        return n && _.any(e.document.recipients, function(e) {
            return e.contact.id === n.id
        }
        )
    }
      , f = function(n) {
        o.addRecipient(t.documentId, n.id).then(function(n) {
            e.document.recipients.push(n)
        }
        )
    }
}
]),
angular.module("pd.documents").controller("DocumentCreateFromTemplateController", ["$scope", "$state", "$stateParams", "DocumentCreateService", "TemplatesService", "Constants", "ExternalService", "ContactsService", "MultipleRequestService", function(e, n, t, o, i, a, s, l, r) {
    if (!t.templateId)
        return void n.go("documents");
    e.assignments = [],
    e.contacts = [],
    e.tokens = [],
    e.nameModel = {
        name: t.documentName ? t.documentName : ""
    },
    i.getTemplateById(t.templateId, function(n) {
        if (e.nameModel.name || (e.nameModel.name = n.name),
        e.template = n,
        n.roles && !_.isEmpty(n.roles) && (e.assignments = _.map(e.template.roles, function(e) {
            return {
                role: e,
                contact: ""
            }
        }
        )),
        t.contactId) {
            var o = t.contactId.split("_")
              , i = _.map(o, function(e) {
                return {
                    request: l.getContactById,
                    args: [e]
                }
            }
            );
            r.execute(i).then(function(e) {
                _.each(e, u)
            }
            )
        }
        var a = s.getExternalData();
        if (a && a.recipients) {
            var d = _.filter(a.recipients, function(e) {
                return !!e.email
            }
            );
            if (_.each(d, function(n) {
                var t = c(n.roleName)
                  , o = _.pick(n, ["first_name", "last_name", "email", "id", "company"]);
                
                t ? t.contact = o : e.contacts.push(o)
            }
            ),
            e.assignments && e.contacts) {
                var m = _.map(e.contacts, function(e) {
                    return {
                        contact: e
                    }
                }
                );
                e.assignments = _.map(e.assignments, function(e) {
                    return e.recipients = m,
                    e
                }
                )
            }
        }
        a && a.tokens && a && a.tokens && _.each(a.tokens, function(n, t) {
            e.tokens.push({
                name: t,
                value: n
            })
        }
        )
    }
    );
    var c = function(n) {
        return e.assignments && n ? _.find(e.assignments, function(e) {
            return e.role.name === n
        }
        ) : void 0
    }
      , d = function() {
        return _.any(e.assignments, function(e) {
            return _.isEmpty(e.contact)
        }
        )
    }
      , u = function(n) {
        if (!_.isEmpty(e.assignments) && d()) {
            var t = _.find(e.assignments, function(e) {
                return _.isEmpty(e.contact)
            }
            );
            t.contact = n
        } else
            e.contacts.push(n)
    }
    ;
    e.next = function() {
        return m()
    }
    ;
    var m = function() {
        var i = {};
        t.folderId && (i.folder_id = t.folderId),
        t.deal_id && (i.deal_id = t.deal_id);
        var a = _.filter(e.assignments, function(e) {
            return e.contact
        }
        );
        return o.createDocumentFromTemplate({
            templateId: t.templateId,
            name: e.nameModel.name,
            assignments: a,
            contacts: e.contacts,
            tokens: e.tokens,
            params: i
        }).then(function(e) {
            n.go("documents.details", {
                documentId: e.id
            })
        }
        )
    }
}
]),
angular.module("pd.documents").controller("DocumentDetailsController", ["$scope", "$rootScope", "$stateParams", "DocumentDetailsService", "Constants", "$state", "WidgetsService", "WidgetUtility", "singleEvent", "WorkspacesService", "ContextService", "$q", "$controller", "Config", "$timeout", "singleWatch", "ExternalService", "DocumentWidgetsValidationService", "ToolsManager", "DocumentTokensDialog", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g, f, b, v, h, w) {
    var k;
    if (p.application.viewer || p.application.session_view ? k = p.viewerDocumentId : (p.application.app || p.application.sdk) && (k = t.documentId),
    !k)
        return void a.go("documents");
    var y = function(e) {
        var n = {
            id: e.document.id,
            name: e.document.name,
            status: e.document.status,
            isDocument: !0,
            documentInfo: e
        };
        return d.when({
            documents: function() {
                return n.url = "#/documents/" + e.document.id,
                n
            },
            inbox: function() {
                return n.url = "#/inbox/" + e.document.id,
                n
            }
        })
    }
      , I = function() {
        var t = u.defer();
        return e.ready = !1,
        e.loadingContent = !0,
        o.getDocumentInfo(k).then(function(o) {
            e.documentInfo = o,
            n.documentName = o.document.name,
            e.ready = !0,
            t.resolve(o),
            n.$broadcast("object.loaded", {
                ref: "document",
                obj: o.document,
                breadcrumb: y(o)
            }),
            n.$broadcast("folder.loaded", {
                folder: o.document.folder
            })
        }
        , t.reject, function(n) {
            e.documentContentInfo && (n.documentSize = _.cloneDeep(e.documentContentInfo.documentSize)),
            e.documentContentInfo = n,
            e.loadingContent = !1
        }
        ),
        t.promise
    }
    ;
    r(e, "$stateChangeSuccess", function(n, t, o, i, s) {
        i && "documents.create-from-template" === i.name && f(e, "documentInfo.tokens", function(e) {
            if (e && !_.isEmpty(e)) {
                var n = _.reduce(e, function(e, n) {
                    return n.value ? e : e + 1
                }
                , 0);
                n > 0 && w.open(n)
            }
        }
        ),
        i && "documents.switch-workspace" === i.name && s.documentId === o.documentId || I().then(function(e) {
            S(e).then(function() {
                a.go("documents.switch-workspace", {
                    documentId: e.document.id
                })
            }
            )
        }
        , function() {
            a.go("documents.not-found")
        }
        )
    }
    ),
    e.$watch("documentInfo", function(e) {
        var n = a.current;
        if (e && n.data.hasRightPanel && -1 === n.name.indexOf("tools")) {
            var t = {}
              , o = {
                location: "replace"
            };
            d.openDocTool(C(e), t, o)
        }
    }
    );
    var C = function(e) {
        var n = "tools-";
        return t.tool ? n + t.tool : n + h.getDefaultDocTool(e).name
    }
      , S = function(e) {
        var n = u.defer();
        return p.application.app || p.application.sdk ? e.isFromMyWorkspace ? n.reject() : c.isMyWorkspace(e.document.workspace).then(function(e) {
            e ? n.resolve() : n.reject()
        }
        ) : n.reject(),
        n.promise
    }
    ;
    e.$on("document.sent", I),
    e.$on("document.sent.for.approval", I),
    e.$on("document.approved", I),
    e.$on("document.rejected", I),
    e.$on("actor.completed.document", I),
    e.$on("library.item.inserted", function() {
        e.documentInfo = null ,
        I().then(function() {
            g(function() {
                n.$broadcast("document.reload.after.library.item.insertion")
            }
            )
        }
        )
    }
    ),
    e.$on("document.newrevision", function(n, t) {
        t && t.newContent && (e.documentInfo = null ),
        I().then(function() {
            var n = {}
              , t = {
                location: "replace"
            };
            d.openDocTool(C(e.documentInfo), n, t)
        }
        )
    }
    );
    var T = function(e, n) {
        return _.filter(e, function(e) {
            return e.widget.title === n
        }
        )
    }
      , E = function(e, n) {
        if (e && !l.isSignature(e.widget) && !l.isInitials(e.widget)) {
            e.widget.data = e.widget.data || {},
            e.widget.data.value = e.widget.type === i.WIDGET.TEXTFIELD ? _.nl2space(n) : e.widget.type === i.WIDGET.DATE ? moment.utc(n) : n;
            var t = v.validateWidget(e);
            _.isEmpty(t) && s.updateWidgetData(e.widget)
        }
    }
    ;
    f(e, "documentInfo.widgetsInfo", function(n) {
        if (e.documentInfo.permissions.canEditAllWidgets) {
            var t = b.getExternalData();
            t.widgets && _.each(t.widgets, function(e, t) {
                var o = T(n, t);
                _.each(o, function(n) {
                    E(n, e)
                }
                )
            }
            )
        }
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentsController", ["$scope", "FoldersService", function(e, n) {
    e.foldersService = n.getFoldersManager("documents")
}
]),
angular.module("pd.documents").controller("DocumentsSDKController", ["$scope", "DocumentsService", "$rootScope", "Config", "ExternalService", "$timeout", "Constants", function(e, n, t, o, i, a, s) {
    e.getDocuments = function(e, t) {
        var o = i.getExternalData().metadata;
        if (o && _.isObject(o.params)) {
            var a = o.params;
            _.extend(e, a),
            delete o.params
        }
        return o && !_.isEmpty(o) && _.each(o, function(n, t) {
            e["metadata_" + t] = n
        }
        ),
        n.getFlatDocuments(e, t)
    }
    ,
    e.onExtensionDocumentClick = function(e, n) {
        t.$broadcast("sdk.open.document", {
            documentId: e,
            documentName: n,
            documentUrl: o.applicationUrl + "/#/documents/" + e
        })
    }
    ,
    e.onDocumentClick = function(e) {
        var n = window.open(o.applicationUrl + "/#/documents/" + e, "_blank");
        n.focus()
    }
    ,
    e.onNewDocument = function() {
        t.$broadcast("sdk.new.document")
    }
    ,
    e.$on("external.sdk.doclist.refresh", function() {
        a(function() {
            t.$broadcast(s.GRID.RELOAD)
        }
        )
    }
    ),
    e.showNewDocumentButton = i.getInitOptions().hasEditor
}
]),
angular.module("pd.documents").controller("DocumentsSwitchWorkspaceController", ["$scope", "DocumentsService", "$stateParams", "WorkspacesService", "$rootScope", "WorkspaceSwitcher", function(e, n, t, o, i, a) {
    n.getDocumentById(t.documentId).then(function(n) {
        e.document = n,
        i.$broadcast("object.loaded", {
            ref: "document",
            obj: n,
            breadcrumb: {
                id: n.id,
                name: n.name
            }
        }),
        o.loadWorkspaceById(n.workspace).then(function(n) {
            e.workspace = n
        }
        )
    }
    ),
    e["switch"] = function() {
        e.workspace && (e.switching = !0,
        a.switchToWorkspace(e.workspace, "documents.details", {
            documentId: t.documentId
        }))
    }
}
]),
angular.module("pd.documents").controller("FolderDocumentsController", ["$scope", "DocumentsService", "$stateParams", "FoldersLoaderService", "PermissionRules", function(e, n, t, o, i) {
    var a = function() {
        return i.DEFAULT
    }
    ;
    o.loadFolder(t.folderId, "documents").then(function(n) {
        e.currentFolder = n,
        a().hasPermissions(n).then(function(n) {
            e.folderOwner = n,
            e.readyToLoadDocuments = !0
        }
        )
    }
    ),
    e.getDocuments = function(t, o) {
        t.folder_id = e.currentFolder.id,
        n.getDocuments(t, o)
    }
}
]),
angular.module("pd.documents").controller("DocumentNewBaseController", ["$scope", "$state", "$stateParams", "Constants", "FeaturesService", function(e, n, t, o, i) {
    function a(e) {
        n.go(e, t, {
            inherit: !1,
            notify: !0,
            location: !0
        })
    }
    e.$on("$stateChangeSuccess", function() {
        ("documents.new" === n.current.name || t.file) && a("documents.upload")
    }
    ),
    e.upload = function() {
        a("documents.upload")
    }
    ,
    e.fromTemplate = function() {
        a("documents.new-from-template")
    }
    ,
    e.blank = function() {
        a("documents.new-blank")
    }
    ,
    e.documentCreateOptionsAvailability = {
        upload: !0,
        templates: !0,
        blank: !0
    }
}
]),
angular.module("pd.documents").controller("DocumentNewBlankController", ["$scope", "$state", "$stateParams", "DocumentCreateService", "Constants", function(e, n, t, o, i) {
    e.blank = function() {
        e.creating = !0;
        var a = {};
        t.folderId && (a.folder_id = t.folderId),
        t.deal_id && (a.deal_id = t.deal_id);
        var s = t.documentName || "New document";
        o.createDocument({
            document: {
                name: s,
                type: i.DOCUMENT.TYPE.EDITABLE_DOCUMENT
            },
            extraOptions: a
        }).then(function(o) {
            var i = {
                documentId: o.id
            };
            t.contactId && (i.contactId = t.contactId),
            n.go("documents.create", i),
            e.creating = !1
        }
        , function() {
            e.creating = !1
        }
        )
    }
}
]),
angular.module("pd.documents").controller("DocumentNewFromTemplateController", ["$scope", "$state", "$stateParams", "DocumentsService", "Constants", "FeaturesService", function(e, n, t, o, i, a) {}
]),
angular.module("pd.documents").controller("DocumentNewUploadController", ["$scope", "$state", "$stateParams", "DocumentsService", "Constants", "AlertService", "singleEvent", "ModalService", "$window", "DocumentCreateService", function(e, n, t, o, i, a, s, l, r, c) {
    e.documentCreateOptionsAvailability && (e.documentCreateOptionsAvailability.templates = !t.documentId && !t.file,
    e.documentCreateOptionsAvailability.blank = !t.documentId && !t.file);
    var d = "dashboard"
      , u = {};
    t.documentId && o.getDocumentById(t.documentId).then(function(n) {
        e.document = n
    }
    ),
    t.file ? (e.processingOptions = {
        new_file: {
            cdnUrl: t.file,
            name: t.documentName || "New document"
        }
    },
    e.uploading = !1,
    e.processing = !0) : (e.uploading = !0,
    e.processing = !1),
    e.cancelUpload = function() {
        n.go(d, u)
    }
    ,
    e.uploadDone = function(n) {
        e.processingOptions = {
            new_file: n
        },
        e.uploading = !1,
        e.processing = !0
    }
    ,
    e.processingDone = function(n) {
        if (t.documentId)
            g(t.documentId, {
                uuid: n.uuid,
                name: e.document.name
            }, f);
        else {
            var o = {};
            t.folderId && (o.folder_id = t.folderId),
            t.deal_id && (o.deal_id = t.deal_id);
            var i = t.documentName || n.name;
            p({
                uuid: n.uuid,
                name: i
            }, o, b)
        }
    }
    ,
    e.processingError = function() {
        e.processing = !1,
        e.uploading = !0,
        l.open({
            templateUrl: "/views/common/file-processing-error.html",
            controller: ["$scope", function(e) {
                e.contactSupport = function() {
                    e.$close(),
                    r.Intercom && r.Intercom("show")
                }
            }
            ]
        })
    }
    ;
    var m = function() {
        n.go("documents.upload", t, {
            reload: !0
        }),
        a.alert({
            title: "Unable to upload file",
            text: "Unable to upload file. Please try again."
        })
    }
      , p = function(e, n, t) {
        c.createDocument({
            document: e,
            extraOptions: n
        }).then(t, m)
    }
      , g = function(e, n, t) {
        o.newRevision(e, {
            type: i.REVISIONS.NEW,
            postObject: n
        }).then(t, m)
    }
      , f = function(e) {
        n.go("documents.details", {
            documentId: e.id
        })
    }
      , b = function(e) {
        n.go("documents.create", {
            documentId: e.id,
            contactId: t.contactId || null 
        })
    }
}
]),
angular.module("pd.documents").service("DocumentApprovalDialog", ["ModalService", function(e) {
    var n = function(n, t) {
        var o = {
            templateUrl: "/views/documents/dialogs/document-approval-dialog.html",
            controller: "DocumentApprovalDialogController",
            resolve: {
                documentInfo: function() {
                    return n
                },
                isApproval: function() {
                    return "approval" === t
                }
            }
        };
        return e.open(o)
    }
    ;
    this.approve = function(e) {
        n(e, "approval")
    }
    ,
    this.reject = function(e) {
        n(e, "reject")
    }
}
]).controller("DocumentApprovalDialogController", ["$scope", "documentInfo", "DocumentsApprovalService", "$rootScope", "$filter", "isApproval", function(e, n, t, o, i, a) {
    e.documentInfo = n,
    e.isApproval = a,
    e.isApproverARole = !1;
    var s = _.first(n.document.approval.moderators);
    s.role ? (e.moderatorName = i("translate")("roles." + s.role),
    e.isApproverARole = !0) : e.moderatorName = i("fullName")(s.user),
    e.messageModel = {
        message: ""
    },
    e.working = !1,
    e.action = function() {
        e.working = !0;
        var i, a;
        e.isApproval ? (i = t.approve,
        a = "document.approved") : (i = t.reject,
        a = "document.rejected"),
        i(n.document, e.messageModel.message).then(function() {
            o.$broadcast(a, n.document),
            e.$close()
        }
        , function(t) {
            t && t.data && "approval_invalid_state" === t.data.type && (o.$broadcast("document.already.approved.or.rejected", n.document),
            e.$close())
        }
        )
    }
}
]),
angular.module("pd.documents").directive("documentRename", ["$timeout", function(e) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/documents/rename.html",
        scope: {
            documentInfo: "=",
            editImmediately: "="
        },
        link: function(n) {
            var t = function(e) {
                e.target && "document-rename" === e.target.id || (n.editorVisible = !1,
                n.$digest())
            }
            ;
            n.$watch("editorVisible", function(n) {
                n === !0 ? e(function() {
                    angular.element(document).bind("click", t)
                }
                ) : angular.element(document).unbind("click", t)
            }
            , !0)
        },
        controller: ["$scope", "singleEvent", "$rootScope", function(e, n, t) {
            e.$watch("documentInfo", function(n) {
                n && (e.editable = e.documentInfo.permissions.canEditDocumentContent,
                e.editable && e.editImmediately && e.showEditor())
            }
            ),
            e.$on("help.dialog.opened", function() {
                e.editorVisible && (e.hideEditor(),
                n(e, "help.dialog.closed", function() {
                    e.showEditor()
                }
                ))
            }
            ),
            e.showEditor = function() {
                e.editorVisible = !0
            }
            ,
            e.hideEditor = function() {
                e.editorVisible = !1
            }
            ;
            var o = e.documentInfo.document.name;
            e.$watch("editorVisible", function(n) {
                n === !1 && (_.isEmpty(e.documentInfo.document.name) ? e.documentInfo.document.name = o : e.documentInfo.document.name !== o && e.documentInfo.document.patch({
                    name: e.documentInfo.document.name
                }).then(function(n) {
                    t.$broadcast("document.rename", {
                        document: e.documentInfo.document
                    }),
                    o = n.name
                }
                ))
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.documents").directive("documentSaveStatus", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            status: "@"
        },
        templateUrl: "/views/documents/save-status.html",
        controller: ["$scope", "Constants", function(e, n) {
            var t = ["post", "put", "patch", "remove"]
              , o = []
              , i = function(e) {
                return -1 !== t.indexOf(e)
            }
              , a = function(n, t, a) {
                i(a) && (e.isVisible || (e.isVisible = !0),
                o.push(t),
                e.saving = !0)
            }
              , s = function(n, t) {
                o = _.without(o, t),
                e.saving = !_.isEmpty(o)
            }
              , l = function() {
                o = [],
                e.saving = !1
            }
            ;
            e.saving = !1,
            e.isVisible = !1,
            e.$on(n.EVENTS.REQUEST, a),
            e.$on(n.EVENTS.RESPONSE, s),
            e.$on(n.EVENTS.REQUEST_ERROR, l)
        }
        ]
    }
}
]),
angular.module("pd.documents").directive("documentSigners", ["ProfileService", "Constants", function(e, n) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            document: "="
        },
        controller: ["$scope", "$filter", function(t, o) {
            var i = 6;
            t.more = !1,
            t.previewList = [],
            t.$watch("document", function(n) {
                n && e.getProfile().then(function(e) {
                    t.previewList = l(n.recipients, e),
                    n.recipients.length > t.previewList.length && (t.more = n.recipients.length)
                }
                )
            }
            );
            var a = function(e) {
                return _.filter(e, function(e) {
                    return e.type === n.RECIPIENTS.TYPE.SIGNER
                }
                )
            }
              , s = function(e) {
                return _.filter(e, function(e) {
                    return e.type === n.RECIPIENTS.TYPE.CC
                }
                )
            }
              , l = function(e, n) {
                var t = r(a(e), n)
                  , l = r(s(e), n)
                  , c = _.union(t, l)
                  , d = c.slice(0, i);
                return d = _.map(d, function(e, t) {
                    var i = "";
                    return i = e.contact.email == n.email ? "you" : o("fullName")(e.contact),
                    e.displayName = i,
                    e
                }
                )
            }
              , r = function(e, n) {
                return _.sortBy(e, function(e) {
                    return e.contact.email == n.email ? 1 : 2
                }
                )
            }
        }
        ],
        templateUrl: "/views/documents/doc-signers.html"
    }
}
]),
angular.module("pd.documents").directive("documentStatus", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            status: "@",
            statusName: "@"
        },
        link: function(e, n, t) {
            e.icon = "undefined" != typeof t.icon,
            e.text = "undefined" != typeof t.text
        },
        templateUrl: "/views/documents/status.html"
    }
}
]),
angular.module("pd.documents").directive("documentStatusPanel", ["$rootScope", "Constants", "$timeout", "AppAnalyticsService", "LocalStoreService", "Config", function(e, n, t, o, i, a) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            documentInfo: "=",
            documentContentInfo: "="
        },
        templateUrl: "/views/documents/pad/document-status-panel.html",
        controller: ["$scope", function(e) {
            e.hasLabelToggle = !a.application.embed,
            e.toggleLabels = function() {
                e.documentInfo.widgetLabelsOn = !e.documentInfo.widgetLabelsOn,
                i.set("widgetLabelsOn", e.documentInfo.widgetLabelsOn)
            }
        }
        ]
    }
}
]).run(["LocalStoreService", function(e) {
    var n = e.get("widgetLabelsOn");
    null  === n && e.set("widgetLabelsOn", !0)
}
]),
angular.module("pd.documents").directive("duplicateDocument", [function() {
    return {
        restrict: "E",
        scope: {
            selected: "="
        },
        replace: !0,
        templateUrl: "/views/documents/toolbar/duplicate-document-button.html",
        controller: ["$scope", function(e) {
            e.duplicate = function() {
                e.$emit("duplicate")
            }
            ,
            e.$watch("selected", function(n) {
                e.enabled = n && n.length > 0
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.documents").directive("moveToFolder", [function() {
    return {
        restrict: "E",
        transclude: !0,
        scope: {
            service: "=",
            selected: "=",
            permissions: "=",
            alwaysEnabled: "="
        },
        replace: !0,
        templateUrl: "/views/documents/toolbar/movetofolder-button.html",
        controller: ["$scope", "ModalService", "PermissionRules", function(e, n, t) {
            var o = function() {
                return e.permissions ? e.permissions : t.DEFAULT
            }
              , i = _.assign({}, {
                controller: "MoveToFolderController",
                templateUrl: "/views/documents/toolbar/movetofolder-dialog.html",
                resolve: {
                    selectedDocuments: function() {
                        return _.isArray(e.selected) ? e.selected : [e.selected]
                    },
                    service: function() {
                        return e.service
                    },
                    permissions: function() {
                        return o()
                    }
                }
            });
            e.isAvailable = function(e) {
                return e
            }
            ,
            e.showDialog = function() {
                n.open(i).then(function(n) {
                    n && e.$emit("movetofolder", {
                        folder: n,
                        selected: e.selected
                    })
                }
                )
            }
        }
        ]
    }
}
]).controller("MoveToFolderController", ["$scope", "service", "CatalogService", "selectedDocuments", "permissions", "ContextService", "FoldersService", "$stateParams", "$filter", function(e, n, t, o, i, a, s, l, r) {
    e.folders = null ,
    e.activeFolder = null ,
    e.currentFolderId = l.folderId;
    var c = a.when({
        "documents, inbox": function() {
            return "documents"
        },
        catalog: function() {
            return "catalog"
        },
        templates: function() {
            return "templates"
        },
        library: function() {
            return "library"
        }
    });
    if ("catalog" === c ? t.getRootFolder().then(_.cloneDeep).then(function(n) {
        var t = r("rootFolder")(n, "catalog");
        t.selectable = !0,
        e.folders = [t],
        e.select(t)
    }
    ) : s.getRootFolder(c).then(_.cloneDeep).then(function(n) {
        n.selectable = !0,
        e.folders = [n],
        e.select(n)
    }
    ),
    o.length > 1) {
        var d = a.when({
            "documents, inbox": function() {
                return "documents"
            },
            catalog: function() {
                return "items"
            },
            templates: function() {
                return "document templates"
            },
            library: function() {
                return "content templates"
            }
        });
        e.selectedDocumentsTitle = o.length + " " + d
    } else
        e.selectedDocumentsTitle = o[0].name;
    var u = function(e) {
        var n = {
            count: 99,
            page: 1,
            order_by: "name"
        };
        return n.parent = e ? e.id : null ,
        n
    }
    ;
    e.select = function(t) {
        t.opened = !t.opened,
        t.active = !0,
        e.activeFolder && e.activeFolder !== t && (e.activeFolder.active = !1),
        e.activeFolder = t,
        t.subFolders || t.loading || (t.loading = !0,
        n.getFolders(u(t)).then(function(e) {
            t.loading = !1,
            t.subFolders = e ? e : [],
            _.each(e, function(e) {
                i.hasPermissions(e).then(function(n) {
                    e.selectable = n
                }
                )
            }
            )
        }
        ))
    }
    ,
    e.selectFolder = function(n) {
        n.selectable && n.id !== e.currentFolderId && e.$close(n)
    }
}
]),
angular.module("pd.documents").directive("newfolder", [function() {
    return {
        restrict: "E",
        replace: !0,
        transclude: !0,
        templateUrl: "/views/documents/toolbar/newfolder-button.html",
        scope: !0,
        controller: ["$scope", "ModalService", function(e, n) {
            var t = _.assign({}, {
                controller: "NewFolderController",
                templateUrl: "/views/documents/toolbar/newfolder-dialog.html",
                windowClass: "modal--maxw400"
            });
            e.showDialog = function() {
                return n.open(t).then(function(n) {
                    n && e.$emit("addfolder", n)
                }
                ),
                !1
            }
        }
        ]
    }
}
]).controller("NewFolderController", ["$scope", "$modalInstance", function(e, n) {
    e.folder = {
        name: ""
    },
    e.close = function() {
        n.close()
    }
    ,
    e.addFolder = function() {
        n.close(e.folder)
    }
}
]),
angular.module("pd.documents").directive("participantsForm", ["$sce", function(e) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            delegate: "&",
            "class": "@",
            hasCloseButton: "=",
            existed: "=",
            recipients: "="
        },
        link: function(e, n) {
            var t = void 0 !== n.attr("no-autofocus");
            e.$watch("showContactForm", function() {
                t || (e.showContactForm ? n.find("input[name=first_name]").focus() : n.find("input[type=text]:first").focus())
            }
            )
        },
        controller: ["$scope", "$q", "ContactsService", "AlertService", function(n, t, o, i) {
            n.contactModel = n.delegate().contactModel || {
                name: "",
                lastContact: []
            },
            n.showContactForm = !1,
            n.loading = !1,
            n.toggleAddActorForm = function() {
                n.showContactForm = !n.showContactForm,
                n.showContactForm && _.isFunction(n.delegate().showContactForm) && n.delegate().showContactForm(),
                !n.showContactForm && _.isFunction(n.delegate().hideContactForm) && n.delegate().hideContactForm(),
                n.showContactForm || (n.contactModel.candidate = {})
            }
            ,
            n.getContacts = function(i) {
                var a = t.defer();
                n.loading = !0;
                var s = {
                    page: 1,
                    count: 30,
                    order_by: "name",
                    q: i
                };
                return o.getContacts(s, function(t) {
                    var o = n.existed || []
                      , i = _.filter(t, function(e) {
                        return _.isEmpty(o) || _.all(o, function(n) {
                            return n.contact ? n.contact.email !== e.email : n.email !== e.email
                        }
                        )
                    }
                    )
                      , s = _.map(i, function(n) {
                        var t, o = n.first_name || n.last_name ? n.first_name + " " + n.last_name + " <" + n.email + ">" : n.email;
                        return n.first_name && n.last_name ? t = n.first_name + " " + n.last_name : n.first_name ? t = n.first_name : n.last_name && (t = n.last_name),
                        n.fullName = e.trustAsHtml(_.escape(t)).toString(),
                        n.name = _.escape(o),
                        n
                    }
                    );
                    n.contactModel.lastContacts = s,
                    n.loading = !1,
                    a.resolve(s)
                }
                ),
                a.promise
            }
            ,
            n.selectRecipient = function(e) {
                n.delegate().addRecipient(e.contact)
            }
            ,
            n.addRecipient = function() {
                if (n.contactModel.name) {
                    var e = _.find(n.contactModel.lastContacts, function(e) {
                        return e.name === n.contactModel.name || e.email === n.contactModel.name
                    }
                    );
                    if (e)
                        n.delegate().addRecipient(e),
                        n.contactModel.name = "";
                    else {
                        n.contactModel.candidate = {
                            email: "",
                            first_name: "",
                            last_name: ""
                        };
                        var t = n.contactModel.name.trim().replace("<", "").replace(">", "");
                        if (t.indexOf(" ") >= 0) {
                            var o = _.filter(t.split(" "), function(e) {
                                return !_.isEmpty(e)
                            }
                            );
                            3 === o.length ? (n.contactModel.candidate.first_name = o[0],
                            n.contactModel.candidate.last_name = o[1],
                            n.contactModel.candidate.email = o[2]) : (n.contactModel.candidate.first_name = _.first(o),
                            n.contactModel.candidate.last_name = _.rest(o).join(" "))
                        } else
                            t.match(/^[\w.!#$%&'*+\-/=?\^`{|}~]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*$/i) ? n.contactModel.candidate.email = t : n.contactModel.candidate.first_name = t;
                        n.contactModel.name = "",
                        n.toggleAddActorForm()
                    }
                }
            }
            ;
            var a = function(e) {
                return o.getContacts({
                    page: 1,
                    count: 1,
                    q: e
                })
            }
              , s = function(e) {
                n.delegate().addRecipient(e),
                n.toggleAddActorForm(),
                n.creatingContact = !1
            }
            ;
            n.createContact = function() {
                n.creatingContact = !0;
                var e, t = n.contactModel.candidate.email;
                n.contactModel.lastContacts && (e = _.find(n.contactModel.lastContacts, function(e) {
                    return e.email === t
                }
                )),
                e ? s(e) : o.addContact(n.contactModel.candidate).then(function(e) {
                    e && e.id && s(e)
                }
                , function(e) {
                    a(t).then(function(t) {
                        if (t && 1 === t.length)
                            s(t[0]);
                        else {
                            var o = "Error while adding recipient. Please try later.";
                            e.data.email && (o = "Please enter a correct email address."),
                            i.alert({
                                title: "Contact can not be created",
                                text: o
                            }),
                            n.creatingContact = !1
                        }
                    }
                    )
                }
                )
            }
        }
        ],
        templateUrl: "/views/documents/participants-form.html"
    }
}
]),
angular.module("pd.documents").directive("recipientAction", ["ProfileService", "RecipientService", function(e, n) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            document: "="
        },
        controller: ["$scope", function(t) {
            t.$watch("document", function(o) {
                o && e.getProfile().then(function(e) {
                    t.action = n.getRecipientAction(e, o)
                }
                )
            }
            )
        }
        ],
        templateUrl: "/views/documents/recipient-action.html"
    }
}
]),
angular.module("pd.documents").directive("roleAssignment", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/documents/role-assignment.html",
        scope: {
            assignment: "=",
            index: "=",
            existed: "="
        },
        controller: ["$scope", function(e) {
            e.addRecipient = function(n) {
                e.assignment.contact = n
            }
            ,
            e.removeRecipient = function() {
                e.assignment.contact = null 
            }
            ,
            e.roleVisible = !0,
            e.showContactForm = function() {
                e.roleVisible = !1
            }
            ,
            e.hideContactForm = function() {
                e.roleVisible = !0
            }
        }
        ]
    }
}
]),
angular.module("pd.documents").directive("rolesAssignmentForm", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/documents/roles-assignment-form.html",
        scope: {
            assignments: "=",
            contacts: "="
        },
        controller: ["$scope", "ConfirmationService", "$filter", function(e, n, t) {
            var o = function() {
                var n = [];
                _.isEmpty(e.contacts) || (n = _.map(e.contacts, function(e) {
                    return {
                        contact: e
                    }
                }
                )),
                _.isEmpty(e.assignments) || (n = n.concat(_.map(e.assignments, function(e) {
                    return {
                        contact: e.contact
                    }
                }
                ))),
                e.merged = n
            }
            ;
            e.$watch("assignments", o, !0),
            e.$watchCollection("contacts", o),
            e.addRecipient = function(n) {
                i(n) || e.contacts.push(n)
            }
            ,
            e.removeRecipient = function(o) {
                var i = "Do you want to remove " + t("fullName")(o) + " from the list? This person won't have access to the document anymore.";
                return n.confirm({
                    text: i
                }).then(function() {
                    e.contacts = _.filter(e.contacts, function(e) {
                        return e.email !== o.email
                    }
                    )
                }
                ),
                !1
            }
            ;
            var i = function(n) {
                var t = _.any(e.contacts, function(e) {
                    return e.email === n.email
                }
                )
                  , o = _.any(e.assignments, function(e) {
                    return e.contact && e.contact.email === n.email
                }
                );
                return t || o
            }
        }
        ]
    }
}
]),
angular.module("pd.documents").directive("documentAction", ["ElementClickBehavior", function(e) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            action: "=",
            documentInfo: "=",
            documentContentInfo: "="
        },
        templateUrl: "/views/documents/pad/document-action.html",
        link: function(n, t) {
            t.hide();
            var o = n.action.widget
              , i = !1
              , a = []
              , s = e.getStream();
            a.push(s.filter(function(e) {
                return "widget-activate" === e.name && e.widgetId === o.id
            }
            ).subscribe(function() {
                if (!i) {
                    var e = n.documentContentInfo.documentSize.width
                      , a = t.height() / e * 100;
                    t.css({
                        top: o.position.top + o.size.height / 2 - a / 2 + "%"
                    }),
                    i = !0
                }
                t.show()
            }
            )),
            a.push(s.filter(function(e) {
                return "widget-activate" === e.name && e.widgetId !== o.id
            }
            ).subscribe(function() {
                t.hide()
            }
            )),
            n.$on("$destroy", function() {
                _.each(a, function(e) {
                    e.dispose()
                }
                )
            }
            )
        }
    }
}
]),
angular.module("pd.documents").directive("documentActionPanel", ["Universal", function(e) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            documentInfo: "=",
            documentContentInfo: "="
        },
        templateUrl: e.templateUrl("/views/documents/pad/document-action-panel.html"),
        controller: "DocumentActionPanelController"
    }
}
]),
angular.module("pd.documents").directive("inlineDocumentAction", ["ElementClickBehavior", function(e) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            action: "="
        },
        templateUrl: "/views/documents/pad/inline-document-action.html",
        link: function(n, t) {
            t.hide();
            var o = n.action.widget
              , i = !1
              , a = []
              , s = e.getStream();
            a.push(s.filter(function(e) {
                return "widget-activate" === e.name && e.widgetId === o.id
            }
            ).subscribe(function() {
                i || (t.offset({
                    top: o.position.top + o.size.height / 2 - t.height() / 2
                }),
                i = !0),
                t.show()
            }
            )),
            a.push(s.filter(function(e) {
                return "widget-activate" === e.name && e.widgetId !== o.id
            }
            ).subscribe(function() {
                t.hide()
            }
            )),
            n.$on("$destroy", function() {
                _.each(a, function(e) {
                    e.dispose()
                }
                )
            }
            )
        }
    }
}
]),
angular.module("pd.documents").controller("DocumentActionPanelController", ["$scope", "$rootScope", "$timeout", "WidgetUtility", "LocalStoreService", "Config", "DocumentsService", "ElementClickBehavior", "$download", "Constants", "$window", "$controller", "AlertService", "DocumentLifecycleService", "WidgetHighlightService", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g) {
    var f = function(e) {
        return c.DOCUMENT.TYPE.EDITABLE_DOCUMENT === e.type || c.DOCUMENT.TYPE.EDITABLE_TEMPLATE === e.type
    }
    ;
    e.$watch("documentInfo", function(n) {
        n && (f(n.document) ? u("EditableDocumentActionPanelController", {
            $scope: e
        }) : u("StaticDocumentActionPanelController", {
            $scope: e
        }))
    }
    ),
    e.currentActionIndex = -1,
    e.showNavigationHelpMessage = !1,
    e.showCompletionHelpMessage = !1,
    e.$watch("actions", function(n) {
        n && (e.requiredCount = o.calculateRequired(n),
        e.completedCount = o.calculateCompleted(n),
        e.isCompleted = v())
    }
    ),
    e.$watch("documentInfo.document.status", function(n) {
        e.documentCompletedByAll = n === c.DOCUMENT.STATUS.COMPLETED
    }
    ),
    e.downloadFile = function() {
        s.getDownloadPDFUrl(e.documentInfo.document.id).then(function(n) {
            r(n.url, e.documentInfo)
        }
        )
    }
    ,
    e.$on("widget.value.set", function() {
        e.completedCount = o.calculateCompleted(e.actions),
        e.isCompleted = v()
    }
    );
    var b = l.getStream().filter(function(e) {
        return "widget-activate" === e.name
    }
    ).subscribe(function(n) {
        var t = _.find(e.actions, function(e) {
            return e.widget.id === n.widgetId
        }
        );
        e.currentActionIndex = e.actions.indexOf(t)
    }
    );
    e.$on("$destroy", function() {
        b.dispose()
    }
    ),
    e.complete = function() {
        if (a.application.embed)
            e.completing = !0,
            n.$broadcast("embed.document.completed");
        else {
            var t = _.find(e.documentInfo.document.recipients, function(n) {
                return n.contact.id === e.documentInfo.actor
            }
            );
            if (t && !e.completing) {
                t.is_done = !0,
                e.completing = !0;
                var o = p.complete(e.documentInfo, t);
                o && o.then && o.then(function() {
                    n.$broadcast("actor.completed.document", {
                        doc: e.documentInfo.document,
                        recipient: t
                    }),
                    e.done = !0
                }
                , function() {
                    n.$broadcast("actor.complete.document.failed", {
                        doc: e.documentInfo.document,
                        recipient: t
                    }),
                    t.is_done = !1,
                    e.completing = !1
                }
                )
            }
        }
    }
    ,
    e.$on("embed.document.invalid", function() {
        e.completing = !1
    }
    ),
    e.$on("embed.document.sent", function() {
        e.completing = !1,
        e.done = !0
    }
    ),
    e.$on("embed.document.send.failed", function() {
        e.completing = !1
    }
    ),
    e.getProgress = function() {
        return {
            width: e.completedCount / e.requiredCount * 100 + "%"
        }
    }
    ;
    var v = function() {
        return e.completedCount === e.requiredCount
    }
      , h = i.getBool("ActionPanel.NavigationHelpShown");
    h || t(function() {
        e.isCompleted || (e.showNavigationHelpMessage = !0)
    }
    , 1e3),
    e.$watch("isCompleted", function() {
        e.showCompletionHelpMessage = e.isCompleted && !e.completing
    }
    ),
    e.scrollToAction = function(e) {
        g.highlightWidget(e)
    }
    ,
    d.onbeforeunload = function(n) {
        if ((a.application.viewer || a.application.session_view) && !e.documentInfo.isRecipientCompletedDocument && e.isCompleted && !e.done) {
            n = n || d.event;
            var t = "The document has been signed but not finalized yet. Please click Done button to finalize and complete the document.";
            return n.returnValue = t,
            t
        }
    }
    ,
    e.nextAction = function() {
        e.showNavigationHelpMessage && (e.showNavigationHelpMessage = !1,
        i.set("ActionPanel.NavigationHelpShown", !0));
        var n = _.any(e.actions, function(e) {
            return !e.page || e.page.isLoaded
        }
        );
        if (n) {
            e.currentActionIndex === e.actions.length - 1 && (e.currentActionIndex = -1),
            e.currentActionIndex++;
            var t = e.actions[e.currentActionIndex];
            !t.page || t.page.isLoaded ? e.scrollToAction(t.widget) : e.nextAction()
        }
    }
}
]),
angular.module("pd.documents").controller("EditableDocumentActionPanelController", ["$scope", "WidgetUtility", "Config", function(e, n, t) {
    var o = 0;
    e.$on("block.widgets.ready", function(i, a) {
        if (o += a.block.widgetsInfo.length,
        o === e.documentInfo.widgetsInfo.length) {
            var s = _.reduce(e.documentInfo.blockList.blocks, function(e, n) {
                return n.widgetsInfo ? e.concat(n.widgetsInfo) : e
            }
            , []);
            e.actions = t.application.embed ? s : n.actorWidgets(s, e.documentInfo.actor)
        }
    }
    )
}
]),
angular.module("pd.documents").controller("StaticDocumentActionPanelController", ["$scope", "WidgetUtility", "Config", function(e, n, t) {
    e.$watch("documentInfo", function(i) {
        if (i)
            if (t.application.embed)
                e.actions = o(e.documentInfo.widgetsInfo);
            else {
                var a = n.actorWidgets(e.documentInfo.widgetsInfo, e.documentInfo.actor);
                e.actions = o(a)
            }
    }
    );
    var o = function(t) {
        var o = n.splitWidgetsByPages(t, e.documentContentInfo);
        return _.reduce(o, function(e, t) {
            return e.concat(n.sortByPosition(t))
        }
        , [])
    }
}
]),
angular.module("pd.documents").directive("documentApprovePanel", ["Universal", function(e) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            documentInfo: "="
        },
        templateUrl: e.templateUrl("/views/documents/pad/approve/document-approve-panel.html"),
        controller: ["$scope", "DocumentLifecycleService", "DocumentsService", "Constants", "ContextService", "$rootScope", function(e, n, t, o, i, a) {
            e.visible = !0;
            var s = function() {
                e.visible = !1
            }
            ;
            e.approve = function() {
                n.approve(e.documentInfo)
            }
            ,
            e.reject = function() {
                n.reject(e.documentInfo)
            }
            ,
            e.$on("document.approved", s),
            e.$on("document.rejected", s),
            e.$on("document.already.approved.or.rejected", s),
            t.getAuditTrail(e.documentInfo.document).then(function(n) {
                e.event = _.last(_.filter(n, {
                    action: o.AUDIT_TRAIL.ACTIONS.SENT_FOR_APPROVAL
                }))
            }
            ),
            e.openTimeline = function() {
                i.openDocTool("tools-timeline").then(function() {
                    a.$broadcast("open.audit.trail")
                }
                )
            }
        }
        ]
    }
}
]),
angular.module("pd.documents").directive("embedDocument", ["$window", "Universal", "$controller", function(e, n, t) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: n.templateUrl("/views/documents/embed/embed-document.html"),
        controller: "EmbedDocumentController",
        scope: {
            documentInfo: "=",
            injected: "=",
            documentContentInfo: "="
        },
        transclude: !0,
        link: function(e, n) {
            t("DocumentPadWidgetsNavigationController", {
                $scope: e,
                $element: n
            }),
            t("DocumentPadResizeController", {
                $scope: e,
                $element: n
            })
        }
    }
}
]).controller("EmbedDocumentController", ["$scope", "$controller", "LocalStoreService", function(e, n, t) {
    n("EmbedDocumentWidgetsController", {
        $scope: e
    }),
    n("DocumentPadMessagesController", {
        $scope: e
    }),
    e.$watch("documentInfo", function(n) {
        n && (n.widgetLabelsOn = t.getBool("widgetLabelsOn"),
        e.currentPage || (e.currentPage = {
            index: 1,
            content: n.document.revision.content.id
        }))
    }
    )
}
]),
angular.module("pd.documents").controller("EmbedDocumentWidgetsController", ["$scope", "$rootScope", "WidgetUtility", "Constants", "WidgetInfoFactory", function(e, n, t, o, i) {
    e.$watch("documentContentInfo", function(n) {
        n && e.injected.user && a(e.documentInfo.document.widgets, n, e.injected)
    }
    ),
    e.$watch("injected.user", function(n) {
        n && e.documentContentInfo && a(e.documentInfo.document.widgets, e.documentContentInfo, e.injected)
    }
    );
    var a = function(n, o, a) {
        var l = _.filter(n, function(e) {
            return e.role || t.isStatic(e)
        }
        )
          , r = _.map(l, function(e) {
            return i.createEmbeddedWidgetInfo(e, a.user)
        }
        )
          , c = t.splitWidgetsByPages(r, o);
        e.documentInfo.widgetsInfo = r,
        e.actionPanelVisible = !0,
        _.each(o.pages, function(e, n) {
            var o = t.sortByPosition(c[n]);
            e.widgetsInfo = _.map(o, function(n) {
                return n.page = e,
                n
            }
            ),
            e.actions = o
        }
        ),
        a.widgets && _.each(a.widgets, function(n, t) {
            var o = _.find(e.documentInfo.document.roles, function(e) {
                return t.toLowerCase() === e.name.toLowerCase()
            }
            );
            o && _.each(n, function(e, n) {
                var t = _.find(r, function(e) {
                    return e.widget.role === o.id && e.widget.title.toLowerCase() === n.toLowerCase()
                }
                );
                t && s(t.widget, e)
            }
            )
        }
        )
    }
      , s = function(e, n) {
        if (n)
            if (e.data = e.data || {
                value: ""
            },
            e.type === o.WIDGET.DATE) {
                e.data.date = moment(n).toDate();
                var t = moment.utc([e.data.date.getFullYear(), e.data.date.getMonth(), e.data.date.getDate()]);
                e.data.value = t.toISOString()
            } else
                e.data.value = n
    }
}
]),
angular.module("pd.documents").controller("DocumentListController", ["$scope", "$rootScope", "$location", "$state", "$stateParams", "DocumentsService", "FoldersService", "ContextService", "PermissionRules", "ConfirmationService", "Constants", "MultipleRequestService", "PermissionsService", "TemplatesService", "PropertiesService", "Config", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g, f) {
    l.when({
        templates: function() {
            e.folderType = "templates",
            e.parentState = "templates",
            e.service = p,
            e.foldersService = s.getFoldersManager("templates");
        
        },
        otherwise: function() {
            e.folderType = "documents",
            e.parentState = "inbox" === o.current.name ? "inbox" : "documents",
            e.service = a,
            e.foldersService = s.getFoldersManager("documents")
        }
    }),
    s.getRootFolder(e.folderType).then(function(n) {
        e.isRootFolder = n.id === i.folderId
    }
    ),
    e.gridOptions = e.gridOptions || {
        store: {
            getItems: e.getDocuments
        },
        properties: {
            sorting: {
                date_modified: "desc"
            }
        }
    },
    e.sdkOnNewDocument = function() {
        n.$broadcast("sdk.new.document"),
        e.sdkCreatingNewDocument = !0
    }
    ,
    e.onDocumentClickCallback = function(n) {
        o.go(e.parentState + ".details", {
            documentId: n
        })
    }
    ,
    e.$watch("onDocumentClick", function() {
        e.onDocumentClick && (e.onDocumentClickCallback = e.onDocumentClick)
    }
    ),
    e.isAvailable = function() {
        return !_.isEmpty(e.selected)
    }
    ,
    e.$on(d.GRID.SELECTION_CHANGE, function(n, t) {
        e.selected = t
    }
    );
    var b = function() {
        c.confirm({
            text: "Do you want to remove selected document(-s)?"
        }).then(function() {
            e.service.remove(v(), h()).then(function() {
                w(),
                n.$broadcast("document.deleted")
            }
            )
        }
        )
    }
      , v = function() {
        return _.pluck(e.selected, "id")
    }
      , h = function() {
        var n = _.first(e.selected);
        return n.folder ? n.folder.id || n.folder : null 
    }
      , w = function() {
        n.$broadcast(d.GRID.RELOAD)
    }
    ;
    e.removeDocument = function() {
        m.checkPermissions(e.selected, "remove").then(b)
    }
    ,
    e.addDocument = function() {
        var e = i.folderId;
        o.go("documents.new", {
            folderId: e ? e : null 
        })
    }
    ,
    e.addTemplate = function() {
        var e = i.folderId;
        o.go("templates.new", {
            folderId: e ? e : null 
        })
    }
    ,
    e.sendDocumentToContact = function() {
        i.contactId && o.go("documents.new", {
            contactId: i.contactId
        })
    }
    ,
    e.$on("movetofolder", function(n, t) {
        m.checkPermissions(e.selected, "move").then(function() {
            e.service.move(v(), h(), t.folder.id).then(w)
        }
        )
    }
    ),
    e.$on("duplicate", function() {
        m.checkPermissions(e.selected, "duplicate").then(function() {
            e.service.duplicate(v(), h()).then(w)
        }
        )
    }
    ),
    e.createDocFromTemplate = function(e) {
        n.$broadcast("close.upload.dialog");
        var t = {
            templateId: e.id
        };
        o.go("documents.create-from-template", t, {
            inherit: !1
        })
    }
    ,
    f.isWorkspaceOwner() && g.get().then(function(n) {
        if (n && n.organization && n.organization.company_size) {
            var t = parseInt(n.organization.company_size)
              , o = t > 1;
            e.bigCompany = o
        }
    }
    ),
    e.convertTemplate = function() {
        o.go("templates.convert")
    }
    ,
    e.TEMPLATE_FOLDERS_PERMISSIONS = r.ROOT_ACCESS
}
]).directive("documentList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/documents/list/list.html",
        controller: "DocumentListController",
        scope: {
            getDocuments: "=",
            emptyListTemplate: "@",
            notFoundTemplate: "@"
        }
    }
}
]).directive("documentRoList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/documents/list/list-ro.html",
        controller: "DocumentListController",
        scope: {
            getDocuments: "=",
            onDocumentClick: "=",
            emptyListTemplate: "@",
            notFoundTemplate: "@",
            hideToolbar: "="
        }
    }
}
]).directive("documentExtensionRoList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/documents/list/sdk-extension-list-ro.html",
        controller: "DocumentListController",
        scope: {
            getDocuments: "=",
            onDocumentClick: "=",
            emptyListTemplate: "@",
            notFoundTemplate: "@"
        }
    }
}
]).directive("inboxList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/documents/list/list-inbox.html",
        controller: "DocumentListController",
        scope: {
            gridOptions: "=",
            hideGroups: "=",
            emptyListTemplate: "@",
            notFoundTemplate: "@"
        }
    }
}
]).directive("contactDocumentsList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/documents/list/list-contact-documents.html",
        controller: "DocumentListController",
        scope: {
            getDocuments: "=",
            emptyListTemplate: "@",
            notFoundTemplate: "@"
        }
    }
}
]).directive("templatesList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/templates/list/list.html",
        controller: "DocumentListController",
        scope: {
            getDocuments: "=",
            emptyListTemplate: "@",
            notFoundTemplate: "@"
        }
    }
}
]),
angular.module("pd.documents").directive("documentPad", ["Universal", "$controller", "DocumentPadControllersService", "singleWatch", function(e, n, t, o) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: e.templateUrl("/views/documents/pad/pad.html"),
        controller: "DocumentPadController",
        scope: {
            documentInfo: "=",
            documentContentInfo: "=",
            loadingContent: "="
        },
        transclude: !0,
        link: function(e, i) {
            o(e, "documentContentInfo", function(o) {
                o && _.each(t.getLinkFunctionControllers(e.documentContentInfo), function(t) {
                    var o = {
                        $scope: e,
                        $element: i
                    }
                      , a = t.injections ? _.assign(o, t.injections) : o;
                    n(t.name, a)
                }
                )
            }
            )
        }
    }
}
]).controller("DocumentPadController", ["$scope", "$controller", "DocumentPadControllersService", "singleWatch", "LocalStoreService", "Constants", "FeaturesService", function(e, n, t, o, i, a, s) {
    o(e, "documentContentInfo", function(o) {
        o && _.each(t.getControllers(e.documentContentInfo), function(t) {
            var o = {
                $scope: e
            }
              , i = t.injections ? _.assign(o, t.injections) : o;
            n(t.name, i)
        }
        )
    }
    ),
    e.widgetPlaceholderPosition = 10,
    e.$watch("documentInfo", function(n) {
        n && (n.widgetLabelsOn = i.getBool("widgetLabelsOn"),
        e.currentPage || (e.currentPage = {
            index: 1,
            content: n.document.revision.content.id
        }))
    }
    ),
    e.$on("document.rename", function(n, t) {
        e.documentInfo && t.document.id === e.documentInfo.document.id && (e.documentInfo.document.name = t.document.name)
    }
    ),
    s.checkAvailability(a.FEATURES.PDF_ATTACHMENT).then(function(n) {
        e.hasPDFAttachmentFeature = n
    }
    )
}
]),
angular.module("pd.documents").directive("attachDocumentActionPage", [function() {
    return {
        restrict: "E",
        replace: !0,
        requires: "documentPad",
        scope: {
            documentInfo: "=",
            documentContentInfo: "="
        },
        templateUrl: "/views/documents/pad/content/attach-document-action-page.html",
        controller: ["$scope", "$timeout", "ContextService", "DocumentsService", "TemplatesService", "DocumentContentInfoBuilder", "$rootScope", "NotificationCenter", function(e, n, t, o, i, a, s, l) {
            e.isShowUploadZone = !1,
            e.uploading = !0,
            e.processing = !1,
            e.cancelAvailable = !0;
            var r = t.isTemplates() ? i : o;
            e.showUploadZone = function() {
                e.isShowUploadZone = !0,
                n(function() {
                    angular.element("#ScrollToMe")[0].scrollIntoView()
                }
                )
            }
            ,
            e.hideUploadZone = function() {
                e.isShowUploadZone = !1
            }
            ,
            e.cancelUpload = function() {}
            ,
            e.uploadDone = function(n) {
                e.processingOptions = {
                    new_file: n
                },
                e.uploading = !1,
                e.processing = !0
            }
            ,
            e.processingDone = function(n) {
                var t = {
                    uuid: n.uuid,
                    name: n.name
                };
                r.addAttachment(e.documentInfo.document.id, t).then(function(n) {
                    a.addAttachment(e.documentContentInfo, n),
                    e.isShowUploadZone = !1,
                    e.uploading = !0,
                    e.processing = !1,
                    e.cancelAvailable = !0,
                    s.$broadcast("pdf.attachment.created")
                }
                )
            }
            ,
            e.processingError = function() {
                e.processing = !1,
                e.uploading = !0,
                e.cancelAvailable = !0,
                l.message("Unfortunately, we were unable to process this file. Please try again or choose another file.", 15)
            }
            ,
            e.onStartUploading = function() {
                e.cancelAvailable = !1
            }
        }
        ]
    }
}
]),
angular.module("pd.documents").controller("DocumentBoxPageController", ["$scope", "$element", "BrowserUtils", "$timeout", function(e, n, t, o) {
    e.isIE = t.msie,
    e.isIOS7 = (t.iphone || t.ipod || t.ipad) && t.versionNumber < 8;
    var i = function() {
        return n.find(".the-doc-part")
    }
      , a = function() {
        o(function() {
            e.page.isLoaded = !0,
            e.page.isLoading = !1,
            e.page.isReady = !0,
            o(function() {
                var n = i();
                e.page.size = {
                    width: n.width(),
                    height: n.height()
                }
            }
            , 100)
        }
        , 500)
    }
      , s = e.$watch("isIE", function() {
        var n, l = i(), r = function() {
            o.cancel(n),
            o(a)
        }
        ;
        l.ready(function() {
            l.bind("load", r),
            t.safari && (n = o(r, 3e3 + 50 * e.page.number))
        }
        ),
        s()
    }
    )
}
]),
angular.module("pd.documents").directive("documentPage", ["$rootScope", "$timeout", "Universal", "$controller", function(e, n, t, o) {
    return {
        restrict: "E",
        replace: !0,
        requires: "documentPad",
        scope: {
            documentInfo: "=",
            documentContentInfo: "=",
            page: "=",
            actionPanelVisible: "="
        },
        templateUrl: t.templateUrl("/views/documents/pad/content/page.html"),
        controller: "DocumentPageController",
        link: function(e, n) {
            var t = "";
            e.documentContentInfo.isBoxContent ? t = "DocumentBoxPageController" : e.documentContentInfo.isStaticContent && (t = "DocumentStaticPageController"),
            t && o(t, {
                $scope: e,
                $element: n
            })
        }
    }
}
]),
angular.module("pd.documents").controller("DocumentPageController", ["$scope", "$rootScope", "WidgetUtility", "SizingModelFactory", "Config", function(e, n, t, o, i) {
    e.page.isLoading = !0,
    e.page.isLoaded = !1,
    e.page.isReady = !1,
    e.$watch("documentInfo.widgetsInfo", function(n) {
        if (n) {
            var o = t.sortByPosition(_.filter(n, s));
            e.page.widgetsInfo = _.map(o, function(n) {
                return n.page = e.page,
                n
            }
            )
        }
    }
    ),
    i.application.embed || e.$watch("actionPanelVisible", function(n) {
        n && (e.page.actions = n ? t.actorWidgets(e.page.widgetsInfo, e.documentInfo.actor) : [])
    }
    );
    var a = function() {
        e.page.widgetsInfo = [],
        e.page.actions = []
    }
    ;
    e.$on("document.sent", a),
    e.$on("document.sent.for.approval", a),
    e.$on("actor.completed.document", a);
    var s = function(n) {
        return n.widget.content === e.page.content && n.widget.position.page === e.page.number
    }
      , l = function(n) {
        n.page = e.page,
        e.page.widgetsInfo.push(n),
        e.page.widgetsInfo = t.sortByPosition(e.page.widgetsInfo)
    }
      , r = function(n) {
        e.page.widgetsInfo = _.filter(e.page.widgetsInfo, function(e) {
            return e !== n
        }
        )
    }
    ;
    e.$on("widget.placeholder.created", function(e, n) {
        s(n) && l(n)
    }
    ),
    e.$on("widget.placeholder.deleted", function(e, n) {
        s(n) && r(n)
    }
    ),
    e.$on("widget.created", function(e, n) {
        s(n) && l(n)
    }
    ),
    e.$on("widget.deleted", function(e, n) {
        s(n) && r(n)
    }
    ),
    e.$on("widget.changePage", function(n, t) {
        var o = t.widgetInfo;
        t.fromPage === e.page.number && t.fromContent === e.page.content ? (o.relocation = !0,
        r(o)) : t.toPage === e.page.number && t.toContent === e.page.content && (o.page = e.page,
        l(o))
    }
    ),
    e.$on("widget.dragCompleted", function(n, o) {
        s(o.widgetInfo) && (e.page.widgetsInfo = t.sortByPosition(e.page.widgetsInfo))
    }
    ),
    e.$on("move.widget", function(n, i) {
        if (s(i.widgetInfo)) {
            var a = new o(e.page.size,e);
            t.moveWidget(i.widgetInfo, i.direction, a)
        }
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentStaticPageController", ["$scope", "$element", "$timeout", "BrowserUtils", function(e, n, t, o) {
    e.isIE = o.msie,
    e.isIOS7 = (o.iphone || o.ipod || o.ipad) && o.versionNumber < 8;
    var i = 500
      , a = function() {
        return angular.element(n).find("img.the-doc-part")
    }
      , s = function() {
        return "&_time=" + (new Date).getTime()
    }
      , l = function() {
        var t = angular.element(n).find("div.document-page__content")[0];
        angular.element(t).append('<img class="the-doc-part"/>');
        var o = a();
        return o.width(e.documentContentInfo.documentSize.width).attr("src", e.page.url + s()).hide()
    }
      , r = function() {
        e.page.isLoaded = !0,
        t(function() {
            e.page.isLoading = !1,
            e.page.isReady = !0;
            var n = a();
            e.page.size = {
                width: n.width(),
                height: n.height()
            }
        }
        )
    }
      , c = function() {
        t(function() {
            e.isLoading || e.isLoaded || e.reloadImage()
        }
        , i * e.page.number)
    }
      , d = function() {
        e.page.isLoading = !1
    }
      , u = function(e) {
        var n = a();
        _.isEmpty(n) && (n = l()),
        n.load(function() {
            n.show(),
            t(r)
        }
        ),
        n.error(function() {
            t(e)
        }
        )
    }
    ;
    e.reloadImage = function() {
        a().remove(),
        e.page.isLoading = !0,
        u(d)
    }
    ,
    u(c)
}
]),
angular.module("pd.documents").controller("DocumentCustomCssController", ["$scope", "CustomCssService", function(e, n) {
    var t = e.$watch("documentInfo.document.revision.content.theme", function(e) {
        e && (n.loadTheme(e),
        t())
    }
    );
    e.$on("$destroy", function() {
        n.cleanCss()
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentPadAnalyticsController", ["$scope", "DocumentAnalyticsService", "Constants", "$filter", "Config", function(e, n, t, o, i) {
    var a, s, l, r, c, d = !1, u = [], m = [], p = function(t, o, i) {
        r && a && t && o && n.track({
            d: e.documentInfo.document.id,
            r: e.documentInfo.document.revision.number,
            rc: r,
            s: a,
            p: o,
            t: i,
            c: t
        })
    }
    , g = function(e) {
        m.push(_.assign({}, e, {
            time: (new Date).getTime()
        }))
    }
    , f = function() {
        _.each(m, function(e, n, t) {
            var o = n === t.length - 1 ? (new Date).getTime() - e.time : t[n + 1].time - e.time;
            o && Math.ceil(o / 1e3) && p(e.content, e.page, Math.ceil(o / 1e3))
        }
        );
        var e = _.last(m);
        m = [],
        e && g({
            content: e.content,
            page: e.page
        })
    }
    , b = function() {
        p(e.documentInfo.document.revision.content.id, 1, 1)
    }
    , v = function(n) {
        var o = e.documentInfo.document.type;
        if (o === t.DOCUMENT.TYPE.DOCUMENT) {
            var i = e.documentContentInfo.getPage(n.index - 1, n.content);
            return i && i.isLoaded
        }
        return o === t.DOCUMENT.TYPE.EDITABLE_DOCUMENT ? !0 : void 0
    }
    , h = function(e) {
        if (e && e.currentPage) {
            var n = e.currentPage
              , t = {
                page: n.index,
                content: n.content
            };
            clearInterval(l),
            v(n) ? g(t) : l = setInterval(function() {
                v(n) && (clearInterval(l),
                g(t))
            }
            , 500)
        }
    }
    , w = function() {
        a = o("uuid")()
    }
    , k = function() {
        d || (d = !0,
        c = e.$eventToObservable("document.page.viewed").map(function(e) {
            return e.additionalArguments[0]
        }
        ).subscribe(h),
        h({
            currentPage: {
                index: 1,
                content: e.documentInfo.document.revision.content.id
            }
        }),
        s = setInterval(f, i.document_analytics_interval))
    }
    , y = function() {
        c && c.dispose(),
        clearInterval(s),
        clearInterval(l),
        m = [],
        d = !1
    }
    , I = function(e) {
        if (!e)
            return !1;
        var n = e.document
          , o = _.find(n.recipients, function(n) {
            return n.contact.id === e.actor
        }
        );
        return o && e.isSentAndNotCompleted && (n.type === t.DOCUMENT.TYPE.DOCUMENT || n.type === t.DOCUMENT.TYPE.EDITABLE_DOCUMENT)
    }
    , C = e.$toObservable("documentInfo");
    u.push(C.filter(function() {
        return I(e.documentInfo)
    }
    ).subscribe(function() {
        var n = _.find(e.documentInfo.document.recipients, function(n) {
            return n.contact.id === e.documentInfo.actor
        }
        );
        r = n.id,
        w(),
        k(),
        b()
    }
    )),
    u.push(C.filter(function() {
        return !I(e.documentInfo)
    }
    ).subscribe(y));
    var S = e.$eventToObservable("recipient.delete");
    u.push(S.filter(function(e) {
        var n = e.additionalArguments[0];
        return n && n.id === r
    }
    ).subscribe(y));
    var T = e.$eventToObservable("user.is.sleeping");
    u.push(T.filter(function() {
        return I(e.documentInfo)
    }
    ).subscribe(f)),
    u.push(T.subscribe(y));
    var E = e.$eventToObservable("user.is.awake");
    u.push(E.filter(function() {
        return I(e.documentInfo)
    }
    ).subscribe(function() {
        k(),
        h({
            currentPage: e.currentPage
        })
    }
    )),
    e.$on("$destroy", function() {
        y(),
        _.each(u, function(e) {
            e.dispose()
        }
        ),
        c && c.dispose()
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentPadClickController", ["$scope", "ElementClickBehavior", "rx", function(e, n, t) {
    var o = angular.element(".document")
      , i = t.Observable.merge(t.Observable.fromEvent(o, "mousedown"), t.Observable.fromEvent(o, "touchstart")).subscribe(function() {
        n.fireEvent({
            name: "close-settings"
        })
    }
    );
    e.$on("$destroy", function() {
        i.dispose()
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentPadContentController", ["$scope", function(e) {
    e.$watch("documentContentInfo", function(n) {
        n && (e.pages = n.pages)
    }
    ),
    e.$watch("loadingContent", function(n) {
        n && (e.pages = [])
    }
    ),
    e.$on("pdf.attachment.created", function() {
        e.pages = e.documentContentInfo.pages
    }
    );
    var n = function() {
        return e.documentInfo.isActionPanelVisible(e.documentInfo.widgetsInfo)
    }
    ;
    e.$watch("documentInfo.widgetsInfo", function(t) {
        t && (e.actionPanelVisible = n(),
        e.hasBottomPanel = e.actionPanelVisible || e.documentInfo.isWaitingForApproval || e.documentInfo.isApproved || e.documentInfo.isRejected)
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentPadEditableContentController", ["$scope", "WidgetUtility", function(e, n) {
    e.$watch("documentInfo.widgetsInfo", function(n) {
        n && (e.actionPanelVisible = t(),
        e.hasBottomPanel = e.actionPanelVisible || e.documentInfo.isWaitingForApproval || e.documentInfo.isApproved || e.documentInfo.isRejected)
    }
    );
    var t = function() {
        return e.documentInfo.isActionPanelVisible(e.documentInfo.widgetsInfo)
    }
}
]),
angular.module("pd.documents").controller("DocumentPadGarbageController", ["$scope", function(e) {
    var n = [".ui-sortable-placeholder", ".document__block-list > .block-handle", ".doc-block--drag-preview", ".widget--drag-preview-animated"]
      , t = function() {
        _.each(n, function(e) {
            angular.element(e).remove()
        }
        )
    }
    ;
    e.$on("$stateChangeStart", function(e, n) {
        (-1 !== n.name.indexOf("tools-widgets") || -1 !== n.name.indexOf("tools-content")) && t()
    }
    ),
    e.$on("$destroy", t)
}
]),
angular.module("pd.documents").controller("DocumentPadMessagesController", ["$scope", "Html5MessageService", "Constants", "Config", function(e, n, t, o) {
    o.application.session_view ? (n.postToParent(t.SESSION_VIEW_DOCUMENT.LOADED),
    e.$on("actor.completed.document", function(e, o) {
        var i = o.doc
          , a = o.recipient;
        n.postToParent(t.SESSION_VIEW_DOCUMENT.COMPLETED, {
            uuid: i.uuid,
            recipient: _.pick(a.contact, ["first_name", "last_name", "email", "company"])
        })
    }
    ),
    e.$on("actor.complete.document.failed", function(e, o) {
        var i = o.doc
          , a = o.recipient;
        n.postToParent(t.SESSION_VIEW_DOCUMENT.ERROR, {
            uuid: i.uuid,
            recipient: _.pick(a.contact, ["first_name", "last_name", "email", "company"])
        })
    }
    )) : o.application.embed && (n.postToParent(t.EMBED_DOCUMENT.LOADED),
    e.$on("embed.document.sent", function(e, o) {
        var i = o.doc;
        n.postToParent(t.EMBED_DOCUMENT.COMPLETED, {
            uuid: i.uuid,
            download_url: i.download_url
        })
    }
    ),
    e.$on("embed.document.send.failed", function(e, o) {
        var i = o.doc;
        n.postToParent(t.EMBED_DOCUMENT.ERROR, {
            uuid: i.uuid
        })
    }
    ))
}
]),
angular.module("pd.documents").controller("DocumentPadResizeController", ["$scope", "$element", "$timeout", "$window", "$filter", "Constants", "singleWatch", function(e, n, t, o, i, a, s) {
    var l = 100
      , r = function() {
        if (e.documentContentInfo.isEditableContent) {
            var n = e.documentContentInfo.documentSize
              , t = a.DOCUMENT.PAD.WIDTH
              , o = i("number")(n.width / t);
            n.scale = o,
            n.zoomStyle = {
                transform: "scale(" + o + ")",
                "transform-origin": 1 === o ? "top center" : "top left"
            },
            n.bumperStyle = {
                transform: "scale(" + 1 / o + ")"
            }
        }
    }
      , c = function() {
        var n = e.documentContentInfo.documentSize
          , o = angular.element(".document-page");
        0 !== o.length ? n.width = Math.min(o.width(), a.DOCUMENT.PAD.WIDTH) : t(c, 200)
    }
      , d = function() {
        e.documentContentInfo && (c(),
        r())
    }
    ;
    s(e, "documentInfo", function() {
        t(d, l)
    }
    ),
    e.$on("doc.tools.panel.hide", function() {
        t(d, l)
    }
    ),
    e.$on("doc.tools.panel.show", function() {
        t(d, l)
    }
    );
    var u = function(e) {
        e.target === window && t(d)
    }
    ;
    angular.element(o).on("resize", u),
    e.$on("$destroy", function() {
        angular.element(o).off("resize", u)
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentPadScrollController", ["$scope", "$element", "singleWatch", "Constants", "rx", "$rootScope", function(e, n, t, o, i, a) {
    var s = 200
      , l = [];
    t(e, "documentInfo.document.type", function(n) {
        n === o.DOCUMENT.TYPE.DOCUMENT || n === o.DOCUMENT.TYPE.TEMPLATE ? l.push(d().debounce(50).subscribe(p)) : (n === o.DOCUMENT.TYPE.EDITABLE_DOCUMENT || n === o.DOCUMENT.TYPE.EDITABLE_TEMPLATE) && e.documentInfo.isSentAndNotCompleted && l.push(d().debounce(50).subscribe(g))
    }
    );
    var r, c, d = function() {
        return i.Observable.fromEvent(n.find(".document-scrollable-marker"), "scroll")
    }
    , u = function(e, n) {
        a.$broadcast("document.page.viewed", {
            currentPage: e,
            oldPage: n
        })
    }
    , m = function(e, n) {
        return e > 0 ? 100 * s / n : 100 * (Math.abs(e) + s) / n
    }
    , p = function() {
        var t = n.find(".document-page");
        t.each(function() {
            var n = angular.element(this)
              , t = n.offset().top
              , o = n.height()
              , i = Number(n.attr("data-page-num"))
              , a = Number(n.attr("data-page-content"));
            if (e.currentPage.index === i && e.currentPage.content === a)
                return void (e.widgetPlaceholderPosition = m(t, o));
            if (t > 0 && s > t || 0 > t && o + t > s) {
                var l = {
                    index: i,
                    content: a
                };
                return u(l, e.currentPage),
                e.currentPage = l,
                e.widgetPlaceholderPosition = m(t, o),
                !1
            }
        }
        )
    }
    , g = function() {
        r || (r = n.find(".editable-document-content"),
        c = r.width() / o.EDITABLE_DOCUMENT_PAGE_ASPECT_RATIO);
        var t = r.height()
          , i = t % c
          , a = 100 * i / c
          , l = a > o.ANALYTICS.LAST_PAGE_THRESHOLD ? Math.ceil(t / c) : Math.floor(t / c)
          , d = Math.ceil(Math.abs(r.offset().top - s) / c);
        if (d > l && (d = l),
        e.currentPage.index !== d) {
            var m = {
                index: d,
                content: e.documentInfo.document.revision.content.id
            };
            u(m, e.currentPage),
            e.currentPage = m
        }
    }
    ;
    e.$on("$destroy", function() {
        _.each(l, function(e) {
            e.dispose()
        }
        )
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentPadUserActivityController", ["$scope", "$timeout", "Constants", "$filter", "Config", "$rootScope", "$window", "rx", function(e, n, t, o, i, a, s, l) {
    var r, c = .5, d = angular.element(s), u = [{
        target: d,
        events: ["mousemove", "keypress", "click", "touchstart"]
    }, {
        selector: ".document-scrollable-marker",
        events: ["scroll"]
    }, {
        selector: ".doctools",
        events: ["scroll"]
    }], m = [], p = function() {
        clearTimeout(r),
        e.sleepig ? (e.sleepig = !1,
        a.$broadcast("user.is.awake")) : r = setTimeout(function() {
            e.sleepig = !0,
            a.$broadcast("user.is.sleeping")
        }
        , 60 * c * 1e3)
    }
    , g = function() {
        var e = _.reduce(u, function(e, n) {
            var t = n.target ? n.target : angular.element(n.selector);
            return _.reduce(n.events, function(e, n) {
                return l.Observable.merge(e, l.Observable.fromEvent(t, n))
            }
            , e)
        }
        , l.Observable.just("initial event"));
        m.push(e.debounce(50).subscribe(p))
    }
    , f = function() {
        _.each(m, function(e) {
            e.dispose()
        }
        ),
        m = []
    }
    ;
    e.$watch("documentInfo", function(e) {
        if (e) {
            var n = e.document;
            n.type !== t.DOCUMENT.TYPE.DOCUMENT && n.type !== t.DOCUMENT.TYPE.EDITABLE_DOCUMENT || n.status !== t.DOCUMENT.STATUS.SENT && n.status !== t.DOCUMENT.STATUS.VIEWED ? f() : g()
        }
    }
    ),
    e.$on("$destroy", f)
}
]),
angular.module("pd.documents").controller("DocumentPadWidgetsController", ["$scope", "$rootScope", "WidgetsService", "ContextService", "ConfirmationService", "DocumentPadWidgetsService", "WidgetHighlightService", "HotKeysService", "Constants", "RecipientService", "SizingModelFactory", "postponed", "service", "$timeout", "WidgetInfoFactory", "WidgetUtility", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g, f) {
    e.$on("widget.create", u(function(t, o) {
        var i = o.widget
          , s = a.getLastCreatedWidget(e.documentInfo, i.type);
        if (s && s.size && _.assign(i.size, s.size),
        e.pages) {
            var l = e.documentContentInfo.getPage(o.pageIndex, i.content);
            if (l && !l.isLoaded)
                return void n.$broadcast("widget.add.canceled")
        }
        _.assign(i.position, m.calculateWidgetPosition(o)),
        i.type !== r.WIDGET.TEXT && (i.actor || 1 !== e.documentInfo.document.recipients.length ? !i.role && e.documentInfo.document.roles && 1 === e.documentInfo.document.roles.length && (i.role = _.first(e.documentInfo.document.roles).id) : i.actor = _.first(e.documentInfo.document.recipients).contact.id);
        var c = g.createWidgetInfo(i, e.documentInfo, o);
        c.editable = !0,
        c.draggable = !0,
        c.resizable = !0,
        c.isSettingEditable = !0,
        c.created = !0,
        w(c),
        m.createWidget(o).then(function(e) {
            if (c.dragging || c.resizing || c.isMoving) {
                var n, t = function() {
                    v(c, e, o)
                }
                ;
                n = c.dragging ? "dragging" : c.resizing ? "resizing" : "isMoving",
                b(c, n, t)
            } else
                v(c, e, o)
        }
        , function() {
            k(c)
        }
        )
    }
    )),
    e.$on("widget.delete", function(n, o) {
        t.removeWidget(o.widget.id).then(function() {
            k(o),
            c.assignType(e.documentInfo.document.recipients, e.documentInfo.widgetsInfo)
        }
        )
    }
    );
    var b = function(n, t, o) {
        e.observable = n;
        var i = e.$watch("observable." + t, function(n) {
            n || (i(),
            o(),
            e.observable = null )
        }
        )
    }
      , v = function(o, i, a) {
        var s = g.createWidgetInfo(i, e.documentInfo, a);
        o.highlighted && !y && (s.created = !0),
        k(o),
        w(s),
        n.$broadcast("widget.added", s);
        var l = ["actor", "role", "title", "required", "properties", "data", "position", "size", "content"];
        h(o, s, l) && (_.assign(s.widget, _.pick(o.widget, l)),
        t.updateWidget(s.widget)),
        c.assignType(e.documentInfo.document.recipients, e.documentInfo.widgetsInfo),
        a.block && a.block.type.handle === r.BLOCK_TYPES.PDF && p(function() {
            s.widget.size.pdf = f.calculateWidgetSizeInPdf(s.widget),
            s.widget.position.pdf = f.calculateWidgetPositionInPdf(s.widget),
            t.updateWidget(s.widget)
        }
        )
    }
      , h = function(e, n, t) {
        return _.any(t, function(t) {
            return e.widget[t] && !_.isEqual(e.widget[t], n.widget[t])
        }
        )
    }
      , w = function(t) {
        e.documentInfo.widgetsInfo.push(t),
        t.widget.id ? n.$broadcast("widget.created", t) : n.$broadcast("widget.placeholder.created", t)
    }
      , k = function(t) {
        var o = e.documentInfo.widgetsInfo.indexOf(t);
        e.documentInfo.widgetsInfo.splice(o, 1),
        t.widget.id ? n.$broadcast("widget.deleted", t) : n.$broadcast("widget.placeholder.deleted", t)
    }
      , y = !1;
    e.$on("widget.drag.from.doctools.started", function() {
        y = !0
    }
    ),
    e.$on("widget.drag.from.doctools.ended", function() {
        y = !1
    }
    ),
    e.$on("block.drag.from.doctools.started", function() {
        y = !0
    }
    ),
    e.$on("block.drag.from.doctools.ended", function() {
        y = !1
    }
    );
    var I = function(t, o) {
        var i = _.find(e.documentInfo.widgetsInfo, {
            highlighted: !0
        });
        i && (t.preventDefault(),
        n.$broadcast("move.widget", {
            widgetInfo: i,
            direction: o
        }))
    }
    ;
    _.each(_.values(r.DIRECTIONS), function(n) {
        l.bind(e, n, function(t) {
            e.documentInfo.permissions.canEditAllWidgets && I(t, n)
        }
        )
    }
    );
    var C = function(t) {
        if (e.documentInfo.permissions.canEditAllWidgets) {
            var o = _.find(e.documentInfo.widgetsInfo, {
                focused: !0
            });
            o && o.widget.id && (t.preventDefault(),
            i.confirm({
                text: "Remove this field?",
                okText: "Remove",
                noText: "Cancel"
            }).then(function() {
                n.$broadcast("widget.delete", o)
            }
            ))
        }
    }
    ;
    l.bind(e, "del", C),
    l.bind(e, "backspace", C)
}
]),
angular.module("pd.documents").controller("DocumentPadWidgetsDndController", ["$scope", "WidgetRegistry", "Constants", "WidgetUtility", "$rootScope", "$filter", "ContextService", "DocumentPadWidgetsService", function(e, n, t, o, i, a, s, l) {
    var r, c = "widget--drag-preview";
    e.dragOver = function(o, i) {
        var a = i.draggable.data("widgetType");
        if (!_.isUndefined(a)) {
            var s = $(".document-page__overlay").eq(e.currentPage.index - 1)
              , d = s.width()
              , u = n.createNewWidgetInstance(a)
              , m = l.getLastCreatedWidget(e.documentInfo, a);
            m && _.assign(u.size, m.size),
            d = d || t.DOCUMENT.PAD.WIDTH,
            i.helper.addClass(c),
            r || (r = {
                width: i.helper.css("width"),
                height: i.helper.css("height")
            }),
            i.helper.css({
                width: d * u.size.width / 100 + "px",
                height: d * u.size.height / 100 + "px"
            })
        }
    }
    ,
    e.dragOut = function(e, n) {
        n.helper.removeClass(c),
        n.helper.css({
            width: r.width,
            height: r.height
        }),
        r = null 
    }
    ,
    e.drop = function(t, l) {
        var r = l.draggable.data("widgetType");
        if (!_.isUndefined(r)) {
            var c, d = n.createNewWidgetInstance(r), u = l.helper.offset(), m = o.pageFromPoint({
                x: t.pageX,
                y: t.pageY
            }), p = m && !_.isUndefined(m.index) ? m.index : Number(e.currentPage.index) - 1;
            return c = m && m.content ? m.content : e.currentPage.content ? Number(e.currentPage.content) : e.documentInfo.document.revision.content.id,
            d.title = a("translate")("widget.type." + d.type),
            d.content = c,
            i.$broadcast("widget.create", {
                widget: d,
                offset: u,
                pageIndex: p,
                documentId: e.documentInfo.document.id,
                isTemplate: s.isTemplates()
            }),
            !0
        }
    }
    ,
    e.$on("widget.add", function(n, t) {
        var o = t.widget;
        o.content = e.currentPage.content;
        var a = {
            widget: o,
            pageIndex: Number(e.currentPage.index) - 1,
            defaults: {
                top: e.widgetPlaceholderPosition
            },
            documentId: e.documentInfo.document.id,
            isTemplate: s.isTemplates()
        };
        i.$broadcast("widget.create", a)
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentPadWidgetsNavigationController", ["$scope", "$element", "Constants", "$timeout", "$rootScope", "WidgetHighlightService", "ContextService", "Config", function(e, n, t, o, i, a, s, l) {
    var r = function(n) {
        return e.documentInfo.isSentAndNotCompleted ? n.editable : e.documentInfo.isDraft
    }
      , c = function() {
        var n = [];
        return e.pages ? n = _.reduce(e.pages, function(e, n) {
            return n.isLoaded ? n.widgetsInfo ? e.concat(n.widgetsInfo) : [] : e
        }
        , []) : e.documentInfo.blockList && (n = _.reduce(e.documentInfo.blockList.blocks, function(e, n) {
            return n.widgetsInfo && !n.is_locked ? e.concat(n.widgetsInfo) : e
        }
        , [])),
        _.filter(n, r)
    }
      , d = function(e) {
        if (e && !_.isEmpty(e)) {
            var n = _.find(e, {
                highlighted: !0
            });
            return n && _.last(e) !== n ? e[e.indexOf(n) + 1] : _.first(e)
        }
    }
      , u = function(n) {
        if (e.documentInfo) {
            var t = d(c());
            t && (n.preventDefault(),
            n.stopPropagation(),
            a.highlightWidget(t.widget))
        }
    }
      , m = function(e) {
        e && 9 === e.keyCode && u(e)
    }
      , p = angular.element(l.application.embed ? document : n);
    p.bind("keydown", m),
    e.$on("$destroy", function() {
        p.unbind("keydown", m)
    }
    )
}
]),
angular.module("pd.documents").directive("documentPadBottomPanel", [function() {
    var e = "/views/documents/pad/panels/includes/";
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/documents/pad/panels/document-pad-bottom-panel.html",
        scope: {
            documentInfo: "="
        },
        controller: ["$scope", "Constants", "$rootScope", "Config", function(n, t, o, i) {
            var a = angular.noop;
            n.visible = !1,
            n.$watch("documentInfo", function(o) {
                if (o) {
                    a();
                    var i = n.documentInfo.document.type;
                    if (i !== t.DOCUMENT.TYPE.DOCUMENT && i !== t.DOCUMENT.TYPE.EDITABLE_DOCUMENT)
                        return;
                    o.isRecipientInSigningOrder ? l() ? (n.visible = !0,
                    n.layout = e + "document-been-edit.html") : o.isWaitingForApproval && !o.isApprover ? (n.visible = !0,
                    n.layout = e + "document-waiting-for-approval.html") : o.isApproved ? (n.visible = !0,
                    n.layout = e + "document-approved.html") : o.isRejected ? (n.visible = !0,
                    n.layout = e + "document-rejected.html") : n.visible = !1 : (n.visible = !0,
                    n.layout = e + "document-opened-out-of-turn.html")
                }
            }
            ),
            n.$on("document.edit.completed", function() {
                n.visible = !0,
                n.layout = e + "document-edit-completed.html"
            }
            ),
            n.$on("document.already.approved.or.rejected", function() {
                n.visible = !0,
                n.layout = e + "document-already-approved-or-rejected.html"
            }
            ),
            n.$on("document.sent", function() {
                n.visible = !1
            }
            ),
            n.$on("document.sent.for.approval", function() {
                n.visible = !1
            }
            ),
            n.$on("document.approved", function() {
                n.visible = !1
            }
            ),
            n.$on("document.rejected", function() {
                n.visible = !1
            }
            ),
            n.$on("document.newrevision", function() {
                n.visible = !1
            }
            );
            var s = function() {
                return i.application.viewer || i.application.session_view
            }
              , l = function() {
                var e = t.DOCUMENT.STATUS.DRAFT === n.documentInfo.document.status;
                return e && (s() || !n.documentInfo.isOwner)
            }
        }
        ]
    }
}
]),
angular.module("pd.documents").controller("DocumentApprovedPanelController", ["$scope", "DocumentLifecycleService", "DocumentsService", "Constants", "$rootScope", "ContextService", "ProfileService", "RecipientService", function(e, n, t, o, i, a, s, l) {
    e.sendDocument = function() {
        n.send(e.documentInfo)
    }
    ,
    e.selfCompleteDocument = function() {
        n.selfComplete(e.documentInfo)
    }
    ,
    t.getAuditTrail(e.documentInfo.document).then(function(n) {
        e.event = _.last(_.filter(n, {
            action: o.AUDIT_TRAIL.ACTIONS.APPROVED
        }))
    }
    ),
    e.openTimeline = function() {
        a.openDocTool("tools-timeline").then(function() {
            i.$broadcast("open.audit.trail")
        }
        )
    }
    ,
    s.getProfile().then(function(n) {
        e.isSelfComplete = l.isOnlyRecipient(n, e.documentInfo.document.recipients)
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentBeenEditPanelController", ["$scope", "$rootScope", "Constants", function(e, n, t) {
    e.$on("notification." + t.NOTIFICATION.TYPE.ACTION, function(o, i) {
        i.document && i.type === t.DOCUMENT.ACTION.SENT && i.document.id === e.documentInfo.document.id && n.$broadcast("document.edit.completed")
    }
    )
}
]),
angular.module("pd.documents").controller("DocumentEditCompletedPanelController", ["$scope", "$rootScope", function(e, n) {
    e.reloadDocument = function() {
        n.$broadcast("document.newrevision", {
            newContent: !0
        })
    }
}
]),
angular.module("pd.documents").controller("DocumentRejectedPanelController", ["$scope", "Constants", "$rootScope", "DocumentsService", "ContextService", function(e, n, t, o, i) {
    e.editDocument = function() {
        var i = e.documentInfo.document;
        e.working = !0,
        o.newRevision(i.id, {
            type: n.REVISIONS.COPY
        }).then(function() {
            t.$broadcast("document.newrevision"),
            e.working = !1
        }
        )
    }
    ,
    o.getAuditTrail(e.documentInfo.document).then(function(t) {
        e.event = _.last(_.filter(t, {
            action: n.AUDIT_TRAIL.ACTIONS.REJECTED
        }))
    }
    ),
    e.openTimeline = function() {
        i.openDocTool("tools-timeline").then(function() {
            t.$broadcast("open.audit.trail")
        }
        )
    }
}
]),
angular.module("pd.documents").controller("DocumentWaitingForApprovalPanelController", ["$scope", "Constants", "$rootScope", "DocumentsService", "ContextService", "ConfirmationService", function(e, n, t, o, i, a) {
    var s = function() {
        var i = e.documentInfo.document;
        e.working = !0,
        o.newRevision(i.id, {
            type: n.REVISIONS.COPY
        }).then(function() {
            t.$broadcast("document.newrevision"),
            e.working = !1
        }
        )
    }
    ;
    e.editDocument = function() {
        a.confirm({
            title: "Are you sure to edit this document?",
            text: "If you edit this document, current approval process will be canceled.",
            okText: "Edit document",
            noText: "Cancel"
        }).then(s)
    }
}
]),
angular.module("pd.documents").service("DocumentInfoFactory", ["Constants", "DocumentUtils", "WidgetUtility", "Config", function(e, n, t, o) {
    var i = function(e) {
        return e.revision.content.block_list ? e.revision.content.block_list : null 
    }
      , a = function(e, o, a) {
        return {
            isDocument: !0,
            document: e,
            blockList: i(e),
            actor: a,
            isDraft: n.isDraft(e),
            isWaitingForApproval: n.isWaitingForApproval(e),
            isApproved: n.isApproved(e),
            isRejected: n.isRejected(e),
            isSent: n.isSent(e),
            isViewed: n.isViewed(e),
            isCompleted: n.isCompleted(e),
            isSentOrCompleted: n.isSent(e) || n.isViewed(e) || n.isCompleted(e),
            isSentAndNotCompleted: n.isSent(e) || n.isViewed(e),
            isOwner: n.isOwner(e, o) || n.isFromMyWorkspace(e, o) && (c() || d()),
            isRecipient: n.isRecipient(e, a),
            isSigner: n.isSigner(e, a),
            isApprover: n.isApprover(e, o),
            isRecipientCompletedDocument: n.isRecipientCompletedDocument(e, a),
            isRecipientInSigningOrder: n.isRecipientInSigningOrder(e, a),
            permissions: n.getDocumentPermissions(e, o, a),
            getRecipientWidgets: function(e) {
                return _.filter(e, function(e) {
                    return t.recipientWidgets(e, a)
                }
                )
            },
            isActionPanelVisible: function(e) {
                return this.isSentOrCompleted && this.isRecipient && this.isRecipientInSigningOrder && !_.isEmpty(t.actorWidgets(e, a))
            },
            isFromMyWorkspace: n.isFromMyWorkspace(e, o)
        }
    }
      , s = function(e, t) {
        return {
            isTemplate: !0,
            document: e,
            blockList: i(e),
            roles: e.roles,
            isDraft: !0,
            isWaitingForApproval: !1,
            isApproved: !1,
            isRejected: !1,
            isSent: !1,
            isViewed: !1,
            isCompleted: !1,
            isOwner: n.isOwner(e, t) || c() || d(),
            isRecipient: !1,
            isSigner: !1,
            isApprover: !1,
            isSentOrCompleted: !1,
            isSentAndNotCompleted: !1,
            isRecipientCompletedDocument: !1,
            isRecipientInSigningOrder: !0,
            permissions: n.getTemplatePermissions(e, t),
            isActionPanelVisible: function() {
                return !1
            },
            isFromMyWorkspace: n.isFromMyWorkspace(e, t)
        }
    }
      , l = function(e) {
        return {
            isDocument: !0,
            document: e,
            blockList: i(e),
            isDraft: !1,
            isWaitingForApproval: !1,
            isApproved: !1,
            isRejected: !1,
            isSent: !0,
            isViewed: !1,
            isCompleted: !1,
            isSentOrCompleted: !0,
            isSentAndNotCompleted: !0,
            isOwner: !1,
            isRecipient: !0,
            isSigner: !0,
            isApprover: !1,
            isRecipientCompletedDocument: !1,
            isRecipientInSigningOrder: !0,
            permissions: n.getEmbeddedTemplatePermissions(),
            isActionPanelVisible: function() {
                return !0
            },
            getRecipientWidgets: function(e) {
                return e
            },
            isFromMyWorkspace: !1
        }
    }
      , r = function(e, t) {
        return {
            isDocument: !0,
            document: e,
            blockList: i(e),
            isDraft: !0,
            isWaitingForApproval: !1,
            isApproved: !1,
            isRejected: !1,
            isSent: !1,
            isViewed: !1,
            isCompleted: !1,
            isOwner: n.isOwner(e, t) || c() || d(),
            isRecipient: !1,
            isSigner: !1,
            isApprover: !1,
            isSentOrCompleted: !1,
            isSentAndNotCompleted: !1,
            isRecipientCompletedDocument: !1,
            isRecipientInSigningOrder: !0,
            isActionPanelVisible: function() {
                return !1
            },
            permissions: n.getTemplatePermissions(e, t),
            isFromMyWorkspace: n.isFromMyWorkspace(e, t)
        }
    }
      , c = function() {
        return o.userRole === e.ROLES.OWNER
    }
      , d = function() {
        return o.userRole === e.ROLES.ADMIN
    }
    ;
    this.createDocumentInfo = function(e) {
        return a(e.document, e.user, e.actor)
    }
    ,
    this.createTemplateInfo = function(e) {
        return s(e.document, e.user)
    }
    ,
    this.cretateEmbeddedTemplateInfo = function(e) {
        return l(e.document)
    }
    ,
    this.createLibraryItemInfo = function(e) {
        return r(e.document, e.user)
    }
}
]),
angular.module("pd.documents").service("DocumentUtils", ["Constants", "Config", function(e, n) {
    var t = e.DOCUMENT.STATUS
      , o = this;
    this.isDraft = function(e) {
        return e.status === t.DRAFT
    }
    ,
    this.isWaitingForApproval = function(e) {
        return e.status === t.WAITING_APPROVAL
    }
    ,
    this.isApproved = function(e) {
        return e.status === t.APPROVED
    }
    ,
    this.isRejected = function(e) {
        return e.status === t.REJECTED
    }
    ,
    this.isSent = function(e) {
        return e.status === t.SENT
    }
    ,
    this.isViewed = function(e) {
        return e.status === t.VIEWED
    }
    ,
    this.isCompleted = function(e) {
        return e.status === t.COMPLETED
    }
    ,
    this.isOwner = function(e, n) {
        return !(!n || e.owner.id !== n.id)
    }
    ,
    this.isRecipient = function(e, n) {
        return !!s(e, n)
    }
    ,
    this.isSigner = function(n, t) {
        var o = s(n, t);
        return o && o.type === e.RECIPIENTS.TYPE.SIGNER
    }
    ,
    this.isFromMyWorkspace = function(e, n) {
        return n && n.workspace === e.workspace
    }
    ,
    this.isApprover = function(e, t) {
        if (!t)
            return !1;
        if (!e.approval)
            return !1;
        if (_.isEmpty(e.approval.moderators))
            return !1;
        var i = _.first(e.approval.moderators)
          , a = o.isFromMyWorkspace(e, t);
        return i.user ? i.user.id === t.id : a && i.role === n.userRole
    }
    ,
    this.isRecipientCompletedDocument = function(e, n) {
        var t = s(e, n);
        return !(!t || !t.is_done)
    }
    ,
    this.isRecipientInSigningOrder = function(e, n) {
        var t = s(e, n);
        if (!o.isSent(e) && !o.isViewed(e))
            return !0;
        if (!e.has_ordering)
            return !0;
        if (!t)
            return !0;
        var i = e.recipients.indexOf(t)
          , a = e.recipients.slice(0, i);
        return _.isEmpty(a) || _.all(a, {
            is_done: !0
        })
    }
    ;
    var i = function(e, n) {
        return !o.isSent(e) || o.isViewed(e) ? !1 : o.isRecipient(e, n) ? o.isRecipientCompletedDocument(e, n) ? !1 : o.isRecipientInSigningOrder(e, n) ? !1 : !0 : !1
    }
      , a = function(e, n) {
        return o.isOwner(e, n) || o.isFromMyWorkspace(e, n) && (l() || r())
    }
    ;
    this.getDocumentPermissions = function(e, n, t) {
        return {
            canEditDocumentContent: o.isDraft(e) && a(e, n),
            canEditAllWidgets: o.isDraft(e) && a(e, n),
            canFillMyWidgets: i(e, t),
            canSendForApproval: o.isDraft(e) && a(e, n),
            canApprove: o.isWaitingForApproval(e) && o.isApprover(e, n)
        }
    }
    ,
    this.getTemplatePermissions = function(e, n) {
        return {
            canEditDocumentContent: o.isDraft(e) && (o.isOwner(e, n) || l() || r()),
            canEditAllWidgets: o.isDraft(e) && (o.isOwner(e, n) || l() || r()),
            canFillMyWidgets: !1,
            canSendForApproval: !1,
            canApprove: !1
        }
    }
    ,
    this.getEmbeddedTemplatePermissions = function() {
        return {
            canEditDocumentContent: !1,
            canEditAllWidgets: !1,
            canFillMyWidgets: !0,
            canSendForApproval: !1,
            canApprove: !1
        }
    }
    ;
    var s = function(e, n) {
        return _.find(e.recipients, function(e) {
            return e.contact.id === n
        }
        )
    }
      , l = function() {
        return n.userRole === e.ROLES.OWNER
    }
      , r = function() {
        return n.userRole === e.ROLES.ADMIN
    }
}
]),
angular.module("pd.documents").service("PageFactory", ["Constants", "$sce", function(e, n) {
    this.createPageModel = function(t, o, i) {
        return _.isString(t) ? {
            content: i,
            number: o + 1,
            url: t,
            size: {
                width: e.DOCUMENT.PAD.WIDTH
            }
        } : t.svg ? {
            content: i,
            number: o + 1,
            html: n.trustAsResourceUrl(t.text),
            svg: n.trustAsResourceUrl(t.svg),
            img: n.trustAsResourceUrl(t.img),
            size: {
                width: e.DOCUMENT.PAD.WIDTH
            }
        } : void 0
    }
}
]),
angular.module("pd.documents").service("DocumentPadControllersService", ["DocumentPadWidgetsService", "BlockWidgetsService", function(e, n) {
    var t = {
        controller: [{
            name: "DocumentCustomCssController"
        }, {
            name: "DocumentPadUserActivityController"
        }, {
            name: "DocumentPadAnalyticsController"
        }, {
            name: "DocumentPadGarbageController"
        }, {
            name: "DocumentPadMessagesController"
        }],
        link: [{
            name: "DocumentPadResizeController"
        }, {
            name: "DocumentPadWidgetsNavigationController"
        }, {
            name: "DocumentPadScrollController"
        }]
    }
      , o = {
        controller: [{
            name: "DocumentPadWidgetsController",
            injections: {
                service: e
            }
        }, {
            name: "DocumentPadWidgetsDndController"
        }, {
            name: "DocumentPadContentController"
        }],
        link: [{
            name: "DocumentPadClickController"
        }]
    }
      , i = {
        controller: [{
            name: "DocumentPadWidgetsController",
            injections: {
                service: e
            }
        }, {
            name: "DocumentPadWidgetsDndController"
        }, {
            name: "DocumentPadContentController"
        }],
        link: [{
            name: "DocumentPadClickController"
        }]
    }
      , a = {
        controller: [{
            name: "DocumentPadWidgetsController",
            injections: {
                service: n
            }
        }],
        link: [{
            name: "DocumentPadEditableContentController"
        }]
    }
      , s = function(e, n) {
        var s = [].concat(t[n]);
        return s.concat(e.isStaticContent ? o[n] : e.isBoxContent ? i[n] : a[n])
    }
    ;
    this.getControllers = function(e) {
        return s(e, "controller")
    }
    ,
    this.getLinkFunctionControllers = function(e) {
        return s(e, "link")
    }
}
]),
angular.module("pd.documents").service("DocumentPadWidgetsService", ["WidgetsService", function(e) {
    this.calculateWidgetPosition = function(e) {
        var n, t, o = e.widget, i = e.offset, a = e.pageIndex, s = e.defaults;
        if (!i)
            return n = s.top,
            0 > n ? n = 0 : n + o.size.height > 100 && (n = 100 - o.size.height),
            {
                top: n,
                page: a + 1
            };
        var l = $('.document-page[data-page-content="' + o.content + '"][data-page-num="' + (a + 1) + '"]').find(".document-page__overlay")
          , r = l.offset()
          , c = {
            width: l.width(),
            height: l.height()
        };
        return n = (i.top - r.top) / c.height * 100,
        0 > n ? n = 0 : n + o.size.height > 100 && (n = 100 - o.size.height),
        t = (i.left - r.left) / c.width * 100,
        0 > t ? t = 0 : t + o.size.width > 100 && (t = 100 - o.size.width),
        {
            page: a + 1,
            left: t,
            top: n
        }
    }
    ,
    this.createWidget = function(n) {
        return e.addWidget(n)
    }
    ,
    this.getLastCreatedWidget = function(e, n) {
        if (!_.isEmpty(e.widgetsInfo)) {
            var t = _.filter(e.widgetsInfo, function(e) {
                return e.widget.type === n
            }
            );
            if (!_.isEmpty(t))
                return _.last(t).widget
        }
    }
}
]),
angular.module("pd.documents").service("DocumentUpdateStatus", ["$q", "$interval", function(e, n) {
    var t = 0;
    this.onDocumentUpdateStarted = function() {
        t += 1
    }
    ,
    this.onDocumentUpdateFinished = function() {
        t -= 1
    }
    ,
    this.onDocumentUpdateFailed = function() {
        t = 0
    }
    ,
    this.whenReady = function() {
        var o = e.defer();
        if (0 === t)
            o.resolve();
        else {
            var i = n(function() {
                0 === t && (n.cancel(i),
                o.resolve())
            }
            , 200, 50);
            i.then(function() {
                o.resolve(),
                t = 0
            }
            )
        }
        return o.promise
    }
}
]).run(["$rootScope", "Constants", "DocumentUpdateStatus", function(e, n, t) {
    var o = ["block", "widgets", "pricingtable", "block_list"]
      , i = ["patch", "post", "remove"]
      , a = function(e, n) {
        return -1 !== i.indexOf(n) && _.any(o, function(n) {
            return -1 !== e.indexOf(n)
        }
        )
    }
    ;
    e.$on(n.EVENTS.REQUEST, function(e, n, o) {
        a(n, o) && t.onDocumentUpdateStarted()
    }
    ),
    e.$on(n.EVENTS.RESPONSE, function(e, n, o) {
        a(n, o) && t.onDocumentUpdateFinished()
    }
    ),
    e.$on(n.EVENTS.REQUEST_ERROR, t.onDocumentUpdateFailed)
}
]),
angular.module("pd.documents").service("DocumentAlertsService", ["AlertService", "NoAssignedWidgetsDialog", "EmptyWidgetsDialog", "WidgetHighlightService", "ProfileService", "ModalService", "Config", "WorkspacesService", "SubscriptionService", "scrollToElement", "ExternalService", function(e, n, t, o, i, a, s, l, r, c, d) {
    var u = function(e, n) {
        e = _.isArray(e) ? e : [e],
        o.highlightWidgetAndEdit(e, n)
    }
      , m = function(e) {
        var n = angular.element(".document")
          , t = "#" + e.id;
        c(n, t, {
            duration: 50,
            offset: -100
        })
    }
    ;
    this.alertInvalidWidgetValue = function(n, t) {
        var o = _.first(n);
        return e.alert({
            title: "Invalid value",
            text: o.message
        }).then(function() {
            u(o.widgetInfo, t)
        }
        )
    }
    ,
    this.alertNonAssignedWidgets = function(e, t) {
        var o = _.map(e, "widgetInfo");
        return n.open(t, o)
    }
    ,
    this.alertEmptyWidgets = function(e, n) {
        var o = _.map(e, "widgetInfo");
        t.open(o, n)
    }
    ,
    this.alertNoRecipients = function() {
        return e.alert({
            title: "Unable to send the document",
            text: "Please add the recipient(-s) to whom you would like to send this document."
        })
    }
    ,
    this.alertUserEmailNotVerified = function() {
        i.getProfile().then(function(e) {
            a.open({
                resolve: {
                    profile: function() {
                        return e
                    }
                },
                controller: "EmailNotVerifiedController",
                templateUrl: "/views/documents/email-not-verified.html"
            })
        }
        )
    }
    ,
    this.alertUserOutOfDocs = function() {
        a.open({
            templateUrl: "/views/documents/send-unavailable-out-of-docs.html",
            controller: ["$scope", "Constants", function(e, n) {
                e.isOwner = s.userRole === n.ROLES.OWNER,
                e.billingUrl = "#/settings/billing/",
                e.rewardsUrl = "#/settings/rewards/",
                e.isSdk = d.hasConnection(),
                e.isSdk && (e.billingUrl = s.applicationUrl + e.billingUrl,
                e.rewardsUrl = s.applicationUrl + e.rewardsUrl,
                e.target = "_blank")
            }
            ]
        })
    }
    ,
    this.alertUserSubscriptionSuspended = function() {
        a.open({
            templateUrl: "/views/documents/send-unavailable-subscription-suspended.html",
            controller: ["$scope", "Constants", function(e, n) {
                e.isOwner = s.userRole === n.ROLES.OWNER,
                l.getWorkspace().then(function(n) {
                    e.billingUrl = r.getCreditCardDetailsUrl(n.subscription),
                    e.isSdk = d.hasConnection(),
                    e.isSdk && (e.billingUrl = s.applicationUrl + e.billingUrl,
                    e.target = "_blank")
                }
                )
            }
            ]
        })
    }
    ,
    this.alertInvalidBlockContent = function(n) {
        var t = _.first(n);
        return e.alert({
            title: "Invalid content",
            text: t.message
        }).then(function() {
            m(t.block)
        }
        )
    }
    ,
    this.alertNoModeratorsForApproval = function() {
        return e.alert({
            title: "Please configure Approval process",
            text: "Please select a user Role or specific team member who should approve this document. When Role selected, any user from your team with specified Role will be able to approve a document created from this template."
        })
    }
}
]),
angular.module("pd.documents").service("DocumentLifecycleService", ["$injector", "SelfCompleteDocumentAction", "SendDocumentAction", "CompleteDocumentAction", function(e, n, t, o) {
    this.selfComplete = function(e) {
        return n.complete(e)
    }
    ,
    this.send = function(e) {
        return t.send(e)
    }
    ,
    this.complete = function(e, n) {
        return o.complete(e, n)
    }
    ,
    this.sendForApproval = function(n) {
        var t = e.get("SendForApprovalDocumentAction");
        return t.sendForApproval(n)
    }
    ,
    this.approve = function(n) {
        var t = e.get("ApprovalDocumentAction");
        t.approve(n)
    }
    ,
    this.reject = function(n) {
        var t = e.get("RejectDocumentAction");
        t.reject(n)
    }
}
]),
angular.module("pd.documents").service("DocumentErrorService", ["DocumentAlertsService", "AlertService", "ProfileService", function(e, n, t) {
    var o = {
        "email-not-verified": function() {
            t.resendVerificationEmail(),
            e.alertUserEmailNotVerified()
        },
        "doc-limit-exceeded": e.alertUserOutOfDocs,
        "subscription-inactive": e.alertUserSubscriptionSuspended,
        "default": function() {
            n.alert({
                title: "Unable to send document",
                text: "Unfortunately we are unable to send document now. Please try again later. Document will stay in a current state."
            })
        }
    };
    this.handleError = function(e) {
        if (e && e.data && e.data.detail && e.data.detail.code) {
            var n = o[e.data.detail.code] || o["default"];
            n()
        }
    }
}
]),
angular.module("pd.documents").service("ApprovalDocumentAction", ["DocumentApprovalDialog", function(e) {
    this.approve = function(n) {
        e.approve(n)
    }
}
]),
angular.module("pd.documents").service("CompleteDocumentAction", ["ModalService", "DocumentsService", "ContextService", "$rootScope", "ConfirmationService", "DocumentUpdateStatus", "DocumentAlertsService", "DocumentWidgetsValidationService", "Constants", "DocumentBlocksValidationService", function(e, n, t, o, i, a, s, l, r, c) {
    var d = {
        validateEmpty: !0
    };
    this.complete = function(e, t) {
        var o = _.filter(e.widgetsInfo, function(e) {
            return e.widget.actor === t.contact.id
        }
        )
          , i = l.validateWidgets(o, d)
          , u = _.filter(i, {
            type: r.WIDGET.ERROR_TYPE.INVALID_VALUE
        })
          , m = _.filter(i, {
            type: r.WIDGET.ERROR_TYPE.EMPTY
        })
          , p = c.validateDocumentBlocks(e);
        if (_.isEmpty(p))
            if (_.isEmpty(u)) {
                if (_.isEmpty(m))
                    return a.whenReady().then(function() {
                        return n.completeDocument(e.document.id, t.id)
                    }
                    );
                s.alertEmptyWidgets(m, e)
            } else
                s.alertInvalidWidgetValue(u, e);
        else
            s.alertInvalidBlockContent(p)
    }
}
]),
angular.module("pd.documents").service("RejectDocumentAction", ["DocumentApprovalDialog", function(e) {
    this.reject = function(n) {
        e.reject(n)
    }
}
]),
angular.module("pd.documents").service("SelfCompleteDocumentAction", ["ModalService", "DocumentsService", "ContextService", "$rootScope", "ConfirmationService", "DocumentAlertsService", "DocumentUpdateStatus", "DocumentWidgetsValidationService", "DocumentErrorService", "Constants", "DocumentBlocksValidationService", function(e, n, t, o, i, a, s, l, r, c, d) {
    var u = {
        validateNonAssigned: !0,
        validateEmpty: !0
    }
      , m = function(e) {
        var n = l.validateWidgets(e.widgetsInfo, u)
          , t = d.validateDocumentBlocks(e)
          , o = _.filter(n, {
            type: c.WIDGET.ERROR_TYPE.INVALID_VALUE
        })
          , i = _.filter(n, {
            type: c.WIDGET.ERROR_TYPE.NON_ASSIGNED
        })
          , s = _.filter(n, {
            type: c.WIDGET.ERROR_TYPE.EMPTY
        });
        _.isEmpty(t) ? _.isEmpty(o) ? _.isEmpty(i) ? _.isEmpty(s) ? p(e) : a.alertEmptyWidgets(s, e) : a.alertNonAssignedWidgets(i, e).then(function() {
            m(e)
        }
        ) : a.alertInvalidWidgetValue(o, e) : a.alertInvalidBlockContent(t)
    }
    ;
    this.complete = m;
    var p = function(e) {
        i.confirm({
            title: "All done?",
            text: "Would you like to complete this document?",
            okText: "Complete",
            noText: "Cancel"
        }).then(function() {
            s.whenReady().then(function() {
                n.sendDocument({
                    documentId: e.document.id
                }).then(function() {
                    var t = _.filter(e.widgetsInfo, function(e) {
                        return !e["static"]
                    }
                    );
                    _.isEmpty(t) ? g(e) : n.completeDocument(e.document.id, _.first(e.document.recipients).id).then(function() {
                        g(e)
                    }
                    , r.handleError)
                }
                , r.handleError)
            }
            )
        }
        )
    }
      , g = function(e) {
        e && (o.$broadcast("actor.completed.document"),
        t.openDocTool("tools-timeline", {
            documentId: e.document.id
        }))
    }
}
]),
angular.module("pd.documents").service("SendDocumentAction", ["ModalService", "DocumentsService", "ContextService", "$rootScope", "ConfirmationService", "ProfileService", "DocumentAlertsService", "DocumentWidgetsValidationService", "Constants", "DocumentBlocksValidationService", function(e, n, t, o, i, a, s, l, r, c) {
    var d = {
        validateNonAssigned: !0
    }
      , u = function(e) {
        a.getProfile().then(function(n) {
            var o = e.document.recipients.length
              , i = m(e, n)
              , a = l.validateWidgets(e.widgetsInfo, d)
              , g = c.validateDocumentBlocks(e)
              , b = _.filter(a, {
                type: r.WIDGET.ERROR_TYPE.INVALID_VALUE
            })
              , h = _.filter(a, {
                type: r.WIDGET.ERROR_TYPE.NON_ASSIGNED
            });
            _.isEmpty(g) ? _.isEmpty(b) ? 0 === o ? s.alertNoRecipients().then(function() {
                t.openDocTool("tools-people")
            }
            ) : _.isEmpty(h) ? p(i, e) ? v(e, i) : f(e) : s.alertNonAssignedWidgets(h, e).then(function() {
                u(e)
            }
            ) : s.alertInvalidWidgetValue(b, e) : s.alertInvalidBlockContent(g)
        }
        )
    }
    ;
    this.send = u;
    var m = function(e, n) {
        return _.find(e.document.recipients, function(e) {
            return e.contact.email === n.email
        }
        )
    }
      , p = function(e, n) {
        if (!e || e.type !== r.RECIPIENTS.TYPE.SIGNER)
            return !1;
        var t = _.filter(n.widgetsInfo, function(n) {
            return n.widget.actor === e.contact.id
        }
        )
          , o = _.any(t, function(e) {
            return e.widget.type === r.WIDGET.SIGNATURE || e.widget.type === r.WIDGET.INITIALS
        }
        )
          , i = _.any(t, function(e) {
            return e.widget.required && (!e.widget.data || !e.widget.data.value)
        }
        )
          , a = o && !i;
        if (n.document.has_ordering) {
            var s = n.document.recipients.indexOf(e)
              , l = n.document.recipients.slice(0, s);
            return a && _.all(l, {
                type: r.RECIPIENTS.TYPE.CC
            })
        }
        return a
    }
      , g = function(n, t, o) {
        var i = {
            controller: "DocumentSendController",
            templateUrl: "/views/doctools/send/send-dialog.html",
            resolve: {
                documentInfo: function() {
                    return n
                },
                finalize: function() {
                    return t
                },
                recipient: function() {
                    return o
                }
            }
        };
        e.open(i)
    }
      , f = function(e) {
        g(e)
    }
      , b = function(e, n) {
        g(e, !0, n)
    }
      , v = function(e, n) {
        i.confirm({
            title: "All done?",
            text: "Would you like to complete your fields before sending out this document?",
            okText: "Complete fields before sending",
            noText: "Send without completing"
        }).then(function() {
            b(e, n)
        }
        , function() {
            f(e)
        }
        )
    }
}
]),
angular.module("pd.documents").service("SendForApprovalDocumentAction", ["ContextService", "$rootScope", "DocumentUpdateStatus", "DocumentAlertsService", "DocumentsApprovalService", "$filter", "ProfileService", "DocumentWidgetsValidationService", "Constants", "DocumentBlocksValidationService", "SendForApprovalDialog", "RecipientService", function(e, n, t, o, i, a, s, l, r, c, d, u) {
    var m = function(e) {
        return e ? {
            validateNonAssigned: !0,
            validateEmpty: !0
        } : {
            validateNonAssigned: !0
        }
    }
      , p = function(e, n) {
        return u.isOnlyRecipient(e, n.document.recipients)
    }
      , g = function(n) {
        s.getProfile().then(function(t) {
            var i = p(t, n)
              , a = n.document.recipients.length
              , s = l.validateWidgets(n.widgetsInfo, m(i))
              , u = c.validateDocumentBlocks(n)
              , f = _.filter(s, {
                type: r.WIDGET.ERROR_TYPE.INVALID_VALUE
            })
              , b = _.filter(s, {
                type: r.WIDGET.ERROR_TYPE.NON_ASSIGNED
            })
              , v = _.filter(s, {
                type: r.WIDGET.ERROR_TYPE.EMPTY
            });
            !n.document.approval || _.isEmpty(n.document.approval.moderators) ? o.alertNoModeratorsForApproval().then(function() {
                e.openDocTool("tools-workflow")
            }
            ) : _.isEmpty(u) ? _.isEmpty(f) ? 0 === a ? o.alertNoRecipients().then(function() {
                e.openDocTool("tools-people")
            }
            ) : _.isEmpty(b) ? i && !_.isEmpty(v) ? o.alertEmptyWidgets(v, n) : d.open(n) : o.alertNonAssignedWidgets(b, n).then(function() {
                g(n)
            }
            ) : o.alertInvalidWidgetValue(f, n) : o.alertInvalidBlockContent(u)
        }
        )
    }
    ;
    this.sendForApproval = g
}
]),
angular.module("pd.documents").service("DocumentBlocksValidationService", ["PricingTableValidator", "Constants", "$filter", function(e, n, t) {
    var o = {
        "default": {
            validator: function() {
                return !0
            }
        },
        pricingtable: {
            validator: function(n) {
                return e.validateTable(n.data)
            },
            message: t("translate")("block.validation.pricingtable")
        }
    }
      , i = function(e) {
        return _.reduce(e, function(e, n) {
            var t = o[n.type.handle] || o["default"];
            return t.validator(n) || e.push({
                block: n,
                message: t.message
            }),
            e
        }
        , [])
    }
    ;
    this.validateBlock = function(e) {
        return i([e])
    }
    ,
    this.validateBlocks = i,
    this.validateDocumentBlocks = function(e) {
        var t = e.document.type
          , o = n.DOCUMENT.TYPE;
        return o.EDITABLE_DOCUMENT === t || o.EDITABLE_TEMPLATE === t ? i(e.document.revision.content.block_list.blocks) : []
    }
}
]),
angular.module("pd.documents").service("DocumentWidgetsValidationService", ["Constants", "$filter", function(e, n) {
    var t = function(e) {
        var n = _.filter(e, {
            "static": !1
        });
        return _.filter(n, function(e) {
            return !e.widget.actor
        }
        )
    }
      , o = function(e) {
        var n = _.filter(e, {
            "static": !1
        });
        return _.filter(n, function(e) {
            return e.widget.required && (!e.widget.data || !e.widget.data.value)
        }
        )
    }
      , i = {
        validateNonAssigned: {
            validator: t,
            message: "Widget should be assigned",
            type: e.WIDGET.ERROR_TYPE.NON_ASSIGNED
        },
        validateEmpty: {
            validator: o,
            message: "Widget should not be empty",
            type: e.WIDGET.ERROR_TYPE.EMPTY
        }
    }
      , a = {
        "default": {
            validator: function() {
                return !0
            }
        }
    }
      , s = function(n) {
        if (!n.widget.data || !n.widget.data.value)
            return !0;
        var t = moment(n.widget.data.value);
        return t.isBefore(e.DATE.MAX) && t.isAfter(e.DATE.MIN)
    }
      , l = function(e) {
        var n = e.widget.properties && _.isArray(e.widget.properties.items) && e.widget.properties.items.length > 0;
        return !e.widget.required || n
    }
    ;
    a[e.WIDGET.DATE] = {
        validator: s,
        type: e.WIDGET.ERROR_TYPE.INVALID_VALUE,
        message: function(t) {
            return n("translate")("widget.validation." + t.widget.type, {
                min_date: e.DATE.MIN.format("MM/DD/YYYY"),
                max_date: e.DATE.MAX.format("MM/DD/YYYY")
            })
        }
    },
    a[e.WIDGET.DROPDOWN] = {
        validator: l,
        type: e.WIDGET.ERROR_TYPE.INVALID_VALUE,
        message: function(e) {
            return n("translate")("widget.validation." + e.widget.type)
        }
    };
    var r = function(e, n) {
        return {
            widgetInfo: e,
            message: _.isFunction(n.message) ? n.message(e) : n.message,
            type: n.type
        }
    }
      , c = function(e, n) {
        n = n || {};
        var t = []
          , o = _.reduce(n, function(e, n, t) {
            return n && i[t] && e.push(i[t]),
            e
        }
        , []);
        return _.each(o, function(n) {
            var o = n.validator(e);
            _.isEmpty(o) || (t = t.concat(_.map(o, function(e) {
                return r(e, n)
            }
            )))
        }
        ),
        _.each(e, function(e) {
            var n = a[e.widget.type] || a["default"]
              , o = n.validator(e);
            return o || t.push(r(e, n)),
            t
        }
        , t),
        t
    }
    ;
    this.validateWidget = function(e, n) {
        return c([e], n)
    }
    ,
    this.validateWidgets = c
}
]),
angular.module("pd.inbox", []).config(["$stateProvider", function(e) {
    e.state("inbox", {
        parent: "app.base",
        url: "^/inbox/",
        views: {
            "@app": {
                controller: "InboxController",
                templateUrl: "/views/inbox/inbox.html"
            }
        },
        breadcrumbs: [{
            name: "Inbox",
            url: "#/inbox/"
        }],
        data: {
            backgroundType: "default"
        }
    }),
    e.state("inbox.details", {
        parent: "app.base",
        url: "^/inbox/:documentId",
        views: {
            "@app": {
                controller: "DocumentDetailsController",
                templateUrl: "/views/documents/details.html"
            },
            "panel-right@inbox.details": {
                templateUrl: "/views/documents/tools-panel.html"
            },
            "panel-center@inbox.details": {
                templateUrl: "/views/documents/document.html"
            }
        },
        breadcrumbs: [{
            name: "Inbox",
            url: "#/inbox/"
        }, {
            ref: "document"
        }],
        data: {
            hasRightPanel: !0,
            hasDocToolsPanel: !0,
            hasDocStatusPanel: !0,
            backgroundType: "default"
        }
    })
}
]),
angular.module("pd.inbox").controller("InboxController", ["$scope", "DocumentsService", "AppAnalyticsService", "PermissionsService", "ConfirmationService", "Constants", "FoldersService", "DownloadService", "$rootScope", function(e, n, t, o, i, a, s, l, r) {
    t.track("Viewed Inbox");
    var c = moment()
      , d = function(e) {
        var n = moment().subtract(e, "days");
        return function(e) {
            return moment(e).isAfter(n)
        }
    }
      , u = function(e) {
        return c.isSame(e, "day")
    }
    ;
    e.periods = [{
        name: "documents.today",
        filter: u,
        documents: []
    }, {
        name: "documents.yesterday",
        filter: d(1),
        documents: []
    }, {
        name: "documents.last_7_days",
        filter: d(7),
        documents: []
    }, {
        name: "documents.last_30_days",
        filter: d(30),
        documents: []
    }, {
        name: "documents.older",
        filter: function() {
            return !0
        },
        documents: []
    }],
    e.visibleSectionsCount = function() {
        return _.reduce(e.periods, function(e, n) {
            return n.documents.length > 0 && (e += 1),
            e
        }
        , 0)
    }
    ,
    e.loading = !1,
    e.hasMoreDocuments = !0;
    var m = {
        page: 1,
        count: 20
    }
      , p = function(e) {
        return e.document.date_received = e.date_created,
        e.document.folder = e.folder,
        e.document
    }
    ;
    e.getDocuments = function() {
        !e.loading && e.hasMoreDocuments && (e.loading = !0,
        n.getInbox(m).then(function(n) {
            _.each(n, function(n) {
                var t = _.find(e.periods, function(e) {
                    return e.filter(n.date_created)
                }
                );
                t.documents.push(p(n))
            }
            ),
            e.hasMoreDocuments = n.next ? !0 : !1,
            e.loading = !1,
            m.page++,
            0 === n.length ? (e.isEmpty = m.q ? !1 : !0,
            e.isNotFound = !e.isEmpty) : (e.isEmpty = !1,
            e.isNotFound = !1)
        }
        ))
    }
    ;
    var g = function() {
        e.hasMoreDocuments = !0,
        m.page = 1,
        _.each(e.periods, function(e) {
            e.documents = []
        }
        ),
        e.getDocuments()
    }
      , f = function(n) {
        var t = _.find(e.periods, function(e) {
            return _.any(e.documents, function(e) {
                return e.id === n.id
            }
            )
        }
        );
        t && (t.documents = _.filter(t.documents, function(e) {
            return e.id !== n.id
        }
        )),
        angular.element(".scrollable").trigger("scroll")
    }
      , b = function(e) {
        i.confirm({
            text: 'Do you want to remove document "' + e.name + '"?'
        }).then(function() {
            e.removing = !0,
            n.remove(e.id, e.folder).then(function() {
                f(e),
                r.$broadcast("document.removed.from.inbox")
            }
            )
        }
        , function() {
            e.removing = !1
        }
        )
    }
    ;
    e.removeDocument = function(e) {
        o.checkPermissions(e, "remove").then(function() {
            b(e)
        }
        )
    }
    ,
    e.downloadDocument = function(e) {
        l.download({
            document: e,
            isRecipient: !0
        })
    }
    ,
    e.$on(a.GRID.FILTERING, function(e, n) {
        n.filter ? m.q = n.filter : delete m.q,
        g()
    }
    ),
    e.getDocuments(),
    e.$on("movetofolder", function(e, t) {
        var o = t.selected.folder.id || t.selected.folder
          , i = t.selected;
        i.moving = !0,
        n.move(i.id, o, t.folder.id).then(function() {
            f(i)
        }
        , function() {
            i.moving = !1
        }
        )
    }
    ),
    e.foldersService = s.getFoldersManager("documents")
}
]),
angular.module("pd.onboarding", ["youtube-embed"]),
angular.module("pd.onboarding").controller("JoinWebinarDialogController", ["$scope", "$state", function(e, n) {
    e.webinarJoined = !1,
    e.$on("join-webinar.joined", function() {
        e.webinarJoined = !0
    }
    ),
    e.goToDashboard = function() {
        e.close(),
        n.go("dashboard")
    }
}
]),
angular.module("pd.onboarding").controller("OnboardingCheckSampleDocumentController", ["$scope", "$rootScope", "$state", "OnboardingService", function(e, n, t, o) {
    e.checkSampleDocumentAction = function() {
        o.markOnboardingAsShown("dashboard-introduce-slides"),
        o.markOnboardingAsShown("qr-dashboard-introduce-slides"),
        n.sampleDocumentUuid ? t.go("inbox.details", {
            documentId: n.sampleDocumentUuid
        }) : t.go("documents"),
        e.close()
    }
}
]),
angular.module("pd.onboarding").controller("OnboardingGreetingController", ["$scope", "OnboardingService", "PropertiesService", function(e, n, t) {
    n.loadData(e),
    e.view = "/views/onboarding/views/" + e.onboardingId + ".html",
    e.$watch("analytics", function(e) {
        if (e) {
            var n = {}
              , o = e.level || "user";
            n["analytics_" + e.event] = !0,
            t.set(o, n)
        }
    }
    )
}
]),
angular.module("pd.onboarding").controller("OnboardingOrganizationInfoController", ["$scope", "PropertiesService", "Constants", "$rootScope", function(e, n, t, o) {
    var i = function() {
        n.set("organization", {
            "lead-ready": !0
        }),
        o.$broadcast("update.company.name")
    }
    ;
    e.industries = t.ONBOARDING.INDUSTRIES,
    e.organization = {
        company_name: null ,
        industry: null ,
        phone: null 
    },
    e.doneAction = function() {
        e.form.$valid && (n.set("organization", e.organization).then(i, i),
        e.close())
    }
}
]),
angular.module("pd.onboarding").controller("OnboardingPollController", ["$scope", "$rootScope", "OnboardingService", "PropertiesService", "DocumentsService", function(e, n, t, o, i) {
    t.loadData(e);
    var a = function() {
        e.nextStepTemplateUrl || e.close()
    }
      , s = function(e) {
        if (e) {
            var n = {}
              , t = e.level || "user";
            n["analytics_" + e.event] = !0,
            o.set(t, n)
        }
    }
    ;
    e.pollDone = !1,
    e.$watch("analytics", function(e) {
        s(e)
    }
    ),
    e.$watch("questions", function(n) {
        n && e.nextStepTemplateUrl && o.get().then(function(n) {
            var t = e.onboardingId + "-step-1";
            n[e.tag][t] && (e.pollDone = !0)
        }
        )
    }
    ),
    e.$on("onboarding-poll.done", function() {
        if (e.nextStepTemplateUrl) {
            e.pollDone = !0;
            var t = {};
            if (t[e.onboardingId + "-step-1"] = !0,
            o.set(e.tag, t),
            e.analytics) {
                var l = {
                    event: e.analytics.event += "-step-2"
                };
                s(_.extend(l, e.analytics))
            }
        }
        e.createSampleDocument ? i.createSampleDocument().then(function(e) {
            e && e.uuid && (n.sampleDocumentUuid = e.uuid),
            a()
        }
        , function() {
            a()
        }
        ) : a()
    }
    )
}
]),
angular.module("pd.onboarding").controller("OnboardingRequestDemoSlideContentController", ["$scope", "PropertiesService", "Config", function(e, n, t) {
    e.demoRequested = !1,
    e.webinarJoined = !1,
    e.bigCompanyOwner = !1,
    e.smallCompanyOwner = !1,
    e.member = !1,
    t.isWorkspaceOwner() ? n.get().then(function(n) {
        if (n && n.organization && n.organization.company_size) {
            var t = parseInt(n.organization.company_size)
              , o = t > 20;
            o ? e.bigCompanyOwner = !0 : e.smallCompanyOwner = !0,
            _.extend(e.slide, o ? e.slide.big_company : e.slide.small_company)
        }
    }
    ) : e.member = !0,
    e.$on("request-demo.requested", function() {
        e.demoRequested = !0
    }
    ),
    e.$on("join-webinar.joined", function() {
        e.webinarJoined = !0
    }
    )
}
]),
angular.module("pd.onboarding").controller("OnboardingSampleDocumentSlideController", ["$scope", "$rootScope", "$state", function(e, n, t) {
    e.checkSampleDocumentAction = function() {
        n.sampleDocumentUuid ? t.go("inbox.details", {
            documentId: n.sampleDocumentUuid
        }) : t.go("documents"),
        e.close()
    }
}
]),
angular.module("pd.onboarding").controller("OnboardingSlidesController", ["$scope", "OnboardingService", function(e, n) {
    e.videoPlayer = null ,
    n.loadData(e)
}
]),
angular.module("pd.onboarding").controller("RequestDemoDialogController", ["$scope", "$state", function(e, n) {
    e.demoRequested = !1,
    e.$on("request-demo.requested", function() {
        e.demoRequested = !0
    }
    ),
    e.goToDashboard = function() {
        e.close(),
        n.go("dashboard")
    }
}
]),
angular.module("pd.onboarding").directive("joinWebinar", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/onboarding/directives/join-webinar.html",
        scope: {
            showForm: "@"
        },
        controller: ["$scope", "$rootScope", "WebinarsService", "OnboardingService", function(e, n, t, o) {
            e.description = "";
            var i = function() {
                o.markOnboardingAsShown("join-webinar-banner"),
                n.$broadcast("join-webinar.joined")
            }
            ;
            e.joinWebinar = function() {
                t.joinWebinar().then(i, i)
            }
            ,
            t.getWebinarDescription().then(function(n) {
                n && n.description && n.description.length > 0 && (e.description = n.description)
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.common").directive("onboardingBanners", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/onboarding/directives/onboarding-banners.html",
        scope: {
            banners: "="
        },
        controller: ["$scope", "$rootScope", "$state", "OnboardingService", function(e, n, t, o) {
            var i = this;
            this.hideBanner = function() {
                o.markOnboardingAsShown(e.banner),
                e.banner = null ,
                n.$broadcast("onboarding-banners.hide")
            }
            ,
            e.banner = null ,
            o.banner(e.banners, function(t) {
                n.$broadcast("onboarding-banners.show"),
                e.banner = t
            }
            ),
            e.requestDemoAction = function() {
                o.dialog("request-demo-dialog")
            }
            ,
            e.$on("request-demo.requested", function() {
                "request-demo-banner" === e.banner && i.hideBanner()
            }
            ),
            e.joinWebinarAction = function() {
                o.dialog("join-webinar-dialog")
            }
            ,
            e.$on("join-webinar.joined", function() {
                "join-webinar-banner" === e.banner && i.hideBanner()
            }
            ),
            e.convertTemplateAction = function() {
                t.go("templates.convert")
            }
            ,
            e.inviteMembersAction = function() {
                t.go("settings.team")
            }
            ,
            e.closeAction = function() {
                e.banner && i.hideBanner()
            }
        }
        ]
    }
}
]),
angular.module("pd.onboarding").directive("onboardingPoll", ["PropertiesService", function(e) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/onboarding/directives/poll.html",
        scope: {
            questions: "="
        },
        controller: ["$scope", "$rootScope", function(n, t) {
            n.currentAnswer = "",
            n.$watch("questions", function(e) {
                _.isArray(e) && (n.currentQuestion = e.shift())
            }
            ),
            n.$watch("currentQuestion", function(n) {
                if (n && n.analytics) {
                    var t = {}
                      , o = n.analytics.level || "user";
                    t["analytics_" + n.analytics.event] = !0,
                    e.set(o, t)
                }
            }
            ),
            n.next = function() {
                if (n.currentAnswer) {
                    var o = {};
                    o[n.currentQuestion.id] = n.currentAnswer,
                    e.set(n.currentQuestion.tag, o),
                    n.currentAnswer = null ,
                    n.currentQuestion = _.isArray(n.questions) ? n.questions.shift() : null ,
                    n.currentQuestion || t.$broadcast("onboarding-poll.done")
                }
            }
        }
        ]
    }
}
]),
angular.module("pd.onboarding").directive("onboardingPollSinglePage", ["PropertiesService", function(e) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/onboarding/directives/poll-single-page.html",
        scope: {
            questions: "=",
            buttonTitle: "@"
        },
        controller: ["$scope", "$rootScope", function(n, t) {
            var o = function() {
                e.set("organization", {
                    "onboarding-poll-step-1-completed": !0
                })
            }
            ;
            n.doneAction = function() {
                if (n.form.$valid) {
                    var i, a = {};
                    _.each(n.questions, function(e) {
                        i || (i = e.tag),
                        a[e.id] = e.currentAnswer
                    }
                    ),
                    i || (i = "organization"),
                    e.set(i, a).then(o, o),
                    t.$broadcast("onboarding-poll.done")
                }
            }
        }
        ]
    }
}
]),
angular.module("pd.onboarding").directive("onboardingSlides", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/onboarding/directives/slides.html",
        scope: {
            slides: "="
        },
        controller: ["$scope", "$state", "$rootScope", "PropertiesService", "singleWatch", function(e, n, t, o, i) {
            e.playVideo = function(n) {
                t.$broadcast("onboarding-slides.play-video", n),
                e.videoUrl = n
            }
            ,
            e.closeVideo = function() {
                e.videoUrl = null 
            }
            ,
            e.headerTemplate = function(e) {
                var n = "";
                return n = e.headerTemplate ? "/views/onboarding/controllers/slides/" + e.header_template : "/views/onboarding/directives/slide-header.html"
            }
            ,
            e.contentTemplate = function(e) {
                var n = "";
                return n = e.content_template ? "/views/onboarding/controllers/slides/" + e.content_template : "/views/onboarding/directives/slide-content.html"
            }
            ,
            e.goToDashboard = function() {
                e.$parent.close(),
                n.go("dashboard")
            }
            ,
            e.close = function() {
                e.$parent.close()
            }
            ;
            var a = function(e) {
                if (e && e.analytics) {
                    var n = {}
                      , t = e.analytics.level || "user";
                    n["analytics_" + e.analytics.event] = !0,
                    o.set(t, n)
                }
            }
            ;
            e.$on("opened.slide", function(n, t) {
                i(e, "slides", function(e) {
                    a(e[t.index])
                }
                )
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.onboarding").directive("requestDemo", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/onboarding/directives/request-demo.html",
        scope: {
            showForm: "@"
        },
        controller: ["$scope", "$rootScope", "ProfileService", "IntercomService", "OnboardingService", "PropertiesService", function(e, n, t, o, i, a) {
            e.phoneModel = {
                phone: ""
            },
            t.getProfile().then(function(n) {
                n.phone_number ? e.phoneModel.phone = n.phone_number : a.get().then(function(n) {
                    n && n.organization && n.organization.phone && (e.phoneModel.phone = n.organization.phone)
                }
                )
            }
            ),
            e.showForm = e.showForm || !1,
            e.requestDemo = function() {
                if (e.phoneModel.phone) {
                    e.sending = !0;
                    var t = "Demo Requested: [" + e.phoneModel.phone + "]";
                    o.sendMessage(t).then(function() {
                        e.showForm = !1,
                        e.sending = !1,
                        n.$broadcast("request-demo.requested"),
                        i.markOnboardingAsShown("request-demo-banner")
                    }
                    )
                }
            }
        }
        ]
    }
}
]),
angular.module("pd.templates", ["pd.common"]).config(["$stateProvider", function(e) {
    e.state("templates", {
        parent: "app.base",
        url: "^/templates/f/:folderId",
        views: {
            "@app": {
                templateUrl: "/views/templates/top-level.html",
                controller: "TemplatesTopLevelController"
            },
            "folders@templates": {
                templateUrl: "/views/templates/folders.html"
            },
            "templates@templates": {
                controller: "TemplatesController",
                templateUrl: "/views/templates/templates.html"
            }
        },
        breadcrumbs: [{
            ref: "folders",
            folderType: "templates"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("templates.convert", {
        parent: "app.base",
        url: "^/templates/convert",
        views: {
            "@app": {
                controller: "TemplateNewConvertUploadController",
                templateUrl: "/views/templates/create/convert.html"
            }
        },
        breadcrumbs: [{
            name: "Convert a Template"
        }],
        data: {
            backgroundType: "default"
        }
    }),
    e.state("templates.new", {
        parent: "app.base",
        url: "^/templates/new?folderId&templateId&templateName",
        views: {
            "@app": {
                controller: "TemplateNewBaseController",
                templateUrl: "/views/templates/create/new.html"
            }
        },
        breadcrumbs: [{
            name: "New Document Template"
        }],
        data: {
            backgroundType: "default"
        }
    }),
    e.state("templates.upload", {
        parent: "templates.new",
        url: "^/templates/upload?folderId&templateId&templateName",
        views: {
            "create-option@templates.new": {
                controller: "TemplateNewUploadController",
                templateUrl: "/views/templates/create/upload.html"
            }
        },
        data: {
            backgroundType: "default"
        }
    }),
    e.state("templates.new-blank", {
        parent: "templates.new",
        url: "^/templates/blank?folderId&templateId&templateName",
        views: {
            "create-option@templates.new": {
                controller: "TemplateNewBlankController",
                templateUrl: "/views/templates/create/blank.html"
            }
        }
    }),
    e.state("templates.create", {
        parent: "app.base",
        url: "^/templates/new/:templateId",
        views: {
            "@app": {
                controller: "TemplateCreateController",
                templateUrl: "/views/templates/create.html"
            }
        },
        breadcrumbs: [{
            name: "New Document Template"
        }],
        data: {
            backgroundType: "default"
        }
    }),
    e.state("templates.not-found", {
        parent: "app.base",
        url: "^/templates/not-found",
        views: {
            "@app": {
                templateUrl: "/views/documents/not-found.html"
            }
        },
        breadcrumbs: [{
            name: "Not found"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("templates.switch-workspace", {
        parent: "app.base",
        url: "^/templates/switch-workspace/:templateId/",
        views: {
            "@app": {
                templateUrl: "/views/templates/switch-workspace.html",
                controller: "TemplatesSwitchWorkspaceController"
            }
        },
        breadcrumbs: [{
            ref: "template"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("templates.details", {
        parent: "app.base",
        url: "^/templates/:templateId",
        views: {
            "@app": {
                controller: "TemplateDetailsController",
                templateUrl: "/views/templates/details.html"
            },
            "panel-right@templates.details": {
                templateUrl: "/views/documents/tools-panel.html"
            },
            "panel-center@templates.details": {
                templateUrl: "/views/templates/template.html"
            }
        },
        breadcrumbs: [{
            ref: "folders",
            folderType: "templates"
        }, {
            ref: "template"
        }],
        data: {
            hasRightPanel: !0,
            hasDocToolsPanel: !0,
            backgroundType: "default",
            hasDocStatusPanel: !0
        }
    })
}
]),
angular.module("pd.templates").controller("EmbedTemplateDetailsController", ["$scope", "$rootScope", "DocumentDetailsService", "EmbedUserInfoDialog", "Html5MessageService", "Constants", "TemplatesService", "WidgetHighlightService", "$state", "EmbedSignedDocumentDialog", "EmbedSignedTestdriveDialog", "Config", "$timeout", "EmailValidationService", "DocumentWidgetsValidationService", "AlertService", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g, f) {
    var b = u.templateToken;
    e.injected = {},
    e.ready = !1,
    t.getEmbeddedTemplateInfo(b).then(function(t) {
        e.ready = !0,
        e.documentInfo = t,
        n.$broadcast("object.loaded", {
            ref: "template",
            obj: t.document,
            breadcrumb: {
                name: e.documentInfo.document.name
            }
        })
    }
    , function() {
        r.go("templates.not-found")
    }
    , function(n) {
        e.documentContentInfo && (n.documentSize = _.cloneDeep(e.documentContentInfo.documentSize)),
        e.documentContentInfo = n
    }
    );
    var v = function(t) {
        e.injected.user = t,
        n.$broadcast("profile.initialized", t),
        i.postToParent(a.EMBED_DOCUMENT.STARTED)
    }
      , h = !1
      , w = function(e) {
        return p.isValid(e.email)
    }
      , k = m(function() {
        h = !0,
        o.open().then(v)
    }
    , 2e3);
    i.subscribe(a.EMBED_DOCUMENT.INJECTION, function(n) {
        e.injected.widgets = n.widgets,
        e.injected.skip_userinfo_form = !!n.skip_userinfo_form,
        !h && n.user && w(n.user) && (m.cancel(k),
        n.skip_userinfo_form ? v(n.user) : o.open(n.user).then(v))
    }
    ),
    e.$on("embed.document.completed", function() {
        var t = g.validateWidgets(e.documentInfo.widgetsInfo, {
            validateEmpty: !0
        });
        if (!_.isEmpty(t)) {
            var o = _.first(t);
            return f.alert({
                title: "Invalid value",
                text: o.message
            }).then(function() {
                l.highlightWidget(o.widgetInfo.widget)
            }
            ),
            void n.$broadcast("embed.document.invalid")
        }
        var i = _.assign({
            role: _.first(e.documentInfo.document.roles).id
        }, e.injected.user)
          , a = _.map(_.filter(e.documentInfo.widgetsInfo, function(e) {
            return !e["static"]
        }
        ), function(e) {
            return {
                id: e.widget.id,
                role: e.widget.role,
                data: _.pick(e.widget.data, "value")
            }
        }
        )
          , u = {
            recipients: [i],
            widgets: a,
            activated: e.injected.skip_userinfo_form
        };
        s.sendTemplate(b, u).then(function(t) {
            n.$broadcast("embed.document.sent", {
                doc: t
            }),
            e.injected.skip_userinfo_form ? d.open() : c.open().then(function() {
                r.go("templates.embed", {}, {
                    reload: !0
                })
            }
            )
        }
        , function() {
            n.$broadcast("embed.document.send.failed", {
                doc: e.documentInfo.document
            })
        }
        )
    }
    )
}
]),
angular.module("pd.templates").controller("TemplateCreateController", ["$scope", "$state", "$stateParams", "TemplatesService", "ProfileService", "ColorService", function(e, n, t, o, i, a) {
    o.getTemplateById(t.templateId, function(n) {
        e.template = n,
        e.documentInfo = {
            document: n
        },
        a.assignColor(n.roles),
        i.getProfile().then(function(t) {
            e.documentInfo.isOwner = t.id === n.owner.id
        }
        ),
        e.originalName = angular.copy(n.name)
    }
    ),
    e.next = function() {
        e.template && e.originalName !== e.template.name ? e.template.patch().then(function() {
            n.go("templates.details", {
                templateId: t.templateId
            })
        }
        ) : n.go("templates.details", {
            templateId: t.templateId
        })
    }
}
]),
angular.module("pd.templates").controller("TemplateDetailsController", ["$scope", "$rootScope", "$location", "$stateParams", "DocumentDetailsService", "Config", "Constants", "$state", "ContextService", "$timeout", "ToolsManager", "WorkspacesService", "$q", function(e, n, t, o, i, a, s, l, r, c, d, u, m) {
    var p = function() {
        return e.ready = !1,
        i.getTemplateInfo(o.templateId).then(function(t) {
            e.documentInfo = t,
            e.ready = !0,
            n.$broadcast("object.loaded", {
                ref: "template",
                obj: t.document,
                breadcrumb: {
                    name: e.documentInfo.document.name,
                    isTemplate: !0,
                    documentInfo: t
                }
            }),
            n.$broadcast("folder.loaded", {
                folder: t.document.folder
            })
        }
        , function() {
            l.go("templates.not-found")
        }
        , function(n) {
            e.documentContentInfo && (n.documentSize = _.cloneDeep(e.documentContentInfo.documentSize)),
            e.documentContentInfo = n
        }
        )
    }
      , g = function(e) {
        var n = "tools-";
        return o.tool ? n + o.tool : n + d.getDefaultDocTool(e).name
    }
    ;
    e.$watch("documentInfo", function(e) {
        var n = l.current;
        if (e && "templates.details" === n.name && n.data.hasRightPanel) {
            var t = {
                templateId: o.templateId
            }
              , i = {
                location: "replace"
            };
            r.openDocTool(g(e), t, i)
        }
    }
    );
    var f = function(e) {
        var n = m.defer();
        return a.application.app || a.application.sdk ? e.isFromMyWorkspace ? n.reject() : u.isMyWorkspace(e.document.workspace).then(function(e) {
            e ? n.resolve() : n.reject()
        }
        ) : n.reject(),
        n.promise
    }
    ;
    p().then(function() {
        e.documentInfo && f(e.documentInfo).then(function() {
            l.go("templates.switch-workspace", {
                templateId: e.documentInfo.document.id
            })
        }
        )
    }
    ),
    e.$on("template.newrevision", function(n, t) {
        t && t.newContent && (e.documentInfo = null ),
        p()
    }
    ),
    e.$on("library.item.inserted", function() {
        e.documentInfo = null ,
        p().then(function() {
            c(function() {
                n.$broadcast("document.reload.after.library.item.insertion")
            }
            )
        }
        )
    }
    )
}
]),
angular.module("pd.templates").controller("TemplatesController", ["$scope", "TemplatesService", "$stateParams", function(e, n, t) {
    e.getDocuments = function(e, o) {
        e.folder_id = t.folderId,
        n.getTemplates(e).then(function(e) {
            _.forEach(e, function(e) {
                e.rolesDescription = i(e.roles)
            }
            ),
            o(e)
        }
        )
    }
    ;
    var o = 2
      , i = function(e) {
        var n = {};
        return !e || _.isEmpty(e) ? n : (e.length <= o ? n.roles = a(e) : (n.roles = a(_.first(e, o)),
        n.tail = e.length - o),
        n)
    }
      , a = function(e) {
        return _.reduce(e, function(e, n, t, o) {
            return t === o.length - 1 ? e + n.name : e + n.name + ", "
        }
        , "")
    }
}
]),
angular.module("pd.templates").controller("TemplatesSwitchWorkspaceController", ["$scope", "TemplatesService", "$stateParams", "WorkspacesService", "$rootScope", "WorkspaceSwitcher", function(e, n, t, o, i, a) {
    n.getTemplateById(t.templateId).then(function(n) {
        e.document = n,
        i.$broadcast("object.loaded", {
            ref: "template",
            obj: n,
            breadcrumb: {
                id: n.id,
                name: n.name
            }
        }),
        o.loadWorkspaceById(n.workspace).then(function(n) {
            e.workspace = n
        }
        )
    }
    ),
    e["switch"] = function() {
        e.workspace && (e.switching = !0,
        a.switchToWorkspace(e.workspace, "template.details", {
            templateId: t.templateId
        }))
    }
}
]),
angular.module("pd.templates").controller("TemplatesTopLevelController", ["$scope", "FoldersService", function(e, n) {
    e.foldersService = n.getFoldersManager("templates")
}
]),
angular.module("pd.templates").controller("TemplateNewBaseController", ["$scope", "$state", "$stateParams", "Constants", "FeaturesService", function(e, n, t, o, i) {
    function a(e) {
        n.go(e, t, {
            inherit: !1,
            notify: !0,
            location: !0
        })
    }
    e.$on("$stateChangeSuccess", function() {
        "templates.new" === n.current.name && a("templates.upload")
    }
    ),
    e.upload = function() {
        a("templates.upload")
    }
    ,
    e.blank = function() {
        a("templates.new-blank")
    }
    ,
    e.documentCreateOptionsAvailability = {
        upload: !0,
        blank: !0
    }
}
]),
angular.module("pd.templates").controller("TemplateNewBlankController", ["$scope", "$rootScope", "$state", "$stateParams", "TemplatesService", "Constants", function(e, n, t, o, i, a) {
    e.creating = !1,
    e.blank = function() {
        e.creating = !0;
        var n = {};
        o.folderId && (n.folder_id = o.folderId);
        var s = o.documentName || "New template";
        i.createTemplate({
            name: s,
            type: a.DOCUMENT.TYPE.EDITABLE_TEMPLATE
        }, n).then(function(n) {
            t.go("templates.create", {
                templateId: n.id
            }),
            e.creating = !1
        }
        , function() {
            e.creating = !1
        }
        )
    }
}
]),
angular.module("pd.templates").controller("TemplateNewConvertUploadController", ["$scope", "$state", "$stateParams", "TemplatesService", "Constants", "AlertService", "ModalService", "$window", "FeaturesService", "IntercomService", "OnboardingService", "ProfileService", function(e, n, t, o, i, a, s, l, r, c, d, u) {
    e.uploading = !0,
    e.sended = !1,
    e.cdnUrl = "",
    e.phoneModel = {
        phone: ""
    },
    u.getProfile().then(function(n) {
        n.phone_number && (e.phoneModel.phone = n.phone_number)
    }
    ),
    e.uploadDone = function(n) {
        e.cdnUrl = n.cdnUrl,
        e.uploading = !1
    }
    ,
    e.cancelUpload = function() {
        n.go("templates.new")
    }
    ,
    e.sendPhoneNumber = function() {
        if (e.phoneModel.phone) {
            e.sending = !0;
            var n = "Please convert template: [" + e.cdnUrl + "], phone: [" + e.phoneModel.phone + "]";
            c.sendMessage(n).then(function() {
                d.markOnboardingAsShown("convert-template-banner"),
                o.createSampleTemplate().then(function() {
                    e.sended = !0,
                    e.showForm = !1,
                    e.sending = !1
                }
                )
            }
            )
        }
    }
    ,
    e.goToTemplates = function() {
        n.go("templates")
    }
}
]),
angular.module("pd.templates").controller("TemplateNewUploadController", ["$scope", "$state", "$stateParams", "TemplatesService", "Constants", "AlertService", "ModalService", "$window", "FeaturesService", function(e, n, t, o, i, a, s, l, r) {
    e.documentCreateOptionsAvailability && (e.documentCreateOptionsAvailability.blank = !t.templateId);
    var c = function() {
        n.go("templates.upload", t, {
            reload: !0
        }),
        a.alert({
            title: "Unable to upload file",
            text: "Unable to upload file. Please try again."
        })
    }
      , d = function(e) {
        var a = {};
        t.folderId && (a.folder_id = t.folderId),
        o.createTemplate({
            uuid: e.uuid,
            name: e.name,
            type: i.DOCUMENT.TYPE.TEMPLATE
        }, a).then(function(e) {
            n.go("templates.create", {
                templateId: e.id
            })
        }
        , c)
    }
    ;
    t.templateId && o.getTemplateById(t.templateId).then(function(n) {
        e.template = n
    }
    );
    var u = function(a) {
        o.newRevision(t.templateId, {
            type: i.REVISIONS.NEW,
            postObject: {
                uuid: a.uuid,
                name: e.template.name
            }
        }).then(function(e) {
            n.go("templates.details", {
                templateId: e.id
            })
        }
        , c)
    }
    ;
    e.uploading = !0,
    e.processing = !1,
    e.uploadDone = function(n) {
        e.processingOptions = {
            new_file: n
        },
        e.uploading = !1,
        e.processing = !0
    }
    ,
    e.processingDone = function(e) {
        t.templateId ? u(e) : d(e)
    }
    ,
    e.processingError = function() {
        e.processing = !1,
        e.uploading = !0,
        s.open({
            templateUrl: "/views/common/file-processing-error.html",
            controller: ["$scope", function(e) {
                e.contactSupport = function() {
                    e.$close(),
                    l.Intercom && l.Intercom("show")
                }
            }
            ]
        })
    }
    ,
    e.cancelUpload = function() {
        n.go("templates.new")
    }
}
]),
angular.module("pd.templates").directive("roleForm", ["TemplatesService", "ColorService", "AlertService", function(e, n, t) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            documentInfo: "="
        },
        link: function() {},
        controller: ["$scope", "$rootScope", function(o, i) {
            o.roleModel = {
                name: ""
            },
            o.$watch("documentInfo", function(e) {
                e && (e.roles = e.roles || [])
            }
            ),
            o.createRole = function() {
                var a = o.documentInfo.document.roles
                  , s = a && _.any(a, function(e) {
                    return e.name === o.roleModel.name
                }
                );
                return s ? void t.alert({
                    title: "Role",
                    text: "Role with this name already exists in template"
                }) : (o.creatingRole = !0,
                void e.addRole(o.documentInfo.document.id, o.roleModel, o.documentInfo.document.type, function(e) {
                    o.documentInfo.document.roles = o.documentInfo.document.roles || [],
                    o.documentInfo.document.roles.push(e),
                    n.assignColor(o.documentInfo.document.roles),
                    o.roleModel.name = "",
                    i.$broadcast("roleForm.createRole", {
                        role: e
                    }),
                    o.creatingRole = !1
                }
                ))
            }
        }
        ],
        templateUrl: "/views/templates/directives/role-form.html"
    }
}
]),
angular.module("pd.templates").directive("roleList", ["TemplatesService", "NotificationCenter", "TextFieldDialogService", "AlertService", "RecipientService", function(e, n, t, o, i) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            documentInfo: "="
        },
        templateUrl: "/views/templates/directives/role-list.html",
        controller: ["$scope", "$rootScope", function(a, s) {
            a.$watchCollection("documentInfo.document.roles", function(e) {
                e && i.assignType(e, a.documentInfo.widgetsInfo)
            }
            ),
            a.removeRole = function(t) {
                var o = _.any(a.documentInfo.widgetsInfo, function(e) {
                    return e.widget.role === t.id
                }
                );
                o ? n.notification("We cannot delete this role until it has assigned fields") : (a.documentInfo.document.roles = _.reject(a.documentInfo.document.roles, function(e) {
                    return t.id === e.id
                }
                ),
                e.removeRole(a.documentInfo.document.id, t.id, a.documentInfo.document.type),
                s.$broadcast("role.remove"))
            }
            ,
            a.renameRole = function(i) {
                t.show({
                    title: "Rename role",
                    value: i.name
                }).then(function(t) {
                    if (i.name !== t) {
                        var l = _.any(a.documentInfo.document.roles, function(e) {
                            return t === e.name
                        }
                        );
                        if (l)
                            return void o.alert({
                                title: "Role",
                                text: "Role with this name already exists in template"
                            });
                        var r = i.name;
                        i.name = t,
                        e.updateRole(a.documentInfo.document.id, i, a.documentInfo.document.type).then(function() {
                            n.notification('Role "' + i.name + '" was successfully updated'),
                            s.$broadcast("role.rename", {
                                roleId: i.id,
                                oldName: r,
                                newName: t
                            })
                        }
                        )
                    }
                }
                )
            }
            ,
            a.rolesSortableOptions = {
                axis: "y",
                tolerance: "pointer"
            },
            a.$watch("documentInfo.document.has_ordering", function(n, t) {
                _.isUndefined(n) || _.isUndefined(t) || n === t || !a.documentInfo.isOwner || (n ? e.setRolesOrder(a.documentInfo.document, a.documentInfo.document.roles) : e.disableRolesOrder(a.documentInfo.document))
            }
            ),
            a.$watch("documentInfo.document.roles", function(n, t) {
                if (n && t && a.documentInfo.isOwner && a.documentInfo.document.has_ordering && n.length > 0 && n.length === t.length) {
                    var o = _.any(n, function(e, n) {
                        return e.id !== t[n].id
                    }
                    );
                    o && e.setRolesOrder(a.documentInfo.document, n)
                }
            }
            , !0)
        }
        ]
    }
}
]),
angular.module("pd.templates").controller("TemplatesSelectorController", ["$scope", "$rootScope", "$state", "$stateParams", "TemplatesService", "FoldersService", "$timeout", function(e, n, t, o, i, a, s) {
    var l = !0
      , r = 1
      , c = null ;
    e.templates = [],
    e.folders = [],
    e.filterModel = {
        filter: null 
    },
    e.parents = [];
    var d = function() {
        e.templates = [],
        l = !0,
        r = 1
    }
    ;
    e.loadingFolders = !0,
    a.getRootFolder("templates").then(function(n) {
        e.parents.push(n)
    }
    ),
    e.$watchCollection("parents", function(n) {
        if (n && !_.isEmpty(n)) {
            var t = _.last(n);
            e.loadingFolders = !0,
            a.getFoldersManager("templates").getFolders({
                page: 1,
                count: 50,
                parent: t.id
            }).then(function(n) {
                e.folders = n,
                e.loadingFolders = !1
            }
            ),
            d(),
            e.loadTemplates()
        }
    }
    ),
    e.down = function(n) {
        e.parents.push(n),
        e.folders = []
    }
    ,
    e.up = function() {
        e.parents.pop(),
        e.folders = []
    }
    ,
    e.loadTemplates = function() {
        if (!e.loadingTemplates && l && !_.isEmpty(e.parents)) {
            e.loadingTemplates = !0;
            var n = {
                page: r,
                count: 30,
                folder_id: _.last(e.parents).id,
                date_modified: "desc"
            };
            e.filterModel.filter && (n.q = e.filterModel.filter),
            i.getTemplates(n).then(function(n) {
                r += 1,
                l = n.next ? !0 : !1,
                e.templates = e.templates.concat(n),
                e.loadingTemplates = !1
            }
            )
        }
    }
    ,
    e.$watch("filterModel.filter", function(n) {
        s.cancel(c),
        n ? c = s(function() {
            d(),
            e.filtering = !0,
            e.loadTemplates()
        }
        , 700) : "" === n && (c = s(function() {
            d(),
            e.filtering = !1,
            e.loadTemplates()
        }
        , 700))
    }
    ),
    e.isRootFolder = function() {
        return !_.isEmpty(e.parents) && _.last(e.parents).root
    }
    ,
    e.noTemplates = function() {
        return _.isEmpty(e.templates)
    }
    ,
    e.noSubFolders = function() {
        return _.isEmpty(e.folders)
    }
    ,
    e.isLoading = function() {
        return e.loadingTemplates || e.loadingFolders
    }
    ,
    e.hasActiveFilter = function() {
        return e.filtering
    }
    ,
    e.createDocFromTemplate = function(e) {
        n.$broadcast("close.upload.dialog");
        var i = {
            templateId: e.id
        };
        o.folderId && (i.folderId = o.folderId),
        o.contactId && (i.contactId = o.contactId),
        o.deal_id && (i.deal_id = o.deal_id),
        o.documentName && (i.documentName = o.documentName),
        t.go("documents.create-from-template", i)
    }
    ,
    e.createTemplate = function() {
        t.go("templates.new")
    }
}
]).directive("templatesSelector", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/templates/list/selector.html",
        controller: "TemplatesSelectorController",
        transclude: !0,
        link: function(e) {
            e.emptyListTemplate = "/views/templates/list/empty-list.html"
        }
    }
}
]),
angular.module("pd.common").directive("uploadcareTemplatesTab", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/templates/directives/uploadcare-templates-tab.html"
    }
}
]),
angular.module("pd.widgets", ["pd.widgets.registry", "pd.widgets.textfield", "pd.widgets.text", "pd.widgets.checkbox", "pd.widgets.signature", "pd.widgets.date", "pd.widgets.initials", "pd.widgets.dropdown", "pd.widgets.uploadfield", "pd.widgets.masked"]),
angular.module("pd.widgets.checkbox", ["pd.widgets.registry", "pd.constants"]).config(["WidgetRegistryProvider", "Constants", function(e, n) {
    e.register({
        type: n.WIDGET.CHECKBOX,
        icon: "icon--checkbox",
        handleOrder: 4,
        initial: {
            type: n.WIDGET.CHECKBOX,
            position: n.WIDGET.DEFAULT_POSITION,
            required: !1
        },
        "static": !1,
        templates: {
            preview: "/views/widgets/preview/checkbox.html"
        },
        sizing: {
            initial: {
                width: 3,
                height: 3
            },
            inline: {
                width: 24,
                height: 24
            },
            aspectRatio: !0
        },
        postLink: function(e, n, t, o, i) {
            var a = e.widgetInfo.widget
              , s = i.get("ElementClickBehavior").getStream().filter(function(e) {
                return "widget-activate" === e.name && e.widgetId === a.id
            }
            ).subscribe(function() {
                n.find("input[type=checkbox]").focus()
            }
            );
            e.$on("$destroy", function() {
                s.dispose()
            }
            )
        }
    })
}
]),
angular.module("pd.widgets").controller("InlineWidgetPreviewPositionCorrectorController", ["$scope", "$element", "WidgetsService", "WidgetUtility", "BlockWidgetsService", function(e, n, t, o, i) {
    var a = function(n, t, o) {
        var i, a, s = e.documentContentInfo.documentSize, l = s.scale, r = t.offset(), c = {
            width: t.width(),
            height: t.height()
        };
        return i = (o.top - r.top) / l,
        0 > i ? i = 0 : i + n.size.height > c.height && (i = c.height - n.size.height),
        a = (o.left - r.left) / l,
        0 > a ? a = 0 : a + n.size.width > c.width && (a = c.width - n.size.width),
        {
            left: a,
            top: i,
            page: 0,
            type: "block-relative"
        }
    }
      , s = function(n, t) {
        var i = e.documentContentInfo.documentSize
          , a = i.scale;
        return o.findTargetBlockEl(n.offset(), t.size, a)
    }
      , l = function(e, n) {
        return e.widgetsInfo && _.any(e.widgetsInfo, function(e) {
            return e.widget.id === n.widget.id
        }
        )
    }
      , r = function(e, n) {
        var t = _.find(n, function(n) {
            return n.widgetsInfo && _.any(n.widgetsInfo, function(n) {
                return n.widget.id === e.widget.id
            }
            )
        }
        );
        t.widgetsInfo = _.filter(t.widgetsInfo, function(n) {
            return n.widget.id !== e.widget.id
        }
        )
    }
    ;
    e.correctPosition = function(n) {
        var t = e.documentContentInfo.documentSize
          , o = t.scale
          , i = n.position.left - n.originalPosition.left
          , a = n.originalPosition.left + i / o
          , s = n.position.top - n.originalPosition.top
          , l = n.originalPosition.top + s / o;
        return {
            left: a,
            top: l
        }
    }
    ,
    e.correctFinalPosition = function(n, o, c) {
        var d = angular.element(s(c.helper, n.widget));
        if (0 === d.length)
            return !1;
        var u = _.find(e.blockList.blocks, {
            id: d.attr("id")
        });
        if (!u || !u.widgetsInfo)
            return !1;
        if (!l(u, n)) {
            if (!i.isAcceptWidget(u))
                return !1;
            t.linkWithBlock(n.widget.id, u.id),
            r(n, e.blockList.blocks),
            u.widgetsInfo.push(n)
        }
        return {
            position: a(n.widget, d, c.helper.offset()),
            content: n.widget.content
        }
    }
    ,
    e.$watch("widgetInfo.widget.position", function(e) {
        n.css({
            top: e.top + "px",
            left: e.left + "px"
        })
    }
    , !0)
}
]),
angular.module("pd.widgets").controller("InlineWidgetPreviewSizeCorrectorController", ["$scope", "$element", function(e, n) {
    e.correctSize = function(e, t) {
        for (var o = n.parent(), i = o.width(), a = o.height(), s = e.widget, l = {
            width: t.width,
            height: t.height
        }, r = s.position.left, c = s.position.top, d = t.width / t.height; r + l.width > i || c + l.height > a; )
            l.width = l.width - 1,
            l.height = l.width / d;
        return l
    }
    ,
    e.$watch("widgetInfo.widget.size", function(e) {
        n.find(".widget__resizer").css({
            width: "auto",
            height: "auto"
        }),
        n.css({
            width: e.width + "px",
            paddingTop: e.height + "px"
        })
    }
    , !0)
}
]),
angular.module("pd.widgets").controller("WidgetAutoSaveController", ["$scope", "Constants", "Config", "WidgetsService", "WidgetUtility", "RecipientService", "rx", "ProfileService", "$rootScope", function(e, n, t, o, i, a, s, l, r) {
    var c = e.widgetInfo
      , d = c.widget
      , u = function(o) {
        return e.$toObservable("widgetInfo.widget." + o).filter(function() {
            return c.mode === n.WIDGET.BUILD_MODE
        }
        ).filter(function() {
            return t.application.app || t.application.sdk
        }
        ).filter(function(e) {
            return !_.isEqual(e.newValue, e.oldValue)
        }
        ).filter(function() {
            return !!d.id
        }
        ).map(function(e) {
            return e.newValue
        }
        )
    }
    ;
    u("role").subscribe(function(n) {
        o.updateWidget(d).then(function() {
            _.assign(c, i.getRoleInfo(e.documentInfo.document.roles, n))
        }
        )
    }
    ),
    u("actor").filter(function() {
        return i.isSignature(d) || i.isInitials(d)
    }
    ).flatMapLatest(function() {
        return s.Observable.fromPromise(l.getProfile())
    }
    ).subscribe(function(n) {
        n.actor === d.actor || m(d) ? p() : (d.data = {
            value: ""
        },
        o.updateWidgetData(d).then(function() {
            r.$broadcast("widget.value.set", c),
            e.hasValue = i.hasValue(d),
            p()
        }
        ))
    }
    ),
    u("actor").filter(function() {
        return !i.isSignature(d) && !i.isInitials(d)
    }
    ).subscribe(function() {
        p()
    }
    ),
    u("required").subscribe(function() {
        o.updateWidget(d)
    }
    ),
    u("title").filter(function() {
        return !_.isEmpty(d.title)
    }
    ).debounce(700).subscribe(function() {
        o.updateWidget(d)
    }
    ),
    u("field_name").filter(function() {
        return !_.isEmpty(d.title)
    }
    ).debounce(700).subscribe(function() {
        o.updateWidget(d)
    }
    ),
    u("properties.description").filter(function() {
        return !_.isEmpty(d.properties) && !_.isEmpty(d.properties.description)
    }
    ).debounce(700).subscribe(function() {
        o.updateWidget(d)
    }
    ),
    e.$on("role.rename", function(n, t) {
        c.widget.role === t.roleId && _.assign(c, i.getRoleInfo(e.documentInfo.document.roles, t.roleId))
    }
    );
    var m = function(e) {
        return _.isEmpty(e.data) || _.isEmpty(e.data.value)
    }
      , p = function() {
        o.updateWidget(e.widgetInfo.widget).then(function() {
            _.assign(c, i.getActorInfo(e.documentInfo.document.recipients, d.actor)),
            a.assignType(e.documentInfo.document.recipients, e.documentInfo.widgetsInfo)
        }
        )
    }
}
]),
angular.module("pd.widgets").controller("WidgetPreviewClickController", ["$scope", "Constants", "$timeout", "$rootScope", "ContextService", "WidgetUtility", "$element", "ElementClickBehavior", "singleWatch", function(e, n, t, o, i, a, s, l, r) {
    var c = e.widgetInfo
      , d = c.widget
      , u = function() {
        c.highlighted || (s.addClass("widget--focused"),
        c.highlighted = !0)
    }
      , m = function() {
        c.highlighted && (s.removeClass("widget--focused"),
        c.highlighted = !1)
    }
      , p = function() {
        return n.DOCUMENT.TYPE.TEMPLATE === e.documentInfo.document.type || n.DOCUMENT.TYPE.EDITABLE_TEMPLATE === e.documentInfo.document.type
    }
      , g = function() {
        return n.DOCUMENT.TYPE.LIBRARY_ITEM === e.documentInfo.document.type
    }
      , f = function() {
        e.editable || (!p() && !g() || !a.isSignature(d) && !a.isInitials(d)) && (e.editable = !0,
        t(function() {
            e.$digest(),
            l.fireEvent({
                name: "widget-activate",
                widgetId: d.id
            })
        }
        ))
    }
      , b = function() {
        e.editable && (e.editable = !1,
        t(function() {
            e.$digest()
        }
        ))
    }
      , v = l.getStream()
      , h = [];
    if (n.WIDGET.BUILD_MODE === c.mode && e.documentInfo.isOwner) {
        var w = v.filter(function(e) {
            return "widget-click" === e.name
        }
        );
        h.push(w.filter(function(e) {
            return e.widgetId !== d.id
        }
        ).subscribe(function() {
            m(),
            b()
        }
        )),
        h.push(w.filter(function(e) {
            return e.widgetId === d.id && c.highlighted
        }
        ).subscribe(f)),
        h.push(w.filter(function(e) {
            return e.widgetId === d.id && !c.highlighted
        }
        ).subscribe(u)),
        h.push(v.filter(function(e) {
            return !_.contains(["widget-click", "widget-activate"], e.name)
        }
        ).subscribe(function(e) {
            m(),
            b()
        }
        ));
        var k = {
            name: "widget-click",
            widgetId: d.id
        };
        l.addToElement(s, e, {
            map: k,
            "do": function(e) {
                e.stopPropagation()
            }
        }),
        r(e, "widgetInfo.created", function(e) {
            e && l.fireEvent(k)
        }
        ),
        c.highlighted && setTimeout(function() {
            s.addClass("widget--focused")
        }
        ),
        e.$on("$destroy", function() {
            c.relocation ? c.relocation = !1 : l.fireEvent({
                name: "close-settings",
                widgetId: d.id
            })
        }
        ),
        e.$watch("widgetInfo.dragging", function(e) {
            e && b()
        }
        ),
        e.$watch("widgetInfo.resizing", function(e) {
            e && b()
        }
        )
    } else if (n.WIDGET.EDIT_MODE === c.mode && c.editable) {
        l.addToElement(s, e, {
            map: {
                name: "widget-activate",
                widgetId: d.id
            },
            "do": function(e) {
                e.stopPropagation()
            }
        });
        var y = v.filter(function(e) {
            return "widget-activate" === e.name
        }
        );
        h.push(y.filter(function(e) {
            return e.widgetId === d.id
        }
        ).subscribe(u)),
        h.push(y.filter(function(e) {
            return e.widgetId !== d.id
        }
        ).subscribe(m))
    }
    e.$on("$destroy", function() {
        _.each(h, function(e) {
            e.dispose()
        }
        )
    }
    )
}
]),
angular.module("pd.widgets").controller("WidgetPreviewController", ["$scope", "Constants", "$controller", "Config", "WidgetRegistry", function(e, n, t, o, i) {
    var a = e.widgetInfo
      , s = a.widget;
    e.resizable = a.resizable,
    e.draggable = a.draggable,
    e.buildMode = a.mode === n.WIDGET.BUILD_MODE,
    e.editMode = a.mode === n.WIDGET.EDIT_MODE,
    e.editable = e.buildMode ? !1 : a.editable,
    e.hasLabel = !o.application.embed;
    var l = i.getWidgetPreviewTemplate(s.type);
    e.widgetPreviewTemplate = l ? l : "/views/widgets/preview/base.html";
    var r = function() {
        var e = s.size
          , n = s.position
          , t = {
            top: Number(n.top) + Number(e.height) / 2,
            left: Number(n.left) + Number(e.width) / 2
        };
        a.placement = {
            top: t.top < 50,
            left: t.left < 50
        }
    }
    ;
    e.$watch("widgetInfo.widget.size", r, !0),
    e.$watch("widgetInfo.widget.position", r, !0)
}
]),
angular.module("pd.widgets").controller("WidgetPreviewDndController", ["$scope", "$element", "$rootScope", "$timeout", "WidgetsService", "WidgetUtility", function(e, n, t, o, i, a) {
    var s = e.widgetInfo
      , l = s.widget;
    e.dragStart = function(e, n) {
        o(function() {
            s.dragging = !0
        }
        );
        var t = $(e.target);
        n.helper.find("textarea").val(t.find("textarea").val()),
        n.helper.data("originOffset", t.offset()),
        n.helper.css({
            width: t.width() + "px",
            paddingTop: t.outerHeight() + "px"
        }),
        n.position.left = 0,
        n.position.top = 0,
        t.hide()
    }
    ;
    var r, c, d, u, m = [], p = function() {
        _.each(m, clearInterval),
        m = []
    }
    , g = 100, f = 100, b = 50, v = function(e) {
        p(),
        m.push(setInterval(e, f))
    }
    , h = function() {
        r.scrollTop(r.scrollTop() + b)
    }
    , w = function() {
        r.scrollTop(r.scrollTop() - b)
    }
    , k = function() {
        r.scrollLeft(r.scrollLeft() - b)
    }
    , y = function() {
        r.scrollLeft(r.scrollLeft() + b)
    }
    ;
    e.drag = function(n, t) {
        r || (r = angular.element(".document"),
        c = r.offset(),
        d = c.left + r.width(),
        u = c.top + r.height()),
        n.pageY - c.top <= g ? v(w) : n.pageY >= u - g ? v(h) : n.pageX - c.left <= g ? v(k) : n.pageX >= d - g ? v(y) : p(),
        t.position = e.correctPosition(t)
    }
    ,
    e.dragStop = function(n, r) {
        o(function() {
            s.dragging = !1
        }
        ),
        p();
        var c = angular.element(n.target)
          , d = e.correctFinalPosition(e.widgetInfo, n, r);
        if (!d)
            return I(c, r.helper),
            !1;
        if (c.show(),
        e.buildMode && e.draggable) {
            if (l.position.page !== d.position.page || l.content !== d.content) {
                var u = l.position.page
                  , m = d.position.page
                  , g = l.content
                  , f = d.content;
                l.position.page = m,
                l.content = d.content,
                t.$broadcast("widget.changePage", {
                    widgetInfo: s,
                    fromPage: u,
                    toPage: m,
                    fromContent: g,
                    toContent: f
                })
            }
            e.$apply(function() {
                d.position.pdf = l.position.pdf,
                _.assign(l.position, d.position)
            }
            ),
            setTimeout(function() {
                l.position.pdf && (l.position.pdf = a.calculateWidgetPositionInPdf(s.widget)),
                l.id && i.updateWidget(l)
            }
            , 10),
            t.$broadcast("widget.dragCompleted", {
                widgetInfo: s
            })
        }
    }
    ;
    var I = function(e, n) {
        var t = n.clone()
          , o = n.data("originOffset");
        t.appendTo(n.parent()),
        t.animate({
            top: o.top,
            left: o.left
        }, 300, function() {
            t.remove(),
            e.show()
        }
        )
    }
}
]),
angular.module("pd.widgets").controller("WidgetPreviewPositionCorrectorController", ["$scope", "$element", "WidgetUtility", function(e, n, t) {
    var o = function(e, n) {
        var t, o, i = angular.element('.document-page[data-page-content="' + n.content + '"][data-page-num="' + (n.index + 1) + '"]').find(".document-page__overlay"), a = i.offset(), s = {
            width: i.width(),
            height: i.height()
        };
        return t = (e.top - a.top) / s.height * 100,
        o = (e.left - a.left) / s.width * 100,
        {
            left: o,
            top: t,
            page: n.index + 1
        }
    }
    ;
    e.correctFinalPosition = function(n, i, a) {
        var s = t.pageFromPoint({
            x: i.pageX,
            y: i.pageY
        });
        if (void 0 === s)
            return !1;
        var l = o(a.helper.offset(), s)
          , r = e.documentContentInfo.getPage(s.index, s.content)
          , c = {
            documentWidth: e.documentContentInfo.documentSize.width,
            pageWidth: r.size.width,
            pageHeight: r.size.height
        };
        return t.isOutOfPage(n.widget, l, c) ? !1 : {
            position: l,
            content: s.content
        }
    }
    ,
    e.correctPosition = function(e) {
        return e.position
    }
    ,
    e.$watch("widgetInfo.widget.position", function(e) {
        n.css({
            top: e.top + "%",
            left: e.left + "%"
        })
    }
    , !0)
}
]),
angular.module("pd.widgets").controller("WidgetPreviewResizeController", ["$scope", "$element", "SizingModelFactory", "$timeout", "Constants", "WidgetsService", "WidgetUtility", function(e, n, t, o, i, a, s) {
    var l = n
      , r = l.find(".widget__label")[0]
      , c = e.widgetInfo
      , d = c.widget
      , u = function(e) {
        var n = e * i.WIDGET.TEXT_SIZE_PROPORTION;
        return Math.max(n, 4)
    }
      , m = function() {
        var e = angular.element(l.find("input[type=text], .widget-dropdown__ui, .widget-uploadfield"));
        e.length > 0 && e.css({
            fontSize: u(e.height()) + "px"
        })
    }
    ;
    e.resizeStarted = function() {
        o(function() {
            c.resizing = !0
        }
        ),
        angular.element(r).hide()
    }
    ,
    n.find(".widget__resizer").on("resize", function(e) {
        e.stopPropagation()
    }
    ),
    e.resizeResize = m;
    var p = ["width", "scale"];
    _.each(p, function(n) {
        e.$watch("documentContentInfo.documentSize." + n, function(e, n) {
            e !== n && m()
        }
        )
    }
    ),
    e.resizeCompleted = function(n, t) {
        e.$apply(function() {
            if (c.resizing = !1,
            e.buildMode && e.resizable) {
                var n = e.correctSize(e.widgetInfo, t.size);
                n.pdf = d.size.pdf,
                d.size = n,
                angular.element(r).show(),
                o(function() {
                    m(),
                    d.size.pdf && (n.pdf = s.calculateWidgetSizeInPdf(c.widget)),
                    d.id && a.updateWidget(d)
                }
                )
            }
        }
        )
    }
}
]),
angular.module("pd.widgets").controller("WidgetPreviewSizeCorrectorController", ["$scope", "$element", "SizingModelFactory", function(e, n, t) {
    e.correctSize = function(n, o) {
        var i = new t(n.page.size,e);
        return i.size(o, n.widget.position)
    }
    ,
    e.$watch("widgetInfo.widget.size", function(e) {
        n.find(".widget__resizer").css({
            width: "auto",
            height: "auto"
        }),
        n.css({
            width: e.width + "%",
            paddingTop: e.height + "%"
        })
    }
    , !0)
}
]),
angular.module("pd.widgets").controller("WidgetValueAutoSaveController", ["$scope", "ProfileService", "GetMeAsContactService", "Constants", "DocumentsService", "Config", "WidgetsService", "rx", "$rootScope", "$q", "WidgetUtility", "RecipientService", "ColorService", "ContextService", "DocumentWidgetsValidationService", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g) {
    var f = [o.WIDGET.TEXTFIELD, o.WIDGET.DATE, o.WIDGET.MASKED]
      , b = e.widgetInfo
      , v = b.widget
      , h = _.contains(f, v.type);
    e.hasValue = d.hasValue(v);
    var w = e.$toObservable("widgetInfo.widget.data", !0).filter(function(e) {
        return !_.isEqual(e.newValue, e.oldValue)
    }
    ).filter(function() {
        return !!v.id
    }
    )["do"](function() {
        e.hasValue = d.hasValue(v)
    }
    );
    h && (w = w.debounce(700));
    var k = !1;
    e.$on("widget.value.loaded", function(e, n) {
        n.widget && n.widget.id === v.id && (k = !0,
        setTimeout(function() {
            k = !1
        }
        , 1e3))
    }
    );
    var y = w.filter(function() {
        return a.application.embed
    }
    );
    y.subscribe(function() {
        r.$broadcast("widget.value.set", b)
    }
    );
    var I = w.filter(function() {
        return !a.application.embed && b.mode === o.WIDGET.EDIT_MODE
    }
    ).filter(function() {
        return !k
    }
    ).filter(function() {
        return _.isEmpty(g.validateWidget(b))
    }
    );
    I.filter(function() {
        return b.widget.type === o.WIDGET.UPLOAD
    }
    ).subscribe(function() {
        r.$broadcast("widget.value.set", b)
    }
    ),
    I.filter(function() {
        return b.widget.type !== o.WIDGET.UPLOAD
    }
    ).flatMapLatest(function() {
        return l.Observable.fromPromise(s.updateWidgetData(v))
    }
    ).subscribe(function() {
        r.$broadcast("widget.value.set", b)
    }
    );
    var C = w.filter(function() {
        return !a.application.embed && b.mode === o.WIDGET.BUILD_MODE
    }
    ).filter(function() {
        return !k
    }
    ).filter(function() {
        return _.isEmpty(g.validateWidget(b))
    }
    )
      , S = C.filter(function() {
        return d.isSignature(v) || d.isInitials(v)
    }
    ).filter(function() {
        return v.data && !_.isEmpty(v.data.value)
    }
    ).flatMapLatest(function() {
        return l.Observable.fromPromise(n.getProfile())
    }
    );
    S.filter(function(e) {
        return !v.actor || e.actor !== v.actor
    }
    ).flatMapLatest(function() {
        return l.Observable.fromPromise(x())
    }
    ).flatMapLatest(function() {
        return l.Observable.fromPromise(s.updateWidgetData(v))
    }
    ).subscribe(function() {
        r.$broadcast("widget.value.set", b)
    }
    ),
    S.filter(function(e) {
        return v.actor && e.actor === v.actor
    }
    ).flatMapLatest(function() {
        return l.Observable.fromPromise(s.updateWidgetData(v))
    }
    ).subscribe(function() {
        r.$broadcast("widget.value.set", b)
    }
    ),
    C.filter(function() {
        return b.widget.type === o.WIDGET.UPLOAD
    }
    )["do"](function() {
        v.actor || !p.isDocuments() && !p.is("inbox") || x()
    }
    ).subscribe(function() {
        r.$broadcast("widget.value.set", b)
    }
    );
    var T = [o.WIDGET.SIGNATURE, o.WIDGET.INITIALS, o.WIDGET.UPLOAD]
      , E = C.filter(function() {
        return !_.contains(T, v.type)
    }
    );
    E["do"](function() {
        b["static"] || v.actor || !p.isDocuments() && !p.is("inbox") || x()
    }
    ).flatMapLatest(function() {
        return l.Observable.fromPromise(s.updateWidgetData(v))
    }
    ).subscribe(function() {
        r.$broadcast("widget.value.set", b)
    }
    );
    var x = function() {
        var o = c.defer();
        return n.getProfile().then(function(n) {
            var a = _.find(e.documentInfo.document.recipients, function(e) {
                return e.contact.id === n.actor
            }
            );
            a ? (v.actor = a.contact.id,
            s.updateWidget(v).then(o.resolve, o.reject)) : t.get().then(function(n) {
                i.addRecipient(e.documentInfo.document.id, n.id).then(function(t) {
                    e.documentInfo.document.recipients.push(t),
                    m.assignColor(e.documentInfo.document.recipients),
                    v.actor = n.id,
                    s.updateWidget(v).then(o.resolve, o.reject)
                }
                )
            }
            )
        }
        ),
        o.promise
    }
}
]),
angular.module("pd.widgets.date", ["pd.widgets.registry", "pd.constants"]).directive("datepickerPopup", ["datepickerPopupConfig", "dateParser", "dateFilter", function(e, n, t) {
    return {
        restrict: "A",
        priority: 1,
        require: "ngModel",
        link: function(n, o, i, a) {
            var s = i.datepickerPopup || e.datepickerPopup;
            a.$formatters.push(function(e) {
                return t(e, s)
            }
            )
        }
    }
}
]).config(["WidgetRegistryProvider", "Constants", "DateFormats", "datepickerConfig", function(e, n, t, o) {
    o.showWeeks = !1,
    o.minDate = n.DATE.MIN.toDate(),
    o.maxDate = n.DATE.MAX.toDate(),
    e.register({
        type: n.WIDGET.DATE,
        icon: "icon--date",
        handleOrder: 3,
        initial: {
            type: n.WIDGET.DATE,
            position: n.WIDGET.DEFAULT_POSITION,
            properties: {
                dateFormat: t.getDefaultFormat()
            }
        },
        templates: {
            preview: "/views/widgets/preview/date.html",
            settings: "/views/widgets/settings/date.html"
        },
        "static": !1,
        sizing: {
            initial: {
                width: 15,
                height: 3
            },
            inline: {
                width: 114,
                height: 22
            },
            aspectRatio: !1
        },
        postLink: function(e, n, t, o, i) {
            var a, s = e.widgetInfo.widget, l = i.get("$timeout"), r = !1, c = 300;
            e.widgetInfo.dateFormat = s.properties.dateFormat.replace("mm", "MM");
            var d = i.get("ElementClickBehavior").getStream().filter(function(e) {
                return "widget-activate" === e.name && e.widgetId === s.id
            }
            ).subscribe(function() {
                l.cancel(a),
                a = l(function() {
                    e.widgetInfo.opened = !0,
                    e.$digest()
                }
                , c)
            }
            );
            e.$on("$destroy", function() {
                d.dispose()
            }
            ),
            e.$watch("widgetInfo.opened", function(e) {
                e || (l.cancel(a),
                r = !0,
                l(function() {
                    r = !1
                }
                , c / 2))
            }
            );
            var u = function(e) {
                return moment.utc([e.getFullYear(), e.getMonth(), e.getDate()]);
            
            }
              , m = function(e) {
                return new Date(e.year(),e.month(),e.date())
            }
            ;
            s.data && s.data.value && (s.data.date = m(moment(s.data.value).utc())),
            e.$watch("widgetInfo.widget.properties.dateFormat", function(n) {
                n && (e.widgetInfo.dateFormat = n.replace("mm", "MM"))
            }
            ),
            e.$watch("widgetInfo.dragging", function(n) {
                n && (l.cancel(a),
                e.widgetInfo.opened = !1)
            }
            ),
            e.$watch("widgetInfo.resizing", function(n) {
                n && (l.cancel(a),
                e.widgetInfo.opened = !1)
            }
            ),
            e.$watch("widgetInfo.widget.data.date", function(n, t) {
                if (n !== t)
                    if (_.isDate(n)) {
                        var o = u(n);
                        e.widgetInfo.widget.data.value = o.toISOString()
                    } else
                        (_.isNull(n) || _.isUndefined(n)) && (e.widgetInfo.widget.data.value = "")
            }
            , !0)
        }
    })
}
]).constant("DateFormats", {
    getFormats: function() {
        return ["mm/dd/yyyy", "dd/mm/yyyy", "mm-dd-yyyy", "dd-mm-yyyy", "dd-MMM-yyyy", "MMM-dd-yyyy"]
    },
    getDefaultFormat: function() {
        return _.first(this.getFormats())
    }
}),
angular.module("pd.widgets").directive("inlineWidgetPreview", ["$rootScope", "WidgetRegistry", "$controller", "$injector", function(e, n, t, o) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/inline-widget-preview-base.html",
        scope: {
            widgetInfo: "=",
            documentInfo: "=",
            documentContentInfo: "=",
            block: "=",
            blockList: "="
        },
        controller: "WidgetPreviewController",
        link: function(e, i, a, s) {
            var l = e.widgetInfo
              , r = l.widget;
            t("WidgetAutoSaveController", {
                $scope: e
            }),
            t("WidgetValueAutoSaveController", {
                $scope: e
            }),
            t("WidgetPreviewResizeController", {
                $scope: e,
                $element: i
            }),
            t("InlineWidgetPreviewSizeCorrectorController", {
                $scope: e,
                $element: i
            }),
            t("WidgetPreviewDndController", {
                $scope: e,
                $element: i
            }),
            t("InlineWidgetPreviewPositionCorrectorController", {
                $scope: e,
                $element: i
            }),
            t("WidgetPreviewClickController", {
                $scope: e,
                $element: i,
                tool: "tools-content"
            }),
            n.getWidgetPostLinkFunction(r.type)(e, i, a, s, o)
        }
    }
}
]),
angular.module("pd.widgets").controller("WidgetHandleController", ["$scope", "$rootScope", "$filter", "WidgetRegistry", "ContextService", function(e, n, t, o, i) {
    e.addWidget = function() {
        var a = i.isState("tools-widgets") ? o.createNewWidgetInstance(e.widget.type) : o.createNewInlineWidgetInstance(e.widget.type);
        return a.title = t("translate")("widget.type." + e.widget.type),
        n.$broadcast("widget.add", {
            widget: a
        }),
        !1
    }
    ,
    e.dragStart = function(e, t) {
        t.helper.addClass("widget--drag-preview-animated"),
        n.$broadcast("widget.drag.from.doctools.started")
    }
    ,
    e.dragStop = function() {
        n.$broadcast("widget.drag.from.doctools.ended")
    }
}
]).directive("widgetHandle", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/widget-handle-base.html",
        scope: {
            widget: "=",
            documentInfo: "="
        },
        controller: "WidgetHandleController"
    }
}
]),
angular.module("pd.widgets").directive("widgetPreview", ["$rootScope", "WidgetRegistry", "$controller", "$injector", function(e, n, t, o) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/widget-preview-base.html",
        scope: {
            widgetInfo: "=",
            documentInfo: "=",
            documentContentInfo: "="
        },
        controller: "WidgetPreviewController",
        link: function(e, i, a, s) {
            t("WidgetAutoSaveController", {
                $scope: e
            }),
            t("WidgetValueAutoSaveController", {
                $scope: e
            }),
            t("WidgetPreviewResizeController", {
                $scope: e,
                $element: i
            }),
            t("WidgetPreviewSizeCorrectorController", {
                $scope: e,
                $element: i
            }),
            t("WidgetPreviewDndController", {
                $scope: e,
                $element: i
            }),
            t("WidgetPreviewPositionCorrectorController", {
                $scope: e,
                $element: i
            }),
            t("WidgetPreviewClickController", {
                $scope: e,
                $element: i,
                tool: "tools-widgets"
            });
            var l = e.widgetInfo
              , r = l.widget;
            n.getWidgetPostLinkFunction(r.type)(e, i, a, s, o)
        }
    }
}
]),
angular.module("pd.widgets").controller("WidgetsSettingController", ["$scope", "$rootScope", "$timeout", "WidgetRegistry", "ConfirmationService", "RecipientService", "Constants", "FeaturesService", "DocumentsService", "Config", "$location", "$state", "$stateParams", "ColorService", "$filter", "ElementClickBehavior", "ContextService", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g, f, b) {
    e.showAddActorForm = !1,
    e.showAddRoleForm = !1;
    var v = function() {
        var n = _.map(e.documentInfo.document.recipients, function(e) {
            return e.contact
        }
        );
        e.actors = n
    }
      , h = function(n, t, o) {
        var i = "widgetInfo.widget." + n;
        return e.$watch(i, function(e, n) {
            (o || e !== n) && t()
        }
        , !0)
    }
      , w = function() {
        var n = [];
        return n.push(h("type", function() {
            var n = o.getWidgetSettingsTemplate(e.widgetInfo.widget.type);
            e.widgetSettingsTemplate = n ? n : "/views/widgets/settings/base.html"
        }
        , !0)),
        n.push(h("actor", v)),
        n
    }
    ;
    w(),
    v(),
    e.remove = function() {
        i.confirm({
            text: "Remove this field?",
            okText: "Remove",
            noText: "Cancel"
        }).then(function() {
            n.$broadcast("widget.delete", e.widgetInfo)
        }
        )
    }
    ,
    e.$on("widget.delete", function() {
        e.close()
    }
    ),
    e.close = function() {
        f.fireEvent({
            name: "close-settings"
        })
    }
    ,
    e.addRecipient = function(n) {
        y(n) ? (e.showAddActorForm = !1,
        e.widgetInfo.widget.actor = n.id) : e.documentInfo.isSentAndNotCompleted ? i.confirm({
            title: "Add new recipient",
            text: "You're about to add " + g("fullName")(n) + " to this document. An email with a link to this document will be automatically sent once recipient is added."
        }).then(function() {
            k(n)
        }
        ) : k(n)
    }
    ;
    var k = function(n) {
        r.addRecipient(m.documentId, n.id).then(function(t) {
            e.documentInfo.document.recipients.push(t),
            p.assignColor(e.documentInfo.document.recipients),
            a.assignType(e.documentInfo.document.recipients, e.documentInfo.widgetsInfo),
            e.showAddActorForm = !1,
            v(),
            e.widgetInfo.widget.actor = n.id
        }
        )
    }
      , y = function(n) {
        return _.any(e.documentInfo.document.recipients, function(e) {
            return e.contact.id === n.id
        }
        )
    }
    ;
    e.toggleAddRoleForm = function() {
        e.showAddRoleForm = !e.showAddRoleForm
    }
    ,
    e.toggleAddActorForm = function() {
        e.showAddActorForm = !e.showAddActorForm
    }
    ,
    e.$on("roleForm.createRole", function(n, t) {
        t.role && (e.widgetInfo.widget.role = t.role.id),
        e.showAddRoleForm = !1
    }
    ),
    e.isTemplate = e.documentInfo.document.type === s.DOCUMENT.TYPE.TEMPLATE || e.documentInfo.document.type === s.DOCUMENT.TYPE.EDITABLE_TEMPLATE,
    e.isLibraryItem = e.documentInfo.document.type === s.DOCUMENT.TYPE.LIBRARY_ITEM,
    l.checkAvailability(s.FEATURES.DEVELOPER_PORTAL).then(function(n) {
        e.developerPortalAvailable = n
    }
    ),
    e.isTemplates = b.isTemplates()
}
]).directive("widgetSettings", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/widget-settings-base.html",
        scope: {
            widgetInfo: "=",
            documentInfo: "=",
            highlight: "="
        },
        controller: "WidgetsSettingController"
    }
}
]),
angular.module("pd.widgets").directive("removeButton", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/settings/blocks/remove-button.html"
    }
}
]).directive("applyButton", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/settings/blocks/apply-button.html"
    }
}
]).directive("actorSelectorForm", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/widgets/settings/blocks/actor-selector-form.html"
    }
}
]).directive("required", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/settings/blocks/required.html"
    }
}
]).directive("title", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/settings/blocks/title.html"
    }
}
]).directive("fieldName", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/settings/blocks/field-name.html"
    }
}
]),
angular.module("pd.widgets").directive("dateFormatSelector", ["DateFormats", function(e) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/widgets/settings/blocks/date-format-selector.html",
        controller: ["$scope", "WidgetsService", function(n, t) {
            n.dateFormats = e.getFormats(),
            n.$watch("widgetInfo.widget.properties.dateFormat", function(e, o) {
                e && o && e !== o && n.widgetInfo.widget.patch && t.updateWidget(n.widgetInfo.widget)
            }
            , !0)
        }
        ]
    }
}
]),
angular.module("pd.widgets").directive("dropdownItems", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/widgets/settings/blocks/dropdown-items.html",
        controller: "DropdownItemsController"
    }
}
]).controller("DropdownItemsController", ["$scope", "WidgetsService", function(e, n) {
    e.widgetInfo.widget.properties && e.widgetInfo.widget.properties.items || (e.widgetInfo.widget.properties = {
        items: []
    }),
    e.$watchCollection("widgetInfo.widget.properties.items", function() {
        n.updateWidget(e.widgetInfo.widget)
    }
    )
}
]),
angular.module("pd.widgets").directive("roleSelector", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/widgets/settings/blocks/roles.html"
    }
}
]),
angular.module("pd.widgets.dropdown", ["pd.widgets.registry", "pd.constants"]).config(["WidgetRegistryProvider", "Constants", function(e, n) {
    e.register({
        type: n.WIDGET.DROPDOWN,
        icon: "icon--dropdown",
        handleOrder: 0,
        initial: {
            type: n.WIDGET.DROPDOWN,
            position: n.WIDGET.DEFAULT_POSITION
        },
        templates: {
            preview: "/views/widgets/preview/dropdown.html",
            settings: "/views/widgets/settings/dropdown.html"
        },
        "static": !1,
        sizing: {
            initial: {
                width: 20,
                height: 3
            },
            inline: {
                width: 154,
                height: 22
            },
            aspectRatio: !1
        },
        postLink: function(e) {
            e.$watch("widgetInfo.widget.properties.items", function(n) {
                e.widgetInfo.widget.data && e.widgetInfo.widget.data.value && _.isArray(n) && !_.contains(n, e.widgetInfo.widget.data.value) && (e.widgetInfo.widget.data.value = "")
            }
            ),
            e.$watch("widgetInfo.widget.data.value", function(n) {
                e.widgetInfo.widget.data && null  === n && (e.widgetInfo.widget.data.value = "")
            }
            )
        }
    })
}
]),
angular.module("pd.widgets.initials", ["pd.widgets.registry", "pd.constants", "ng"]).config(["WidgetRegistryProvider", "Constants", function(e, n) {
    e.register({
        type: n.WIDGET.INITIALS,
        icon: "icon--initials",
        handleOrder: 2,
        initial: {
            type: n.WIDGET.INITIALS,
            position: n.WIDGET.DEFAULT_POSITION
        },
        "static": !1,
        templates: {
            preview: "/views/widgets/preview/initials.html",
            settings: "/views/widgets/settings/initials.html"
        },
        sizing: {
            initial: {
                width: 12,
                height: 6
            },
            inline: {
                width: 96,
                height: 48
            },
            aspectRatio: !0
        }
    })
}
]),
angular.module("pd.widgets.masked", ["pd.widgets.registry", "pd.constants"]).config(["WidgetRegistryProvider", "Constants", function(e, n) {
    e.register({
        type: n.WIDGET.MASKED,
        icon: "icon--text-masked",
        handleOrder: 0,
        initial: {
            type: n.WIDGET.MASKED,
            position: n.WIDGET.DEFAULT_POSITION,
            has_value: !1
        },
        templates: {
            preview: "/views/widgets/preview/masked.html"
        },
        "static": !1,
        sizing: {
            initial: {
                width: 20,
                height: 3
            },
            inline: {
                width: 154,
                height: 22
            },
            aspectRatio: !1
        },
        postLink: function(e, n, t, o, i) {
            var a = i.get("WidgetsService")
              , s = i.get("ElementClickBehavior");
            e.showMaskedValue = function() {
                e.widgetInfo.masked = !1
            }
            ,
            e.hideMaskedValue = function() {
                e.widgetInfo.masked = !0
            }
            ,
            e.widgetInfo.masked = e.documentInfo.isDraft ? !0 : e.widgetInfo.editable || e.documentInfo.isOwner ? !1 : !0;
            var l = function() {
                return e.widgetInfo.editable || e.documentInfo.isOwner
            }
              , r = function() {
                return e.widgetInfo.widget.id && e.widgetInfo.widget.has_value
            }
            ;
            l() && r() && (e.loadingValue = !0,
            a.getWidgetValue(e.widgetInfo.widget).then(function(n) {
                e.widgetInfo.widget.data = n,
                e.$emit("widget.value.loaded", {
                    widget: e.widgetInfo.widget
                }),
                e.loadingValue = !1
            }
            ));
            var c = s.getStream().filter(function(n) {
                return "widget-activate" === n.name && n.widgetId === e.widgetInfo.widget.id
            }
            ).subscribe(function() {
                n.find("input[type=password]").focus()
            }
            );
            e.$on("$destroy", function() {
                c.dispose()
            }
            )
        }
    })
}
]),
angular.module("pd.widgets").service("WidgetInfoFactory", ["Constants", "WidgetRegistry", "WidgetUtility", function(e, n, t) {
    this.createWidgetInfo = function(n, o, i) {
        var a = {
            mode: o.isDraft ? e.WIDGET.BUILD_MODE : e.WIDGET.EDIT_MODE,
            widget: n,
            "static": t.isStatic(n),
            aspectRatio: t.isAspectRatio(n),
            editable: t.isEditable(n, o),
            draggable: t.isDraggable(o),
            resizable: t.isResizable(o),
            isSettingsEditable: t.isSettingsEditable(o)
        };
        return i && i.block && (a.blockId = i.block.id),
        !a["static"] && n.actor ? a = _.assign(a, t.getActorInfo(o.document ? o.document.recipients : o.recipients, n.actor)) : !a["static"] && n.role && (a = _.assign(a, t.getRoleInfo(o.document ? o.document.roles : o.roles, n.role))),
        a
    }
    ,
    this.createEmbeddedWidgetInfo = function(n, o) {
        var i = t.isStatic(n)
          , a = {
            mode: e.WIDGET.EDIT_MODE,
            widget: n,
            "static": i,
            aspectRatio: t.isAspectRatio(n),
            editable: !i,
            draggable: !1,
            resizable: !1,
            isSettingsEditable: !1
        };
        return _.assign(a, t.generateRecipientLabel({
            contact: o
        })),
        a
    }
}
]),
angular.module("pd.widgets.registry", []).provider("WidgetRegistry", [function() {
    var e = this._registry = {};
    this.register = function(e) {
        return this._registry[e.type] = e,
        !0
    }
    ,
    this.$get = function() {
        return {
            getAllWidgets: function() {
                return _.sortBy(_.values(e), "handleOrder")
            },
            getWidgetsForDoc: function(e) {
                return e && e.isOwner && e.isDraft ? this.getAllWidgets() : []
            },
            _getWidgetTemplateByType: function(n, t) {
                return e[n] && e[n].templates ? e[n].templates[t] : null 
            },
            getWidgetPreviewTemplate: function(e) {
                return this._getWidgetTemplateByType(e, "preview")
            },
            getInlineWidgetPreviewTemplate: function(e) {
                return this._getWidgetTemplateByType(e, "inline")
            },
            getWidgetSettingsTemplate: function(e) {
                return this._getWidgetTemplateByType(e, "settings")
            },
            getWidgetSizingModel: function(n) {
                return e[n] && e[n].sizing ? e[n].sizing : null 
            },
            getWidgetPostLinkFunction: function(n) {
                return e[n] && e[n].postLink ? e[n].postLink : function() {}
            },
            getWidgetStaticMode: function(n) {
                return e[n] && e[n]["static"]
            },
            getWidgetAspectRatio: function(n) {
                return e[n] && e[n].sizing.aspectRatio
            },
            createNewWidgetInstance: function(n) {
                var t = e[n]
                  , o = {};
                return _.assign(o, angular.copy(t.initial)),
                _.assign(o, {
                    size: angular.copy(t.sizing.initial)
                }),
                o
            },
            createNewInlineWidgetInstance: function(n) {
                var t = e[n]
                  , o = {};
                return _.assign(o, angular.copy(t.initial)),
                _.assign(o, {
                    size: angular.copy(t.sizing.inline)
                }),
                o
            }
        }
    }
}
]),
angular.module("pd.widgets").factory("SizingModelFactory", [function() {
    return function(e, n) {
        var t = e.width / e.height;
        return this.size = function(e, n) {
            return this._getRelativeSize(e, n)
        }
        ,
        this.position = function(e) {
            return this._getRelativePosition(e)
        }
        ,
        this.absolutePosition = function(e) {
            var n = this.documentWidth() / t;
            return {
                top: e.top * n / 100,
                left: e.left * this.documentWidth() / 100
            }
        }
        ,
        this._getRelativeWidth = function(e) {
            return e / this.documentWidth() * 100
        }
        ,
        this._getRelativeHeight = function(e) {
            return e / this.documentWidth() * 100
        }
        ,
        this._getRelativeSize = function(e, n) {
            var o = this._getRelativeWidth(e.width)
              , i = this._getRelativeHeight(e.height)
              , a = this.documentWidth() / t
              , s = a * n.top / 100;
            return n.left + o > 100 && (o = 100 - n.left),
            s + e.height > a && (i = this._getRelativeHeight(a - s)),
            {
                width: o,
                height: i
            }
        }
        ,
        this._getRelativePosition = function(e) {
            var n = this.documentWidth() / t;
            return {
                top: e.top / n * 100,
                left: e.left / this.documentWidth() * 100
            }
        }
        ,
        this.documentWidth = function() {
            return n.documentContentInfo.documentSize.width
        }
        ,
        this
    }
}
]),
angular.module("pd.widgets").service("WidgetHighlightService", ["scrollToElement", "WidgetUtility", function(e, n) {
    var t = function(e, n) {
        var t = 50;
        return n.top < t ? !0 : n.top >= e.height() - t ? !0 : n.left < t ? !0 : n.left >= e.width() - t ? !0 : !1
    }
      , o = function(e) {
        return "#widget-" + e.id
    }
      , i = function(n) {
        var i = 250
          , a = o(n)
          , s = angular.element(".document")
          , l = angular.element(a)
          , r = l.offset();
        t(s, r) && (i = r ? 10 * Math.ceil(Math.sqrt(Math.abs(s.scrollTop() - r.top))) + 250 : i,
        i = Math.min(i, 500),
        e(s, a, {
            duration: i,
            offset: -100
        }))
    }
    ;
    this.highlightWidget = function(e) {
        i(e);
        var n = angular.element(o(e));
        n.hasClass("widget--focused") || n.mousedown()
    }
    ,
    this.highlightWidgetAndEdit = function(e, t) {
        var a = n.findFirst(e, t);
        i(a.widget);
        var s = angular.element(o(a.widget));
        s.hasClass("widget--focused") ? s.mousedown() : (s.mousedown(),
        s.mousedown())
    }
    ,
    this.highlightFirstWidget = function(e, t) {
        var o = n.findFirst(e, t);
        this.highlightWidget(o.widget)
    }
}
]),
angular.module("pd.widgets").service("WidgetUtility", ["WidgetRegistry", "Constants", "$timeout", "$rootScope", "scrollToElement", "$q", "ContextService", "WidgetsService", function(e, n, t, o, i, a, s, l) {
    var r = this;
    this.isStatic = function(n) {
        return e.getWidgetStaticMode(n.type)
    }
    ,
    this.isEditable = function(e, n) {
        var t = r.isStatic(e);
        return n.isSent || n.isViewed ? t ? !1 : n.isRecipientCompletedDocument ? !1 : n.isRecipientInSigningOrder ? e.actor === n.actor && !e.readonly : !1 : n.isDraft && n.isOwner
    }
    ,
    this.isSettingsEditable = function(e) {
        return e.isOwner && e.isDraft
    }
    ,
    this.isResizable = function(e) {
        return e.isOwner && e.isDraft
    }
    ,
    this.isDraggable = function(e) {
        return e.isOwner && e.isDraft
    }
    ,
    this.hasValue = function(e) {
        return e.required ? e.has_value ? !0 : e.data ? e.type === n.WIDGET.CHECKBOX ? e.data.value === !0 : !_.isEmpty(e.data.value) : !1 : !0
    }
    ,
    this.isAspectRatio = function(n) {
        return e.getWidgetAspectRatio(n.type)
    }
    ,
    this.isSignature = function(e) {
        return e.type === n.WIDGET.SIGNATURE
    }
    ,
    this.isInitials = function(e) {
        return e.type === n.WIDGET.INITIALS
    }
    ,
    this.recipientWidgets = function(e, n) {
        return _.filter(e, function(e) {
            return e.widget ? e.widget.actor === n : e.actor === n
        }
        )
    }
    ,
    this.getRoleInfo = function(e, n) {
        var t = {
            roleName: "",
            roleInitials: [],
            roleColor: -1
        }
          , o = _.find(e, {
            id: n
        });
        return o && (t.roleName = o.name,
        t.roleInitials.push({
            head: o.name.substr(0, 2),
            tail: o.name.substr(2)
        }),
        t.roleColor = o.color),
        t
    }
    ;
    var c = function(e) {
        var n = {
            actorName: "",
            actorInitials: [],
            actorColor: 1
        };
        if (e) {
            n.actorColor = e.color ? e.color : n.actorColor;
            var t = e.contact.first_name
              , o = e.contact.last_name
              , i = e.contact.email;
            t && o ? (n.actorName = t + " " + o,
            n.actorInitials.push({
                head: t.substr(0, 1),
                tail: t.substr(1)
            }),
            n.actorInitials.push({
                head: o.substr(0, 1),
                tail: o.substr(1)
            })) : t ? (n.actorName = t,
            n.actorInitials.push({
                head: t.substr(0, 2),
                tail: t.substr(2)
            })) : o ? (n.actorName = o,
            n.actorInitials.push({
                head: o.substr(0, 2),
                tail: o.substr(2)
            })) : (n.actorName = i,
            n.actorInitials.push({
                head: i.substr(0, 2),
                tail: i.substr(2)
            }))
        }
        return n
    }
    ;
    this.generateRecipientLabel = c,
    this.getActorInfo = function(e, n) {
        var t = this.findContact(e, n);
        return c(t)
    }
    ,
    this.findContact = function(e, n) {
        return _.find(e, function(e) {
            return e.contact.id === n
        }
        )
    }
    ,
    this.actorWidgets = function(e, n) {
        return _.filter(e, function(e) {
            return e.widget ? e.widget.actor === n : e.actor === n
        }
        )
    }
    ;
    var d = function(e) {
        return _.min(e, function(e) {
            return e.widget.position.left
        }
        )
    }
      , u = function(e) {
        return e.widget.position.top + e.widget.size.height / 2
    }
      , m = function(e, n) {
        var t = n.widget;
        return t.position.top < e && t.position.top + t.size.height > e
    }
      , p = function(e) {
        var n = d(e)
          , t = u(n)
          , o = {
            line: {
                center: t,
                widgets: []
            },
            remain: []
        };
        return _.each(e, function(e) {
            e === n || m(t, e) ? o.line.widgets.push(e) : o.remain.push(e)
        }
        ),
        o
    }
      , g = function(e, n) {
        if (n = n || [],
        _.isEmpty(e))
            return n;
        var t = p(e);
        return n.push(t.line),
        g(t.remain, n)
    }
      , f = function(e) {
        var n = _.sortBy(g(e), "center");
        return _.reduce(n, function(e, n) {
            var t = _.sortBy(n.widgets, function(e) {
                return e.widget.position.left
            }
            );
            return e.concat(t)
        }
        , [])
    }
    ;
    this.sortInlineWidgetsByPosition = f,
    this.sortByPosition = f,
    this.findFirst = function(e, n) {
        if (1 === e.length)
            return _.first(e);
        if (n.blockList) {
            var t = null ;
            return _.each(n.blockList.blocks, function(n) {
                var o = _.find(n.widgetsInfo, function(n) {
                    return _.any(e, function(e) {
                        return e.widget.id === n.widget.id
                    }
                    )
                }
                );
                return o ? (t = o,
                !1) : void 0
            }
            ),
            t
        }
        var o = _.groupBy(e, function(e) {
            return e.page.number
        }
        )
          , i = _.min(_.keys(o))
          , a = o[i];
        return _.first(f(a))
    }
    ,
    this.calculateCompleted = function(e) {
        return _.reduce(e, function(e, n) {
            var t = n.widget;
            return n["static"] ? e : t.required && (t.data && t.data.value || t.has_value) ? e + 1 : e
        }
        , 0)
    }
    ,
    this.calculateRequired = function(e) {
        return _.reduce(e, function(e, n) {
            return n["static"] ? e : n.widget.required ? e + 1 : e
        }
        , 0)
    }
    ,
    this.splitWidgetsByPages = function(e, n) {
        return _.reduce(n.pages, function(n, t) {
            return n.push(_.filter(e, function(e) {
                return e.widget.position.page === t.number && e.widget.content === t.content
            }
            )),
            n
        }
        , [])
    }
    ,
    this.pageFromPoint = function(e) {
        for (var n = angular.element(".document-page__overlay"), t = 0; t < n.length; t++) {
            var o = n.eq(t)
              , i = o.offset()
              , a = o.width()
              , s = o.height();
            if (e.x >= i.left && e.x <= i.left + a && e.y >= i.top && e.y <= i.top + s) {
                var l = angular.element(".document-pdf-page").eq(t)
                  , r = Number(l.attr("data-page-num")) - 1
                  , c = Number(l.attr("data-page-content"));
                return {
                    index: r,
                    content: c,
                    pageEl: l
                }
            }
        }
    }
    ,
    this.isOutOfPage = function(e, n, t) {
        var o = e.size
          , i = Number(o.width)
          , a = Number(o.height)
          , s = a * t.documentWidth / 100
          , l = t.pageWidth / t.pageHeight
          , r = t.documentWidth / l
          , c = r * n.top / 100;
        return n.top < 0 || n.left < 0 ? !0 : n.top > 100 || n.left > 100 ? !0 : n.left + i > 100 ? !0 : c + s > r ? !0 : !1
    }
    ,
    this.findTargetBlockEl = function(e, n, t) {
        var o = e.top / t + n.height / 2;
        return _.find(angular.element(".doc-block__bd"), function(e) {
            var n = angular.element(e)
              , i = n.offset().top / t
              , a = n.height();
            return o > i && i + a > o
        }
        )
    }
    ,
    this.isOutOfBlock = function(e, n, t) {
        if (n.top < 0 || n.left < 0)
            return !0;
        var o = angular.element('div[id="' + t.id + '"]');
        return 0 === o.length ? !0 : n.top + e.widget.size.height > o.height() ? !0 : n.left + e.widget.size.width > o.width() ? !0 : !1
    }
    ;
    var b = {}
      , v = function(e) {
        var o = e.position
          , i = e.widgetInfo
          , a = e.direction;
        switch (a) {
        case n.DIRECTIONS.UP:
            o.top--;
            break;
        case n.DIRECTIONS.DOWN:
            o.top++;
            break;
        case n.DIRECTIONS.LEFT:
            o.left--;
            break;
        case n.DIRECTIONS.RIGHT:
            o.left++
        }
        if (e.isOutOfContainer(i, o))
            return i.isMoving = !1,
            !1;
        var s = e.positionConverter(o);
        s.pdf = i.widget.position.pdf,
        _.assign(i.widget.position, s),
        i.isMoving = !0,
        t.cancel(b[i.widget.id]),
        b[i.widget.id] = t(function() {
            i.widget.position.pdf && (i.widget.position.pdf = r.calculateWidgetPositionInPdf(i.widget)),
            i.widget.id && l.updateWidget(i.widget),
            b[i.widget.id] = null ,
            i.isMoving = !1
        }
        , 700)
    }
    ;
    this.moveWidget = function(e, n, t) {
        var o = t.absolutePosition(e.widget.position)
          , i = this;
        v({
            widgetInfo: e,
            direction: n,
            position: o,
            isOutOfContainer: function(e, n) {
                var o = t.position(n)
                  , a = {
                    documentWidth: t.documentWidth(),
                    pageWidth: e.page.size.width,
                    pageHeight: e.page.size.height
                };
                return i.isOutOfPage(e.widget, o, a)
            },
            positionConverter: function(e) {
                return t.position(e)
            }
        })
    }
    ,
    this.moveInlineWidget = function(e, n, t) {
        var o = this;
        v({
            widgetInfo: e,
            direction: n,
            position: _.cloneDeep(e.widget.position),
            isOutOfContainer: function(e, n) {
                return o.isOutOfBlock(e, n, t)
            },
            positionConverter: _.identity
        })
    }
    ,
    this.calculateWidgetSizeInPdf = function(e) {
        var n = angular.element("#widget-" + e.id).offset()
          , t = r.pageFromPoint({
            x: n.left,
            y: n.top
        }) || r.pageFromPoint({
            x: n.top + e.size.height,
            y: n.left + e.size.width
        });
        return t && n ? {
            width: e.size.width / t.pageEl.width() * 100,
            height: e.size.height / t.pageEl.width() * 100
        } : void 0
    }
    ,
    this.calculateWidgetPositionInPdf = function(e) {
        var n = angular.element("#widget-" + e.id).offset()
          , t = r.pageFromPoint({
            x: n.left,
            y: n.top
        }) || r.pageFromPoint({
            x: n.top + e.size.height,
            y: n.left + e.size.width
        });
        if (t && n) {
            var o, i, a = t.pageEl.offset(), s = {
                width: t.pageEl.width(),
                height: t.pageEl.height()
            };
            return o = (n.top - a.top) / s.height * 100,
            i = (n.left - a.left) / s.width * 100,
            {
                page: t.index + 1,
                left: i,
                top: o
            }
        }
    }
}
]),
angular.module("pd.widgets.my-signature", ["pd.widgets.registry", "pd.constants", "pd.services", "ng"]).config(["WidgetRegistryProvider", "Constants", function(e, n) {
    var t = angular.injector(["ng"])
      , o = t.get("$timeout");
    e.register({
        type: n.WIDGET.MYSIGNATURE,
        icon: "icon--sign",
        handleOrder: 5,
        initial: {
            type: n.WIDGET.MYSIGNATURE,
            position: n.WIDGET.DEFAULT_POSITION
        },
        "static": !0,
        templates: {
            preview: "/views/widgets/preview/my-signature.html",
            settings: "/views/widgets/settings/my-signature.html"
        },
        sizing: {
            initial: {
                width: 22,
                height: 8
            },
            aspectRatio: !0
        },
        postLink: function(e, n) {
            function t() {
                var e = n.find(".widget__drag-handler");
                e.show()
            }
            var i = !1;
            e.$on("widget.dragCompleted", function() {
                i = !0
            }
            ),
            e.$on("signature.close", t),
            e.$on("signature.done", t),
            e.activate = function() {
                if (i)
                    return void (i = !1);
                var e = n.find(".widget__drag-handler")
                  , t = n.find(".signature-view");
                e.hide(),
                o(function() {
                    t.click()
                }
                )
            }
        }
    })
}
]),
angular.module("pd.widgets.signature", ["pd.widgets.registry", "pd.constants", "ng"]).config(["WidgetRegistryProvider", "Constants", function(e, n) {
    e.register({
        type: n.WIDGET.SIGNATURE,
        icon: "icon--sign",
        handleOrder: 1,
        initial: {
            type: n.WIDGET.SIGNATURE,
            position: n.WIDGET.DEFAULT_POSITION
        },
        "static": !1,
        templates: {
            preview: "/views/widgets/preview/signature.html",
            settings: "/views/widgets/settings/signature.html"
        },
        sizing: {
            initial: {
                width: 22,
                height: 8
            },
            inline: {
                width: 176,
                height: 64
            },
            aspectRatio: !0
        }
    })
}
]),
angular.module("pd.widgets.text", ["pd.widgets.registry", "pd.constants"]).config(["WidgetRegistryProvider", "Constants", function(e, n) {
    e.register({
        type: n.WIDGET.TEXT,
        icon: "icon--text-static",
        handleOrder: 5,
        initial: {
            type: n.WIDGET.TEXT,
            position: n.WIDGET.DEFAULT_POSITION
        },
        "static": !0,
        templates: {
            preview: "/views/widgets/preview/text.html",
            settings: "/views/widgets/settings/text.html"
        },
        sizing: {
            initial: {
                width: 30,
                height: 10
            },
            aspectRatio: !1
        },
        postLink: function(e, n, t, o, i) {
            var a = !1
              , s = !1
              , l = e.widgetInfo.widget;
            e.$on("widget.dragCompleted", function() {
                s = !0
            }
            ),
            e.activate = function() {
                if (s)
                    return void (s = !1);
                var e = n.find(".widget__drag-handler")
                  , t = n.find("textarea");
                e.hide(),
                t.focus(),
                a || (t.focusout(function() {
                    e.show()
                }
                ),
                a = !0)
            }
            ;
            var r = i.get("ElementClickBehavior").getStream().filter(function(e) {
                return "widget-activate" === e.name && e.widgetId === l.id
            }
            ).subscribe(e.activate);
            e.$on("$destroy", function() {
                r.dispose()
            }
            )
        }
    })
}
]),
angular.module("pd.widgets.textfield", ["pd.widgets.registry", "pd.constants"]).config(["WidgetRegistryProvider", "Constants", function(e, n) {
    e.register({
        type: n.WIDGET.TEXTFIELD,
        icon: "icon--text-field",
        handleOrder: 0,
        initial: {
            type: n.WIDGET.TEXTFIELD,
            position: n.WIDGET.DEFAULT_POSITION
        },
        templates: {
            preview: "/views/widgets/preview/textfield.html"
        },
        "static": !1,
        sizing: {
            initial: {
                width: 20,
                height: 3
            },
            inline: {
                width: 154,
                height: 22
            },
            aspectRatio: !1
        },
        postLink: function(e, n, t, o, i) {
            var a = i.get("ElementClickBehavior").getStream().filter(function(n) {
                return "widget-activate" === n.name && n.widgetId === e.widgetInfo.widget.id
            }
            ).subscribe(function() {
                n.find("input[type=text]").focus()
            }
            );
            e.$on("$destroy", function() {
                a.dispose()
            }
            )
        }
    })
}
]),
angular.module("pd.widgets.uploadfield", ["pd.widgets.registry", "pd.constants"]).config(["WidgetRegistryProvider", "Constants", function(e, n) {
    e.register({
        type: n.WIDGET.UPLOAD,
        icon: "icon--upload-field",
        handleOrder: 0,
        initial: {
            type: n.WIDGET.UPLOAD,
            position: n.WIDGET.DEFAULT_POSITION
        },
        templates: {
            preview: "/views/widgets/preview/uploadfield.html",
            settings: "/views/widgets/settings/uploadfield.html"
        },
        "static": !1,
        sizing: {
            initial: {
                width: 20,
                height: 3
            },
            inline: {
                width: 154,
                height: 22
            },
            aspectRatio: !1
        },
        postLink: function(e, n, t, o, i) {
            var a, s = i.get("$timeout"), l = i.get("UploadFieldWidgetDialog"), r = i.get("WidgetsService"), c = i.get("$download"), d = e.widgetInfo.widget;
            e.$watch("widgetInfo.dragging", function(e) {
                e && s.cancel(a)
            }
            ),
            e.$watch("widgetInfo.resizing", function(e) {
                e && s.cancel(a)
            }
            );
            var u = i.get("ElementClickBehavior").getStream().filter(function(n) {
                return "widget-activate" === n.name && n.widgetId === d.id && !e.hasValue
            }
            ).subscribe(function() {
                s.cancel(a),
                a = s(e.showUploadDialog, 500)
            }
            );
            e.$on("$destroy", function() {
                u.dispose()
            }
            ),
            e.showUploadDialog = function() {
                e.hasValue || (s.cancel(a),
                l.show({
                    widgetInfo: e.widgetInfo,
                    documentInfo: e.documentInfo
                }).then(function(n) {
                    d.data = d.data || {},
                    d.data.value = n.url,
                    e.hasValue = !0
                }
                ))
            }
            ,
            e.removeFile = function() {
                e.removingFile = !0,
                r.removeUploadedFile(d).then(function() {
                    e.removingFile = !1,
                    d.data.value = "",
                    e.hasValue = !1
                }
                )
            }
            ,
            e.downloadFile = function() {
                e.downloading = !0,
                r.getUploadedFileLink(d).then(function(n) {
                    e.downloading = !1,
                    c(n.url, e.documentInfo)
                }
                )
            }
        }
    })
}
]),
angular.module("pd.common").service("UploadFieldWidgetDialog", ["ModalService", function(e) {
    this.show = function(n) {
        return n = n || {},
        e.open({
            templateUrl: "/views/widgets/dialogs/upload-field-widget-dialog.html",
            controller: "UploadFieldWidgetDialogController",
            resolve: {
                options: function() {
                    return n
                }
            },
            backdrop: "static"
        })
    }
}
]).controller("UploadFieldWidgetDialogController", ["$scope", "FileUploader", "Config", "options", function(e, n, t, o) {
    e.widgetInfo = o.widgetInfo,
    e.documentInfo = o.documentInfo,
    e.uploader = new n({
        url: t.APIBaseURL + "widgets/" + e.widgetInfo.widget.id + "/upload/",
        autoUpload: !1,
        headers: {
            Authorization: t.authorizationStrategy.getScheme() + " " + t.authorizationStrategy.getToken()
        },
        onAfterAddingFile: function(n) {
            e.file = n
        },
        onSuccessItem: function(n, t) {
            e.$close(t)
        }
    }),
    e.upload = function() {
        e.uploading = !0,
        e.uploader.uploadItem(e.file)
    }
    ,
    e.onFileDrop = function(n) {
        e.uploader.addToQueue(n)
    }
}
]),
angular.module("pd.editor", ["pd.config", "pd.common", "pd.directives", "pd.services", "ui.sortable"]),
angular.module("pd.editor").directive("editor", ["$controller", function(e) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            documentInfo: "=",
            documentContentInfo: "=",
            blockList: "="
        },
        templateUrl: "/views/editor/editor.html",
        link: function(n, t) {
            e("EditorController", {
                $scope: n,
                $element: t
            }),
            e("EditorDnDController", {
                $scope: n,
                $element: t
            }),
            e("EditorBlocksController", {
                $scope: n,
                $element: t
            }),
            e("EditorBlocksReorderController", {
                $scope: n,
                $element: t
            }),
            e("EditorClickController", {
                $scope: n,
                $element: t
            })
        }
    }
}
]),
angular.module("pd.editor").controller("EditorBlocksController", ["$scope", "BlocksService", "$rootScope", "RecipientService", "Constants", "$filter", "ElementClickBehavior", "LibraryService", "singleEvent", "scrollToElement", "$timeout", "NotificationCenter", "ContextService", "DocumentTokensDialog", "WidgetInfoFactory", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g) {
    var f = function(n, t) {
        e[n] = null ,
        d(function() {
            e[n] = t
        }
        , 50)
    }
      , b = function() {
        e.contentBlocks = _.filter(e.contentBlocks, function(e) {
            return e && e.id
        }
        )
    }
      , v = {
        isCreationAllowed: function() {
            return !0
        },
        beforeCreation: function(n, t) {
            var o = {};
            return t ? e.contentBlocks.splice(n, 1, o) : e.contentBlocks.splice(n, 0, o),
            !0
        },
        afterCreation: function(n, t) {
            e.contentBlocks.splice(t, 1, n),
            e.updateBlockOrder()
        },
        afterRemoving: function(n) {
            e.contentBlocks = _.filter(e.contentBlocks, function(e) {
                return e && e.id !== n.id
            }
            ),
            e.updateBlockOrder()
        }
    }
      , h = function(n) {
        return {
            isCreationAllowed: function() {
                return !e[n]
            },
            beforeCreation: function() {
                return b(),
                e[n] = {},
                !0
            },
            afterCreation: function(e) {
                f(n, e)
            },
            afterRemoving: function() {
                e[n] = null 
            }
        }
    }
      , w = {
        "default": v,
        cover: h("coverBlock"),
        header: h("headerBlock"),
        footer: h("footerBlock")
    }
      , k = [i.BLOCK_TYPES.COVER, i.BLOCK_TYPES.HEADER, i.BLOCK_TYPES.FOOTER];
    e.contentBlocks = [],
    e.$watch("blockList", function(n) {
        n && (e.contentBlocks = _.filter(n.blocks, function(e) {
            return -1 === k.indexOf(e.type.handle)
        }
        ),
        e.coverBlock = _.find(n.blocks, function(e) {
            return e.type.handle === i.BLOCK_TYPES.COVER
        }
        ),
        e.headerBlock = _.find(n.blocks, function(e) {
            return e.type.handle === i.BLOCK_TYPES.HEADER
        }
        ),
        e.footerBlock = _.find(n.blocks, function(e) {
            return e.type.handle === i.BLOCK_TYPES.FOOTER
        }
        ))
    }
    );
    var y = function(e, n) {
        var t = 50;
        return n.top < t ? !0 : n.top >= e.height() - t ? !0 : !1
    }
      , I = function(n) {
        var t;
        if (_.isUndefined(n.index) ? n.id && (t = _.find(e.blockList.blocks, {
            id: n.id
        })) : t = e.contentBlocks[n.index],
        t = t || _.last(e.contentBlocks)) {
            var o = angular.element(".document")
              , i = "#" + t.id
              , a = angular.element(i)
              , s = a.offset();
            y(o, s) && c(o, i, {
                duration: 50,
                offset: -100
            })
        }
    }
    ;
    e.scrollToBlock = I,
    e.updateBlockOrder = function() {
        n.reorderBlocks(e.blockList.id, e.contentBlocks).then(function() {
            _.each(e.contentBlocks, function(e, n) {
                e.order = n
            }
            )
        }
        )
    }
    ;
    var C = !1;
    e.$on("block.drag.from.doctools.started", function() {
        C = !0
    }
    ),
    e.$on("widget.drag.from.doctools.started", function() {
        C = !0
    }
    ),
    e.$on("block.drag.from.doctools.ended", function() {
        C = !1
    }
    ),
    e.$on("widget.drag.from.doctools.ended", function() {
        C = !1
    }
    );
    var S = function(n, t) {
        var o = w[n.type.handle] || w["default"];
        n.created = !C,
        o.afterCreation(n, t),
        e.blockList.blocks.push(n),
        C || d(function() {
            I({
                id: n.id
            })
        }
        , 200)
    }
    ;
    e.addBlock = function(t, o, i) {
        var l = w[t.handle] || w["default"]
          , r = l.isCreationAllowed();
        if (r)
            l.beforeCreation(o, i),
            n.createBlock(t, {
                blockList: e.blockList,
                index: o,
                documentInfo: e.documentInfo
            }).then(function(e) {
                S(e, o)
            }
            );
        else {
            var c = _.find(e.blockList.blocks, function(e) {
                return e && e.type && e.type.handle === t.handle
            }
            );
            if (c) {
                I({
                    id: c.id
                }),
                s.fireEvent({
                    name: "block-click",
                    blockId: c.id
                });
                var d = a("translate")("block.name." + t.handle) + " has already been added";
                u.message(d, 13)
            }
        }
    }
    ,
    e.$on("block.add", function(n, t) {
        e.addBlock(t, e.contentBlocks.length)
    }
    ),
    e.$on("block.delete", function(i, a) {
        var s = w[a.type.handle] || w["default"];
        n.removeBlock(a).then(function() {
            s.afterRemoving(a),
            e.blockList.blocks = _.filter(e.blockList.blocks, function(e) {
                return e.id !== a.id
            }
            ),
            t.$broadcast("block.deleted", a),
            e.documentInfo.widgetsInfo = _.filter(e.documentInfo.widgetsInfo, function(e) {
                return e.blockId !== a.id
            }
            ),
            o.assignType(e.documentInfo.document.recipients, e.documentInfo.widgetsInfo)
        }
        )
    }
    ),
    e.$on("block.duplicate", function(t, o) {
        var i = w[o.type.handle] || w["default"]
          , a = e.contentBlocks.indexOf(o) + 1;
        i.beforeCreation(a),
        n.duplicateBlock(o).then(function(n) {
            var t = n.block
              , o = _.map(n.widgets, function(n) {
                return g.createWidgetInfo(n, e.documentInfo, {
                    block: t
                })
            }
            );
            e.documentInfo.widgetsInfo = e.documentInfo.widgetsInfo.concat(o),
            S(t, a)
        }
        , function() {
            e.realoadingDocumentInfo = !1
        }
        )
    }
    );
    var T = function(e) {
        if (e) {
            var n = _.filter(e, function(e) {
                return !_.isEmpty(e.contact)
            }
            );
            return _.map(n, function(e) {
                return {
                    role_id: e.role.id,
                    contact_id: e.contact.id
                }
            }
            )
        }
        return {}
    }
    ;
    e.insertLibraryItem = function(n, o, i) {
        var a = {
            document: e.documentInfo.document.id,
            insert_position: o,
            assoc: T(i)
        };
        return l.insertLibraryItem(n.id, a).then(function(n) {
            e.realoadingDocumentInfo = !0,
            t.$broadcast("library.item.inserted"),
            r(e, "document.reload.after.library.item.insertion", function() {
                e.updateBlockOrder(),
                t.$broadcast("library.item.insert.completed"),
                m.isDocuments() && n.new_tokens_count && p.open(n.new_tokens_count, !0),
                e.realoadingDocumentInfo = !1,
                setTimeout(function() {
                    I({
                        index: o
                    })
                }
                , 400)
            }
            )
        }
        , function() {
            t.$broadcast("library.item.insert.failed"),
            e.realoadingDocumentInfo = !1
        }
        )
    }
    ,
    e.$on("library.item.insert", function(n, t) {
        e.insertLibraryItem(t.item, e.contentBlocks.length, t.assignments)
    }
    )
}
]),
angular.module("pd.editor").controller("EditorBlocksReorderController", ["$scope", "BlocksService", "$rootScope", "ContextService", "LibraryService", "RoleAssignmentDialog", "$timeout", function(e, n, t, o, i, a, s) {
    var l, r;
    e.sortableOptions = {
        axis: "y",
        cancel: ".contenteditable, .document-page__sheet-drop-hint, .icon--drag-content",
        tolerance: "pointer",
        receive: function(e, n) {
            l = n.item.data("block-id"),
            r = n.item.data("library-item-id")
        },
        beforeStop: function(n, t) {
            if (0 === angular.element(t.placeholder).parent().length) {
                var o = $(this);
                o.sortable("refresh"),
                o.sortable("refreshPositions"),
                angular.element("block-reorder-helper").remove(),
                s(function() {
                    var n = _.filter(e.contentBlocks, function(e) {
                        return e && e.id
                    }
                    );
                    e.contentBlocks = [{}],
                    s(function() {
                        e.contentBlocks = n
                    }
                    , 300)
                }
                )
            }
        },
        stop: function(e, n) {
            (n.item.hasClass("block-handle") || n.item.hasClass("library-item")) && n.item.remove()
        },
        helper: function() {
            return angular.element('<div><div class="doc-block doc-block__reorder w100" style="height: 25px;"><div class="doc-block__bd"><div class="doc-block__content"></div><div class="doc-block__controls doc-block__controls--left" style="top: 2px; visibility: visible; display: block; opacity: 1"><div class="doc-block__control doc-block__control--drag btn--block-control"><i class="icon icon--move"></i></div></div></div></div></div>')
        }
    };
    var c = function(e) {
        var n = -1;
        return _.each(e, function(e, t) {
            return e || (n = t),
            e
        }
        ),
        n
    }
      , d = function(n, s) {
        return t.$broadcast("library.item.insert.started"),
        i.getItem(n).then(function(n) {
            !n.roles || _.isEmpty(n.roles) || o.isTemplates() ? e.insertLibraryItem(n, s) : a.open(n, e.documentInfo.document.recipients).then(function(t) {
                e.insertLibraryItem(n, s, t)
            }
            , function() {
                e.insertLibraryItem(n, s)
            }
            )
        }
        )
    }
      , u = function(e) {
        return _.any(e, function(e) {
            return e && void 0 === e.id
        }
        )
    }
      , m = function(e) {
        return _.any(e, function(e, n, t) {
            return 0 === n ? !1 : e && t[n - 1] ? e.order < t[n - 1].order : !1
        }
        )
    }
      , p = function(e) {
        return _.any(e, function(e) {
            return !e
        }
        )
    }
    ;
    e.$watchCollection("contentBlocks", function(t) {
        if (!u(t)) {
            var o = m(t)
              , i = p(t);
            if (o)
                e.updateBlockOrder(t);
            else if (i) {
                var a = c(t);
                -1 !== a && l ? n.getBlockType(l).then(function(n) {
                    e.addBlock(n, a, !0),
                    l = null 
                }
                ) : -1 !== a && r && (d(r, a),
                l = null )
            }
        }
    }
    );
    var g = function(n, t) {
        var o = e.contentBlocks.indexOf(t);
        n(t, o),
        e.updateBlockOrder(),
        s(function() {
            e.scrollToBlock(t)
        }
        , 300)
    }
    ;
    e.$on("move.block.up", function(n, t) {
        var o = t.block;
        g(function(n, t) {
            e.contentBlocks[t] = e.contentBlocks[t - 1],
            e.contentBlocks[t - 1] = n
        }
        , o)
    }
    ),
    e.$on("move.block.down", function(n, t) {
        var o = t.block;
        g(function(n, t) {
            e.contentBlocks[t] = e.contentBlocks[t + 1],
            e.contentBlocks[t + 1] = n
        }
        , o)
    }
    )
}
]),
angular.module("pd.editor").controller("EditorClickController", ["$scope", "ElementClickBehavior", "rx", function(e, n, t) {
    e.$watch("contentEditable", function(o) {
        if (o) {
            var i = angular.element(".document")
              , a = t.Observable.merge(t.Observable.fromEvent(i, "mousedown"), t.Observable.fromEvent(i, "touchstart")).subscribe(function() {
                n.fireEvent({
                    name: "close-settings"
                })
            }
            );
            e.$on("$destroy", function() {
                a.dispose()
            }
            )
        }
    }
    )
}
]),
angular.module("pd.editor").controller("EditorController", ["$scope", "$rootScope", "Constants", function(e, n, t) {
    e.$watch("documentInfo", function(n) {
        n && (e.contentEditable = n.permissions.canEditDocumentContent,
        e.ready = !0,
        e.A4 = t.THEME.PAPER_SIZE.A4)
    }
    ),
    e.theme = function() {
        return e.documentInfo && e.documentInfo.document ? e.documentInfo.document.revision.content.theme : null 
    }
    ;
    var o = function() {
        e.ready = !1
    }
    ;
    e.$on("document.sent", o),
    e.$on("document.sent.for.approval", o),
    e.$on("actor.completed.document", o),
    e.$on("document.newrevision", o)
}
]),
angular.module("pd.editor").controller("EditorDnDController", ["$scope", "$rootScope", "postponed", "WidgetRegistry", "singleEvent", "DocumentPadWidgetsService", "Constants", "BlocksService", "BlockWidgetsService", function(e, n, t, o, i, a, s, l, r) {
    e.$on("widget.add", t(function(t, o) {
        var i = _.range(150, 1500, 150)
          , a = !0;
        _.each(i, function(t) {
            var i = _.find(angular.element(".doc-block__bd"), function(e) {
                var n = angular.element(e)
                  , o = n.offset().top
                  , i = n.height();
                return t > o && o + i > t
            }
            );
            if (i) {
                var s = angular.element(i)
                  , l = s.attr("id")
                  , c = _.find(e.blockList.blocks, {
                    id: l
                });
                r.isAcceptWidget(c) && (n.$broadcast("inline.widget.add", {
                    widget: o.widget,
                    block: c
                }),
                a = !1)
            }
            return a
        }
        ),
        a && n.$broadcast("widget.add.canceled")
    }
    ));
    var c, d = "widget--drag-preview";
    e.dragOver = function(n, t) {
        var i = t.draggable.data("widgetType");
        if (!_.isUndefined(i)) {
            var s = o.createNewInlineWidgetInstance(i)
              , l = a.getLastCreatedWidget(e.documentInfo, i);
            l && _.assign(s.size, l.size),
            t.helper.addClass(d),
            c || (c = {
                width: t.helper.css("width"),
                height: t.helper.css("height")
            }),
            t.helper.css({
                width: s.size.width + "px",
                height: s.size.height + "px"
            })
        }
    }
    ,
    e.dragOut = function(e, n) {
        var t = n.draggable.data("widgetType");
        _.isUndefined(t) || (n.helper.removeClass(d),
        c && (n.helper.css({
            width: c.width,
            height: c.height
        }),
        c = null ))
    }
    ,
    e.drop = function(n, t) {
        var o = t.draggable.data("blockId");
        o && l.getBlockType(o).then(function(n) {
            e.addBlock(n, e.contentBlocks.length)
        }
        )
    }
}
]),
angular.module("pd.blocks", ["pd.config", "pd.common", "pd.directives"]),
angular.module("pd.blocks").controller("BlockClickController", ["$scope", "$element", "$timeout", "ContextService", "$rootScope", "ElementClickBehavior", "BrowserUtils", function(e, n, t, o, i, a, s) {
    var l = !1
      , r = function() {
        l || (n.addClass("doc-block--focused"),
        l = !0)
    }
      , c = function() {
        l && (n.removeClass("doc-block--focused"),
        l = !1)
    }
      , d = function(n) {
        return e.block.widgetsInfo && _.any(e.block.widgetsInfo, function(e) {
            return e.widget.id === n
        }
        )
    }
    ;
    e.$watch("documentInfo.permissions.canEditDocumentContent", function(t) {
        if (t) {
            var o = a.getStream().distinctUntilChanged()
              , i = []
              , s = o.filter(function(e) {
                return "block-click" === e.name || "block-part-click" === e.name
            }
            )["do"](function() {
                n.removeClass("doc-block--widget-activity")
            }
            );
            i.push(s.filter(function(n) {
                return n.blockId === e.block.id
            }
            ).subscribe(r)),
            i.push(s.filter(function(n) {
                return n.blockId !== e.block.id
            }
            ).subscribe(c));
            var l = o.filter(function(e) {
                return "widget-click" === e.name
            }
            )["do"](c);
            i.push(l.filter(function(e) {
                return d(e.widgetId)
            }
            ).subscribe(function() {
                n.addClass("doc-block--widget-activity")
            }
            )),
            i.push(l.filter(function(e) {
                return !d(e.widgetId)
            }
            ).subscribe(function() {
                n.removeClass("doc-block--widget-activity")
            }
            ));
            var u = o.filter(function(e) {
                return !_.contains(["block-click", "block-part-click", "widget-click"], e.name)
            }
            );
            i.push(u.subscribe(function() {
                c(),
                n.removeClass("doc-block--widget-activity")
            }
            )),
            a.addToElement(n, e, {
                map: function(n) {
                    var t = angular.element(n.target)
                      , o = t.hasClass("btn--block-control-settings") || t.hasClass("icon--settings-tiny");
                    return {
                        name: "block-click",
                        blockId: e.block.id,
                        forceSettingsOpen: o
                    }
                },
                "do": function(e) {
                    var n = angular.element(e.target);
                    n.hasClass("doc-block__control--drag") || n.hasClass("icon--move") || e.stopPropagation()
                }
            }),
            e.block && e.block.created && a.fireEvent({
                name: "block-click",
                blockId: e.block.id
            }),
            e.$on("$destroy", function() {
                _.each(i, function(e) {
                    e.dispose()
                }
                ),
                a.fireEvent({
                    name: "close-settings",
                    blockId: e.block.id
                })
            }
            )
        }
    }
    ),
    e.isDesktop = s.desktop,
    e.up = function() {
        e.$emit("move.block.up", {
            block: e.block
        })
    }
    ,
    e.down = function() {
        e.$emit("move.block.down", {
            block: e.block
        })
    }
}
]),
angular.module("pd.blocks").controller("BlockController", ["$scope", "$timeout", "$rootScope", "BlockBuilderService", "$element", function(e, n, t, o, i) {
    var a = "/views/blocks/layouts/";
    e.$watch("block.layout", function(n) {
        n && (e.layoutTemplate = [a, e.block.type.handle.toLowerCase(), "/", n.handle.toLowerCase(), ".html"].join(""))
    }
    ),
    e.$watch("documentInfo", function(n) {
        n && (e.contentEditable = n.permissions.canEditDocumentContent && !e.block.is_locked,
        e.deletable = n.permissions.canEditDocumentContent && !e.block.is_locked,
        e.hasSettings = n.permissions.canEditDocumentContent,
        e.movable = n.permissions.canEditDocumentContent,
        e.isActionPanelVisible = n.isActionPanelVisible(n.widgetsInfo),
        e.block.id && o.getDefaultBlockData(e.block.type, {
            documentInfo: n
        }).then(function(n) {
            _.defaultsRecursively(e.block.data, n)
        }
        ))
    }
    ),
    e.$watch("block.is_locked", function(n, o) {
        if (!_.isEqual(n, o) && (e.contentEditable = e.documentInfo.permissions.canEditDocumentContent && !e.block.is_locked,
        e.deletable = e.documentInfo.permissions.canEditDocumentContent && !e.block.is_locked,
        t.$broadcast("block.lock.event", {
            block: e.block,
            isLocked: n
        }),
        n)) {
            var a = angular.element('<input type="text" style="opacity: 0"/>');
            i.append(a),
            a.focus(),
            a.remove()
        }
    }
    ),
    e.deleteConfirmation = !1,
    e.confirmDelete = function() {
        e.deleteConfirmation || (e.deleteConfirmation = !0,
        n(function() {
            e.deleteConfirmation = !1
        }
        , 4e3))
    }
    ,
    e["delete"] = function() {
        t.$broadcast("block.delete", e.block)
    }
    ,
    e.isFirst = function() {
        return 0 === e.contentBlocks.indexOf(e.block)
    }
    ,
    e.isLast = function() {
        return e.contentBlocks.indexOf(e.block) === e.contentBlocks.length - 1
    }
}
]),
angular.module("pd.blocks").controller("BlockHandleController", ["$scope", "$rootScope", "Constants", function(e, n, t) {
    var o = ".sortable-blocks"
      , i = 50;
    e.isFixedBlock = function() {
        return -1 !== t.FIXED_BLOCKS.indexOf(e.block.handle)
    }
    ,
    e.addBlock = function() {
        return n.$broadcast("block.add", e.block),
        !1
    }
    ,
    e.dragStart = function(t, o) {
        o.helper.removeClass("btn"),
        o.helper.removeClass("btn--sq-icon"),
        o.helper.addClass("doc-block--drag-preview"),
        n.$broadcast("block.drag.from.doctools.started", {
            block: e.block
        })
    }
    ;
    var a = function(e, n) {
        return e.offset().top > n.height()
    }
      , s = function(e) {
        return e.offset().top + e.height() < i
    }
    ;
    e.helper = function(n) {
        if (!e.isFixedBlock()) {
            var t = angular.element(o)
              , i = angular.element(".document");
            a(t, i) ? t[0].scrollIntoView(!0) : s(t) && t[0].scrollIntoView(!1)
        }
        return angular.element(n.currentTarget).clone()
    }
    ,
    e.dragStop = function() {
        n.$broadcast("block.drag.from.doctools.ended")
    }
    ,
    e.getDraggableConfig = function() {
        var n = {
            containment: "document",
            appendTo: ".page-content",
            helper: e.helper,
            scroll: !0,
            start: e.dragStart,
            stop: e.dragStop,
            revert: "invalid"
        };
        return e.isFixedBlock() || (n.connectToSortable = o),
        n
    }
}
]),
angular.module("pd.blocks").controller("BlockWidgetsController", ["$scope", "$element", "WidgetsService", "WidgetRegistry", "ContextService", "WidgetUtility", "$rootScope", "$timeout", "$filter", "singleWatch", "Constants", "BlockWidgetsService", function(e, n, t, o, i, a, s, l, r, c, d, u) {
    var m = function(n) {
        return n.blockId === e.block.id
    }
      , p = e.$watch("documentInfo.widgetsInfo", function(n) {
        n && (e.block.widgetsInfo = e.block.widgets ? _.map(e.block.widgets, function(e) {
            return _.find(n, function(n) {
                return n.widget.id === e
            }
            )
        }
        ) : [],
        p())
    }
    )
      , g = function(n) {
        e.block.widgetsInfo = _.filter(e.block.widgetsInfo, function(e) {
            return e !== n
        }
        )
    }
    ;
    e.$on("widget.placeholder.deleted", function(e, n) {
        m(n) && g(n)
    }
    ),
    e.$on("widget.deleted", function(e, n) {
        m(n) && g(n)
    }
    );
    var f = function(t, o) {
        if (-1 === d.WIDGET_FREE_BLOCKS.indexOf(e.block.type.handle)) {
            t.content = e.documentInfo.document.revision.content.id;
            var a = {
                widget: t,
                block: e.block,
                offset: o,
                blockEl: n,
                documentSize: e.documentContentInfo.documentSize
            };
            e.documentInfo.document.type !== d.DOCUMENT.TYPE.LIBRARY_ITEM && (a.documentId = e.documentInfo.document.id,
            a.isTemplate = i.isTemplates()),
            s.$broadcast("widget.create", a)
        }
    }
      , b = function(n) {
        e.block.widgetsInfo.push(n)
    }
    ;
    e.$on("widget.placeholder.created", function(e, n) {
        m(n) && b(n)
    }
    ),
    e.$on("widget.created", function(n, o) {
        m(o) && (b(o),
        t.linkWithBlock(o.widget.id, e.block.id))
    }
    ),
    e.$on("inline.widget.add", function(t, o) {
        if (e.block.id === o.block.id) {
            var i = n.find(".doc-block__bd")
              , a = {
                top: Math.abs(i.offset().top) + 70,
                left: 300
            };
            f(o.widget, a)
        }
    }
    );
    var v = !1;
    e.$on("widget.dropped", function() {
        v = !0,
        l(function() {
            v = !1
        }
        , 300)
    }
    ),
    e.drop = function(n, t) {
        if (e.widgetDragOver = !1,
        !v && u.isAcceptWidget(e.block)) {
            var i = t.draggable.data("widget-type")
              , a = t.helper.offset();
            if (e.widgetDragOver = !1,
            i) {
                s.$broadcast("widget.dropped", e.block);
                var l = o.createNewInlineWidgetInstance(i);
                l.title = r("translate")("widget.type." + i),
                f(l, a)
            }
        }
    }
    ;
    var h = !1;
    e.$watchCollection("block.widgetsInfo", function(t) {
        t && (e.block.widgetsInfo = a.sortInlineWidgetsByPosition(t, n),
        _.each(e.block.widgetsInfo, function(n) {
            n.blockId = e.block.id
        }
        ),
        e.isActionPanelVisible && (e.block.actions = e.actions = a.actorWidgets(e.block.widgetsInfo, e.documentInfo.actor)),
        !h && e.isActionPanelVisible && (h = !0,
        l(function() {
            s.$broadcast("block.widgets.ready", {
                block: e.block
            })
        }
        , 500)))
    }
    ),
    e.$on("move.widget", function(n, t) {
        m(t.widgetInfo) && a.moveInlineWidget(t.widgetInfo, t.direction, e.block)
    }
    ),
    e.dragOver = function() {
        var n = e.block;
        n && n.type && (n.is_locked || _.contains(d.WIDGET_FREE_BLOCKS, n.type.handle) || l(function() {
            e.widgetDragOver = !0
        }
        ))
    }
    ,
    e.dragOut = function() {
        l(function() {
            e.widgetDragOver = !1
        }
        )
    }
}
]),
angular.module("pd.blocks").controller("TextContentBlockController", ["$scope", "BlocksService", "ContextService", "BlockDataMergeService", "ElementClickBehavior", "rx", "$q", function(e, n, t, o, i, a, s) {
    var l = t.isTemplates() || t.isContentLibrary()
      , r = 0
      , c = !1
      , d = null 
      , u = function(t) {
        var o = e.block
          , i = o.data
          , l = s.defer();
        return n.updateBlock(o, {}, {
            data: i
        }).then(function(e) {
            l.resolve({
                success: !0,
                version: t,
                data: e.data
            })
        }
        , function() {
            l.resolve({
                success: !1
            })
        }
        ),
        a.Observable.fromPromise(l.promise)
    }
      , m = function() {
        d && (o.merge(e.block, d),
        e.$broadcast("block.data.updated.from.server"),
        d = null )
    }
    ;
    if (e.$eventToObservable("block.data.text.change").filter(function() {
        return e.contentEditable
    }
    )["do"](function() {
        r += 1
    }
    ).map(function() {
        return r
    }
    ).debounce(1e3).flatMapLatest(u).filter(function(e) {
        return e.success && l && e.version === r
    }
    ).subscribe(function(e) {
        d = e,
        c || m()
    }
    ),
    l) {
        e.$on("text.editor.focus", function() {
            c = !0
        }
        );
        var p = function() {
            c = !1,
            d && d.version === r && m()
        }
        ;
        e.$on("text.editor.blur", p),
        e.$on("block.part.blur", p);
        var g = i.getStream()
          , f = [];
        f.push(g.filter(function(n) {
            return "block-click" === n.name && n.blockId !== e.block.id
        }
        ).subscribe(p)),
        f.push(g.filter(function(n) {
            return "block-part-click" === n.name && n.blockId !== e.block.id
        }
        ).subscribe(p)),
        f.push(g.filter(function(e) {
            return "close-settings" === e.name
        }
        ).subscribe(p)),
        e.$on("$destroy", function() {
            _.each(f, function(e) {
                e.dispose()
            }
            )
        }
        )
    }
}
]),
angular.module("pd.blocks").controller("CoverPageBlockController", ["$scope", "$element", "$timeout", "BlocksService", "rx", function(e, n, t, o, i) {
    var a = function(n) {
        var t = e.documentContentInfo.documentSize
          , o = t.scale
          , i = n.position.top - n.originalPosition.top
          , a = n.originalPosition.top + i / o
          , s = angular.element(".doc-block--cover");
        return .1 >= a ? a = 0 : a + n.helper.height() > s.height() && (a = s.height() - n.helper.height()),
        {
            left: n.position.left,
            top: a
        }
    }
      , s = function(t) {
        var o = e.documentContentInfo.documentSize
          , i = o.scale
          , a = t.helper.offset()
          , s = n.offset();
        return {
            top: (a.top - s.top) / i
        }
    }
    ;
    e.dragStart = function(e, n) {
        n.position.left = 0,
        n.position.top = 0
    }
    ,
    e.dragStop = function(n) {
        return function(i, a) {
            var l = s(a);
            t(function() {
                e.block.data[n].position.top = l.top,
                o.updateBlock(e.block)
            }
            )
        }
    }
    ,
    e.drag = function(e, n) {
        n.position = a(n)
    }
    ,
    _.each(["logo", "title", "text"], function(n) {
        e.$watch("block.data." + n + ".position.top", function(t) {
            e[n + "Style"] = {
                top: t + "px"
            }
        }
        )
    }
    );
    var l, r, c, d = e.$eventToObservable("block.data.text.change"), u = e.$eventToObservable("text.editor.image.inserted"), m = e.$eventToObservable("text.editor.image.loaded"), p = function(e, n, o) {
        t(function() {
            e.position.top = o - n,
            e.position.top < 0 && (e.position.top = 0)
        }
        )
    }
    ;
    i.Observable.merge(d, u, m).debounce(100)["do"](function() {
        l || (l = angular.element(".cover-text")),
        r || (r = angular.element(".cover-title")),
        c || (c = angular.element(".doc-block--cover"))
    }
    ).subscribe(function() {
        var n = c.height()
          , t = l.height()
          , o = r.height();
        t + e.block.data.text.position.top > n && p(e.block.data.text, t, n),
        o + e.block.data.title.position.top > n && p(e.block.data.title, o, n)
    }
    )
}
]),
angular.module("pd.blocks").controller("CoverPageBlockSettingsController", ["$scope", "Constants", "BlocksService", function(e, n, t) {
    e.backgroundImages = n.THEME.COVER_IMAGES,
    e.logoLayouts = _.values(n.COVER_PAGE.LOGO_LAYOUTS),
    e.textLayouts = _.values(n.COVER_PAGE.TEXT_LAYOUTS),
    e.changeLogoLayout = function(n) {
        e.block.data.logo.layout = n,
        t.updateBlock(e.block)
    }
    ,
    e.changeTextLayout = function(n) {
        e.block.data.text.layout = n,
        t.updateBlock(e.block)
    }
    ,
    e.$watch("block.data.logo.visible", function(n, o) {
        n !== o && t.updateBlock(e.block)
    }
    ),
    e.$watch("block.data.background", function(n, o) {
        _.isEqual(n, o) || t.updateBlock(e.block)
    }
    , !0)
}
]),
angular.module("pd.blocks").controller("HtmlBlockController", ["$scope", "Config", "$sce", "HtmlEditorDialog", "BlocksService", function(e, n, t, o, i) {
    e.$watch("block.content_url", function(n) {
        n && (e.contentUrl = t.trustAsResourceUrl(n))
    }
    ),
    e.editHTML = function() {
        o.open(e.block.data.content, {
            mode: "html"
        }).then(function(n) {
            e.block.data.content = n,
            i.updateBlock(e.block).then(function(n) {
                e.block.content_url = n.content_url
            }
            )
        }
        )
    }
}
]),
angular.module("pd.blocks").controller("HtmlBlockSettingsController", ["$scope", "EditorDialog", "BlocksService", function(e, n, t) {
    e.editHTML = function() {
        n.open(e.block.data.content, {
            mode: "html"
        }).then(function(n) {
            e.block.data.content = n,
            t.updateBlock(e.block).then(function(n) {
                e.block.content_url = n.content_url
            }
            )
        }
        )
    }
    ,
    e.block.show_in_pdf = !e.block.hide_in_pdf,
    e.$watch("block.show_in_pdf", function() {
        e.block.hide_in_pdf = !e.block.show_in_pdf
    }
    ),
    e.$watch("block.data.options.height", function(n, o) {
        n !== o && t.updateBlock(e.block)
    }
    )
}
]),
angular.module("pd.blocks").controller("PdfBlockController", ["$scope", "Config", "$sce", "BlocksService", "DocumentContentInfoBuilder", "NotificationCenter", function(e, n, t, o, i, a) {
    e.uploading = !0,
    e.processing = !1;
    var s = !1;
    e.cancelUpload = function() {}
    ,
    e.uploadDone = function(n) {
        s || (e.processingOptions = {
            new_file: n
        },
        e.uploading = !1,
        e.processing = !0)
    }
    ,
    e.processingDone = function(n) {
        if (!s) {
            var t = {
                uuid: n.uuid,
                name: n.name
            };
            o.addAttachment(e.block.id, t).then(function(n) {
                e.block.attachment = n.id;
                var t = e.documentInfo.document.revision;
                t.attachments = t.attachments || [],
                t.attachments.push(n)
            }
            )
        }
    }
    ,
    e.processingError = function() {
        s || (e.processing = !1,
        e.uploading = !0,
        a.message("Unfortunately, we were unable to process this file. Please try again or choose another file.", 15))
    }
    ,
    e.$watch("block.attachment", function(n) {
        if (n) {
            var t = e.documentInfo.document.revision;
            e.attachmentContent = i.buildAttachment(_.find(t.attachments, {
                id: n
            }))
        }
    }
    ),
    e.$on("$destroy", function() {
        s = !0
    }
    )
}
]),
angular.module("pd.blocks").controller("PricingTableBlockController", ["$scope", "Constants", function(e, n) {
    var t = function() {
        return _.any(e.block.data.sections, function(e) {
            return _.any(e.rows, function(e) {
                return e.options.optional || e.options.qty_editable
            }
            )
        }
        )
    }
    ;
    e.$watch("documentInfo", function(o) {
        o && (e.tableMode = o.permissions.canEditDocumentContent ? n.TABLE_MODE.EDIT : o.isSigner && (o.isSent || o.isViewed) && !o.isRecipientCompletedDocument && t() ? n.TABLE_MODE.RECIPIENT_RESTRICTED : n.TABLE_MODE.READ_ONLY)
    }
    )
}
]),
angular.module("pd.blocks").controller("PricingTableBlockSettingsController", ["$scope", "$rootScope", "PricingTableColumnsService", "Constants", "$timeout", "BlocksService", "PricingTableValidator", "CurrencyService", "$filter", "FeaturesService", "ContextService", function(e, n, t, o, i, a, s, l, r, c, d) {
    var u = r("translate")("taxes.tax_1")
      , m = r("translate")("taxes.tax_2");
    e.TRUE = !0,
    e.FALSE = !1,
    e.currencies = l.getCurrencyList(),
    c.checkAvailability(o.FEATURES.PROFIT_AND_MARGIN).then(function(n) {
        e.profitAndMarginAvailable = n
    }
    );
    var p = function(t, o) {
        e.$watch("block.data.options." + t, function(i, a) {
            var l = !i && a
              , r = i && a && i.global && !a.global
              , c = i && a && !i.global && a.global;
            if (l || r)
                n.$broadcast("table.remove.column", {
                    block: e.block,
                    column: o()
                });
            else if (c) {
                var d = _.last(e.block.data.columns)
                  , u = e.block.data.columns.length;
                d && "product_total" === d.type && (u -= 1);
                var m = i && i.name ? i.name : "";
                n.$broadcast("table.add.column", {
                    block: e.block,
                    column: o(m),
                    index: u
                })
            }
            var p = t + "_valid";
            e[p] = l || c || !i ? !0 : s.validateNumberLength(i.value)
        }
        , !0)
    }
    ;
    e.$watch("block.data.options.discount", function(e) {
        e && _.isUndefined(e.name) && (e.name = "Discount")
    }
    ),
    e.$watch("rowObj.dataObj.data.cost", function(n) {
        e.validCost = n && _.isNumber(n) ? s.validateNumberLength(n) : !0
    }
    ),
    e.$watch("block.data.settings.decimalPlaces", function(t) {
        n.$broadcast("pricing.table.result.changed", {
            block: e.block
        })
    }
    ),
    e.checkDecimalPlaces = function() {
        _.isNaN(parseInt(e.block.data.settings.decimalPlaces)) && (e.block.data.settings.decimalPlaces = 2)
    }
    ,
    p("tax_first", t.getLineTaxFirstColumn),
    p("tax_second", t.getLineTaxSecondColumn),
    p("discount", t.getLineDiscountColumn),
    e.addTax = function() {
        var n = {
            value: 0,
            type: o.NUMBER_TYPE.PERCENT,
            global: !0
        };
        e.block.data.options.tax_first ? e.block.data.options.tax_second || (n.name = m,
        e.block.data.options.tax_second = n) : (n.name = u,
        e.block.data.options.tax_first = n)
    }
    ,
    e.addDiscount = function() {
        e.block.data.options.discount = {
            value: 0,
            type: o.NUMBER_TYPE.PERCENT,
            global: !0,
            name: "Discount"
        }
    }
    ,
    e.removeFirstTax = function() {
        e.block.data.options.tax_first = null 
    }
    ,
    e.removeSecondTax = function() {
        e.block.data.options.tax_second = null 
    }
    ,
    e.removeDiscount = function() {
        e.block.data.options.discount = null 
    }
    ,
    e.$watch("block.data.options.currency", function(t, i) {
        e.discountTypeOptions = [{
            name: "%",
            value: o.NUMBER_TYPE.PERCENT
        }, {
            name: t,
            value: o.NUMBER_TYPE.ABSOLUTE
        }],
        t !== i && (n.$broadcast("pricing.table.currency.changed", {
            block: e.block
        }),
        a.updateBlock(e.block))
    }
    ),
    d.isTemplates() && (e.hasCrmIntegration = !0),
    e.isTemplates = d.isTemplates() || d.isContentLibrary(),
    e.prefix = o.TOKENS.PREFIX,
    e.postfix = o.TOKENS.POSTFIX,
    e.$watch("block.public_id", function(n) {
        e.predefinedTokens = n ? [{
            name: n + ".Total"
        }, {
            name: n + ".Discount"
        }, {
            name: n + ".Quantity"
        }] : []
    }
    ),
    e.$watch("block.pricingtable.include_in_document_total", function(n, t) {
        n !== t && a.updateBlockIntegrationsSettings(e.block.id, {
            include_in_document_total: n
        })
    }
    )
}
]),
angular.module("pd.blocks").controller("TableBlockController", ["$scope", "Constants", function(e, n) {
    e.$watch("documentInfo", function(t) {
        t && (e.tableMode = t.permissions.canEditDocumentContent ? n.TABLE_MODE.EDIT : n.TABLE_MODE.READ_ONLY)
    }
    )
}
]),
angular.module("pd.blocks").controller("TableBlockSettingsController", ["$scope", "$rootScope", "$stateParams", "BlocksService", function(e, n, t, o) {
    e.TABLE_SETTINGS_SECTIONS = {
        TABLE: "table",
        ROW: "row"
    },
    e.tableSettingsSection = e.TABLE_SETTINGS_SECTIONS.TABLE,
    e.showTableSettings = function() {
        e.tableSettingsSection = e.TABLE_SETTINGS_SECTIONS.TABLE
    }
    ,
    e.showTableRowSettings = function() {
        e.tableSettingsSection = e.TABLE_SETTINGS_SECTIONS.ROW
    }
    ,
    t.row && (_.each(e.block.data.sections, function(n) {
        return n.ref === t.row ? e.tableSection = n : _.each(n.rows, function(n) {
            n.ref === t.row && (e.tableRow = n)
        }
        ),
        !e.tableSection && !e.tableRow
    }
    ),
    (e.tableRow || e.tableSection) && e.showTableRowSettings()),
    e.removeRow = function() {
        n.$broadcast("remove.table.row", {
            block: e.block,
            rowId: e.tableRow.ref
        }),
        e.tableRow = null ,
        e.showTableSettings()
    }
    ,
    e.removeSectionWithAllContent = function() {
        n.$broadcast("remove.table.section", {
            block: e.block,
            sectionId: e.tableSection.ref,
            includeAllContent: !0
        }),
        e.tableSection = null ,
        e.showTableSettings()
    }
    ,
    e.removeSection = function() {
        n.$broadcast("remove.table.section", {
            block: e.block,
            sectionId: e.tableSection.ref
        }),
        e.tableSection = null ,
        e.showTableSettings()
    }
}
]),
angular.module("pd.blocks").controller("TableOfContentBlockController", ["$scope", "Constants", "BlocksService", "$sce", "scrollToElement", "$timeout", function(e, n, t, o, i, a) {
    var s = [{
        setting: "include_h1",
        layout: n.LAYOUTS.HEADING.H1
    }, {
        setting: "include_h2",
        layout: n.LAYOUTS.HEADING.H2
    }, {
        setting: "include_h3",
        layout: n.LAYOUTS.HEADING.H3
    }]
      , l = function(e, t) {
        var o = _.filter(e, function(e) {
            return n.BLOCK_TYPES.HEADING === e.type.handle && !_.isEmpty(e.data.text)
        }
        );
        return _.each(s, function(e) {
            t[e.setting] || (o = _.filter(o, function(n) {
                return n.layout.handle !== e.layout
            }
            ))
        }
        ),
        _.map(o, function(e) {
            return {
                text: e.data.text,
                blockAnchor: e.data.anchor,
                blockUref: e.uref,
                isH1: e.layout.handle === n.LAYOUTS.HEADING.H1,
                isH2: e.layout.handle === n.LAYOUTS.HEADING.H2,
                isH3: e.layout.handle === n.LAYOUTS.HEADING.H3
            }
        }
        )
    }
    ;
    e.$watchCollection("block.data.content", function(n) {
        n && (e.tableOfContents = _.map(n, function(e) {
            var n = _.cloneDeep(e);
            return n.text = o.trustAsHtml(n.text),
            n
        }
        ))
    }
    ),
    e.$on("token.value.updated", function() {
        a(function() {
            r(e.contentBlocks, e.block.data.settings)
        }
        , 500)
    }
    ),
    e.$watch("tableOfContents", function(n, o) {
        !_.isEqual(n, o) && e.documentInfo && e.documentInfo.permissions.canEditDocumentContent && t.updateBlock(e.block)
    }
    );
    var r = function(n, t) {
        e.block.data.content = l(n, t)
    }
    ;
    e.remove = function(n, t) {
        e.block.data.content.splice(t, 1)
    }
    ,
    e.$watch("block.data.content", function() {
        e.empty = _.isEmpty(e.block.data.content)
    }
    ),
    e.scrollTo = function(e) {
        var n, t = 350, o = angular.element(".document");
        n = e.blockAnchor ? 'div[anchor="' + e.blockAnchor + '"]' : 'div[uref="' + e.blockUref + '"]',
        i(o, n, {
            duration: t,
            offset: -100
        })
    }
    ,
    e.$on("toc.refresh", function(n, t) {
        t && t.id === e.block.id && (e.block.data.settings.exclude = [],
        r(e.contentBlocks, e.block.data.settings))
    }
    ),
    e.refreshTableOfContents = function(n) {
        e.$broadcast("toc.refresh", n)
    }
    ,
    e.$watch("block.data", function(n) {
        n && !n.content && r(e.contentBlocks, e.block.data.settings)
    }
    )
}
]),
angular.module("pd.blocks").controller("TableOfContentBlockSettingsController", ["$scope", "$rootScope", function(e, n) {
    e.refreshTableOfContents = function(e) {
        n.$broadcast("toc.refresh", e)
    }
}
]),
angular.module("pd.blocks").controller("VideoBlockController", ["$scope", "$sce", function(e, n) {
    e.block.data.video = {
        embed: e.block.data.embed
    },
    e.$watch("block.data.video.embed", function(t) {
        t && (e.videoUrl = n.trustAsResourceUrl(t))
    }
    )
}
]),
angular.module("pd.blocks").controller("VideoBlockSettingsController", ["$scope", "BlocksService", "AlertService", function(e, n, t) {
    e.saveLink = function() {
        e.model.videoUrl !== e.block.data.url && (e.block.data.url = e.model.videoUrl,
        e.savingUrl = !0,
        n.updateBlock(e.block).then(function(n) {
            e.block.data.video.embed = n.data.embed,
            e.savingUrl = !1
        }
        , function(n) {
            if (e.savingUrl = !1,
            n && n.data) {
                var o = _.first(_.values(n.data))
                  , i = _.isArray(o) ? _.first(o) : o;
                i && t.alert({
                    title: "Incorrect URL",
                    text: i
                })
            }
        }
        ))
    }
    ,
    e.$watch("block.data.url", function(n) {
        e.model = {
            videoUrl: n
        }
    }
    )
}
]),
angular.module("pd.blocks").service("ConvertBlockToCLIDialog", ["ModalService", function(e) {
    this.open = function(n) {
        var t = {
            templateUrl: "/views/blocks/dialogs/convert-block-to-cli-dialog.html",
            controller: "ConvertBlockToCLIDialogController",
            resolve: {
                block: function() {
                    return n
                }
            }
        };
        return e.open(t)
    }
}
]).controller("ConvertBlockToCLIDialogController", ["$scope", "block", "LibraryService", "$controller", "NotificationCenter", "Config", "ProfileService", function(e, n, t, o, i, a, s) {
    e.STEPS = {
        CHOOSE_OPTION: "choose option",
        ENTER_NAME: "enter name",
        SELECT_ITEM: "select item"
    },
    e.options = {
        createNewCLI: !0,
        step: e.STEPS.CHOOSE_OPTION,
        name: "",
        cli: null 
    },
    e.selectionModel = {
        checkboxes: {}
    },
    e.createCLI = function() {
        return e.options.name ? (e.creatingCLI = !0,
        void t.createFromBlock(n.id, e.options.name).then(function() {
            e.$close(),
            i.message('Content library item "' + e.options.name + '" was successfully created', 11)
        }
        )) : !1
    }
    ,
    e.addToCLI = function() {
        e.addingToCLI = !0,
        t.addBlockToItem(n.id, e.options.cli.id).then(function() {
            e.$close(),
            i.message('Block was successfully added to "' + e.options.cli.name + '" content library item', 11)
        }
        )
    }
    ,
    e.next = function() {
        e.options.createNewCLI ? e.options.step = e.STEPS.ENTER_NAME : (e.options.step = e.STEPS.SELECT_ITEM,
        e.CLIListMixin || o("ContentLibraryItemsListMixin", {
            $scope: e
        }))
    }
    ,
    e.back = function() {
        (e.options.step === e.STEPS.ENTER_NAME || e.options.step === e.STEPS.SELECT_ITEM) && (e.options.step = e.STEPS.CHOOSE_OPTION)
    }
    ,
    e.selectItem = function(n) {
        n.available && (e.selectionModel.checkboxes[n.id] = !e.selectionModel.checkboxes[n.id])
    }
    ,
    e.$watch("selectionModel.checkboxes", function(n, t) {
        if (!_.isEqual(n, t)) {
            var o = _.find(_.keys(n), function(e) {
                return n[e] !== t[e]
            }
            );
            o && (e.selectionModel.checkboxes = _.pick(e.selectionModel.checkboxes, [o]),
            e.options.cli = e.selectionModel.checkboxes[o] ? _.find(e.CLIListMixin.items, {
                id: o
            }) : null )
        }
    }
    , !0),
    e.$watch("CLIListMixin.parentFolder", function(n) {
        n && (e.selectionModel.checkboxes = {},
        e.options.cli = null )
    }
    ),
    e.$watch("CLIListMixin.filtering", function() {
        e.selectionModel.checkboxes = {},
        e.options.cli = null 
    }
    ),
    e.$watchCollection("CLIListMixin.items", function(e) {
        e && s.getProfile().then(function(n) {
            _.each(e, function(e) {
                e.available = a.isWorkspaceAdmin() || a.isWorkspaceOwner() || n.id === e.owner.id
            }
            )
        }
        )
    }
    )
}
]),
angular.module("pd.blocks").directive("block", ["$controller", "singleWatch", "BlockControllersService", "Constants", function(e, n, t, o) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            block: "=",
            blockList: "=",
            contentBlocks: "=",
            documentInfo: "=",
            documentContentInfo: "=",
            fixed: "="
        },
        templateUrl: "/views/blocks/block.html",
        link: function(i, a) {
            n(i, "block", function(n) {
                n && n.type && (e("BlockController", {
                    $scope: i,
                    $element: a
                }),
                e("BlockClickController", {
                    $scope: i,
                    $element: a
                }),
                e("BlockWidgetsController", {
                    $scope: i,
                    $element: a
                }),
                _.contains(o.BLOCKS_WITH_TEXT, n.type.handle) && e("TextContentBlockController", {
                    $scope: i,
                    $element: a
                }),
                _.each(t.getBlockControllers(n), function(n) {
                    e(n, {
                        $scope: i,
                        $element: a
                    })
                }
                ))
            }
            )
        }
    }
}
]),
angular.module("pd.blocks").directive("blockDropMessage", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {},
        templateUrl: "/views/blocks/block-drop-message.html",
        controller: ["$scope", "$timeout", function(e, n) {
            e.visible = !1,
            e.cover = !1,
            e.header = !1,
            e.footer = !1;
            var t = function() {
                e.visible = !0
            }
              , o = function() {
                e.visible = !1,
                e.cover = !1,
                e.header = !1,
                e.footer = !1
            }
              , i = {
                cover: function() {
                    t(),
                    e.cover = !0
                },
                header: function() {
                    t(),
                    e.header = !0
                },
                footer: function() {
                    t(),
                    e.footer = !0
                },
                "default": o
            };
            e.$on("block.drag.from.doctools.started", function(e, t) {
                n(function() {
                    if (t.block) {
                        var e = t.block.handle;
                        (i[e] || i["default"])()
                    } else
                        o()
                }
                )
            }
            ),
            e.$on("block.drag.from.doctools.ended", function() {
                n(o)
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.blocks").directive("blockDropOverlay", ["Constants", function(e) {
    return {
        restrict: "A",
        link: function(n, t) {
            var o = function() {
                t.addClass("document-page__drop-overlay--visible")
            }
              , i = function() {
                t.removeClass("document-page__drop-overlay--visible")
            }
              , a = function(n) {
                return -1 !== e.FIXED_BLOCKS.indexOf(n.handle)
            }
            ;
            n.$on("block.drag.from.doctools.started", function(e, n) {
                n.block && a(n.block) ? o() : i()
            }
            ),
            n.$on("block.drag.from.doctools.ended", i),
            i()
        }
    }
}
]),
angular.module("pd.blocks").directive("blockHandle", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/blocks/block-handle.html",
        scope: {
            block: "=",
            documentInfo: "="
        },
        link: function(e, n) {
            n.draggable(e.getDraggableConfig())
        },
        controller: "BlockHandleController"
    }
}
]),
angular.module("pd.blocks").directive("blockHighlightedPart", ["ElementClickBehavior", function(e) {
    return {
        restrict: "A",
        link: function(n, t, o) {
            var i = e.getStream()
              , a = []
              , s = function() {
                var s = i.filter(function(e) {
                    return "block-part-click" === e.name
                }
                );
                a.push(s.filter(function(e) {
                    return e.$element === t
                }
                ).subscribe(function() {
                    t.addClass("focused")
                }
                )),
                a.push(s.filter(function(e) {
                    return e.$element !== t
                }
                ).subscribe(function() {
                    t.removeClass("focused"),
                    n.$emit("block.part.blur")
                }
                )),
                a.push(i.filter(function(e) {
                    return "block-part-click" !== e.name
                }
                ).subscribe(function() {
                    t.removeClass("focused"),
                    n.$emit("block.part.blur")
                }
                ));
                var l = {
                    name: "block-part-click",
                    hasEditor: o.hasEditor,
                    blockId: n.block.id,
                    $element: t
                };
                e.addToElement(t, n, {
                    map: l,
                    "do": function(e) {
                        e.stopPropagation()
                    }
                })
            }
            ;
            n.$watch("contentEditable", function(e) {
                _.each(a, function(e) {
                    e.dispose()
                }
                ),
                e && s()
            }
            ),
            n.$on("$destroy", function() {
                _.each(a, function(e) {
                    e.dispose()
                }
                )
            }
            )
        }
    }
}
]),
angular.module("pd.blocks").directive("iframeInBlock", ["$window", "$rootScope", "BrowserUtils", "ElementClickBehavior", function(e, n, t, o) {
    return {
        restrict: "A",
        link: function(n, i) {
            var a = angular.element("#" + n.block.id)
              , s = angular.element(e)
              , l = function() {
                o.fireEvent({
                    name: "block-click",
                    blockId: n.block.id
                })
            }
              , r = function() {
                Boolean(t.msie) && (a.find(".doc-block__controls").css("opacity", 1).css("visibility", "visible"),
                a.find(".doc-block__bd").addClass("hover")),
                s.bind("blur", l)
            }
              , c = function() {
                Boolean(t.msie) && (a.find(".doc-block__controls").css("opacity", 0).css("visibility", "none"),
                a.find(".doc-block__bd").removeClass("hover")),
                s.unbind("blur", l)
            }
            ;
            n.$watch("documentInfo.permissions.canEditDocumentContent", function(e) {
                a.unbind("mouseenter", r).unbind("mouseleave", c),
                e && a.bind("mouseenter", r).bind("mouseleave", c)
            }
            ),
            n.$on("$destroy", function() {
                s.unbind("blur", l)
            }
            )
        }
    }
}
]),
angular.module("pd.blocks").directive("imageLightBox", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            current: "=",
            images: "=",
            previewResize: "@"
        },
        link: function(e, n) {
            e.$watchCollection("images", function(t) {
                if (t) {
                    var o = 0;
                    n.magnificPopup({
                        items: _.map(t, function(n, t) {
                            return e.current.src === n.src && (o = t),
                            _.pick(n, "src")
                        }
                        ),
                        gallery: {
                            enabled: !0
                        },
                        index: o,
                        type: "image"
                    })
                }
            }
            )
        },
        templateUrl: "/views/blocks/image-light-box.html",
        controller: ["$scope", function(e) {
            e.previewUrl = function() {
                var n = e.current.src;
                return e.previewResize && (n += "-/resize/" + e.previewResize + "/"),
                n
            }
        }
        ]
    }
}
]),
angular.module("pd.blocks").directive("imgStub", ["$rootScope", function(e) {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            image: "=",
            block: "=",
            isEditable: "=",
            autoOpen: "=",
            previewResize: "@",
            hideEmpty: "="
        },
        templateUrl: "/views/blocks/img-stub.html",
        controller: ["$scope", "Constants", "BlocksService", "UploadDialog", function(e, n, t, o) {
            e.uploadImage = function() {
                o.show({
                    imagesOnly: !0
                }).then(function(n) {
                    e.image.src = n,
                    e.block && t.updateBlock(e.block)
                }
                )
            }
            ,
            e.previewUrl = function() {
                var n = e.image.src;
                return n
            }
        }
        ],
        link: function(e) {
            e.autoOpen && "" === e.image.src && e.uploadImage()
        }
    }
}
]),
angular.module("pd.blocks").directive("numberTypeSelector", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            options: "=",
            numberTypeModel: "="
        },
        templateUrl: "/views/blocks/number-type-selector.html"
    }
}
]),
angular.module("pd.blocks").directive("textEditorToolbar", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {},
        templateUrl: "/views/blocks/text-editor-toolbar.html",
        controller: ["$scope", "$element", "ElementClickBehavior", function(e, n, t) {
            var o, i = function(e) {
                return angular.element('<div id="' + e + '" class="editor-toolbar fade out" </div>').hide()
            }
            , a = !1, s = function() {
                angular.element(".editor-toolbar").removeClass("in").addClass("out").hide(),
                a = !1
            }
            , l = function() {
                a && (clearTimeout(o),
                o = setTimeout(s, 200))
            }
            , r = function() {
                a && (clearTimeout(o),
                s())
            }
            ;
            e.$on("text.editor.init", function(e, t) {
                t && t.toolbarId && n.append(i(t.toolbarId))
            }
            ),
            e.$on("text.editor.destroy", function(e, n) {
                n && n.toolbarId && angular.element("#" + n.toolbarId).remove()
            }
            ),
            e.$on("text.editor.toolbar.show", function(e, n) {
                if (n && n.toolbarId) {
                    var t = angular.element("#" + n.toolbarId);
                    t.hasClass("in") ? clearTimeout(o) : (r(),
                    t.addClass("in").show(),
                    a = !0)
                }
            }
            ),
            e.$on("text.editor.toolbar.hide", l);
            var c = t.getStream()
              , d = [];
            d.push(c.filter(function(e) {
                return "widget-click" === e.name
            }
            ).subscribe(l)),
            d.push(c.filter(function(e) {
                return "close-settings" === e.name
            }
            ).subscribe(l)),
            d.push(c.filter(function(e) {
                return "block-part-click" === e.name && !e.hasEditor
            }
            ).subscribe(l)),
            e.$on("$destroy", function() {
                _.each(d, function(e) {
                    e.dispose()
                }
                )
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.blocks").directive("tokenValueManager", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/blocks/token-value-manager.html",
        scope: {
            documentInfo: "=",
            documentContentInfo: "="
        },
        controller: ["$scope", "$element", "$timeout", "$filter", "Constants", "TokensService", "$rootScope", "$controller", "ContextService", function(e, n, t, o, i, a, s, l, r) {
            l("TokenValueManagerFormController", {
                $scope: e,
                $element: n
            }),
            e.token = {
                value: ""
            };
            var c = function(n) {
                return function() {
                    a.updateTokens(e.documentInfo.blockList.id, [n]).then(function() {
                        s.$broadcast("token.value.updated", {
                            token: n
                        })
                    }
                    )
                }
            }
              , d = function(n) {
                var t = n.data.options.currency
                  , i = n.data.result;
                if (n.public_id) {
                    var a = _.isUndefined(n.data.settings.decimalPlaces) ? 2 : n.data.settings.decimalPlaces
                      , l = [{
                        name: n.public_id + ".Total",
                        value: o("cy")(i.total, t, a)
                    }, {
                        name: n.public_id + ".Discount",
                        value: o("cy")(i.discount, t, a)
                    }, {
                        name: n.public_id + ".Quantity",
                        value: i.qty
                    }];
                    _.each(l, function(n) {
                        var t = _.filter(e.documentInfo.tokens, {
                            type: "predefined",
                            name: n.name
                        });
                        if (!_.isEmpty(t)) {
                            var i = angular.element(o("tokenSelector")(n));
                            i.text(n.value),
                            _.each(t, function(e) {
                                e.value = n.value,
                                s.$broadcast("token.value.updated", {
                                    token: e
                                })
                            }
                            )
                        }
                    }
                    )
                }
            }
            ;
            r.isTemplates() || r.isContentLibrary() || (e.$on("pricing.table.result.changed", function(e, n) {
                d(n.block)
            }
            ),
            e.$on("pricing.table.currency.changed", function(e, n) {
                d(n.block)
            }
            )),
            e.$on("block.delete", function(n, t) {
                if (t.public_id) {
                    var a = [{
                        name: t.public_id + ".Total"
                    }, {
                        name: t.public_id + ".Discount"
                    }, {
                        name: t.public_id + ".Quantity"
                    }];
                    _.each(a, function(n) {
                        var t = _.filter(e.documentInfo.tokens, {
                            type: "predefined",
                            name: n.name
                        });
                        if (!_.isEmpty(t)) {
                            var a = angular.element(o("tokenSelector")(n));
                            a.text(i.TOKENS.PREFIX + n.name + i.TOKENS.POSTFIX),
                            _.each(t, function(e) {
                                e.value = "",
                                e.type = "custom",
                                s.$broadcast("token.value.updated", {
                                    token: e
                                })
                            }
                            )
                        }
                    }
                    )
                }
            }
            );
            var u = {};
            e.$watch("token.value", function(n, a) {
                if (e.token && n !== a) {
                    var s = e.token
                      , l = angular.element(o("tokenSelector")(s));
                    u[s.name] && t.cancel(u[s.name]),
                    n ? (l.text(n),
                    u[s.name] = t(c(s), 500)) : "" === n && (l.text(i.TOKENS.PREFIX + s.name + i.TOKENS.POSTFIX),
                    u[s.name] = t(c(s), 500))
                }
            }
            );
            var m = function(n, t, i, a) {
                e.token = n,
                n.count = angular.element(o("tokenSelector")(n)).length,
                e.elementId = a ? a : null ,
                t && i && e.showForm(t, i)
            }
            ;
            e.$on("token.click", function(n, t) {
                if (e.documentInfo && e.documentInfo.tokens) {
                    var o = _.find(e.documentInfo.tokens, {
                        name: t.token
                    });
                    o && m(o, t.size, t.offset, t.elementId)
                }
            }
            ),
            e.$on("token.name.click", function(e, n) {
                var i = angular.element(o("tokenSelector")(n.token));
                i.attr("id") || i.attr("id", o("uuid-short")()),
                t(function() {
                    m(n.token, {
                        width: i.width(),
                        height: i.height()
                    }, i.offset(), i.attr("id"))
                }
                , 150)
            }
            ),
            e.$on("token.value.click", function(e, n) {
                m(n.token)
            }
            )
        }
        ]
    }
}
]).controller("TokenValueManagerFormController", ["$scope", "Constants", "$element", "$timeout", "$rootScope", function(e, n, t, o, i) {
    e.visible = !1,
    e.prefix = n.TOKENS.PREFIX,
    e.postfix = n.TOKENS.POSTFIX;
    var a;
    e.showForm = function(n, i) {
        o.cancel(a);
        var s = e.documentContentInfo.documentSize
          , l = s.scale
          , r = i.top + n.height * l + 10 * l
          , c = i.left + n.width * l / 2 - t.width() * l / 2;
        t.offset({
            top: r,
            left: c
        }),
        e.visible = !0,
        setTimeout(function() {
            t.find('input[type="text"]').focus()
        }
        , 300)
    }
    ,
    e.hideForm = function() {
        e.visible = !1,
        a = o(function() {
            t.offset({
                top: -100,
                left: -100
            })
        }
        , 200)
    }
    ,
    e.removeToken = function() {
        e.elementId && (i.$broadcast("remove.token", {
            token: e.token,
            elementId: e.elementId
        }),
        e.hideForm())
    }
    ;
    var s = function(n) {
        if (e.visible) {
            var t = angular.element(n.target);
            t && t.attr("data-token-form") || (a = o(e.hideForm, 100))
        }
    }
      , l = angular.element(document);
    l.bind("click", s),
    e.$on("$destroy", function() {
        l.unbind("click", s)
    }
    ),
    e.hideForm()
}
]),
angular.module("pd.blocks").service("TokenWrapper", ["$filter", function(e) {
    this.create = function(n, t, o) {
        o.$on("token.value.updated", function(i, a) {
            var s = n.find(e("tokenSelector")(a.token)).length > 0;
            s && (t(n.html()),
            o.$emit("block.data.text.change"))
        }
        )
    }
}
]),
angular.module("pd.blocks").directive("pricingTable", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/blocks/pricingtable/pricingtable.html",
        scope: {
            mode: "=",
            block: "=",
            documentInfo: "="
        },
        controller: ["$scope", "PricingTableService", "Constants", "Config", "FeaturesService", "ExternalService", "ContextService", "singleWatch", "LocalStoreService", function(e, n, t, o, i, a, s, l, r) {
            var c = function() {
                return o.application.app || o.application.sdk
            }
              , d = function() {
                return e.block.data.settings.showProfit
            }
              , u = function() {
                return e.documentInfo.isOwner || o.userRole === t.ROLES.OWNER || o.userRole === t.ROLES.ADMIN
            }
              , m = function() {
                return e.profitAndMarginAvailable
            }
              , p = function() {
                return u() && d() && c() && m()
            }
            ;
            if (e.tableOptions = {
                tableService: n,
                tableType: t.TABLE_TYPE.PRICING,
                controllers: ["PricingTableController"],
                showProfit: p()
            },
            i.checkAvailability(t.FEATURES.PROFIT_AND_MARGIN).then(function(n) {
                e.profitAndMarginAvailable = n,
                e.tableOptions && (e.tableOptions.showProfit = p())
            }
            ),
            e.$watch("block.data.settings.showProfit", function() {
                e.tableOptions && (e.tableOptions.showProfit = p())
            }
            ),
            s.isDocuments() && e.block.data.settings.salesforce && e.block.data.settings.salesforce.inject) {
                var g = r.getBool("injected_" + e.block.id)
                  , f = a.getExternalData();
                !f || _.isEmpty(f.items) || g || (e.tableOptions.injectedItems = f.items,
                r.set("injected_" + e.block.id, !0))
            }
            l(e, "block.data.columns", function(e) {
                var n = ["product_price", "product_qty", "product_total"];
                e && _.each(_.filter(e, function(e) {
                    return _.contains(n, e.type)
                }
                ), function(e) {
                    e.options.removable = !0
                }
                )
            }
            ),
            l(e, "block.data.sections", function(n) {
                var t = _.reduce(n, function(e, n) {
                    return n.rows ? e.concat(n.rows) : e
                }
                , [])
                  , o = ["qty", "price", "total"]
                  , i = {
                    qty: 1,
                    price: 0
                }
                  , a = _.any(t, function(e) {
                    return _.any(o, function(n) {
                        return _.isUndefined(e.data[n]) || null  === e.data[n]
                    }
                    )
                }
                );
                a && (_.each(t, function(e) {
                    _.defaults(e.data, i)
                }
                ),
                setTimeout(function() {
                    e.$broadcast("pricing.table.calculation")
                }
                , 100))
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.blocks").directive("visibilityMonitor", ["ElementClickBehavior", "Constants", "$timeout", function(e, n, t) {
    return {
        restrict: "A",
        link: function(t, o, i) {
            var a = i.visibilityMonitor
              , s = !0
              , l = function() {
                s || (o.show(),
                s = !0)
            }
              , r = function() {
                s && (t.rowObj.dataObj.data[a] || (o.hide(),
                s = !1))
            }
              , c = e.getStream()
              , d = [];
            if (!t.rowObj.section && t.isInEditMode() && t.block.type.handle === n.BLOCK_TYPES.PRICING_TABLE) {
                var u = t.rowObj.dataObj.ref
                  , m = c.filter(function(e) {
                    return "block-part-click" === e.name
                }
                );
                d.push(m.filter(function(e) {
                    return e.blockId === t.block.id && e.rowClick && e.rowId === u
                }
                ).subscribe(l)),
                d.push(m.filter(function(e) {
                    return e.blockId !== t.block.id || !e.rowClick || e.rowId !== u
                }
                ).subscribe(r)),
                d.push(c.filter(function(e) {
                    return "block-part-click" !== e.name
                }
                ).subscribe(function() {
                    setTimeout(r, 250)
                }
                )),
                t.rowObj.created ? l() : r()
            }
            t.$on("$destroy", function() {
                _.each(d, function(e) {
                    e.dispose()
                }
                )
            }
            )
        }
    }
}
]),
angular.module("pd.blocks").controller("PricingTableController", ["$scope", "$timeout", "PricingTableValidator", "PricingTableCalculator", "ExternalService", "$rootScope", "Constants", "rx", "BlocksService", "singleWatch", "$q", function(e, n, t, o, i, a, s, l, r, c, d) {
    var u = 0
      , m = function(n) {
        var t = e.block
          , o = t.data
          , i = d.defer();
        return r.updateBlock(t, {
            calculate: !0
        }, {
            data: o
        }).then(function(e) {
            i.resolve({
                success: !0,
                version: n,
                result: e.cdata
            })
        }
        , function() {
            i.resolve({
                success: !1
            })
        }
        ),
        l.Observable.fromPromise(i.promise)
    }
      , p = function(n) {
        var t = e.block
          , o = _.reduce(t.data.sections, function(e, n) {
            return _.reduce(n.rows, function(e, n) {
                return e[n.ref] = {
                    qty: n.data.qty,
                    optional: n.options.optional,
                    optional_selected: n.options.optional_selected
                },
                e
            }
            , e)
        }
        , {})
          , i = d.defer();
        return r.patchPricingTable(t.id, o).then(function(e) {
            i.resolve({
                success: !0,
                version: n,
                result: e
            })
        }
        , function() {
            i.resolve({
                success: !1
            })
        }
        ),
        l.Observable.fromPromise(i.promise)
    }
      , g = function(e, n) {
        _.assign(e.dataObj.data, n)
    }
      , f = function() {
        e.block.data.result = o.calculateGrandTotal(e.block.data, e.tableOptions.showProfit)
    }
      , b = function(e) {
        var n = o.lineSubTotal(e.dataObj.data);
        g(e, n)
    }
      , v = function() {
        _.each(_.filter(e.model.rows, function(e) {
            return !e.section
        }
        ), b),
        f()
    }
      , h = function() {
        e.$emit("pricing.table.calculation")
    }
      , w = function(e, n) {
        _.isEqual(e, n) || h()
    }
      , k = function(n) {
        var t = n.result
          , o = _.reduce(t.sections, function(e, n) {
            return e.concat(n.rows)
        }
        , []);
        _.each(_.filter(e.model.rows, function(e) {
            return !e.section
        }
        ), function(e) {
            var n = _.find(o, function(n) {
                return n.ref === e.dataObj.ref
            }
            );
            n && _.assign(e.dataObj.data, _.pick(n, ["total"]))
        }
        );
        var i = _.pick(t, ["total", "subtotal", "qty", "discount", "tax_first", "tax_second", "cost", "profit", "margin"]);
        _.assign(e.block.data.result, i),
        a.$broadcast("pricing.table.result.changed", {
            block: e.block
        })
    }
      , y = function(n) {
        var t = _.reduce(n.sections, function(e, n) {
            return e.concat(n.rows)
        }
        , []);
        _.each(_.filter(e.model.rows, function(e) {
            return !e.section
        }
        ), function(e) {
            var n = _.find(t, function(n) {
                return n.ref === e.dataObj.ref
            }
            );
            n && _.assign(e.dataObj.data, _.pick(n, ["total"]))
        }
        );
        var o = _.pick(n, ["total", "subtotal", "discount", "tax_first", "tax_second", "cost", "profit", "margin"]);
        _.assign(e.block.data.result, o),
        a.$broadcast("pricing.table.result.changed", {
            block: e.block
        })
    }
    ;
    e.$on("added.table.row", function(n, t) {
        t.block.id === e.block.id && h()
    }
    ),
    c(e, "mode", function(n) {
        n === s.TABLE_MODE.EDIT ? (e.$watch("model.rows", function(e, n) {
            e && n && n.length > e.length && h()
        }
        ),
        e.$watch("block.data.options.tax_first", w, !0),
        e.$watch("block.data.options.tax_second", w, !0),
        e.$watch("block.data.options.discount", w, !0),
        e.$watch("block.data.settings.showProfit", w),
        e.$eventToObservable("pricing.table.calculation")["do"](function() {
            u += 1
        }
        ).map(function() {
            return u
        }
        ).debounce(1e3).filter(function() {
            return t.validateTable(e.block.data)
        }
        )["do"](v).flatMapLatest(m).filter(function(e) {
            return e.success && e.version === u
        }
        ).subscribe(k)) : n === s.TABLE_MODE.RECIPIENT_RESTRICTED ? e.$eventToObservable("pricing.table.calculation")["do"](function() {
            u += 1
        }
        ).map(function() {
            return u
        }
        ).debounce(1e3).filter(function() {
            return t.validateTable(e.block.data)
        }
        )["do"](v).flatMapLatest(p).filter(function(e) {
            return e.success && e.version === u
        }
        ).subscribe(y) : e.$eventToObservable("pricing.table.calculation")["do"](function() {
            u += 1
        }
        ).map(function() {
            return u
        }
        ).debounce(1e3).filter(function() {
            return t.validateTable(e.block.data)
        }
        ).subscribe(v)
    }
    ),
    e.removeImage = function(n, t) {
        n.dataObj.data.images = _.reject(n.dataObj.data.images, function(e) {
            return e === t
        }
        ),
        r.updateBlock(e.block, {}, {
            data: e.block.data
        })
    }
    ;
    var I = function(n) {
        var t = _(e.model.columns).filter({
            column: {
                type: "basic_column"
            }
        }).map(function(e) {
            var n = document.createElement("div");
            n.innerHTML = e.column.name || "";
            var t = _.snakeCase(n.innerText.trim());
            return [t, e.column.ref]
        }
        ).object().value();
        _.each(n, function(e) {
            if (!e.isSection) {
                var n = {};
                _.each(e, function(e, o) {
                    if (t[o]) {
                        var i = "";
                        _.isString(e) ? i = e : _.isNumber(e) && (i = e + ""),
                        n[t[o]] = i
                    }
                }
                ),
                _.defaults(e, n)
            }
        }
        )
    }
    ;
    e.$watch("tableOptions.injectedItems", function(t) {
        e.mode === s.TABLE_MODE.EDIT && (_.isEmpty(t) || (I(t),
        _.each(t, function(n) {
            n.isSection ? a.$broadcast("add.table.section", {
                section: {
                    name: n.name
                },
                block: e.block
            }) : a.$broadcast("add.table.row", {
                data: n,
                block: e.block
            })
        }
        ),
        n(h, 200)))
    }
    )
}
]),
angular.module("pd.blocks").controller("PricingTableRowController", ["$scope", "$rootScope", function(e, n) {
    var t = function(n, t) {
        _.isEqual(n, t) || e.$emit("pricing.table.calculation")
    }
    ;
    e.$watch("rowObj.dataObj.data.catalog_item", t),
    e.$watch("rowObj.dataObj.data.price", t),
    e.$watch("rowObj.dataObj.data.cost", t),
    e.$watch("rowObj.dataObj.data.qty", t),
    e.$watch("rowObj.dataObj.data.tax_first", t, !0),
    e.$watch("rowObj.dataObj.data.tax_second", t, !0),
    e.$watch("rowObj.dataObj.data.discount", t, !0),
    e.$watch("rowObj.dataObj.options.optional", t),
    e.$watch("rowObj.dataObj.options.qty_editable", t),
    e.$watch("rowObj.dataObj.options.optional_selected", t);
    var o = function(e) {
        return e.sku && (e.sku = _.escape(e.sku)),
        e.price && (e.price = Number(e.price)),
        e.cost && (e.cost = Number(e.cost)),
        _.each(e.custom_fields, function(n, t) {
            e.custom_fields[t] = _.escape(n)
        }
        ),
        e
    }
      , i = ["name", "description", "sku", "images", "price", "cost"];
    e.$on("catalog.item.selected", function(t, a) {
        if (a.parent.ref === e.rowObj.dataObj.ref && a.tableId === e.pricingTable.tableUUID) {
            var s = o(a.item);
            _.assign(e.rowObj.dataObj.data, _.pick(s, i)),
            _.assign(e.rowObj.dataObj.data.custom_fields, s.custom_fields),
            e.rowObj.dataObj.data.catalog_item = s.id,
            s.currency && 1 === e.block.data.sections.length && 1 === _.first(e.block.data.sections).rows.length && (e.block.data.options.currency = s.currency),
            n.$broadcast("block.data.updated.from.server")
        }
    }
    )
}
]),
angular.module("pd.blocks").directive("blockSection", [function() {
    return {
        restrict: "E",
        replace: !0,
        transclude: !0,
        scope: {
            blockSectionTitle: "@",
            blockSectionId: "@",
            blockSectionMenuItems: "=",
            blockSectionScope: "="
        },
        templateUrl: "/views/blocks/settings/block-section.html",
        controller: ["$scope", function(e) {
            e.sectionVisible = !0,
            e.menuVisible = !1,
            e.sectionDisabled = !1,
            _.contains(["row", "table", "pricingtable"], e.blockSectionId) && e.$watch("blockSectionScope", function(n) {
                n && e.blockSectionScope.$watch("tableSettingsSection", function(n) {
                    e.sectionVisible = n === e.blockSectionId,
                    e.sectionDisabled = "row" === e.blockSectionId && "table" === n
                }
                )
            }
            ),
            e.toggleSection = function() {
                e.sectionDisabled || (e.sectionVisible = !e.sectionVisible)
            }
            ,
            e.toggleMenu = function() {
                e.sectionDisabled || (e.menuVisible = !e.menuVisible)
            }
            ,
            e.hideMenu = function() {
                e.menuVisible = !1
            }
            ,
            e.applyAction = function(n) {
                var t = e.blockSectionScope[n];
                _.isFunction(t) && t.call()
            }
        }
        ]
    }
}
]),
angular.module("pd.blocks").directive("blockSettings", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/blocks/settings/block-settings-base.html",
        controller: ["$scope", "BlocksService", "Config", "FeaturesService", "Constants", function(e, n, t, o, i) {
            var a = function(t) {
                e.$watch("block." + t, function(o, i) {
                    if (!_.isEqual(o, i)) {
                        var a = {};
                        a[t] = _.isObject(o) && o.id ? o.id : o,
                        n.updateBlockSettings(e.block, a)
                    }
                }
                )
            }
            ;
            _.each(["hide_in_pdf", "enable_predefined_tokens", "layout", "is_locked"], a),
            e.$watch("block.data.settings", function(t, o) {
                _.isEqual(t, o) || n.updateBlock(e.block)
            }
            , !0),
            e.$watch("block.data.options.show_page_number_in_pdf", function(t, o) {
                _.isEqual(t, o) || n.updateBlock(e.block)
            }
            , !0),
            e.isWorkspaceAdmin = t.isWorkspaceAdmin(),
            e.isWorkspaceOwner = t.isWorkspaceOwner(),
            o.checkAvailability(i.FEATURES.BLOCK_LOCKING).then(function(n) {
                e.blockLockingAvailable = n
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.blocks").directive("removeBlockButton", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/blocks/settings/blocks/remove-button.html",
        link: function(e, n) {
            e.label = n.attr("label")
        }
    }
}
]).directive("applyBlockSettingsButton", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/blocks/settings/blocks/apply-button.html"
    }
}
]).directive("blockLayouts", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/blocks/settings/blocks/layouts.html"
    }
}
]).directive("saveAsTemplate", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/blocks/settings/blocks/save-as-template.html"
    }
}
]).directive("tableHeaders", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/blocks/settings/blocks/table-headers.html"
    }
}
]).directive("tableBorders", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/blocks/settings/blocks/table-borders.html"
    }
}
]).directive("removeRowButton", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/blocks/settings/blocks/remove-row-button.html"
    }
}
]).directive("tableSubTabs", [function() {
    return {
        restrict: "E",
        templateUrl: "/views/blocks/settings/blocks/table-sub-tabs.html"
    }
}
]),
angular.module("pd.blocks").directive("taxSetting", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            tax: "=",
            removable: "=",
            removeTax: "=",
            isValid: "="
        },
        templateUrl: "/views/blocks/settings/blocks/tax.html"
    }
}
]),
angular.module("pd.blocks").directive("basicTable", ["$controller", function(e) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/blocks/table/basic-table.html",
        scope: {
            mode: "=",
            block: "=",
            tableOptions: "="
        },
        controller: ["$scope", "Constants", "BasicTableService", function(n, t, o) {
            var i = n.tableOptions || {}
              , a = i.tableService || o
              , s = i.tableType || t.TABLE_TYPE.BASIC;
            e("BasicTableModelController", {
                $scope: n,
                TableService: a,
                tableType: s
            }),
            e("BasicTableController", {
                $scope: n,
                TableService: a,
                tableType: s
            }),
            i.controllers && _.each(i.controllers, function(t) {
                e(t, {
                    $scope: n,
                    TableService: a,
                    tableType: s
                })
            }
            )
        }
        ],
        link: function(n, t) {
            e("BasicTableColumnReorderController", {
                $scope: n,
                $element: t
            }),
            e("BasicTableRowReorderController", {
                $scope: n,
                $element: t
            }),
            e("BasicTableColumnResizeController", {
                $scope: n,
                $element: t
            })
        }
    }
}
]),
angular.module("pd.blocks").directive("basicTableHighlightedPart", ["ElementClickBehavior", function(e) {
    return {
        restrict: "A",
        link: function(n, t, o) {
            var i = !1
              , a = function() {
                i || (t.addClass("doc-table__row-active"),
                i = !0)
            }
              , s = function() {
                i && (t.removeClass("doc-table__row-active"),
                i = !1)
            }
              , l = function() {
                i || (t.addClass("doc-table__cell-active"),
                angular.element("td.cell-for-" + n.columnObj.column.ref + "-" + n.tableUUID).addClass("doc-table__cell-active"),
                i = !0)
            }
              , r = function() {
                i && (t.removeClass("doc-table__cell-active"),
                angular.element("td.cell-for-" + n.columnObj.column.ref + "-" + n.tableUUID).removeClass("doc-table__cell-active"),
                i = !1)
            }
              , c = e.getStream()
              , d = [];
            if ("row" === o.basicTableHighlightedPart && n.isInEditMode()) {
                var u = c.filter(function(e) {
                    return "block-part-click" === e.name
                }
                );
                d.push(u.filter(function(e) {
                    return e.blockId === n.block.id && e.rowClick && e.$element === t
                }
                ).subscribe(a)),
                d.push(u.filter(function(e) {
                    return e.blockId !== n.block.id || !e.rowClick || e.$element !== t
                }
                ).subscribe(s)),
                d.push(c.filter(function(e) {
                    return "block-part-click" !== e.name
                }
                ).subscribe(s));
                var m = {
                    name: "block-part-click",
                    blockId: n.block.id,
                    hasEditor: !0,
                    rowClick: !0,
                    rowId: n.rowObj.section ? n.rowObj.section.ref : n.rowObj.dataObj.ref,
                    $element: t
                };
                e.addToElement(t, n, {
                    map: m,
                    "do": function(e) {
                        angular.element(e.target).hasClass("icon--move") || e.stopPropagation()
                    }
                }),
                n.rowObj.created && e.fireEvent(m),
                n.$watch("rowObj.actualDragging", function(n, t) {
                    !n && t && e.fireEvent(m)
                }
                )
            } else if ("cell" === o.basicTableHighlightedPart && n.isInEditMode()) {
                var p = c.filter(function(e) {
                    return "block-part-click" === e.name
                }
                );
                d.push(p.filter(function(e) {
                    return e.blockId === n.block.id && e.columnClick && e.$element === t
                }
                ).subscribe(l)),
                d.push(p.filter(function(e) {
                    return e.blockId !== n.block.id || !e.columnClick || e.$element !== t
                }
                ).subscribe(r)),
                d.push(c.filter(function(e) {
                    return "block-part-click" !== e.name
                }
                ).subscribe(r));
                var g = {
                    name: "block-part-click",
                    blockId: n.block.id,
                    hasEditor: !0,
                    columnClick: !0,
                    $element: t
                };
                e.addToElement(t, n, {
                    map: g,
                    "do": function(e) {
                        angular.element(e.target).hasClass("icon--move") || e.stopPropagation()
                    }
                }),
                n.$watch("columnObj.dragging", function(n, t) {
                    !n && t && e.fireEvent(g)
                }
                )
            }
            n.$on("$destroy", function() {
                _.each(d, function(e) {
                    e.dispose()
                }
                )
            }
            )
        }
    }
}
]),
angular.module("pd.blocks").directive("tableWrapper", ["$controller", "$sce", "PricingTableCellHtmlExtractor", "singleWatch", "Constants", "TokenWrapper", "$timeout", function(e, n, t, o, i, a, s) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/blocks/table/table-wrapper.html",
        scope: {
            mode: "=",
            block: "=",
            tableOptions: "=",
            tableType: "@"
        },
        controller: ["$scope", "Constants", "BasicTableService", function(n, t, o) {
            var i = n.tableOptions || {};
            if (n.wrapped = !n.block.created && (!i.injectedItems || _.isEmpty(i.injectedItems)),
            n.showOriginalTable = !n.wrapped,
            n.wrapped) {
                n.tableWrapperScope = n.$new(),
                n.tableWrapperScope.wrappingMode = !0;
                var a = i.tableService || o
                  , s = i.tableType || t.TABLE_TYPE.BASIC;
                e("BasicTableModelController", {
                    $scope: n.tableWrapperScope,
                    TableService: a,
                    tableType: s
                }),
                e("BasicTableController", {
                    $scope: n.tableWrapperScope,
                    TableService: a,
                    tableType: s
                }),
                i.controllers && _.each(i.controllers, function(t) {
                    e(t, {
                        $scope: n.tableWrapperScope,
                        TableService: a,
                        tableType: s
                    })
                }
                ),
                n.$watch("wrapped", function(e) {
                    e || (n.tableWrapperScope.$destroy(),
                    n.tableWrapperScope = null )
                }
                ),
                n.$on("$destroy", function() {
                    n.tableWrapperScope && n.tableWrapperScope.$destroy()
                }
                )
            }
        }
        ],
        link: function(e, l) {
            if (e.wrapped) {
                var r = l.find("table")
                  , c = angular.element('<thead><tr class="tr"></tr></thead>')
                  , d = angular.element("<tbody></tbody>")
                  , u = e.tableWrapperScope.model
                  , m = function(n, t) {
                    var o = angular.element("<span>" + n + "</span>");
                    return a.create(o, function(n) {
                        e.wrapped && t(n)
                    }
                    , e.tableWrapperScope),
                    o
                }
                  , p = function(e) {
                    var t = n.trustAsHtml(e)
                      , o = _.isEmpty(t) ? "<p>&nbsp</p>" : t.toString();
                    return o
                }
                  , g = function(n, o) {
                    if ("basic" === e.tableType)
                        return m(p(n.data[o.column.ref]), function(e) {
                            n.data[o.column.ref] = e
                        }
                        );
                    if ("pricing" === e.tableType) {
                        var i = t.getExtractor(o.column.type);
                        return i ? i(n, e.block, o, e.mode, e) : m(p(n.data[o.column.ref]), function(e) {
                            n.data[o.column.ref] = e
                        }
                        )
                    }
                }
                ;
                e.block.data.settings.horizontalBorder && r.addClass("doc-table__tbl--borders-h"),
                e.block.data.settings.verticalBorder && r.addClass("doc-table__tbl--borders-v"),
                r.append(_.map(u.columns, function(e) {
                    return angular.element('<col style="width: ' + Math.abs(e.column.options.width) + '%;">')
                }
                , [])),
                e.block.data.settings.showHeaders && (c.find("tr").append(_.map(u.columns, function(e) {
                    var n = angular.element('<th class="basic-table-cell--marker"><span></span></th>')
                      , t = m(p(e.column.name), function(n) {
                        e.column.name = n
                    }
                    );
                    return n.find("span").append(t),
                    n
                }
                )),
                r.append(c)),
                d.append(_.map(u.rows, function(e) {
                    var n = angular.element("<tr></tr>");
                    if (e.section)
                        if (e.section.isDefault || !e.section.options.showHeader)
                            n.hide();
                        else {
                            var t = angular.element('<td class="doc-table__tbl-section" colspan="' + u.columns.length + '"></td>')
                              , o = m(p(e.section.name), function(n) {
                                e.section.name = n
                            }
                            );
                            t.append(o),
                            n.append(t)
                        }
                    else
                        n.append(_.map(e.cells, function(e) {
                            var n = angular.element("<td></td>");
                            return n.append(g(e.dataObj, e.columnObj)),
                            n
                        }
                        ));
                    return n
                }
                )),
                r.append(d);
                var f = function() {
                    if (!e.block.is_locked || i.TABLE_MODE.RECIPIENT_RESTRICTED) {
                        l.unbind("mousedown", f);
                        var n = l.find(".doc-table")
                          , t = l.find(".doc-table__footer")
                          , o = l.find(".doc-table__overlay")
                          , a = n.height() + t.height() + 10;
                        o.height(a).show(),
                        s(function() {
                            o.remove(),
                            e.showOriginalTable = !0,
                            n.remove(),
                            t.remove(),
                            o.remove(),
                            setTimeout(function() {
                                angular.element(window).resize()
                            }
                            , 100)
                        }
                        , 1e3),
                        s(function() {
                            e.wrapped = !1
                        }
                        , 100)
                    }
                }
                ;
                o(e, "mode", function(e) {
                    (i.TABLE_MODE.EDIT === e || i.TABLE_MODE.RECIPIENT_RESTRICTED === e) && l.bind("mousedown", f)
                }
                )
            }
        }
    }
}
]),
angular.module("pd.blocks").controller("BasicTableColumnReorderController", ["$scope", "$compile", "$timeout", "$element", "$rootScope", "Constants", function(e, n, t, o, i, a) {
    var s = 0;
    e.columnDragHelper = function(n) {
        return function() {
            if (s = 0,
            e.mode === a.TABLE_MODE.EDIT) {
                e.columnReorderInProcess = !0;
                var t = o.find(".doc-table__tbl");
                n.dragging = !0;
                var i = angular.element('<column-reorder-helper><span class="btn btn--block-control doc-table__column-drag" style="display: block; visibility: visible; opacity: 1; z-index: 10"><i class="icon icon--move"></i></span></column-reorder-helper>')
                  , l = angular.element("<div></div>").width(t.width() * Math.abs(n.column.options.width) / 100);
                return l.append(i)
            }
        }
    }
    ,
    e.onColumnDragStop = function(n) {
        return function(o) {
            s = 0,
            e.mode === a.TABLE_MODE.EDIT && (e.columnReorderInProcess = !1,
            t(function() {
                c(n, o),
                _.each(e.model.columns, function(e) {
                    e.dragging = !1
                }
                ),
                e.$broadcast("table.column.reorder")
            }
            ))
        }
    }
    ;
    var l = function(e, n) {
        return _.find(_.map(e, angular.element), function(e, t, o) {
            var i = e.offset()
              , a = i.left + e.width();
            return 0 === t && n.screenX < i.left ? !0 : t === o.length - 1 && n.screenX > a ? !0 : n.screenX >= i.left && n.screenX <= a
        }
        )
    }
      , r = function(e, n) {
        var t = e.offset().left + e.width() / 2;
        return n.screenX <= t
    }
    ;
    e.onColumnDrag = function(e) {
        if (s += 1,
        5 === s) {
            s = 0;
            var n = o.find(".tr > th").removeClass("drop-target-before").removeClass("drop-target-after")
              , t = l(n, e);
            t && t.addClass(r(t, e) ? "drop-target-before" : "drop-target-after")
        }
    }
    ;
    var c = function(n, t) {
        var i = o.find(".tr > th").removeClass("drop-target-before").removeClass("drop-target-after")
          , a = l(i, t);
        if (a) {
            var s = a.attr("column-ref")
              , c = _.find(e.model.columns, function(e) {
                return e.column.ref === s
            }
            );
            n.column.ref !== c.column.ref && (r(a, t) ? d(n, c) : u(n, c))
        }
    }
      , d = function(n, t) {
        e.model.columns = _.reduce(e.model.columns, function(e, o) {
            return o !== n && (o === t ? (e.push(n),
            e.push(t)) : e.push(o)),
            e
        }
        , [])
    }
      , u = function(n, t) {
        e.model.columns = _.reduce(e.model.columns, function(e, o) {
            return o !== n && (o === t ? (e.push(t),
            e.push(n)) : e.push(o)),
            e
        }
        , [])
    }
}
]),
angular.module("pd.blocks").controller("BasicTableColumnResizeController", ["$scope", "$filter", "$timeout", "$element", "BlocksService", function(e, n, t, o, i) {
    var a = 0
      , s = ".doc-table__tbl"
      , l = 3;
    e.columnResizeStart = function() {
        a = 0
    }
    ,
    e.columnResizeStop = function() {
        a = 0,
        i.updateBlock(e.block, {}, {
            data: e.block.data
        })
    }
    ,
    e.columnResize = function(n) {
        return function(t, i) {
            if (a += 1,
            2 === a) {
                a = 0;
                var r = o.find(s)
                  , c = r.width()
                  , d = i.helper.width()
                  , u = 100 * d / c
                  , m = n.column.options.width - u
                  , p = e.model.columns.indexOf(n);
                if (p !== e.model.columns.length - 1) {
                    var g = e.model.columns[p + 1]
                      , f = g.column.options.width + m;
                    u > l && f > l && (g.column.options.width = Math.abs(f),
                    n.column.options.width = Math.abs(u),
                    e.$digest())
                }
            }
        }
    }
}
]),
angular.module("pd.blocks").controller("BasicTableController", ["$scope", "TableService", "BasicTableRendersService", "tableType", "$rootScope", "$timeout", "Constants", "$filter", function(e, n, t, o, i, a, s, l) {
    e.tableFooterTemplate = t.getTableFooter(o),
    e.TABLE_MODE = s.TABLE_MODE,
    e.addRow = function(t) {
        n.createRow(e.block.data).then(function(n) {
            var o = e.model.addRow(n, t);
            i.$broadcast("added.table.row", {
                block: e.block
            }),
            t || (o.created = !0)
        }
        )
    }
    ,
    e.$on("add.table.row", function(t, o) {
        o.block.id === e.block.id && n.createRow(e.block.data).then(function(n) {
            _.assign(n.data, o.data),
            e.model.addRow(n, !0)
        }
        )
    }
    ),
    e.$on("remove.table.row", function(n, t) {
        if (t.block && t.block.id === e.block.id) {
            var o = _.find(e.model.rows, function(e) {
                return e.dataObj && e.dataObj.ref === t.rowId
            }
            );
            e.model.removeRow(o)
        }
    }
    ),
    e.addSection = function() {
        n.createSection(e.block.data).then(function(n) {
            var t = e.model.addSection(n);
            e.addRow(!0),
            t.created = !0
        }
        )
    }
    ,
    e.$on("add.table.section", function(t, o) {
        o.block.id === e.block.id && n.createSection(e.block.data).then(function(n) {
            _.assign(n, o.section),
            e.model.addSection(n)
        }
        )
    }
    ),
    e.$on("remove.table.section", function(n, t) {
        if (t.block && t.block.id === e.block.id) {
            var o = _.find(e.model.rows, function(e) {
                return e.section && e.section.ref === t.sectionId
            }
            )
              , i = t.includeAllContent;
            i ? e.model.removeSectionWithNestedRows(o) : e.model.removeSection(o)
        }
    }
    ),
    e.addColumn = function() {
        n.createColumn(null , e.block.data).then(function(n) {
            e.model.addColumn(n.column, n.index)
        }
        )
    }
    ,
    e.confirmColumnDelete = function(e) {
        e.deleteConfirmation || (e.deleteConfirmation = !0,
        a(function() {
            e.deleteConfirmation = !1
        }
        , 4e3))
    }
    ,
    e.removeColumn = function(n) {
        e.model.removeColumn(n)
    }
    ,
    e.$on("table.add.column", function(n, t) {
        if (t.block.id === e.block.id) {
            var o = _.any(e.block.data.columns, function(e) {
                return e.ref === t.column.ref
            }
            );
            o || e.model.addColumn(t.column, t.index)
        }
    }
    ),
    e.$on("table.remove.column", function(n, t) {
        if (t.block.id === e.block.id) {
            var o = _.any(e.block.data.columns, function(e) {
                return e.ref === t.column.ref
            }
            );
            o && e.model.removeColumn({
                column: t.column
            })
        }
    }
    ),
    e.isInEditMode = function() {
        return e.mode === s.TABLE_MODE.EDIT
    }
    ,
    e.isEditableByUser = function(n) {
        return !!(e.mode === s.TABLE_MODE.EDIT && n && n.options && n.options.editable)
    }
    ,
    e.isEditableByUserOrRecipient = function(n) {
        return n && n.options && n.options.editable && (e.mode === s.TABLE_MODE.EDIT || e.mode === s.TABLE_MODE.RECIPIENT_RESTRICTED)
    }
    ,
    e.isEditableByRecipient = function(n) {
        return n && n.options && n.options.editable && e.mode === s.TABLE_MODE.RECIPIENT_RESTRICTED
    }
    ,
    e.tableUUID = l("uuid-short")(),
    e.getColumnWidth = function(e) {
        return Math.abs(e.column.options.width)
    }
}
]),
angular.module("pd.blocks").controller("BasicTableModelController", ["$scope", "TableService", "singleWatch", "BasicTableRendersService", "tableType", "$controller", "BlocksService", function(e, n, t, o, i, a, s) {
    var l = function() {
        s.updateBlock(e.block, {}, {
            data: e.block.data
        })
    }
      , r = function(e) {
        return {
            section: e,
            template: o.sectionTemplate(e)
        }
    }
      , c = function(e, n) {
        return {
            dataObj: e,
            columnObj: n,
            template: o.cellTemplate(e, n.column),
            controller: o.cellController(e, n.column)
        }
    }
      , d = function(n, t) {
        var s = {
            dataObj: n,
            cells: _.reduce(t, function(e, t) {
                return e.push(c(n, t)),
                e
            }
            , [])
        }
          , l = o.rowController(n, i);
        if (l) {
            var r = e.$new();
            r.rowObj = s,
            r.block = e.block,
            r.pricingTable = e,
            a(l, {
                $scope: r
            }),
            s.scope = r
        }
        return s
    }
      , u = function(e) {
        return {
            column: e,
            template: o.columnTemplate(e)
        }
    }
      , m = function() {
        e.model.rows = _.reduce(e.block.data.sections, function(n, t) {
            var o = r(t);
            return n.push(o),
            _.each(t.rows, function(t) {
                n.push(d(t, e.model.columns))
            }
            ),
            n
        }
        , [])
    }
      , p = function() {
        e.model.columns = _.map(e.block.data.columns, u)
    }
      , g = function() {
        var n;
        _.each(e.model.rows, function(e) {
            e.section ? n = e.section : e.dataObj.section = n.ref
        }
        ),
        e.block.data.sections = T(e.model.rows)
    }
      , f = function(n, t) {
        var o = _.last(e.block.data.sections)
          , i = d(n, e.model.columns);
        return i.isNew = !t,
        o.rows.push(n),
        e.model.rows.push(i),
        l(),
        i
    }
      , b = function(n) {
        n.scope && n.scope.$destroy(),
        e.model.rows = _.filter(e.model.rows, function(e) {
            return e.section || e.dataObj.ref !== n.dataObj.ref
        }
        );
        var t = _.find(e.block.data.sections, function(e) {
            return e.ref === n.dataObj.section
        }
        );
        t.rows = _.filter(t.rows, function(e) {
            return e.ref !== n.dataObj.ref
        }
        ),
        l()
    }
      , v = function(n) {
        e.block.data.sections.push(n);
        var t = r(n);
        return t.isNew = !0,
        e.model.rows.push(t),
        l(),
        t
    }
      , h = function(n) {
        e.model.rows = _.filter(e.model.rows, function(e) {
            return e.section ? e.section.ref !== n.section.ref : !0
        }
        ),
        e.block.data.sections = _.filter(e.block.data.sections, function(e) {
            return e.ref !== n.section.ref
        }
        ),
        g(),
        l()
    }
      , w = function(n) {
        _.each(_.filter(e.model.rows, function(e) {
            return e.dataObj && e.scope && e.dataObj.section === n.section.ref
        }
        , function(e) {
            e.scope.$destroy()
        }
        )),
        e.model.rows = _.filter(e.model.rows, function(e) {
            return e.section ? e.section.ref !== n.section.ref : e.dataObj.section !== n.section.ref
        }
        ),
        e.block.data.sections = _.filter(e.block.data.sections, function(e) {
            return e.ref !== n.section.ref
        }
        ),
        l()
    }
      , k = function(e, n) {
        var t = _.reduce(e, function(e, n) {
            return e + Math.abs(n.column.options.width) / 5
        }
        , 0);
        _.each(e, function(e) {
            e.column.options.width = .8 * Math.abs(e.column.options.width)
        }
        ),
        n.column.options.width = t
    }
      , y = function(e, n) {
        var t = n.column.options.width / (e.length - 1);
        _.each(e, function(e) {
            e.column.options.width = e.column.options.width + t
        }
        )
    }
      , I = function(t, o) {
        o = _.isUndefined(o) ? e.model.columns.length : o;
        var i = u(t);
        return i.isNew = !0,
        k(e.model.columns, i),
        e.block.data.columns.splice(o, 0, t),
        e.model.columns.splice(o, 0, i),
        _.each(e.model.rows, function(a) {
            a.cells && (n.createDefaultCellValue(a.dataObj.data, t, e.block.data),
            a.cells.splice(o, 0, c(a.dataObj, i)))
        }
        ),
        l(),
        i
    }
      , C = function(t) {
        y(e.model.columns, t),
        e.model.columns = _.filter(e.model.columns, function(e) {
            return e.column.ref !== t.column.ref
        }
        ),
        e.block.data.columns = _.filter(e.block.data.columns, function(e) {
            return e.ref !== t.column.ref
        }
        ),
        _.each(e.model.rows, function(e) {
            e.cells && (e.cells = _.filter(e.cells, function(e) {
                return e.columnObj.column.ref !== t.column.ref
            }
            ))
        }
        ),
        _.each(e.block.data.sections, function(e) {
            _.each(e.rows, function(e) {
                n.removeCellValue(e.data, t.column)
            }
            )
        }
        ),
        l()
    }
      , S = function(e, n) {
        return _.map(n, function(n) {
            return _.find(e.cells, function(e) {
                return e.columnObj.column.ref === n.column.ref
            }
            )
        }
        )
    }
      , T = function(e) {
        return _.reduce(e, function(e, n) {
            if (n.section)
                n.section.rows = [],
                e.push(n.section);
            else {
                var t = _.last(e);
                t.rows.push(n.dataObj)
            }
            return e
        }
        , [])
    }
    ;
    e.$on("table.column.reorder", function() {
        _.each(e.model.rows, function(n) {
            n.cells && (n.cells = S(n, e.model.columns))
        }
        ),
        e.block.data.columns = _.map(e.model.columns, "column"),
        l()
    }
    ),
    e.$on("row.reorder", function() {
        g(),
        l()
    }
    );
    var E = function(e, n) {
        return _.filter(n, function(n) {
            return n.dataObj && n.dataObj.section === e.section.ref
        }
        )
    }
    ;
    e.$on("section.reorder", function() {
        var n = _.find(e.model.rows, {
            reordered: !0
        })
          , t = E(n, e.model.rows)
          , o = _.filter(e.model.rows, function(e) {
            return e.section || -1 === t.indexOf(e)
        }
        );
        e.model.rows = _.reduce(o, function(e, o) {
            return e.push(o),
            o === n && (e = e.concat(t)),
            e
        }
        , []),
        g(),
        l()
    }
    ),
    e.model = {
        addRow: f,
        removeRow: b,
        addSection: v,
        removeSection: h,
        removeSectionWithNestedRows: w,
        addColumn: I,
        removeColumn: C
    },
    e.$on("$destroy", function() {
        _.each(e.model.rows, function(e) {
            e.scope && e.scope.$destroy()
        }
        )
    }
    ),
    p(),
    m()
}
]),
angular.module("pd.blocks").controller("BasicTableRowReorderController", ["$scope", "$rootScope", "$compile", "Constants", function(e, n, t, o) {
    var i = !1
      , a = function(n, t) {
        if (n.dragging = !0,
        n.actualDragging = !0,
        n.section && t !== e.model.rows.length - 1)
            for (var o = t + 1, i = e.model.rows[o]; i && !i.section; )
                i.dragging = !0,
                o += 1,
                i = e.model.rows[o]
    }
      , s = function() {
        _.each(e.model.rows, function(e) {
            e.dragging = !1,
            e.actualDragging = !1
        }
        )
    }
      , l = function(n, t) {
        if (e.mode === o.TABLE_MODE.EDIT) {
            var s = angular.element(t)
              , l = Number(s.attr("row-index"))
              , r = e.model.rows[l];
            return a(r, l),
            r.section ? (i = !0,
            r.reordered = !0) : i = !1,
            angular.element('<row-reorder-helper><div><button class="btn btn--block-control doc-table__row-drag" style="display: block; opacity: 1; visibility: visible;"><i class="icon icon--move"></i></button></div></row-reorder-helper>')
        }
    }
      , r = function() {
        e.mode === o.TABLE_MODE.EDIT && (e.$broadcast(i ? "section.reorder" : "row.reorder"),
        i = !1,
        _.each(e.model.rows, function(e) {
            e.reordered = !1
        }
        ),
        s())
    }
    ;
    e.rowSortableOptions = {
        axis: "y",
        helper: l,
        stop: r,
        cancel: ".contenteditable",
        tolerance: "pointer",
        handle: ".doc-table__row-drag",
        placeholder: "row-reorder-placeholder",
        start: function(n, t) {
            _.each(e.model.columns, function() {
                t.placeholder.append("<td></td>")
            }
            )
        }
    }
}
]),
angular.module("pd.blocks").directive("elementTokenManager", ["ContextService", "$filter", "$timeout", "$rootScope", function(e, n, t, o) {
    return {
        restrict: "A",
        link: function(i, a, s) {
            if (!e.isTemplates() && !e.isContentLibrary()) {
                var l = s.elementTokenManager ? i[s.elementTokenManager] : angular.noop;
                i.$on("token.value.updated", function(e, t) {
                    var o = a.find(n("tokenSelector")(t.token)).length > 0;
                    o && l({
                        operation: "toke.value.update"
                    })
                }
                ),
                i.$on("token.name.updated", function(e, t) {
                    var o = a.find(n("tokenSelector")(t.oldToken)).length > 0;
                    o && l({
                        operation: "token.name.update"
                    })
                }
                ),
                i.$on("remove.token", function(e, n) {
                    var t = a.find("#" + n.elementId);
                    if (t.length > 0) {
                        var o = rangy.createRange();
                        o.setStartAfter(t[0]),
                        o.collapse();
                        var i = rangy.getSelection();
                        i.removeAllRanges(),
                        i.addRange(o);
                        var s = rangy.saveSelection();
                        t.remove(),
                        l({
                            operation: "remove.token",
                            cursorPosition: s
                        })
                    }
                }
                );
                var r = function(e) {
                    var i = angular.element(e.target);
                    if (i && i.attr("data-token")) {
                        i.attr("id") || i.attr("id", n("uuid-short")());
                        var a = i.offset()
                          , s = {
                            width: i.width(),
                            height: i.height()
                        }
                          , l = i.attr("id");
                        t(function() {
                            o.$broadcast("token.click", {
                                token: i.attr("data-token-id"),
                                offset: a,
                                size: s,
                                elementId: l
                            })
                        }
                        )
                    }
                }
                ;
                i.$watch("contentEditable", function(e) {
                    a.unbind("click", r),
                    e && a.bind("click", r)
                }
                ),
                i.$on("$destroy", function() {
                    a.unbind("click", r)
                }
                )
            }
        }
    }
}
]),
angular.module("pd.blocks").directive("textEditor", [function() {
    return {
        restrict: "E",
        replace: !0,
        scope: {
            content: "=",
            textProperty: "=",
            contentEditable: "=",
            activateOnLoad: "=",
            toolbar: "@",
            emptyTextPlaceholder: "@",
            toolbarId: "@",
            disableImageControls: "=?"
        },
        templateUrl: "/views/blocks/text-editor.html",
        controller: ["$scope", "TextEditorConfigService", "$sce", "$element", "$timeout", "$rootScope", "ContextService", "$filter", "singleWatch", function(e, n, t, o, i, a, s, l, r) {
            var c = !1
              , d = !1
              , u = !1
              , m = []
              , p = e.activateOnLoad
              , g = function() {
                return p || _.isEmpty(f()) && !_.isEmpty(e.emptyTextPlaceholder)
            }
              , f = function() {
                return e.content[e.textProperty]
            }
              , b = function(n) {
                e.content[e.textProperty] = n
            }
            ;
            e.onTokenUpdate = function(n) {
                var t = o.html();
                u ? (o.redactor("code.set", t),
                "remove.token" === n.operation && (rangy.restoreSelection(n.cursorPosition),
                d = !0)) : (b(t),
                e.$emit("block.data.text.change"))
            }
            ,
            r(e, "content", function() {
                var e = t.trustAsHtml(f());
                _.isEmpty(e) || o.html(e.toString())
            }
            ),
            e.$on("block.data.updated.from.server", function() {
                var e = f();
                if (u && e !== o.redactor("code.get"))
                    c = !0,
                    o.redactor("code.set", e),
                    o.redactor("placeholder.toggle", e);
                else if (!u) {
                    var n = t.trustAsHtml(e);
                    _.isEmpty(n) || o.html(n.toString())
                }
            }
            );
            var v = function() {
                if (c)
                    return void (c = !1);
                if (d) {
                    d = !1;
                    var n = o.redactor("code.get");
                    _.isEmpty(n) && o.redactor("focus.setStart")
                }
                b(o.redactor("code.get")),
                e.$emit("block.data.text.change")
            }
              , h = function() {
                e.$emit("text.editor.focus")
            }
              , w = function() {
                e.$emit("text.editor.blur"),
                f() !== o.redactor("code.get") && v()
            }
              , k = function() {
                var t = l("uuid-short")()
                  , i = function() {
                    return function() {
                        var e = this;
                        _.each(m, function(n) {
                            n.call(null , e)
                        }
                        )
                    }
                }
                ;
                if (m.push(function() {
                    u = !0
                }
                ),
                g())
                    m.push(function(e) {
                        e.placeholder.toggle()
                    }
                    );
                else {
                    var s = rangy.saveSelection();
                    m.push(function() {
                        rangy.restoreSelection(s)
                    }
                    )
                }
                var r = n.getConfig({
                    toolbar: e.toolbar,
                    textEditorId: t,
                    emptyTextPlaceholder: e.emptyTextPlaceholder,
                    activateOnLoad: p,
                    toolbarId: e.toolbarId,
                    callbacks: {
                        changeCallback: v,
                        focusCallback: h,
                        blurCallback: w,
                        initCallback: i(),
                        imageUploadCallback: I,
                        clickCallback: y
                    },
                    disableImageControls: e.disableImageControls
                });
                o.redactor(r),
                o.bind("mouseup", function() {
                    a.$broadcast("text.editor.toolbar.show", {
                        toolbarId: t
                    })
                }
                )
            }
              , y = function(e) {
                if ("redactor-image-editter" === e.target.id) {
                    var n = angular.element("#redactor-image-align");
                    n.click(),
                    n.focus(),
                    n.find('option[value="none"]').text("Inline")
                }
            }
              , I = function(n) {
                e.$emit("text.editor.image.inserted"),
                n.on("load", function() {
                    e.$emit("text.editor.image.loaded")
                }
                )
            }
            ;
            e.$watch("contentEditable", function(n) {
                if (n && !u)
                    if (g())
                        k();
                    else {
                        var t = angular.noop
                          , i = angular.noop
                          , a = angular.noop
                          , s = function() {
                            o.unbind("mousedown", t),
                            o.unbind("drop", a),
                            o.unbind("dragover", i)
                        }
                        ;
                        e.disableImageControls || (i = function(e) {
                            e.preventDefault()
                        }
                        ,
                        o.bind("dragover", i),
                        a = function(e) {
                            e.preventDefault(),
                            e = e.originalEvent || e;
                            var n = e.dataTransfer.files;
                            m.push(function(t) {
                                t.upload.directUpload(n[0], e)
                            }
                            ),
                            s(),
                            k()
                        }
                        ,
                        o.bind("drop", a)),
                        t = function() {
                            s(),
                            setTimeout(k)
                        }
                        ,
                        o.bind("mousedown", t)
                    }
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.blocks").service("BlockControllersService", [function() {
    var e = {
        toc: ["TableOfContentBlockController"],
        pricingtable: ["PricingTableBlockController"],
        table: ["TableBlockController"],
        video: ["VideoBlockController"],
        html: ["HtmlBlockController"],
        cover: ["CoverPageBlockController"],
        pdf: ["PdfBlockController"]
    }
      , n = {
        toc: ["TableOfContentBlockSettingsController"],
        pricingtable: ["TableBlockSettingsController", "PricingTableBlockSettingsController"],
        table: ["TableBlockSettingsController"],
        video: ["VideoBlockSettingsController"],
        html: ["HtmlBlockSettingsController"],
        cover: ["CoverPageBlockSettingsController"]
    };
    this.getBlockControllers = function(n) {
        return n && n.type ? e[n.type.handle] || [] : []
    }
    ,
    this.getBlockSettingsControllers = function(e) {
        return e && e.type ? n[e.type.handle] || [] : []
    }
}
]),
angular.module("pd.blocks").service("BlockDataMergeService", ["Constants", function(e) {
    var n = function(e, t) {
        _.isEqual(e, t) || _.each(_.keys(t), function(o) {
            var i = e[o];
            _.isObject(i) ? n(i, t[o]) : i !== t[o] && _.isString(i) && (e[o] = t[o])
        }
        )
    }
      , t = function(e, t) {
        return n(e.data, t.data),
        e
    }
      , o = function(e, n) {
        _.each(e, function(e) {
            var t = _.find(n, {
                ref: e.ref
            });
            t && t.name !== e.name && (t.name = e.name)
        }
        )
    }
      , i = function(e, n, t) {
        _.each(e, function(e) {
            var o = _.find(n, {
                ref: e.ref
            });
            o && (o.name !== e.name && (o.name = e.name),
            _.each(e.rows, function(e) {
                var n = _.find(o.rows, {
                    ref: e.ref
                });
                n && t(e, n)
            }
            ))
        }
        )
    }
      , a = function(e, t) {
        o(t.data.columns, e.data.columns),
        i(t.data.sections, e.data.sections, function(e, t) {
            n(t.data, e.data)
        }
        )
    }
      , s = function(e, t) {
        t = t.data,
        o(t.data.columns, e.data.columns),
        i(t.data.sections, e.data.sections, function(e, t) {
            n(t.data, _.omit(e.data, ["name", "total", "price", "qty", "tax_first", "tax_second", "discount"]))
        }
        )
    }
      , l = {
        "default": angular.noop
    };
    l[e.BLOCK_TYPES.TEXT] = t,
    l[e.BLOCK_TYPES.HEADING] = t,
    l[e.BLOCK_TYPES.HEADER] = t,
    l[e.BLOCK_TYPES.FOOTER] = t,
    l[e.BLOCK_TYPES.COVER] = t,
    l[e.BLOCK_TYPES.TABLE] = a,
    l[e.BLOCK_TYPES.PRICING_TABLE] = s,
    this.merge = function(e, n) {
        var t = l[e.type.handle] || l["default"];
        return t(e, n)
    }
}
]),
angular.module("pd.blocks").service("BlockWidgetsService", ["WidgetsService", "Constants", function(e, n) {
    this.calculateWidgetPosition = function(e) {
        var n, t, o = e.offset, i = e.widget, a = e.documentSize, s = a.scale, l = e.blockEl.find(".doc-block__bd"), r = l.offset(), c = {
            width: l.width(),
            height: l.height()
        };
        n = (o.top - r.top) / s,
        0 > n ? n = 0 : n > c.height && (n = c.height),
        t = (o.left - r.left) / s,
        0 > t ? t = 0 : t + i.size.width > c.width && (t = c.width - i.size.width);
        var d = {
            left: t,
            top: n,
            page: 0,
            type: "block-relative"
        };
        return d
    }
    ,
    this.createWidget = function(n) {
        return e.addWidget(n)
    }
    ,
    this.isAcceptWidget = function(e) {
        return e.is_locked ? !1 : _.contains(n.WIDGET_FREE_BLOCKS, e.type.handle) ? !1 : e.type.handle !== n.BLOCK_TYPES.PDF || e.attachment ? !0 : !1
    }
}
]),
angular.module("pd.blocks").service("TextEditorConfigService", ["Constants", "Config", "$rootScope", "UploadDialog", "NotificationCenter", function(e, n, t, o, i) {
    var a = function() {
        return {
            buttons: ["bold", "italic", "deleted", "alignment", "unorderedlist", "orderedlist", "outdent", "indent", "link"]
        }
    }
      , s = function() {
        return {
            plugins: ["bufferbuttons", "underline", "fontfamily", "fontsize", "fontcolor"]
        }
    }
      , l = function() {
        return {
            dragImageUpload: !1,
            deniedTags: ["img"],
            dragFileUpload: !1,
            dropCallback: function(e) {
                e.preventDefault(),
                e.stopPropagation()
            }
        }
    }
      , r = function() {
        var e;
        return {
            plugins: ["imageupload"],
            imageUpload: n.APIBaseURL + "imageupload",
            imageFloatMargin: "16px",
            uploadImageFields: {
                workspace: n.workspace
            },
            uploadStartCallback: function() {
                e = i.status("Uploading...", 15)
            },
            imageUploadCallback: function(n) {
                i.hideStatus(e),
                n.css("float", "left").css("margin", "0px 16px 16px 0px"),
                this.caret.setAfter(n)
            },
            imageUploadErrorCallback: function() {
                i.hideStatus(e)
            },
            imageuploadShowCallback: function() {
                var e = this;
                o.show({
                    imagesOnly: !0
                }).then(function(n) {
                    e.image.insert({
                        filelink: n
                    })
                }
                )
            }
        }
    }
      , c = function() {
        return {
            deniedTags: ["h1", "h2", "h3", "h4", "h5", "h6", "iframe", "video", "audio", "embed", "object"],
            removeComments: !0,
            removeEmpty: !1,
            paragraphize: !1,
            cleanSpaces: !1,
            scrollTarget: ".document-scrollable-marker",
            replaceTags: [["strike", "del"], ["b", "strong"]],
            removeAttr: [["img", "onerror"]]
        }
    }
      , d = function() {
        return {
            focus: !0
        }
    }
      , u = function(e) {
        return e ? {
            placeholder: e,
            blurCallback: function() {
                this.placeholder.toggle()
            },
            focusCallback: function() {
                this.placeholder.remove()
            },
            initCallback: function() {
                _.isEmpty(this.code.get()) && this.placeholder.toggle()
            }
        } : {}
    }
      , m = function() {
        return {
            buttons: [],
            focusCallback: function() {
                t.$broadcast("text.editor.toolbar.hide")
            }
        }
    }
      , p = function(e) {
        return {
            toolbarExternal: "#" + e,
            focusCallback: function() {
                t.$broadcast("text.editor.toolbar.hide")
            }
        }
    }
      , g = function(e) {
        var n = {
            toolbarId: e
        };
        return t.$broadcast("text.editor.init", n),
        {
            toolbarExternal: "#" + e,
            focusCallback: function() {
                t.$broadcast("text.editor.toolbar.show", n)
            },
            clickCallback: function() {
                t.$broadcast("text.editor.toolbar.show", n)
            },
            blurCallback: function() {
                t.$broadcast("text.editor.toolbar.hide", n)
            },
            destroyCallback: function() {
                t.$broadcast("text.editor.destroy", n)
            }
        }
    }
      , f = function(e, n) {
        return _.assign(e, n, function(e, n) {
            return _.isFunction(e) ? function() {
                e.apply(this, arguments),
                n.apply(this, arguments)
            }
             : _.isArray(e) ? e.concat(n) : n
        }
        )
    }
    ;
    this.getConfig = function(n) {
        var t = {}
          , o = [u(n.emptyTextPlaceholder), c()];
        return n.callbacks && o.push(n.callbacks),
        n.activateOnLoad && o.push(d()),
        n.toolbar === e.TEXT_EDITOR_TOOLBAR.SHARED ? (o.push(a()),
        o.push(g(n.textEditorId)),
        o.push(s()),
        o.push(n.disableImageControls ? l() : r())) : n.toolbar === e.TEXT_EDITOR_TOOLBAR.PROVIDED ? (o.push(a()),
        o.push(p(n.toolbarId)),
        o.push(s())) : n.toolbar === e.TEXT_EDITOR_TOOLBAR.NONE && (o.push(m()),
        o.push(l())),
        _.reduce(o, function(e, n) {
            return f(e, n)
        }
        , t)
    }
}
]),
angular.module("pd.library", ["pd.config", "pd.common", "pd.directives", "pd.services"]).config(["$stateProvider", function(e) {
    e.state("library", {
        parent: "app.base",
        url: "^/library/f/:folderId",
        views: {
            "@app": {
                templateUrl: "/views/library/library.html",
                controller: "LibraryController"
            },
            "folders@library": {
                templateUrl: "/views/library/library-folders.html",
                controller: "LibraryFoldersController"
            },
            "items@library": {
                templateUrl: "/views/library/library-items.html",
                controller: "LibraryItemsController"
            }
        },
        breadcrumbs: [{
            ref: "folders",
            folderType: "library"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("library.not-found", {
        parent: "app.base",
        url: "^/library/not-found",
        views: {
            "@app": {
                templateUrl: "/views/library/not-found.html"
            }
        },
        breadcrumbs: [{
            name: "Not found"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("library.details", {
        parent: "app.base",
        url: "^/library/:documentId?new",
        views: {
            "@app": {
                controller: "LibraryItemDetailsController",
                templateUrl: "/views/library/item.html"
            },
            "panel-right@library.details": {
                templateUrl: "/views/library/tools-panel.html"
            },
            "panel-center@library.details": {
                templateUrl: "/views/library/item-editor.html"
            }
        },
        breadcrumbs: [{
            ref: "folders",
            folderType: "library"
        }, {
            ref: "library-item"
        }],
        data: {
            hasRightPanel: !0,
            hasDocToolsPanel: !0,
            backgroundType: "default"
        }
    })
}
]),
angular.module("pd.library").controller("LibraryController", ["$scope", "Config", "$state", "Constants", "FeaturesService", function(e, n, t, o, i) {
    i.checkAvailability(o.FEATURES.LIBRARY).then(function(e) {
        e || t.go("dashboard")
    }
    )
}
]),
angular.module("pd.library").controller("LibraryFoldersController", ["$scope", "LibraryService", function(e, n) {
    e.libraryFoldersService = n
}
]),
angular.module("pd.library").controller("LibraryItemDetailsController", ["$scope", "$rootScope", "$stateParams", "$state", "DocumentDetailsService", "ContextService", "$q", "$timeout", function(e, n, t, o, i, a, s, l) {
    var r = t.documentId
      , c = function() {
        var a = s.defer();
        return i.getLibraryItemInfo(r).then(function(o) {
            e.documentInfo = o,
            n.documentName = o.document.name,
            e.ready = !0,
            n.$broadcast("object.loaded", {
                ref: "library-item",
                obj: o.document,
                breadcrumb: {
                    id: o.document.id,
                    name: o.document.name,
                    documentInfo: o,
                    isLibraryItem: !0,
                    url: "#/content/" + o.document.id,
                    editImmediately: "true" === t["new"]
                }
            }),
            n.$broadcast("folder.loaded", {
                folder: o.document.folder
            }),
            a.resolve()
        }
        , function() {
            a.reject(),
            o.go("library.not-found")
        }
        , function(n) {
            e.documentContentInfo && (n.documentSize = _.cloneDeep(e.documentContentInfo.documentSize)),
            e.documentContentInfo = n
        }
        ),
        a.promise
    }
    ;
    if (c(),
    -1 === o.current.name.indexOf("tools")) {
        var d = {}
          , u = {
            location: "replace"
        };
        e.$watch("documentInfo", function(e) {
            e && e.isOwner ? a.openDocTool("tools-content", d, u) : a.openDocTool("tools-roles", d, u)
        }
        )
    }
}
]),
angular.module("pd.library").controller("LibraryItemsController", ["$scope", "$stateParams", "LibraryService", function(e, n, t) {
    e.getItems = function(e, o) {
        e.folder_id = n.folderId,
        t.getItems(e, o)
    }
}
]),
angular.module("pd.library").controller("LibraryItemsListController", ["$scope", "$rootScope", "$state", "$stateParams", "LibraryService", "ConfirmationService", "Constants", "PermissionsService", "MultipleRequestService", "DocumentsService", "FoldersService", "PermissionRules", function(e, n, t, o, i, a, s, l, r, c, d, u) {
    e.gridOptions = e.gridOptions || {
        store: {
            getItems: e.getItems
        },
        properties: {
            sorting: {
                date_modified: "desc"
            }
        }
    },
    e.libraryService = i,
    e.$on(s.GRID.SELECTION_CHANGE, function(n, t) {
        e.selected = t
    }
    ),
    d.getRootFolder("library").then(function(n) {
        e.isRootFolder = n.id === o.folderId
    }
    );
    var m = function() {
        return _.pluck(e.selected, "uuid")
    }
      , p = function() {
        var n = _.first(e.selected);
        return n.folder ? n.folder.id || n.folder : null 
    }
      , g = function() {
        n.$broadcast(s.GRID.RELOAD)
    }
      , f = function() {
        a.confirm({
            text: "Do you want to remove selected content template(s)?"
        }).then(function() {
            i.remove(m(), p()).then(g)
        }
        )
    }
    ;
    e.removeItem = function() {
        l.checkPermissions(e.selected, "remove").then(f)
    }
    ;
    var b = function(n) {
        e.creatingItem = !0,
        i.createItem({
            name: "Untitled"
        }, {
            folder_id: n
        }).then(function(n) {
            e.creatingItem = !1,
            t.go("library.details", {
                documentId: n.id,
                "new": !0
            })
        }
        , function() {
            e.creatingItem = !1
        }
        )
    }
    ;
    e.addItem = function() {
        "default" === o.folderId ? i.getRootFolder().then(function(e) {
            b(e.id)
        }
        ) : b(o.folderId)
    }
    ,
    e.$on("movetofolder", function(n, t) {
        l.checkPermissions(e.selected, "move").then(function() {
            i.move(m(), p(), t.folder.id).then(g)
        }
        )
    }
    ),
    e.$on("duplicate", function() {
        l.checkPermissions(e.selected, "duplicate").then(function() {
            c.duplicate(m(), p()).then(g)
        }
        )
    }
    ),
    e.LIBRARY_FOLDERS_PERMISSIONS = u.ROOT_ACCESS
}
]).directive("libraryItemsList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/library/items/list.html",
        controller: "LibraryItemsListController",
        scope: {
            getItems: "=",
            emptyListTemplate: "@",
            notFoundTemplate: "@"
        }
    }
}
]),
angular.module("pd.catalog", ["pd.common", "pd.directives", "pd.services"]).config(["$stateProvider", function(e) {
    e.state("catalog", {
        parent: "app.base",
        url: "^/catalog/",
        views: {
            "@app": {
                controller: "CatalogController",
                templateUrl: "/views/catalog/catalog.html"
            }
        },
        data: {
            backgroundType: "white"
        }
    }),
    e.state("catalog.datasource", {
        parent: "catalog",
        url: "^/catalog/:dataSourceId/:folderId",
        views: {
            "@app": {
                templateUrl: "/views/catalog/catalog-datasource.html"
            },
            "folders-section@catalog.datasource": {
                controller: "CatalogFoldersController",
                templateUrl: "/views/catalog/folders.html"
            },
            "items-section@catalog.datasource": {
                controller: "CatalogItemsController",
                templateUrl: "/views/catalog/items.html"
            }
        },
        breadcrumbs: [{
            ref: "folders",
            folderType: "catalog"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("catalog.datasource.items-details", {
        parent: "catalog.datasource",
        url: "^/catalog/:dataSourceId/:folderId/items/:itemId",
        views: {
            "items-section@catalog.datasource": {
                controller: "CatalogItemController",
                templateUrl: "/views/catalog/item.html"
            }
        },
        breadcrumbs: [{
            ref: "catalog-item"
        }],
        data: {
            backgroundType: "white"
        }
    }),
    e.state("catalog.datasource.items-new", {
        parent: "catalog.datasource",
        url: "^/catalog/:dataSourceId/:folderId/new",
        views: {
            "items-section@catalog.datasource": {
                controller: "CatalogItemController",
                templateUrl: "/views/catalog/item.html"
            }
        },
        breadcrumbs: [{
            ref: "folders",
            folderType: "catalog"
        }, {
            name: "New Item"
        }],
        data: {
            backgroundType: "white"
        }
    })
}
]),
angular.module("pd.catalog").controller("CatalogController", ["$scope", "CatalogService", "Constants", "FeaturesService", "$state", function(e, n, t, o, i) {
    o.checkAvailability(t.FEATURES.CATALOG).then(function(e) {
        return e ? void ("catalog" === i.current.name && n.getDataSources().then(function(e) {
            var n = _.first(e);
            i.go("catalog.datasource", {
                dataSourceId: n.id,
                folderId: n.root_folder
            }, {
                location: "replace"
            })
        }
        )) : void i.go("dashboard")
    }
    )
}
]),
angular.module("pd.catalog").controller("CatalogFoldersController", ["$scope", "CatalogService", "PermissionRules", function(e, n, t) {
    e.catalogService = n,
    e.permissions = t.WORKSPACE_OWNER_OR_ADMIN
}
]),
angular.module("pd.catalog").controller("CatalogItemController", ["$scope", "$rootScope", "$filter", "CatalogService", "$state", "$stateParams", "$controller", "AlertService", "Constants", "Config", "ConfirmationService", "$timeout", "CurrencyService", "$q", "FeaturesService", function(e, n, t, o, i, a, s, l, r, c, d, u, m, p, g) {
    s("CatalogItemCustomFieldsController", {
        $scope: e
    }),
    s("CatalogItemImagesController", {
        $scope: e
    });
    var f = function() {
        return d.confirm({
            title: "Your item has not been saved",
            text: 'All changes will be discarded. Click "Save" to save the item',
            okText: "Save",
            noText: "Discard"
        })
    }
      , b = e.$on("$stateChangeStart", function(n, t, o) {
        if (e.product) {
            n.preventDefault();
            var a = function() {
                b(),
                i.go(t.name, o)
            }
            ;
            h() ? f().then(function() {
                e.save(!0).then(a)
            }
            , function(e) {
                e || a()
            }
            ) : a()
        }
    }
    );
    e.$on("$destroy", b);
    var v = {
        currency: r.DEFAULT_CURRENCY,
        custom_fields: {},
        images: [],
        description: ""
    };
    e.editable = r.ROLES.OWNER === c.userRole || r.ROLES.ADMIN === c.userRole,
    e.createMode = _.isUndefined(a.itemId),
    e.currencies = m.getCurrencyList(),
    g.checkAvailability(r.FEATURES.PROFIT_AND_MARGIN).then(function(n) {
        e.profitAndMarginAvailable = n
    }
    );
    var h = function() {
        var n = ["name", "sku", "price", "currency", "description", "cost"]
          , t = e.getImages()
          , o = e.getCustomFields()
          , i = _.isEqual(_.pick(e.product, n), _.pick(e.originalProduct, n))
          , a = _.isEqual(e.originalProduct.images, t)
          , s = _.isEqual(e.originalProduct.custom_fields, o);
        return !i || !a || !s
    }
    ;
    e.$watch("product", function(e) {
        e && (n.$broadcast("object.loaded", {
            ref: "catalog-item",
            obj: e,
            breadcrumb: {
                name: e && e.name ? e.name : "New Item"
            }
        }),
        n.$broadcast("folder.loaded", {
            folder: e.folder
        }))
    }
    ),
    e.createMode ? (e.product = _.assign({}, v, {
        folder: a.folderId
    }),
    e.originalProduct = _.cloneDeep(e.product)) : o.getItem(a.itemId).then(function(n) {
        if (n.price = parseFloat(n.price),
        n.cost = parseFloat(n.cost),
        !_.isEmpty(n.images)) {
            var t = _.any(n.images, {
                is_main: !0
            });
            t || (_.first(n.images).is_main = !0)
        }
        e.product = n,
        e.originalProduct = _.cloneDeep(e.product)
    }
    , function() {
        b(),
        i.go("catalog")
    }
    );
    var w = function() {
        e.saving = !1,
        i.go("catalog.datasource", a)
    }
      , k = function(n) {
        e.saving = !1,
        l.alert({
            text: t("errorMessage")("catalog.item", n)
        })
    }
      , y = function(e) {
        return e.name ? e.name.length > 255 ? (l.alert({
            text: t("translate")("catalog.item.errors.name.ensure_this_value_has_at_most__characters_it_has_")
        }),
        !1) : !0 : (l.alert({
            text: t("translate")("catalog.item.errors.name.this_field_is_required")
        }),
        !1)
    }
    ;
    e.save = function(n) {
        var t = p.defer();
        if (e.closeCustomFieldForm(),
        e.isValidCustomFields() && y(e.product)) {
            var i = e.getImages()
              , a = e.getCustomFields()
              , s = e.product
              , l = s.id ? o.updateItem : o.addItem;
            s.images = i,
            s.custom_fields = a,
            s.cost = s.cost || 0,
            s.price = s.price || 0,
            e.saving = !0,
            l(s).then(function() {
                t.resolve(),
                n || (b(),
                w())
            }
            , function(e) {
                t.reject(),
                k(e)
            }
            )
        } else
            t.reject();
        return t.promise
    }
}
]),
angular.module("pd.catalog").controller("CatalogItemCustomFieldsController", ["$scope", "AppAnalyticsService", "$timeout", function(e, n, t) {
    e.customFields = [],
    e.$watch("product", function(n) {
        n && (e.customFields = _.map(n.custom_fields, function(e, n) {
            return {
                name: n,
                value: e,
                editing: !1,
                valid: !0
            }
        }
        ))
    }
    ),
    e.getCustomFields = function() {
        return _.reduce(e.customFields, function(e, n) {
            return n.name && (e[n.name] = n.value),
            e
        }
        , {})
    }
    ;
    var o = function() {
        t(function() {
            angular.element(".product-new-field")[0].scrollIntoView(100)
        }
        , 300)
    }
    ;
    e.newCustomField = function() {
        n.track("Catalog: Added custom field to product"),
        e.customFields.push({
            name: "",
            value: "",
            editing: !0,
            valid: !0
        }),
        o()
    }
    ,
    e.editField = function(e) {
        e.editing = !0,
        o()
    }
    ,
    e.cancelEditField = function(n) {
        n.name || n.value ? e.saveField(n) : e.removeField(n)
    }
    ,
    e.isValidCustomFields = function() {
        return !_.any(e.customFields, {
            valid: !1
        })
    }
    ,
    e.closeCustomFieldForm = function() {
        _.each(_.filter(e.customFields, {
            editing: !0
        }, e.saveField))
    }
    ,
    e.saveField = function(n) {
        var t = _.filter(e.customFields, {
            name: n.name
        }).length;
        return t > 1 ? n.valid = !1 : (n.editing = !1,
        n.valid = !0),
        n.valid
    }
    ,
    e.removeField = function(n) {
        e.customFields = _.filter(e.customFields, function(e) {
            return e !== n
        }
        )
    }
}
]),
angular.module("pd.catalog").controller("CatalogItemImagesController", ["$scope", "AppAnalyticsService", function(e, n) {
    e.images = [],
    e.$watch("product", function(n) {
        n && (e.images = _.map(n.images, function(e) {
            return {
                src: e.src
            }
        }
        ))
    }
    ),
    e.imagesSortableOptions = {
        tolerance: "pointer"
    },
    e.addImage = function() {
        n.track("Catalog: Added image to product"),
        e.images.push({
            src: ""
        })
    }
    ,
    e.removeImage = function(n) {
        e.images = _.reject(e.images, function(e) {
            return e === n
        }
        )
    }
    ,
    e.getImages = function() {
        return _.map(_.filter(e.images, function(e) {
            return e.src
        }
        ), function(e, n) {
            return {
                src: e.src,
                order: n,
                is_main: 0 === n
            }
        }
        )
    }
    ,
    e.$on("image.empty", function(n, t) {
        e.$apply(function() {
            e.removeImage(t)
        }
        )
    }
    )
}
]),
angular.module("pd.catalog").controller("CatalogItemsController", ["$scope", "Constants", "Config", function(e, n, t) {
    e.workspaceOwner = n.ROLES.OWNER === t.userRole,
    e.workspaceAdmin = n.ROLES.ADMIN === t.userRole
}
]),
angular.module("pd.catalog").controller("CatalogImportDialogController", ["$scope", "FileUploader", "Constants", "API", function(e, n, t, o) {
    e.importDisabled = !0,
    e.uploader = new n({
        url: o.baseUrl + "catalog/import/csv",
        headers: o.headers
    }),
    e.uploader.onWhenAddingFileFailed = function() {
        e.importDisabled = !0
    }
    ,
    e.uploader.onAfterAddingFile = function() {
        e.importDisabled = !1
    }
    ,
    e["import"] = function() {
        e.importing = !0,
        e.uploader.uploadAll()
    }
    ,
    e.uploader.onSuccessItem = function() {
        e.$close(!0)
    }
    ,
    e.uploader.onErrorItem = function() {
        e.$close(!1)
    }
}
]).service("CatalogImportService", ["ModalService", "AlertService", function(e, n) {
    var t = {
        templateUrl: "/views/catalog/import-dialog.html",
        controller: "CatalogImportDialogController"
    };
    this.openDialog = function() {
        e.open(t).then(function(e) {
            n.alert(e ? {
                title: "Import started",
                text: "We've started importing data into your catalog. This may take a while, but as soon as the import is complete we'll let you know by email."
            } : {
                title: "Import failed",
                text: "We were unable to upload file. Please try again."
            })
        }
        )
    }
}
]).directive("catalogImport", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/catalog/import.html",
        controller: ["$scope", "CatalogImportService", function(e, n) {
            e.openDialog = function() {
                n.openDialog()
            }
        }
        ],
        scope: !0
    }
}
]),
angular.module("pd.catalog").directive("catalogItemSelector", ["$timeout", "$rootScope", function(e, n) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/catalog/selector/catalog-item-selector.html",
        scope: {
            item: "=",
            parent: "=",
            focus: "=",
            tableId: "="
        },
        link: function(t, o) {
            t.$watch("focus", function(n) {
                n && e(function() {
                    o.focus()
                }
                , 300)
            }
            ),
            o.on("focus", function() {
                n.$broadcast("text.editor.toolbar.hide")
            }
            )
        },
        controller: ["$scope", "$q", "CatalogService", "$rootScope", function(e, n, t, o) {
            e.getItems = function(o) {
                var i = n.defer()
                  , a = {
                    page: 1,
                    count: 30,
                    order_by: "name",
                    q: o
                };
                return e.loading = !0,
                t.getDataSources().then(function(n) {
                    t.searchItems(_.first(n).id, a).then(function(n) {
                        i.resolve(n),
                        e.loading = !1
                    }
                    )
                }
                ),
                i.promise
            }
            ,
            e.selectItem = function(n) {
                n && o.$broadcast("catalog.item.selected", {
                    item: n,
                    parent: e.parent,
                    tableId: e.tableId
                })
            }
            ,
            e.$watch("item.name", function(n, t) {
                n !== t && e.$emit("block.data.text.change")
            }
            )
        }
        ]
    }
}
]),
angular.module("pd.catalog").controller("CatalogItemsListController", ["$scope", "$rootScope", "$location", "$state", "$stateParams", "CatalogService", "PermissionRules", "ConfirmationService", "Constants", "MultipleRequestService", "AppAnalyticsService", "Config", "CatalogImportService", function(e, n, t, o, i, a, s, l, r, c, d, u, m) {
    e.catalogService = a,
    e.permissions = s.WORKSPACE_OWNER_OR_ADMIN,
    e.dataSourceId = i.dataSourceId,
    e.folderId = i.folderId,
    e.isWorkspaceOwner = u.userRole === r.ROLES.OWNER,
    e.isWorkspaceAdmin = u.userRole === r.ROLES.ADMIN;
    var p = function(e, n) {
        return a.getItems(i.folderId, i.dataSourceId, e, n)
    }
    ;
    a.getRootFolder().then(function(n) {
        e.isRootFolder = n.id === i.folderId
    }
    ),
    e.gridOptions = e.gridOptions || {
        store: {
            getItems: p
        },
        properties: {
            sorting: {
                date_modified: "desc"
            }
        }
    },
    e.$on(r.GRID.SELECTION_CHANGE, function(n, t) {
        e.selected = t
    }
    ),
    e.removeItem = function() {
        var t = _.map(e.selected, "id");
        l.confirm({
            text: 1 === t.length ? "Do you want to remove selected item?" : "Do you want to remove selected items?"
        }).then(function() {
            a.removeItems(t).then(function() {
                n.$broadcast(r.GRID.RELOAD)
            }
            )
        }
        )
    }
    ,
    e.addItem = function() {
        d.track("Catalog: Opened new product page"),
        o.go("catalog.datasource.items-new", {
            folderId: i.folderId
        })
    }
    ,
    e.startImport = function() {
        m.openDialog()
    }
    ,
    e.$on("movetofolder", function(t, o) {
        var i = _.reduce(e.selected, function(e, n) {
            var t = n.folder.id || n.folder;
            return e.push({
                request: a.moveItem,
                args: [n.id, t, o.folder.id]
            }),
            e
        }
        , []);
        c.execute(i).then(function() {
            n.$broadcast(r.GRID.RELOAD)
        }
        )
    }
    )
}
]).directive("catalogItemsList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/catalog/list/list.html",
        controller: "CatalogItemsListController",
        scope: {
            emptyListTemplate: "@",
            notFoundTemplate: "@"
        }
    }
}
]).directive("catalogItemsRoList", [function() {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/views/catalog/list/list-ro.html",
        controller: "CatalogItemsListController",
        scope: {
            emptyListTemplate: "@",
            notFoundTemplate: "@"
        }
    }
}
]),
angular.module("pd.app.templates").run(["$templateCache", function(e) {
    e.put("/views/main.html", '<div ui-view class="h100"></div>'),
    e.put("/views/blocks/block-drop-message.html", '\n<div class="">\n    <div class="document-page__drop-hint z-3" ng-show="visible"\n         ng-class="{\'document-page__drop-hint--top\': cover || header,\n                \'document-page__drop-hint--bottom\': footer }">\n\n        <div class="document-page__drop-hint-bd p--top-sm">\n            <div ng-show="cover" style="padding-top: 17px">\n                <i class="icon icon--add-cover"></i>\n                Cover page will be added to the beginning of the document\n            </div>\n\n            <div ng-show="header" class="p--top">\n                <i class="icon icon--add-header"></i>\n                Header block will be added to the beginning of <br/>\n                every page in PDF automatically\n            </div>\n\n            <div ng-show="footer" class="p--top">\n                <i class="icon icon--add-footer"></i>\n                Footer block will be added to the end of <br/>\n                every page in PDF automatically\n            </div>\n        </div>\n\n    </div>\n    <div class="document-page__drop-overlay z-2" ng-show="visible"\n         ng-class="{\'document-page__drop-overlay--bottom\': footer }"\n         block-drop-overlay></div>\n</div>\n'),
    e.put("/views/blocks/block-handle.html", '<div class="btn btn--sq-icon block-handle" role="button" ng-class="{\'block-droppable\': isFixedBlock() }"\n     ng-click="addBlock()"\n     data-block-id="{{block.id}}">\n\n    <span class="btn--sq-icon__bd">\n        <i class="icon icon--xbig icon--block-{{block.handle}}"></i>\n        <span class="btn--sq-icon__text">\n            {{\'block.name.\' + block.handle | translate}}\n        </span>\n    </span>\n\n</div>\n'),
    e.put("/views/blocks/block.html", '<div class="doc-block doc-block--{{::block.type.handle}}"\n     ng-class="{\n     \'doc-block--editable\': contentEditable,\n     \'doc-block--uneditable\': !contentEditable,\n     \'ui-sortable-placeholder\': !block.id,\n     \'doc-block--widget-activity\': widgetDragOver,\n     \'doc-block--widget-activity-over\': widgetDragOver,\n     \'doc-block--has-attached-pages\': attachmentContent\n     }">\n    <div class="doc-block__bd" id="{{::block.id}}" uref="{{::block.uref}}" anchor={{::block.data.anchor}} ng-if="::block.id"\n         jui-droppable\n         opt-tolerance="\'touch\'"\n         opt-accept="\'.block-droppable\'"\n         event-over="dragOver"\n         event-out="dragOut"\n         event-drop="drop">\n\n        <div ng-include="layoutTemplate" class="doc-block__content inspectlet-sensitive"></div>\n\n        <div class="doc-block__controls doc-block__controls--left" ng-if="::movable">\n            <div class="doc-block__control doc-block__control--drag btn--block-control">\n                <i class="icon icon--move"></i>\n            </div>\n        </div>\n\n        <div class="doc-block__controls doc-block__controls--right"\n             ng-if="deletable || hasSettings">\n              <button class="doc-block__control btn btn--block-control btn--block-control-settings" ng-if="::hasSettings"\n                      tabindex="-1" title="Settings">\n                  <i class="icon icon--small icon--settings-tiny"></i>\n              </button>\n\n            <span class="confirmation-button" ng-if="deletable" ng-class="{\'confirmation-button--open\': deleteConfirmation}">\n                <button ng-if="!deleteConfirmation" tabindex="-1"\n                    class="doc-block__control btn btn--block-control btn--block-control-del"\n                    title="Delete" ng-click="confirmDelete()">\n                    <i class="icon icon--small icon--trash"></i>\n                </button>\n\n                <button ng-if="deleteConfirmation" tabindex="-1"\n                    class="doc-block__control btn btn--block-control btn--block-control-del open"\n                    title="Delete" ng-click="delete()">\n\n                    <i class="icon icon--small icon--trash"></i>\n                    <span class="btn--block-control__text">Delete?</span>\n                </button>\n            </span>\n\n          </div>\n\n          <div class="doc-block__lock-overlay" ng-if="block.is_locked  && !documentInfo.isSentOrCompleted">\n              <div class="doc-block__lock"><i class="icon icon--lock doc-block__lock-icon"></i></div>\n          </div>\n\n          <inline-widget-preview ng-repeat="wInfo in block.widgetsInfo" block="block" block-list="blockList"\n             document-info="documentInfo" document-content-info="documentContentInfo" widget-info="wInfo"></inline-widget-preview>\n\n          <inline-document-action ng-repeat="action in block.actions" action="action"></inline-document-action>\n    </div>\n    <div class="doc-block__bd a--center" ng-if="::!block.id">\n        <i class="icon spinner m"></i>\n    </div>\n</div>\n'),
    e.put("/views/blocks/image-light-box.html", '<div>\n    <img style="cursor: pointer" ng-src="{{previewUrl()}}" ng-if="current.src" />\n</div>\n'),
    e.put("/views/blocks/img-stub.html", '<div class="img-uploadable" ng-class="{\n    \'img-uploadable--editable\': isEditable,\n    \'img-uploadable--has-image\': image.src,\n    \'img-uploadable--no-image\': !image.src,\n    \'opacity-0\': !image.src && !isEditable && hideEmpty\n    }">\n\n    <!-- do not show when no image, non-editable and \'hideEmpty == true \'-->\n    <div class="img-stub" ng-if="!image.src && isEditable" ng-click="uploadImage()">\n        <div class="img-stub__picture"></div>\n    </div>\n\n    <div class="img-stub" ng-if="!image.src && !isEditable">\n        <div class="img-stub__picture" ng-if="!hideEmpty"></div>\n    </div>\n\n\n    <img ng-src="{{previewUrl()}}" ng-if="image.src"/>\n\n    <div class="img-uploadable__action icon" ng-if="isEditable" ng-click="isEditable && uploadImage()" ng-class="{\n        \'icon--plus\': !image.src,\n        \'icon--edit\': image.src\n    }"></div>\n</div>\n'),
    e.put("/views/blocks/number-type-selector.html", '<select ng-model="numberTypeModel" ng-options="option.value as option.name for option in options" class="form-control">\n\n</select>'),
    e.put("/views/blocks/text-editor-toolbar.html", "<div>\n\n</div>\n\n"),
    e.put("/views/blocks/text-editor.html", '<div class="contenteditable" element-token-manager="onTokenUpdate">\n    <p></br></p>\n</div>\n'),
    e.put("/views/blocks/token-value-manager.html", '<div class="popover bottom fade pos--abs token-popover" ng-class="{\'in\': visible, \'z-0\': !visible}">\n    <div class="arrow"></div>\n\n    <div class="token-popover__bd" data-token-form="true">\n\n            <div class="m--bottom-sm p--right" data-token-form="true">\n                <span data-token-form="true">\n                    {{prefix}}{{token.name}}{{postfix}}\n                </span>\n\n                <button ng-click="removeToken()" data-token-form="true" title="Remove token"\n                        class="btn btn--transparent token-popover__del"><i class="icon icon--trash icon--small"></i></button>\n\n            </div>\n\n            <div class="" data-token-form="true">\n                <input type="text" placeholder="Token value" class="form-control form-control--dark"\n                       ng-model="token.value" ng-disabled="token.type === \'predefined\'" data-token-form="true"/>\n            </div>\n    </div>\n</div>\n'),
    e.put("/views/catalog/catalog-datasource.html", '<div class="scrollpane h100">\n\n    <!-- folders -->\n    <div class="subpanel ui--dark anim--slide-in-from-left" ui-view="folders-section">\n    </div>\n\n    <!-- documents -->\n    <div class="h100 adjust-for-subpanel" ui-view="items-section">\n    </div>\n\n</div>\n\n\n\n'),
    e.put("/views/catalog/catalog.html", '<div class="scrollpane p--lg">\n    <spinner visible="true"></spinner>\n</div>\n'),
    e.put("/views/catalog/folders.html", '<folders-list service="catalogService" permissions="permissions" folder-type="\'catalog\'"></folders-list>\n'),
    e.put("/views/catalog/import-dialog.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h2 class="modal-title"> Import items</h2>\n</div>\n<div class="modal-body">\n    <form name="catalogImportForm" novalidate>\n\n        <label for="file" class="control-label">Select a CSV file:</label>\n        <div class="form-row">\n            <div class="form-row__stretcher">\n                <input ng-disabled="importing" class="form-control p--left-none"\n                   name="file" id="file" type="file" nv-file-select="" uploader="uploader"/>\n            </div>\n            <div class="form-row__fixed">\n                <button id="import-button" class="btn btn-default btn--stretch-narrow"\n                    ng-disabled="importDisabled || importing" ng-click="import()">\n                    <spinner visible="importing"></spinner>\n                    Import\n                </button>\n            </div>\n        </div>\n    </form>\n</div>\n<div class="modal-footer">\n    <p class="color--dimmed a--left m--none">\n        See <a href="https://www.pandadoc.com/faqs/import-catalog-items-via-csv/" class="link-hover"\n               target="_blank">documentation</a> on .csv file requirements\n    </p>\n</div>\n\n\n\n<style>\n    .modal-dialog {\n        width: 450px;\n        max-width: 450px;\n    }\n</style>\n\n'),
    e.put("/views/catalog/import.html", '<button class="btn btn--toolbar" ng-click="openDialog()">\n    <i class="icon icon--lg push-next icon--plus"></i>\n    <span class="btn-text">Import</span>\n</button>\n'),
    e.put("/views/catalog/item.html", '<div class="h100 scrollpane">\n    <div class="scrollpane__bd p--lg p--top" ng-if="product">\n\n        <h1 class="section-header" ng-if="createMode">New Item</h1>\n        <h1 class="section-header" ng-if="!createMode">{{product.name}}</h1>\n        <div class="hr block"></div>\n\n        <div style="max-width: 560px">\n\n              <form name="productForm" novalidate class="m--bottom-lg" ng-submit="save()">\n\n                  <!-- sku + product name -->\n                  <div class="form-group clearfix">\n                      <div class="w25 pull-left p--right-sm">\n                          <label for="SKU">SKU</label>\n                          <input class="form-control" ng-model="product.sku" name="sku" id="SKU" ng-disabled="!editable" focus-me/>\n                      </div>\n                      <div class="w75 pull-left">\n                          <label for="prod-name">Item name</label>\n                          <input class="form-control" ng-model="product.name" id="prod-name" name="name" ng-disabled="!editable"/>\n                      </div>\n                  </div>\n\n                  <!-- currency + price -->\n                  <div class="clearfix">\n                      <div class="form-group w25 pull-left p--right-sm">\n                          <label for="currency-selector">Price</label>\n                          <select ng-model="product.currency" ng-options="currency.code as currency.display_name group by currency.group for (code, currency) in currencies" ng-disabled="!editable"\n                                  id="currency-selector" name="currency" class="form-control w100">\n                          </select>\n                      </div>\n                      <div class="form-group w75 pull-left">\n                          <label class="">&nbsp;</label>\n                          <input class="form-control" type="number" ng-model="product.price" name="price" placeholder="Price" ng-disabled="!editable"/>\n                      </div>\n                  </div>\n\n                  <!-- cost -->\n                  <div class="form-group" ng-if="profitAndMarginAvailable">\n                      <label for="currency-indicator">Cost</label>\n                      <div class="clearfix">\n                          <div class="w25 pull-left p--right-sm">\n                              <input class="form-control" type="text" ng-model="product.currency"\n                                     id="currency-indicator" readonly/>\n                          </div>\n                          <div class="w75 pull-left">\n                              <input class="form-control" type="number" ng-model="product.cost" name="cost" ng-disabled="!editable"/>\n                          </div>\n                      </div>\n                  </div>\n\n                  <!-- description -->\n                  <div class="form-group">\n                      <label>Description</label>\n                      <div id="editor-toolbar" class="editor-toolbar pos--rel z-0" ng-show="editable"></div>\n                      <div class="form-control p--vert-xs formatted" style="min-height: 150px;height:auto;font-size: 14px;line-height: 1.5">\n                          <text-editor text-property="\'description\'" content="product" content-editable="editable" activate-on-load="true"\n                               toolbar="provided" toolbar-id="editor-toolbar" empty-text-placeholder="Type your description..."\n                              class="t--medium">\n                          </text-editor>\n                      </div>\n                  </div>\n\n                  <div class="clearfix" style="margin-bottom: 7px">\n\n                      <div ui-sortable="imagesSortableOptions" ng-model="images" class="product-pics">\n                          <div class="product-pic" ng-repeat="image in images">\n                              <img-stub image="image" is-editable="editable" class="" auto-open="true" preview-resize="x65"></img-stub>\n                              <button ng-if="editable" class="product-pic__del btn pos--abs top-0 right-0"\n                                      ng-click="removeImage(image)" >\n                                  <i class="icon icon--delete-sm icon--xs color--white"></i>\n                              </button>\n                          </div>\n                      </div>\n\n                      <button ng-if="editable" class="btn btn--transparent product-pic__stub" type="button" ng-click="addImage()">\n                          <i class="icon icon--camera icon--xbig color--icon-dimmed"></i>\n                      </button>\n\n                  </div>\n\n\n                  <h3 class="t--medium t--bold m--bottom-sm" ng-show="customFields.length > 0">Custom fields</h3>\n                  <!-- custom fields -->\n                  <div class="m--bottom-sm clearfix " ng-repeat="field in customFields">\n\n                      <div class="product-new-field clearfix" ng-if="field.editing">\n                          <form>\n                            <button class="close pos--abs top-0 right-0 btn--close close p--horis-sm" type="button" ng-click="cancelEditField(field)">&times;</button>\n                            <div class="m--bottom-sm grid grid--spacing-xs">\n                                <div class="grid__item w50">\n                                    <label>Field name</label>\n                                    <input class="form-control" ng-class="{\'color--red\' : !field.valid}" ng-model="field.name"\n                                         focus-me/>\n                                </div>\n                                <div class="grid__item w50">\n                                  <label>Value</label>\n                                  <input class="form-control" ng-model="field.value"/>\n                                </div>\n                            </div>\n\n                            <button class="btn btn-primary btn--stretch-narrow pull-right"\n                                  ng-disabled="!field.name" ng-click="saveField(field)">Done</button>\n\n                            <button class="btn btn--transparent color--red pull-left p--horis-sm" ng-click="removeField(field)">\n                                  Delete\n                            </button>\n                          </form>\n                      </div>\n\n                      <div ng-if="!field.editing">\n                          <label ng-if="editable" ng-click="editField(field)" class="link-secondary pointer color--text-default">{{field.name}}</label>\n                          <label ng-if="!editable" class="link-secondary color--text-default">{{field.name}}</label>\n                          <input class="form-control" ng-disabled="!editable" ng-model="field.value" ng-blur="saveField(field)"/>\n                      </div>\n\n                  </div>\n\n                  <button type="button" ng-if="editable" class="m--bottom color--text-default btn btn--smaller btn--transparent pull--padding-left t--smaller"\n                          ng-click="newCustomField()">\n                      <span class="icon icon--plus-circled push-next"></span>\n                      Add new custom field\n                  </button>\n\n                  <div>\n\n                      <button ng-if="editable" class="btn btn-primary btn-lg btn--stretch-narrow " ng-click="save()" ng-disabled="saving">\n                          Save\n                          <spinner visible="saving" class="push-self"></spinner>\n                      </button>\n                  </div>\n              </form>\n\n        </div>\n    </div>\n    <div class="p--lg p--top">\n        <spinner visible="!product"></spinner>\n    </div>\n</div>\n\n'),
    e.put("/views/catalog/items.html", '<div class="h100">\n\n    <catalog-items-list ng-if="workspaceOwner || workspaceAdmin"\n        empty-list-template="/views/catalog/list/empty-list.html"\n        not-found-template="/views/catalog/list/not-found.html">\n    </catalog-items-list>\n\n    <catalog-items-ro-list ng-if="!workspaceOwner && !workspaceAdmin"\n        empty-list-template="/views/catalog/list/empty-list-ro.html"\n        not-found-template="/views/catalog/list/not-found-ro.html">\n    </catalog-items-ro-list>\n\n</div>\n'),
    e.put("/views/catalog/select-datasource.html", '<div class="h100 p">\n    <spinner visible="true"></spinner>\n</div>'),
    e.put("/views/common/add-me-as-contact.html", '<button type="button" class="m--bottom color--text-default btn btn--smaller btn--transparent pull--padding-left t--smaller"\n   ng-disabled="meAdded || adding" ng-click="addMeAsRecipient()">\n   <spinner visible="adding"></spinner>\n   <span class="icon icon--plus-circled push-next" ng-show="!adding"></span> Add me as a recipient\n</button>\n'),
    e.put("/views/common/alert.html", '<div class="modal-header" ng-if="title">\n    <span ng-bind-html="title"></span>\n</div>\n<div class="modal-body p">\n    <ul ng-if="isList">\n        <li ng-repeat="msg in text">{{msg}}</li>\n    </ul>\n    <p class="m--none p t--medium" ng-if="!isList">{{text}}</p>\n</div>\n<div class="modal-footer">\n    <button ng-click="$close()" class="btn btn-primary btn--stretch-narrow" focus-me>{{okText}}</button>\n</div>\n'),
    e.put("/views/common/approver-action.html", "<span class=\"recipient-status approver-status--{{action}}\">{{ 'approver.actions.' + action | translate}}</span>\n"),
    e.put("/views/common/avatar.html", '<img class="avatar" ng-class="class" ng-src="{{src}}" alt="{{user | fullName}}" width="{{size || 50}}" height="{{size || 50}}"/>'),
    e.put("/views/common/button-with-confirmation.html", '<span class="confirmation-button" ng-class="{\'confirmation-button--open\': confirmation}">\n    <button ng-if="!confirmation" tabindex="-1"\n        class="doc-block__control btn btn--block-control btn--block-control-del {{additionalClasses}}"\n        title="{{title}}" ng-click="onClick()">\n    <i class="icon icon--small {{icon || \'icon--delete\'}}"></i>\n    </button>\n\n    <button ng-if="confirmation" ng-repeat="option in options" tabindex="-1"\n        class="doc-block__control btn btn--block-control btn--block-control-del {{additionalClasses}} open"\n        title="{{title}}" ng-click="onOptionClick(option)">\n\n        <i class="icon icon--small {{option.icon || \'icon--delete-sm\'}}"></i>\n        <span class="btn--block-control__text">{{option.text}}</span>\n    </button>\n</span>'),
    e.put("/views/common/confirmation-dialog.html", '<div class="modal-header">\n    <span ng-bind-html="title"></span>\n    <button type="button" class="close" ng-click="no(\'cancel\')" aria-hidden="true">&times;</button>\n</div>\n<div class="modal-body p">\n    <p class="m--none p" ng-bind-html="text"></p>\n</div>\n<div class="modal-footer">\n    <button ng-if="noButton" ng-click="no()" class="btn btn-default btn--stretch-narrow">{{noText}}</button>\n    <button ng-click="yes()" class="btn btn-primary btn--stretch-narrow" focus-me>{{okText}}</button>\n</div>\n'),
    e.put("/views/common/contact-integration-icon.html", '<i class="icon icon--lg push-next icon--sprite icon--sprite-{{integration}}"></i>\n'),
    e.put("/views/common/contacts-invite.html", '<form action="" class="form-row form-invite">\n    <div class="form-row__stretcher">\n        <div class="pos--rel">\n            <spinner visible="loading" class="form-invite__spinner"></spinner>\n            <input id="contacts-selector" class="form-control input-xl" type="text" placeholder="Write name or email"\n                   autocomplete="off" focus-me>\n\n        </div>\n    </div>\n    <div class="form-row__fixed">\n        <button class=" btn btn--stretch-narrow btn-default btn-xl" ng-click="invite()">\n            <spinner visible="inviting" class="pos--rel"></spinner>\n            Send\n        </button>\n    </div>\n</form>\n'),
    e.put("/views/common/copy-in-clipboard.html", '<div class="btn--clipboard">\n\n    <div class="btn--clipboard__input">\n        <input type="text" class="form-control " id="link-to-copy" readonly ng-model="valueModel.value" select-on-click/>\n    </div>\n\n    <button copy-button class="btn form-control btn--clipboard__btn" data-clipboard-target="link-to-copy">\n       Copy link\n    </button>\n</div>'),
    e.put("/views/common/element-copy.html", "<span></span>"),
    e.put("/views/common/file-process.html", '<div class="box box--upload">\n    <div class="box__content--stretched">\n\n        <div class="upload-zone-icon m--bottom">\n            <spinner visible="1" class="upload-zone-icon__spin"></spinner>\n        </div>\n\n        <h3 class="section-header upload__header m--bottom-sm" ng-show="!isFailed ">\n            Processing <span ng-if="pageInfo && pageInfo.pages_total && pageInfo.pages_done">page {{pageInfo.pages_done}} of {{pageInfo.pages_total}}</span>\n        </h3>\n\n        <p class="color--dimmed text--larger m--bottom">\n            {{fileName}}\n        </p>\n\n    </div>\n</div>\n'),
    e.put("/views/common/file-processing-error.html", '<div class="modal-header">\n    <span>Unable to process the document</span>\n</div>\n<div class="modal-body p">\n    <p class="m--none p">\n        Sorry, we were unable to process this document. Please try to <a href="" ng-click="$close()">upload the file again</a>. <a href="" ng-click="contactSupport()">Contact our support</a> if the issue persists\n    </p>\n</div>\n<div class="modal-footer">\n    <button ng-click="$close()" class="btn btn-primary btn--stretch-narrow">Ok</button>\n</div>\n'),
    e.put("/views/common/file-uploader-inline.html", '<div class="uploadcare-inline">\n    <div class="uploadcare-placeholder" ng-show="showUploadDialog"></div>\n    <div class="box box--upload upload" ng-show="!showUploadDialog">\n        <div class="box__content--stretched">\n            <div class="upload-zone-icon m--bottom">\n                <img class="upload-zone-icon__bg" ng-src="{{ \'img/icon-complete.svg\' | staticBaseUrl}}" alt=""/>\n                <div class="upload-zone-icon__clip anim--fadein" ng-style="{height: uploadProgress*100 + \'%\'}">\n                    <img ng-src="{{ \'img/icon-complete.svg\' | staticBaseUrl}}" alt="" />\n                </div>\n            </div>\n            <h3 class="upload__header m--bottom-sm" ng-show="!isFailed">\n                Uploading\n            </h3>\n            <p ng-show="!isFailed" class="color--dimmed text--larger m--bottom" >\n                {{fileName}}\n            </p>\n            <h3 class="upload__header upload__error-message" ng-show="isFailed">\n                <!-- show if Error happens and hide default -->\n                Unable to upload file. Please try again.\n            </h3>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/common/file-uploader.html", '<div class="centerer">\n    <div class="centerer__bd">\n        <div class="box box--upload">\n            <div class="box__content--stretched">\n                <div class="block">\n                    <i class="upload__doc-icon">\n                        <img ng-src="{{\'img/loading-animation.gif\' | staticBaseUrl}}" alt="Uploading..." width="40" height="40"/>\n                    </i>\n                </div>\n                <h3 class="upload__header m--bottom-sm" ng-show="!isFailed ">\n                    Uploading\n                </h3>\n                <p ng-show="!isFailed" class="color--dimmed text--larger m--bottom">\n                    {{fileName}}\n                </p>\n                <h3 class="upload__header upload__error-message" ng-show="isFailed">\n                    <!-- show if Error happens and hide default -->\n                    Unable to upload file. Please try again.\n                </h3>\n                <p class="block upload t--medium"></p>\n                <div class="progress progress-striped active">\n                    <div class="progress-bar" ng-style="getProgress(uploadProgress)"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/common/global-notification.html", '<div class="global-notification" ng-show="showNotificationPanel && notificationsEnabled">\n    <div class="global-notification__content">\n        <span>{{message.text | translate}}</span>\n    </div>\n</div>\n'),
    e.put("/views/common/help-tooltip.html", '<span class="help-tooltip {{class}}"><span data-tooltip-html-unsafe="{{message|translate}}"><i class="icon icon--small icon--help-tooltip a--baseline"></i></span></span>\n'),
    e.put("/views/common/image-file-uploader.html", '<button class="image-file-uploader {{cssClass}}" ng-click="showDialog()">\n    <i class="icon push-next icon--small {{iconClass}}" ng-if="iconClass"></i> {{text}}\n</button>\n'),
    e.put("/views/common/image-picker-popover.html", '<div class="picker">\n    <div class="picker__preview"  ng-class="{\'picker__preview--nothing\': !image.preview}"\n         ng-click="toggle()" hide-on-click="{ spyOn: \'visible\', hideWith: \'hide\'}">\n        <img ng-src="{{image.preview}}" alt="" ng-if="image.preview"/>\n    </div>\n    <div ng-show="visible"\n         class="popover popover--black popover--arrow-sm bottom" style="width: 200px">\n        <div class="arrow"></div>\n        <div class="popover-title">Image picker</div>\n        <div class="popover-content">\n            <ul class="picker__preview-list clearfix">\n                <li class="picker__preview picker__preview--big" ng-class="{\'picker__preview--nothing\': !option.preview}"\n                    ng-repeat="option in options" ng-mousedown="selectImage(option)">\n                    <img ng-src="{{option.preview}}" alt="" ng-if="option.preview"/>\n                </li>\n            </ul>\n\n            <image-file-uploader delegate="imageUploaderDelegate"\n                 css-class="btn btn-sm btn-primary"\n                 text="Upload image"></image-file-uploader>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/common/items-editor.html", '<div class="dropdown-items">\n\n    <ul ng-show="items.length" ui-sortable="{\'axis\':\'y\', \'containment\': \'.dropdown-items\', \'cursorAt\': {top:5, left: 5}}" ng-model="items">\n        <li class="dropdown-item movable bg--white"\n            ng-repeat="item in items">\n            <i class="icon icon--move dropdown-item__drag" title="Drag to reorder items"></i>\n            <div class="ellipsis">{{item}}</div>\n            <a ng-click="removeItem(item)" class="dropdown-item__del btn btn--transparent square-20 color--red" title="Remove item">\n                <i class="icon icon--small icon--delete"></i>\n            </a>\n        </li>\n    </ul>\n\n    <div class="from-row dropdown-items__form" ng-class="{\'dropdown-items__form--after-items\':items.length}">\n        <div class="form-row__stretcher">\n            <input class="form-control dropdown-items__input" placeholder="Item title" ng-model="item" type="text" ng-keyup="keyup($event)">\n            <span ng-show="duplicate" class="color--red">Duplicate value</span>\n        </div>\n        <div class="form-row__fixed">\n            <button class=" btn btn-link" type="button" ng-click="addItem()">Add</button>\n        </div>\n    </div>\n</div>\n\n'),
    e.put("/views/common/number-editor.html", '<div class="number-field" ng-class="{\'number-field--editable\': editable}">\n\n    <input class="contenteditable number-field__input" type="number"\n       ng-class="{\'number-field__input--visible\':editable && editorVisible}"\n       ng-model="numberModel.value" ng-blur="hideEditor()" ng-focus="showEditor()"/>\n\n    <div ng-click="showEditor()" ng-if="!editorVisible && valid"\n      class="number-field__view">\n        <span ng-if="currency">{{numberModel.value | cy : currency : decimals}}</span>\n        <span ng-if="percent">{{numberModel.value | cy : \'no-symbol\' : decimals}}%</span>\n        <span ng-if="!currency && !percent">{{numberModel.value | hideZeroFractionPart }}</span>\n    </div>\n\n    <div ng-click="showEditor()" ng-if="!editorVisible && !valid && tooLong" class="number-field__view border--red border--1px"\n         tooltip="No more than 15 digits in total (13 digits in integer part and 2 digits in fraction part)">\n        {{numberModel.value}}\n    </div>\n\n    <div ng-click="showEditor()" ng-if="!editorVisible && !valid && negative"\n         class="number-field__view border--red border--1px" tooltip="Value should be more than 0">\n        {{numberModel.value}}\n    </div>\n\n</div>\n'),
    e.put("/views/common/persistent-notification.html", '<div class="persist-notif">\n    <div class="persist-notif__bd">\n        <p ng-bind-html="message" contact-us="a.contact-us" ng-repeat="message in messages"></p>\n        <p ng-if="profile && !profile.email_verified">\n            {{\'profile.email_is_not_verified\' | translate : profile}}\n            <resend-verification-email></resend-verification-email>\n        </p>\n    </div>\n    <button class="btn btn--transparent persist-notif__btn t--larger" ng-click="close()"> &times; </button>\n</div>\n'),
    e.put("/views/common/resend-verification-email.html", "<span>\n    <a ng-if=\"state === 'initial'\" ng-click=\"resend()\" class=\"link-hover\">{{'profile.resend_verification_email' | translate }}</a>\n    <strong ng-if=\"state === 'sending'\">{{'profile.email_sending' | translate }}</strong>\n    <strong ng-if=\"state === 'sent'\">{{'profile.email_sent' | translate }}</strong>\n    <strong ng-if=\"state === 'error'\">{{'profile.email_sending_error' | translate }}</strong>\n</span>\n"),
    e.put("/views/common/role-or-member-selector.html", '<div>\n\n    <!-- selected member -->\n    <div ng-if="selected.user" class="media card m--bottom-sm anim--expand">\n        <avatar size="35" class="pull-left" user="selected.user"></avatar>\n        <div class="media-body m--none">\n            <h4 class="card__hdr">\n                <span class="append-btn">\n                    {{selected.user | fullName}}\n                    <button type="button" ng-click="removeSelectedMember()" ng-if="!disabled"\n                            title="Remove" class="btn append-btn__btn close color--red square-20">&times;</button>\n                </span>\n            </h4>\n            {{selected.user.email}}\n        </div>\n    </div>\n\n    <!-- selected role -->\n    <div ng-if="selected.role" class="media card m--bottom-sm anim--expand">\n        <div class="media-body m--none">\n            <h4 class="card__hdr">\n                <span class="append-btn">\n                    <i class="icon icon--contacts-2 push-next icon--small a--baseline"></i> {{\'roles.\' + selected.role | translate}}\n                    <button type="button" ng-click="removeSelectedRole()" ng-if="!disabled"\n                            title="Remove" class="btn append-btn__btn close color--red square-20">&times;</button>\n                </span>\n            </h4>\n            <span class="t--small-dimmed"> Workspace {{\'roles.\' + selected.role | translate}}</span>\n        </div>\n    </div>\n\n    <div class="doc-participants" ng-if="!selected.role && !selected.user">\n\n        <form novalidate class="combo-field dropdown has-caret" dropdown>\n\n            <input type="text"\n                   class="form-control has-caret"\n                   placeholder="{{placeholder}}"\n                   id="contact"\n                   autocomplete="off"\n                   ng-disabled="disabled"\n                   typeahead="member.user.name for member in findMembers($viewValue)"\n                   ng-model="name"\n                   typeahead-on-select="selectMember($item, $model, $label)"\n                   typeahead-wait-ms="500"\n                   typeahead-template-url="/views/documents/participants-form-contact.html"\n                />\n\n            <div data-toggle="dropdown" tabindex="0" class="dropdown-toggle" dropdown-toggle ng-disabled="disabled">\n                <span class="caret"></span>\n            </div>\n\n\n            <ul class="dropdown-menu w100">\n                <li ng-repeat="role in roles">\n                    <div ng-click="selectRole(role)" class="media card dropdown-list-item anim--expand p--vert-xs" tabindex="0">\n                        <span class="pull-left role-avatar m--right-sm">\n                            <i class="icon icon--contacts-2"></i>\n                        </span>\n                        <h4 class="media-body p--top-xs">{{\'roles.\' + role | translate}}</h4>\n                    </div>\n                    <hr ng-if="$last && members.length > 0" class="m--bottom-none"/>\n                </li>\n                <li ng-repeat="member in members">\n                    <div ng-click="selectMember(member.user)" class="media card dropdown-list-item anim--expand p--vert-xs" tabindex="0">\n                        <avatar class="pull-left m--right-sm" user="member.user" size="24"></avatar>\n                        <h4 class="media-body p--top-xs">{{member.user | fullName}}</h4>\n                    </div>\n                    <hr ng-if="$last && hasMoreMembers"/>\n                    <p class="t--small-dimmed p--left-sm" ng-if="$last && hasMoreMembers">Type to find more members...</p>\n                </li>\n            </ul>\n        </form>\n    </div>\n\n</div>\n\n'),
    e.put("/views/common/selection-counter.html", "<span ng-show=\"selected.length\" class=\"selection-counter\" ng-class=\"{'selection-counter--visible': selected.length}\">\n   <ng-pluralize count=\"selectedCount\"\n                 when=\"{ '0'    : '',\n                         '1'    : '1 item selected',\n                         'other': '{} items selected' }\">\n   </ng-pluralize>\n</span>"),
    e.put("/views/common/single-click-button.html", '<button type="button" class="{{class}}" ng-click="onClick()" ng-disabled="disabled || processing">\n    <spinner visible="processing"></spinner>\n    <span ng-if="!processing || !processingText">{{text}}</span>\n    <span ng-if="processing && processingText">{{processingText}}</span>\n</button>\n'),
    e.put("/views/common/spinner.html", '<i class="icon spinner" style="{{style}}" ng-show="visible" ng-class="class"></i>\n'),
    e.put("/views/common/text-field-dialog-dialog.html", '<div class="modal-header m--none">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    {{title}}\n</div>\n<div class="modal-body">\n    <p class="color--dimmed" ng-show="help_text">{{help_text}}</p>\n    <form class="form-row">\n        <div class="form-row__stretcher">\n            <input type="text" ng-model="valueModel.value" class="form-control" focus-me placeholder="{{placeholder}}">\n        </div>\n        <button type="submit" ng-click="save()" ng-disabled="!allowEmpty && !valueModel.value"\n                class="btn btn-default btn--stretch-narrow t--bold">{{buttonText}}\n        </button>\n    </form>\n</div>\n<style>.modal-dialog {max-width: 380px;}</style>'),
    e.put("/views/common/user-invitation-dialog.html", '<div class="modal--invitation">\n\n    <div class="modal-content t--medium">\n\n        <div class="media modal--invitation__head">\n            <avatar user="contact" class="modal--invitation__avatar" size="83"></avatar>\n            <div class="media-body">\n                <h2 class="section-header modal--invitation__title">Hello {{contact.first_name}},</h2>\n                <p class="t--medium modal--invitation__tagline">Do you want to receive and sign all your docs with PandaDoc?</p>\n                <button class="btn btn-primary" ng-click="signup()">Activate account for free</button>\n                <button class="btn btn--transparent color--text-default" ng-click="close()">No, thanks</button>\n            </div>\n        </div>\n\n        <div class="modal--invitation__footer">\n            <p class="color--dimmed m--bottom-sm">\n                <i class="icon spinner push-next" ng-show="loadingRecentDocuments"></i>\n                <span ng-show="!loadingRecentDocuments">Documents sent to you via PandaDoc</span>\n            </p>\n            <table class="table-data m--none modal--invitation__docs" ng-show="!loadingRecentDocuments">\n                <tr ng-repeat="doc in recentDocuments">\n                    <td class="p--vert p--left-none w60">\n                        <div class="media contact-card">\n                            <div ng-if=\'doc.date_modified\'>\n                                <avatar size="28" user="doc.owner" class="pull-left"></avatar>\n                                <div class="media-body">\n                                    {{doc.name}}\n                                    <div class="t--small-dimmed">{{doc.owner | fullName}}</div>\n                                </div>\n                            </div>\n                        </div>\n                    </td>\n                    <td class="p--vert w20">\n                        <document-status status="{{doc.status}}" icon text></document-status>\n                    </td>\n                    <td class="p--vert w20">\n                        <time class="t--small-dimmed">{{doc.date_modified | moment}}</time>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/contacts/add.html", '<div class="scrollpane scrollpane--has-toolbar">\n    <div class="subpanel ui--dark">\n        <div class="toolbar toolbar--dark toolbar--padding">\n            <ul class="toolbar__set toolbar__set--left">\n                <li>\n                    <button ng-click="back()" class="btn btn--toolbar">\n                        <span class="icon icon--lg icon--back"></span> Back\n                    </button>\n                </li>\n            </ul>\n        </div>\n\n        <div class="scrollpane__bd">\n            <form name="addContactForm" novalidate class="p--lg">\n                <h3 class="section-header color--text-inverted-important">Add contact</h3>\n                <div class="form-group">\n                    <label for="first_name">First name</label>\n                    <input class="form-control form-control--dark" ng-model="contact.first_name" name="first_name" id="first_name"  focus-me/>\n                </div>\n                <div class="form-group">\n                    <label for="last_name">Last name</label>\n                    <input class="form-control form-control--dark" ng-model="contact.last_name" name="last_name" id="last_name"  />\n                </div>\n                <div class="form-group">\n                    <label for="email">Email</label>\n                    <div class="input-group">\n                        <input type="text" class="form-control form-control--dark"  ng-model="contact.email" id="email" name="email" required />\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="company">Company</label>\n                    <input class="form-control form-control--dark" ng-model="contact.company" id="company" name="company" />\n                </div>\n                <button class="btn btn-primary btn-block m--top" ng-click="addContact()" ng-disabled="addContactForm.$invalid" >Add contact</button>\n            </form>\n        </div>\n\n    </div>\n\n    <div class="centerer adjust-for-subpanel">\n        <div class="centerer__bd">\n            <div class="page-stub" style="margin-top: -200px">\n                <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n                <h1> This contact\'s documents <br> will be listed here</h1>\n            </div>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/contacts/card.html", '<div>\n\n    <div class="toolbar toolbar--dark toolbar--padding">\n        <ul class="toolbar__set toolbar__set--left">\n            <li>\n                <button class="btn btn--toolbar" ng-click="backToContacts()">\n                    <i class="icon icon--lg icon--back"></i>\n                    <span class="btn-text">Back</span>\n                </button>\n            </li>\n        </ul>\n\n\n        <ul class="toolbar__set toolbar__set--right">\n            <li>\n                <button class="btn btn--toolbar" ng-click="edit()">\n                    <i class="icon icon--lg icon--edited"></i>\n                    <span class="btn-text">Edit</span>\n                </button>\n            </li>\n        </ul>\n    </div>\n\n\n    <div class="p--lg user-profile">\n\n        <div class="block--text">\n            <avatar size="170" user="contact"></avatar>\n        </div>\n        <div>\n            <h1 class="user-profile__username section-header color--text-inverted-important ">\n                {{contact | fullName}}\n            </h1>\n\n            <p class="color--dimmed user-profile__company">{{contact.company}}</p>\n        </div>\n\n        <div class="block--text"> {{contact.email}}</div>\n\n        <div class="hr"></div>\n\n        <div class="block--text">\n            <button class="btn btn-primary t--caps btn-block t--bold" ng-click="sendDocumentToContact(contact)">Send a\n                document\n            </button>\n        </div>\n\n        <div class="hr"></div>\n\n        <div ng-if="documentsCount" class="stat stat--horis m--bottom">\n            <div class="stat__value">\n                {{documentsCount}}\n            </div>\n            <div class="stat__name">\n                <ng-pluralize\n                        count="documentsCount"\n                        when="{\'0\': \'\',\n                     \'one\': \'document\',\n                     \'other\': \'documents\'}">\n                </ng-pluralize>\n            </div>\n        </div>\n\n        <div ng-if="contact.integrations.length">\n            <p class="m--bottom-sm">External profiles:</p>\n            <ul>\n                <li ng-repeat="reference in contact.integrations" class="integration-{{reference.integration}}">\n                    <a ng-if="reference.url" href="{{reference.url}}" target="_blank"\n                       class="btn btn--transparent btn-block btn-sm a--left pull--padding-sm-left width--auto ">\n                        <contact-integration-icon integration="reference.integration"></contact-integration-icon>\n                        <span class=" color--text-inverted-important">\n                            {{\'integration.\' + reference.integration + \'.name\' | translate}}\n                        </span>\n                    </a>\n\n                    <span ng-if="!reference.url" class="btn btn--transparent btn-block btn-sm a--left pull--padding-sm-left width--auto ">\n                        <contact-integration-icon integration="reference.integration"></contact-integration-icon>\n                        <span class=" color--text-inverted-important">\n                            {{\'integration.\' + reference.integration + \'.name\' | translate}}\n                        </span>\n                    </span>\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>\n\n\n\n\n'),
    e.put("/views/contacts/details.html", '<div class="scrollpane">\n    <!-- card or edit form -->\n    <div class="subpanel ui--dark anim--slide-in-from-left" ui-view="left-section">\n    </div>\n\n    <!-- documents -->\n    <div class="scrollpane__bd adjust-for-subpanel anim--slide-in-from-left" ui-view="right-section"></div>\n</div>\n'),
    e.put("/views/contacts/documents-list.html", '<div class="p--lg p--right-none">\n\n    <h2 class="section-header color--dimmed block">\n        <span ng-if="contact.first_name">{{contact.first_name}}\'s docs</span>\n        <span ng-if="!contact.first_name">Docs</span>\n    </h2>\n    <div class="hr m--none"></div>\n\n    <div ng-if="contact">\n      <contact-documents-list get-documents="getDocuments" not-found-template="/views/contacts/not-found-documents-list.html"\n                              empty-list-template="/views/contacts/empty-documents-list.html"></contact-documents-list>\n    </div>\n</div>\n'),
    e.put("/views/contacts/edit.html", '<div>\n\n    <div class="toolbar toolbar--dark toolbar--padding">\n        <ul class="toolbar__set toolbar__set--left">\n            <li>\n                <button class="btn btn--toolbar" ng-click="backToDetails()">\n                    <i class="icon icon--lg icon--back"></i>\n                    <span class="btn-text">Back</span>\n                </button>\n            </li>\n        </ul>\n    </div>\n\n    <form name="editContactForm" novalidate class="p--lg">\n        <h3 class="color--text-inverted-important">Edit contact</h3>\n        \n        <div class="form-group">\n            <label for="first_name">First name</label>\n            <input class="form-control form-control--dark" placeholder="First name" ng-model="contact.first_name" name="first_name" id="first_name" focus-me/>\n        </div>\n        <div class="form-group">\n            <label for="last_name">Last name</label>\n            <input class="form-control form-control--dark" placeholder="Last name" ng-model="contact.last_name" name="last_name" id="last_name" />\n        </div>\n        <div class="form-group">\n            <label for="email">Email</label>\n            <div class="input-group">\n                <input type="email" class="form-control form-control--dark" placeholder="Email" ng-disabled="contact.is_internal" ng-model="contact.email" id="email" name="email" required />\n            </div>\n        </div>\n        <div class="form-group">\n            <label for="email">Company</label>\n            <input class="form-control form-control--dark" placeholder="Company" ng-model="contact.company" id="company" name="company" />\n        </div>\n        <div class="form-row">\n            <div class="w50 pull-right" style="padding-left: 5px">\n                <button class="btn btn-block btn-primary p--left-none p--right-none" ng-click="updateContact()" ng-disabled="!isEditContactFormValid" >Save</button>\n            </div>\n            <div class="w50 pull-left" style="padding-right: 5px">\n                <button class="btn btn-block btn-default p--left-none p--right-none" ng-click="resetChanges()" ng-disabled="!contactHasChanged">Cancel</button>\n            </div>\n        </div>\n    </form>\n\n</div>'),
    e.put("/views/contacts/empty-documents-list.html", '<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No documents sent to this contact</h1>\n    <button class="btn btn-primary t--caps t--bold" ng-click="sendDocumentToContact()">Send a document</button>\n</div>\n'),
    e.put("/views/contacts/list.html", '<div class="scrollpane scrollpane--has-toolbar">\n\n    <div class="toolbar">\n        <ul class="toolbar__set toolbar__set--left with-separators">\n            <li>\n                <button class="btn btn--toolbar" ng-click="addContact()">\n                    <i class="icon icon--lg icon--plus"></i>\n                    <span class="btn-text">New Contact</span>\n                </button>\n            </li>\n            <li>\n                <button selection class="btn btn--toolbar" ng-click="removeContact()">\n                    <i class="icon icon--lg icon--delete"></i>\n                    <span class="btn-text">Remove</span>\n                </button>\n            </li>\n\n            <li class="no-separator toolbar__text">\n                <selection-counter></selection-counter>\n            </li>\n\n        </ul>\n\n        <ul class="toolbar__set toolbar__set--right toolbar__set--padded">\n            <li>\n                <grid-filter></grid-filter>\n            </li>\n        </ul>\n    </div>\n\n    <div grid scroll-processor scroll-processor-on-scroll="moreItems()" scroll-processor-container=".table-data"\n         class="scrollpane__bd">\n        <table ng-table="tableParams" ng-show="!isEmpty"\n               template-pagination="/views/directives/grid/empty-pagination.html"\n               class="table-data table--has-row-checkboxes">\n\n            <col class="cell-checkbox">\n            <col class="w50">\n            <col class="w50">\n\n            <tbody>\n            <tr ng-repeat="contact in $data" class="row--clickable anim--expand">\n\n                <td header-class="row--clickable" class="cell-checkbox" header="\'/views/directives/grid/selectall.html\'"\n                    ng-click="select($event, contact)">\n                    <checkbox-cell item="contact" selection-model="selectionModel"></checkbox-cell>\n                </td>\n\n                <td data-title="\'Name\'" sortable="\'name\'">\n                    <a class="stretcher media media--h50-two-lines" href="#/contacts/{{contact.id}}">\n                        <avatar user="contact" class="pull-left m--right-sm"></avatar>\n                        <div class="media-body">\n                            <span class="push-next">{{contact | fullName}}</span>\n\n                            <span ng-repeat="reference in contact.integrations">\n                              <contact-integration-icon integration="reference.integration"></contact-integration-icon>\n                            </span>\n\n                            <div class="t--small-dimmed">{{contact.company}}</div>\n                        </div>\n                    </a>\n                </td>\n\n                <td data-title="\'Email\'" sortable="\'email\'">\n                    <a class="stretcher" href="#/contacts/{{contact.id}}">\n                        {{contact.email}}\n                    </a>\n                </td>\n\n            </tr>\n\n            <tr ng-show="tableParams.settings().$loading">\n                <td class="p"></td>\n                <td>\n                    <i class="icon spinner"></i>\n                </td>\n                <td></td>\n            </tr>\n            </tbody>\n\n        </table>\n\n        <div class="page-stub" ng-show="!isNotFound && (isEmpty || (allItems.length === 1 && allItems[0].email === profile.email))"\n            ng-class="{\'p--top-sm\':allItems.length === 1 && allItems[0].email === profile.email && !isNotFound}">\n            <i class="page-stub__icon icon icon--circle-contact color--green m--bottom-lg"></i>\n            <h1 class="m--bottom-sm t--xlarge t--bold">Instantly see everything <br/>\n                you\'ve sent to any contact</h1>\n            <p class="m--auto t--larger m--bottom" style="max-width: 400px">While adding recipients to a document, contacts are\n                suggested as you type.</p>\n            <div allow="OWNER"><a href="#/settings/integrations/" class="btn btn-primary btn-lg m--bottom-sm t--bold">Import contacts from a CRM</a></div>\n            <a href="#/contacts/add" class="link-hover t--bold t--medium">Add a new contact<span allow="OWNER"> manually</span></a>\n        </div>\n\n        <div ng-show="isNotFound" class="page-stub">\n            <i class="page-stub__icon icon icon--circle-contact color--green m--bottom-lg"></i>\n            <h1 class="m--bottom-lg" >No contacts found</h1>\n            <button ng-click="addContact()" class="btn btn-primary t--caps input-block-level t--bold">\n                Add a new contact\n            </button>\n        </div>\n\n    </div>\n</div>\n'),
    e.put("/views/contacts/not-found-documents-list.html", '<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No documents found. Please check your search and try again</h1>\n</div>\n'),
    e.put("/views/dashboard/dashboard-right-panel.html", '<!-- right panel -->\n<div class="dashboard__p dashboard__p2" ng-class="{\'dashboard__p2--has-cta\': hasBanners}">\n\n    <onboarding-banners banners="banners" ng-if="banners"></onboarding-banners>\n\n    <div class="dashboard__p2-content">\n        <div class="dashboard__p2-content-hd">\n            <ul class="list list--tabs list--justified">\n                <li ng-class="{\'active\': rightSection === section}" ng-repeat="section in RIGHT_SECTIONS">\n                    <a href="" ng-click="showRightSection(section)" style="padding:15px;">\n                        {{section.name | translate}}\n                    </a>\n                </li>\n            </ul>\n        </div>\n        <div class="dashboard__p2-content-bd scrollable scrollable-marker">\n            <!--recent-documents ng-if="rightSection.isRecentDocumentsSection"></recent-documents-->\n            <actions-feed ng-if="rightSection.isActionsSection"></actions-feed>\n            <messages-feed ng-if="rightSection.isCommentsSection"></messages-feed>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/dashboard/dashboard-welcome-from-google.html", '<div ng-controller="GoogleWelcomeDialogController">\n    <div class="modal-content p--horis">\n        <div class="modal-body p--lg a--center">\n            <h1 class="m--bottom-sm t--large">{{greetingMessage}}</h1>\n\n            <p class="color--dimmed t--larger m--bottom">\n                You found a paperless, easy and secure<br>\n                way to send and sign Google Docs. The world is proud of you.\n            </p>\n\n            <div class="dashboard-welcome__ill">\n                <img ng-src="{{\'img/google-add-on.png\' | staticBaseUrl}}" alt="" width="540" height="340"\n                     style="width: 540px; height:340px"/>\n            </div>\n            <a target="_blank" href={{addonLink}} class="btn btn-primary btn-lg " ng-click="sendDocument()">Install\n                Google Docs Add-on</a>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/dashboard/dashboard-welcome-from-yammer.html", '<div ng-controller="YammerWelcomeDialogController">\n    <div class="modal-content p--horis">\n        <div class="modal-body p--lg a--center">\n            <h1 class="m--bottom-sm t--large">{{greetingMessage}}</h1>\n\n            <p class="color--dimmed t--larger m--bottom-lg">\n                You found a paperless, easy and secure<br>\n                way to send and sign documents. The world is proud of you.\n            </p>\n\n            <div class="dashboard-welcome__ill m--bottom-lg">\n                <img ng-src="{{\'img/integrations/yammer-sync-contacts.jpg\' | staticBaseUrl}}" alt="" width="500"\n                     height="300" style="width: 500px; height:300px"/>\n            </div>\n            <button class="btn btn--yammer btn-lg " ng-click="startIntegration()">\n                <i class="icon icon--yammer icon--lg push-next"></i> Invite colleagues to try PandaDoc\n            </button>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/dashboard/dashboard-welcome.html", '<div ng-controller="DashboardWelcomeDialogController" >\n    <button class="close pos--rel z-1" ng-click="clickClose(data)" type="button" aria-hidden="true"\n            style="width:50px;line-height: 50px">&times;</button>\n    <div class="modal-content p--horis">\n        <div class="modal-body p--lg a--center">\n\n            <div ng-show="screen==1">\n                <img ng-src="{{\'img/pd-ipad.png\' | staticBaseUrl}}" alt="" width="208" height="200" class="m--bottom"/>\n\n                <h1 class="m--bottom-sm t--large">{{ greetingMessage }}</h1>\n\n                <p class="color--dimmed t--smaller m--bottom">\n                    Just one more thing...<br>\n                    How do you plan to use PandaDoc?\n                </p>\n\n                <div class="grid grid--spacing-md m--bottom-sm inline-block">\n                    <div class="grid__item">\n                        <button class="btn btn-primary btn-lg btn-block " ng-click="get_next_screen(1);"\n                                style="width:170px;">Personal\n                        </button>\n                    </div>\n                    <div class="grid__item">\n                        <button class="btn btn-primary btn-block btn-lg " ng-click="get_next_screen(0)"\n                                style="width:170px;">Business\n                        </button>\n                    </div>\n                </div>\n                <p class="color--dimmed t--small">This will help us to configure your account properly</p>\n            </div>\n\n\n            <div ng-show="screen==2" >\n                <h1 class="m--bottom t--large">How many people in your company <br/>\n                    deal with documents?</h1>\n\n                <div>\n\n                    <ol class=" tariff-toc inline-block m--bottom" style="width: auto">\n                        <li ng-repeat="(key, value) in business_options">\n                            <label class="tariff-toc__item clearfix">\n                                <span class="radio-custom">\n\n                                     <input type="radio" ng-model="data.company_size" ng-value="key"\n                                            name="0E3" value="{{ key }}">\n                                    <i class="__img"></i>\n                                </span>\n                                <span class="tariff-toc__name pull-left">\n                                    {{ value }}\n                                </span>\n                            </label>\n                        </li>\n                    </ol>\n                </div>\n\n                <div class="inline-block a--left m--bottom-sm">\n\n                <p class="color--dimmed t--medium m--bottom a--center " ng-show="data.company_size > 1">\n                    PandaDoc has a lot under the hood. <br/>\n                    <a href="https://www.pandadoc.com/setup-your-demo/" target="_blank">Click here to schedule a demo!</a>\n                </p>\n\n                </div>\n                <div>\n                    <button class="btn btn-primary btn-lg  m--bottom-sm" ng-click="goNext(data)" ng-hide="isSignupSourceTemplate">Done! Send a Doc</button>\n                    <button class="btn btn-primary btn-lg  m--bottom-sm" ng-click="goNext(data)" ng-show="isSignupSourceTemplate">Done! Use Template</button>\n                </div>\n                <p class="color--dimmed t--small">Or go to <a ng-click="clickClose(data)" class="link-hover">dashboard</a></p>\n            </div>\n\n\n            <div ng-show="screen==3">\n                <img ng-src="{{\'img/pd-like.png\' | staticBaseUrl}}" alt="" width="250" height="200" class="m--bottom"/>\n                <h1 class="m--bottom-sm t--large">Awesome!</h1>\n                <p class="color--dimmed t--smaller m--bottom"> You\'ve got 3 free docs </p>\n                <button class="btn btn-primary btn-lg m--bottom-sm " ng-click="goNext(data)" ng-hide="isSignupSourceTemplate">Send One Now</button>\n                <button class="btn btn-primary btn-lg m--bottom-sm " ng-click="goNext(data)" ng-show="isSignupSourceTemplate">Use Template</button>\n                <p class="color--dimmed t--small m--bottom">Or go to <a ng-click="clickClose(data)" class="link-hover">dashboard</a></p>\n            </div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/dashboard/dashboard.html", '<div class="dashboard h100">\n\n    <ng-include src="\'/views/dashboard/dashboard-right-panel.html\'" ng-controller="DashboardRightPannelController"></ng-include>\n\n    <div class="dashboard__p dashboard__p1">\n\n        <div class="dashboard__p1-hd">\n            <!-- document sections -->\n            <ul class="list dashb-stats clearfix">\n                <li ng-repeat="section in DOCUMENT_SECTIONS" ng-if="section.isVisible" ng-style="{\'width\' : 100 / visibleSectionsCount + \'%\'}">\n                    <a ng-class="{\'active\': documentSection === section}" href="" ng-click="showSection(section)">\n                        <span class="dashb-stats__chart" easypiechart percent="section.percent" options="section.pieChartOptions"></span>\n                        <span class="dashb-stats__val">\n                            <span ng-if="!loadingDocumentsCount" class="pos--rel">\n                                {{section.count}}\n                                <span class="badge dashb-stats__badge" ng-if="waitingForApprovalDocumentsCount && section.name === WAITING_APPROVAL"></span>\n                            </span>\n                            <span class="t--small-dimmed" ng-if="loadingDocumentsCount">Loading...</span>\n                        </span>\n                        <document-status class="dashb-stats__type" status-name="{{section.name === WAITING_APPROVAL ? \'For Approval\' : \'\'}}" status="{{section.name}}" text></document-status>\n\n                        <span class="dashb-stats__money" ng-if="thisFeatureImplemented">$25,600</span>\n                    </a>\n                </li>\n            </ul>\n        </div>\n\n        <!-- documents -->\n        <div class="dashboard__p1-bd scrollpane " ng-class="{\n            \'scrollpane--has-toolbar\': hasDocs\n        }">\n            <!-- toolbar -->\n            <div class="toolbar toolbar--white p--left-sm" ng-show="hasDocs">\n                <ul class="toolbar__set toolbar__set--left toolbar__set--padded p--left-xs">\n                    <li>\n                        <grid-filter class="search-form--no-border"></grid-filter>\n                    </li>\n                </ul>\n\n                <ul class="toolbar__set toolbar__set--right toolbar__set--padded p--left-xs">\n                    <li>\n                        <span class="inline-block form-control-static push-next">Period:</span> <select ng-model="period" ng-options="period as \'period.\' + period | translate for period in periods"></select>\n                    </li>\n                </ul>\n            </div>\n            <!-- grid -->\n            <div class="scrollpane__bd p--bottom"\n                 scroll-processor scroll-processor-on-scroll="loadDocuments()" scroll-processor-container=".table-data">\n\n                <table class="table-data">\n                    <col> <!-- title -->\n                    <col class="w15"> <!-- recipients -->\n                    <col class="w25"> <!-- recipients -->\n                    <col class="w20"> <!-- author -->\n\n                    <tbody>\n\n                        <tr ng-repeat="doc in documentSection.documents" class="row--clickable anim--expand">\n\n                            <td class="p--left-none">\n                                <a class="stretcher t--medium p--left" ng-href="#/documents/{{doc.id}}" >\n                                    {{doc.name}}\n                                </a>\n                            </td>\n\n                            <td class="cell--status">\n                                <a class="stretcher stretcher--one-line" ng-href="#/documents/{{doc.id}}">\n                                    <document-status status="{{doc.status}}" icon text></document-status>\n                                </a>\n                            </td>\n\n                            <td>\n                                <a class="stretcher" ng-href="#/documents/{{doc.id}}">\n                                    <document-signers document="doc"/>\n                                </a>\n                            </td>\n\n                            <td class="cell--author">\n                                <a class=" stretcher media contact-card p--right" ng-href="#/documents/{{doc.id}}">\n                                    <div ng-if=\'doc.date_created\'>\n                                        <avatar size="28" user="doc.owner" class="pull-left"></avatar>\n                                        <div class="media-body">\n                                            {{doc.owner | fullName}}\n                                            <div class="t--small-dimmed">{{doc.date_created | moment }}</div>\n                                        </div>\n                                    </div>\n                                </a>\n                            </td>\n                        </tr>\n\n                        <tr ng-show="loadingDocuments">\n                            <td colspan="4" class="p--left"><i class="icon spinner"></i></td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <!-- No documents for \'search\' cases -->\n                <div ng-if="documentSection.triedLoadingDocs && documentSection.documents.length === 0 && !loadingDocuments && documentSection.documentsRequestParams.q"\n                     class="page-stub p--top-lg m--bottom">\n                    <p class="color--dimmed t--medium">No documents found</p>\n                </div>\n\n                <!-- no documents for \'send\' section + no documents yet in account-->\n                <div ng-if="documentSection.triedLoadingDocs && documentSection.documents.length === 0 && !hasDocs\n                        && !loadingDocuments && !documentSection.documentsRequestParams.q && DOCUMENT_SECTIONS.indexOf(documentSection) === 0"\n                     class="page-stub p--top-lg m--bottom">\n                    <i class="page-stub__icon icon icon--circle-dashboard color--green m--bottom-lg"></i>\n                    <h1 class="m--bottom m--auto t--xlarge t--bold" style="max-width: 570px">Dashboard keeps track of every document you and your team work with</h1>\n                    <a class="btn btn-primary btn-lg" href="#/documents/upload">Send a new document</a>\n                </div>\n\n                <!-- no documents for \'send\' section + there are  documents in account-->\n                <div ng-if="documentSection.triedLoadingDocs && documentSection.documents.length === 0 && hasDocs\n                        && !loadingDocuments && !documentSection.documentsRequestParams.q && DOCUMENT_SECTIONS.indexOf(documentSection) === 0"\n                     class="page-stub p--top-lg m--bottom">\n                    <p class="color--dimmed t--medium">No documents yet</p>\n                </div>\n\n\n                <!-- no documents for all another sections -->\n                <div ng-if="documentSection.triedLoadingDocs && documentSection.documents.length === 0\n                        && !loadingDocuments && !documentSection.documentsRequestParams.q && DOCUMENT_SECTIONS.indexOf(documentSection) !== 0"\n                     class="page-stub p--top-lg m--bottom">\n                    <p class="color--dimmed t--medium">No documents yet</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/directives/patient-image.html", '<div ng-style="imageStyle" ng-class="{\'p--sm\': loading}">\n    <spinner visible="loading"></spinner>\n    <img ng-show="!loading" ng-src="{{src}}" width="{{imageWidth}}" class="image-to-load {{class}}"/>\n</div>\n'),
    e.put("/views/directives/post-message-form.html", '<form class="block--text clearfix main-message-form">\n    <div class="m--bottom-sm">\n        <textarea msd-elastic="\\n" class="form-control resize-v" id="messageInput" placeholder="{{placeholder}}"\n                  ng-trim="false" ng-model="messageModel.message"></textarea>\n    </div>\n    <button class="btn btn-default btn--stretch-narrow pull-right t--caps"\n            ng-disabled="sendingMessage || messageModel.message.length == 0"\n            ng-click="sendMessage()" ngSubmit="sendMessage()" type="submit">\n        <spinner visible="sendingMessage"></spinner>\n        Post\n    </button>\n</form>\n'),
    e.put("/views/documents/create-from-template.html", '<div class="centerer">\n    <div class="centerer__bd">\n        <form class="box p--vert box--static">\n            <div class="box__content w100">\n\n                <div>\n                    <h1 class="section-header t--large p a--center">Add people you\'re sending the&nbsp;document&nbsp;to</h1>\n\n                    <div class="block">\n                        <h3 class="t--larger m--none "><label for="name" class="color--text-default">Document name</label>\n                        </h3>\n                        <input type="text" class="form-control" id="name" placeholder="e.g. Final Offer"\n                               ng-model="nameModel.name" focus-me>\n                    </div>\n\n                    <div class="hr block"></div>\n\n                </div>\n\n                <roles-assignment-form contacts="contacts" assignments="assignments"></roles-assignment-form>\n\n                <!-- buttons -->\n\n                <!-- roles assignment step -->\n                <div class="a--center m--bottom-sm">\n                    <single-click-button\n                        class="btn btn-primary btn-lg t--larger t--bold p--horis-lg"\n                        text="Next"\n                        handler="next"\n                        ></single-click-button>\n                </div>\n\n            </div>\n        </form>\n    </div>\n</div>\n'),
    e.put("/views/documents/create.html", '<div class="centerer">\n    <div class="centerer__bd">\n        <form class="box p--vert">\n            <div class="box__content">\n                <h1 class="section-header t--large p a--center">Add people you\'re sending the&nbsp;document&nbsp;to</h1>\n\n                <div class="block">\n                    <h3 class="t--larger m--none "><label for="name" class="color--text-default">Document name</label>\n                    </h3>\n                    <input type="text" class="form-control" id="name" placeholder="e.g. Final Offer"\n                           ng-model="document.name" focus-me>\n                </div>\n\n                <div class="hr block"></div>\n\n                <h3 class="t--larger m--none"><label for="contact">Recipients</label></h3>\n\n                <div ng-show="loading">\n                    <i class="icon spinner"></i>\n                </div>\n\n                <ul class="inline-block" style="min-width: 50%">\n                    <li class="media card m--bottom-sm anim--expand" ng-repeat="recipient in document.recipients">\n                        <avatar size="35" class="pull-left" user="recipient.contact"></avatar>\n                        <div class="media-body">\n                            <h4 class="card__hdr form-row">\n                                <span class="append-btn t--nowrap">\n                                    {{recipient.contact | fullName}}\n                                    <button type="button" ng-click="removeRecipient(recipient)"\n                                            title="Remove"\n                                            class="btn append-btn__btn close color--red square-20">&times;</button>\n                                </span>\n                            </h4>\n                            {{recipient.contact.email}}\n                        </div>\n                    </li>\n                </ul>\n\n                <participants-form existed="document.recipients" has-close-button="true" delegate="this"\n                                   class="doc-participants--in-dialog m--bottom-sm"\n                                   no-autofocus></participants-form>\n\n                <add-me-as-contact add-callback="addRecipient" recipients="document.recipients"></add-me-as-contact>\n\n                <div class="a--center m--bottom-sm">\n                    <button type="button" ng-disabled="!readyToContinue || goingNext"\n                            class="btn btn-primary btn-lg t--larger t--bold p--horis-lg" ng-click="next()">\n                        <spinner visible="goingNext"></spinner>\n                        Next\n                    </button>\n                </div>\n\n            </div>\n        </form>\n    </div>\n</div>\n'),
    e.put("/views/documents/details.html", '<div ui-view="panel-center" class="h100"></div>\n<div ng-if="$state.current.data.hasRightPanel"\n      ui-view="panel-right"></div>\n'),
    e.put("/views/documents/details.phone.html", '<div ui-view="panel-center" class="h100"></div>'),
    e.put("/views/documents/doc-signers.html", '<div class="t--small t--wrap">\n    <span ng-repeat="recipient in previewList track by $index" ng-class="{\'color--dimmed\': recipient.type==2}">\n        {{recipient.displayName}}<span ng-if="!$last">, </span><span ng-if="$last && more">&nbsp;({{more}})</span>\n    </span>\n</div>'),
    e.put("/views/documents/document.html", '<document-pad loading-content="loadingContent" document-content-info="documentContentInfo" document-info="documentInfo"></document-pad>\n'),
    e.put("/views/documents/documents.html", '<div ng-if="readyToLoadDocuments" class="h100">\n\n  <document-list ng-if="folderOwner" get-documents="getDocuments"\n    empty-list-template="/views/documents/list/empty-list.html"\n    not-found-template="/views/documents/list/not-found.html"\n  ></document-list>\n\n   <document-ro-list ng-if="!folderOwner" get-documents="getDocuments"\n    empty-list-template="/views/documents/list/empty-list-ro.html"\n    not-found-template="/views/documents/list/not-found-ro.html"\n    ></document-ro-list>\n</div>\n'),
    e.put("/views/documents/email-not-verified.html", '<div class="modal-body padding a--center">\n\n    <h2 class="m--horis">Please verify your email address over the link we\'ve just sent to you.</h2>\n    <p class="color--dimmed inline-block m--bottom-lg" style="max-width: 400px">\n        Your document is ready to be sent! But first, check {{profile.email}} and verify your email address.\n    </p>\n\n    <div class="inline-block grid grid--spacing-xs block">\n        <div class="grid__item">\n            <a ng-click="resend($event)" href="" ng-disaled="resending" focus-me>\n                <spinner visible="resending"></spinner>\n                Didn\'t receive it? Resend verification email\n            </a>\n        </div>\n    </div>\n\n</div>\n\n'),
    e.put("/views/documents/folders.html", '<folders-list service="foldersService" folder-type="\'documents\'"></folders-list>\n'),
    e.put("/views/documents/list.html", '<div class="scrollpane h100">\n\n    <!-- folders -->\n    <div class="subpanel ui--dark" ui-view="folders-section">\n    </div>\n\n    <!-- documents -->\n    <div class="h100 adjust-for-subpanel" ui-view="documents-section">\n    </div>\n\n</div>\n'),
    e.put("/views/documents/not-found-embed.html", '<div class="page-stub">\n    <i class="icon icon--huge icon--doc-404 color--icon-dimmed block"></i>\n\n    <h1>Document not found</h1>\n\n    <p class="color--dimmed block">\n        Powered by <a href="https://www.pandadoc.com" class="link-camouflage" target="_blank">PandaDoc</a>\n    </p>\n</div>\n'),
    e.put("/views/documents/not-found.html", '<div class="page-stub">\n    <i class="icon icon--huge icon--doc-404 color--icon-dimmed block"></i>\n\n    <h1>Document not found</h1>\n\n    <p class="color--dimmed block">\n        This document may have been deleted or you don\'t have access to it\n    </p>\n</div>'),
    e.put("/views/documents/participants-form-contact.html", '<a class="doc-participants__option media card">\n    <avatar class="pull-left m--right-sm" user="match.model" size="35"></avatar>\n\n    <div class="media-body">\n        <div class="card__hdr ellipsis">\n            <span bind-html-unsafe="match.model.fullName | contactNameHighlight:query"\n                ng-if="match.model.first_name.length || match.model.last_name.length"></span>\n            <span bind-html-unsafe="match.model.email | contactNameHighlight:query"\n                  ng-if="!match.model.first_name && !match.model.last_name"></span>\n        </div>\n        <div bind-html-unsafe="match.model.email | contactNameHighlight:query"\n             class="doc-participants__option-email ellipsis"></div>\n    </div>\n</a>\n'),
    e.put("/views/documents/participants-form.html", '<div class="doc-participants">\n    <form ng-submit="addRecipient()" novalidate ng-show="!showContactForm" ng-class="class">\n\n\n        <div class="form-row">\n            <div class="form-row__stretcher">\n\n                <div class="combo-field dropdown" ng-class="{\'has-caret\': recipients && recipients.length > 0}" dropdown>\n                    <input type="text"\n                           ng-class="{\'has-caret\': recipients && recipients.length > 0}"\n                           class="form-control"\n                           placeholder="Name or email"\n                           id="contact"\n                           autocomplete="off"\n                           typeahead="contact.name for contact in getContacts($viewValue)"\n                           ng-model="contactModel.name"\n                           typeahead-on-select="addRecipient()"\n                           typeahead-wait-ms="500"\n                           typeahead-template-url="/views/documents/participants-form-contact.html"\n                           />\n\n                    <div data-toggle="dropdown" tabindex="0" class="dropdown-toggle" dropdown-toggle\n                            ng-show="recipients && recipients.length > 0">\n                        <span class="caret"></span>\n                    </div>\n\n                    <ul ng-if="recipients && recipients.length > 0"\n                        class="dropdown-menu analytics-dropdown w100">\n                        <li ng-repeat="recipient in recipients">\n                            <a ng-click="selectRecipient(recipient)" class="media card anim--expand p--sm" tabindex="0">\n                                <avatar class="pull-left" user="recipient.contact" size="25"></avatar>\n                                <div class="media-body" style="padding-top: 4px">\n                                    <h4 class="card__hdr break-word">\n                                        <span>{{recipient.contact | fullName}}</span>\n                                    </h4>\n                                </div>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n\n            </div>\n\n            <div class="form-row__fixed">\n                <button type="submit" class="btn btn-default btn--stretch-narrow t--caps" ng-disabled="loading">\n                    <spinner visible="loading"></spinner>\n                    Add\n                </button>\n            </div>\n\n        </div>\n\n    </form>\n\n    <div ng-show="showContactForm" class="anim--expand bg--very-light p--sm pull--padding-right pull--padding-left m--bottom pos--rel">\n\n        <form name="addContactForm" ng-submit="createContact()" novalidate class="doc-participants__form-create">\n            <div class="doc-participants__form-create-fields  ">\n                <div class="doc-participants__form-create-fields-wrap">\n                    <div class="doc-participants__form-create-field">\n                        <label for="first_name" class="control-label">First Name</label>\n                        <input class="form-control" id="first_name" name="first_name" ng-model="contactModel.candidate.first_name"/>\n                    </div>\n                    <div class="doc-participants__form-create-field">\n                        <label for="last_name" class="control-label">Last Name</label>\n                        <input class="form-control" id="last_name" name="last_name" ng-model="contactModel.candidate.last_name"/>\n                    </div>\n                    <div class="doc-participants__form-create-field">\n                        <label for="email" class="control-label">Email</label>\n                        <input class="form-control" type="text" id="email" name="email" ng-model="contactModel.candidate.email" required/>\n                    </div>\n                </div>\n            </div>\n            <div class="doc-participants__form-create-submit">\n                <label class="control-label">&nbsp;</label>\n                <button type="submit" ng-disabled="addContactForm.$invalid || creatingContact"\n                        class="btn btn-primary t--caps">\n                    <spinner visible="creatingContact" class="pos--rel"></spinner>\n                    Add\n                </button>\n            </div>\n        </form>\n        <button ng-show="hasCloseButton" class="btn btn--transparent pos--abs z-1 top-0 right-0" ng-click="toggleAddActorForm()" type="button">\n            close &nbsp;<i class="icon icon--lg icon--close color--icon-dimmed"></i>\n        </button>\n    </div>\n\n</div>\n'),
    e.put("/views/documents/recipient-action.html", "<span class=\"recipient-status recipient-status--{{action}}\">{{ 'recipients.actions.' + action | translate}}</span>"),
    e.put("/views/documents/rename.html", '<span>\n\n    <span ng-if="documentInfo.isOwner && editable"\n          class="docname" ng-class="{\'docname--editing\':editorVisible}">\n\n        <span tooltip="Click to edit" tooltip-placement="bottom" tooltip-append-to-body="true" ng-click="showEditor()"\n              class="docname__txt">{{documentInfo.document.name}}</span>\n\n        <form ng-class="{\'docname__form\' : editorVisible}" ng-show="editorVisible" ng-submit="hideEditor()">\n          <input id="document-rename" type="text" ng-model="documentInfo.document.name" class="form-control docname__field"\n                 ng-if="editorVisible" focus-me/>\n        </form>\n\n    </span>\n\n    <span ng-if="!documentInfo.isOwner || !editable">\n        {{documentInfo.document.name}}\n    </span>\n\n</span>'),
    e.put("/views/documents/role-assignment.html", '<li class="clearfix">\n    <div class="pull-left p--right-sm" ng-show="roleVisible">\n        <div class="avatar--role bg--user-{{index}} color--white">#{{index}}</div>\n    </div>\n    <div class="pull-left w25 p--right-sm form-control-static" ng-show="roleVisible">\n        <div class="t--bold ellipsis">{{assignment.role.name}}</div>\n    </div>\n    <div class="pull-right w60"  ng-class="{\n      \'w60\' : roleVisible,\n      \'w100\' : !roleVisible\n     }">\n\n        <div ng-if="assignment.contact" class="media card media--35-two-lines pull-left maxw100 anim--expand">\n            <avatar size="35" class="pull-left" user="assignment.contact"></avatar>\n            <div class="media-body m--none">\n                <h4 class="card__hdr">\n                <span class="append-btn">\n                    <span class="ellipsis display-block">{{assignment.contact | fullName}}</span>\n                    <button type="button" ng-click="removeRecipient()"\n                            title="Remove" class="btn append-btn__btn close color--red square-20">&times;</button>\n                </span>\n                </h4>\n                <div class="ellipsis t--small-dimmed">{{assignment.contact.email}}</div>\n            </div>\n        </div>\n\n        <participants-form recipients="assignment.recipients" has-close-button="true"\n                           delegate="this" ng-if="!assignment.contact"\n                           class="doc-participants--in-dialog"\n                           no-autofocus></participants-form>\n    </div>\n</li>\n'),
    e.put("/views/documents/roles-assignment-form.html", '<div>\n\n    <h3 class="t--larger m--bottom-sm t--normal" ng-show="assignments.length > 0">\n        Assign people to roles\n    </h3>\n\n    <ul class="role-assgnt m--bottom-lg">\n        <role-assignment assignment="assignment" index="$index+1" ng-repeat="assignment in assignments"\n            class="role-assgnt__item m--bottom-sm"></role-assignment>\n    </ul>\n\n    <div class="hr block" ng-show="assignments.length > 0"></div>\n\n    <h3 class="t--larger m--bottom-sm t--normal">\n        Add more recipients\n    </h3>\n\n    <ul class="m--bottom" ng-if="contacts.length">\n        <li class="media card m--bottom-sm" ng-repeat="contact in contacts">\n            <avatar size="35" class="pull-left" user="contact"></avatar>\n            <div class="media-body">\n                <h4 class="card__hdr form-row">\n                    <span class="append-btn t--nowrap">\n                        {{contact | fullName}}\n                        <button type="button" ng-click="removeRecipient(contact)"\n                            title="Remove"\n                            class="btn append-btn__btn close color--red square-20">&times;</button>\n                    </span>\n                </h4>\n                <div class="ellipsis maxw100">{{contact.email}}</div>\n            </div>\n        </li>\n    </ul>\n\n    <participants-form has-close-button="true" delegate="this" existed="merged"\n       class="doc-participants--in-dialog m--bottom-sm"\n       no-autofocus></participants-form>\n\n    <add-me-as-contact add-callback="addRecipient" contacts="contacts" merged="merged"></add-me-as-contact>\n\n</div>\n'),
    e.put("/views/documents/save-status.html", '<span ng-show="isVisible">\n    <span ng-if="saving">{{\'doc.saving\' | translate}}</span>\n    <span ng-if="!saving">{{\'doc.saved\' | translate}}</span>\n</span>\n'),
    e.put("/views/documents/sdk-documents-list.html", '<div style="height:100%;">\n    <div class="clearfix m--bottom-sm" ng-if="showNewDocumentButton">\n        <button ng-click="onNewDocument()" class="btn btn--smaller btn-primary  pull-right">New Document</button>\n    </div>\n    <document-ro-list get-documents="getDocuments" on-document-click="onDocumentClick"\n                      empty-list-template="/views/documents/list/sdk-empty-list-ro.html"\n                      not-found-template="/views/documents/list/not-found-ro.html">\n    </document-ro-list>\n</div>\n'),
    e.put("/views/documents/sdk-extension-documents-list.html", '<div style="height:100%;">\n\n    <document-extension-ro-list get-documents="getDocuments" on-document-click="onExtensionDocumentClick" empty-list-template="/views/documents/list/sdk-extension-empty-list-ro.html" not-found-template="/views/documents/list/not-found-ro.html">\n    </document-extension-ro-list>\n\n</div>\n'),
    e.put("/views/documents/send-unavailable-out-of-docs.html", '<div class="modal-body p--lg p--top a--center">\n\n    <img ng-src="{{\'img/outofdocs.png\' | staticBaseUrl}}" alt="" class="m--vert" style="width: 244px;height: 204px;"/>\n\n    <h3 class="m--bottom-sm">Sorry there, panda bear, <br/> you\'ve run out of documents</h3>\n\n    <p class="color--dimmed  m--bottom t--medium" ng-if="isOwner">\n        You can subscribe to one of our premium plans with Unlimited documents</br> or just invite your friends to get free docs.\n    </p>\n\n    <p class="color--dimmed  m--bottom t--medium" ng-if="!isOwner">\n      Please contact your account owner to add docs credit or invite your friends to PandaDoc to get free documents.\n    </p>\n\n    <div class="m--bottom-sm">\n\n        <div class="inline-block" ng-if="isOwner">\n            <a target="{{target}}" class="btn btn-primary btn-lg  t--bold" ng-click="$close()" href="{{billingUrl}}"\n               focus-me>\n            {{\'buttons.more_docs\' | translate}}\n            </a>\n        </div>\n\n        <div class="inline-block" ng-if="!isOwner">\n            <a target="{{target}}" class="btn btn-default btn-lg  t--bold" ng-click="$close()" href="{{rewardsUrl}}">\n                {{\'buttons.free_docs\' | translate}}\n            </a>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/documents/send-unavailable-subscription-suspended.html", '<div class="modal-body p--lg p--top a--center">\n\n    <img ng-src="{{\'img/outofdocs.png\' | staticBaseUrl}}" alt="" class="m--vert" style="width: 244px;height: 204px;" />\n\n    <h3 class="m--bottom-sm">Sorry there, panda bear, <br/> your subscription has been suspended</h3>\n\n\n    <p class="color--dimmed  m--bottom t--medium" ng-if="isOwner && isSdk">\n        Please update your billing details.\n    </p>\n\n    <p class="color--dimmed  m--bottom t--medium" ng-if="isOwner && !isSdk">\n        Please update your billing details or contact our <a href="" contact-us>support team</a>.\n    </p>\n\n    <p class="color--dimmed  m--bottom t--medium" ng-if="!isOwner">\n        Please contact account owner to update billing details.\n    </p>\n\n    <div class="m--bottom-sm">\n\n        <div class="inline-block" ng-if="isOwner">\n            <a target="{{target}}" class="btn btn-primary btn-lg  t--bold" ng-click="$close()" href="{{billingUrl}}" focus-me>\n                Update billing details\n            </a>\n        </div>\n\n        <div class="inline-block" ng-if="!isOwner">\n            <button class="btn btn-default btn-lg  t--bold" ng-click="$close();">\n                Close\n            </button>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/documents/status.html", '<span class="doc-status doc-status--{{ status }}">\n    <i class="icon icon--doc-status icon--doc-status-{{ status }}" ng-if="icon" title="{{ \'doc.status.\' + status | translate }}"></i>\n    <span ng-if="text && !statusName" class="doc-status__text">{{ \'doc.status.\' + status | translate }}</span>\n    <span ng-if="text && statusName" class="doc-status__text">{{ statusName | translate }}</span>\n</span>\n'),
    e.put("/views/documents/switch-workspace.html", '<div class="page-stub">\n\n    <spinner visible="!document || !workspace"></spinner>\n\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg" ng-show="document && workspace"></i>\n\n    <h1 ng-show="document && workspace">Document "{{document.name}}" is located <br/>in "{{workspace.name}}" workspace</h1>\n\n    <button ng-show="document && workspace" ng-click="switch()" ng-disabled="switching" class="btn btn-primary btn-lg t--bold">\n        <spinner visible="switching"></spinner>\n        Switch to "{{workspace.name}}"\n    </button>\n</div>\n\n'),
    e.put("/views/documents/tools-panel.html", '<doc-tools-list document-content-info="documentContentInfo" document-info="documentInfo"></doc-tools-list>'),
    e.put("/views/editor/editor.html", '<div jui-droppable\n     opt-tolerance="\'touch\'"\n     opt-accept="\'.block-droppable\'"\n     event-drop="drop" class="editable-document-content">\n    <!-- class editable-document-content is used in analytics doc tool as root element for content cloning -->\n\n    <div class="document-page document-page--loading" ng-if="realoadingDocumentInfo">\n        <div class="document-page__sheet"></div>\n    </div>\n\n    <!-- cover page -->\n    <div class="document-page document-page--editor document-page--cover" ng-if="ready && coverBlock && !realoadingDocumentInfo"\n         ng-class="{\'document-page--a4\' : theme().paper_size == A4}">\n        <div class="document-page__sheet"\n             background-image="coverBlock.data.background.src"\n             background-image-size="100%">\n\n            <div class="document-page__content">\n                <!-- cover -->\n                <block block="coverBlock" block-list="blockList" document-info="documentInfo"\n                       document-content-info="documentContentInfo" fixed="true"></block>\n            </div>\n        </div>\n    </div>\n\n    <!-- blocks page -->\n    <div class="document-page document-page--editor" ng-if="!realoadingDocumentInfo"\n         ng-class="{\n            \'document-page--has-header\': headerBlock,\n            \'document-page--has-footer\': footerBlock,\n            \'document-page--a4\' : theme().paper_size == A4}"\n        >\n\n        <div class="document-page__sheet" ng-if="ready">\n\n            <div ng-if="::contentEditable" class="document-page__content">\n                <!-- header -->\n                <block ng-if="headerBlock" block="headerBlock" block-list="blockList" document-info="documentInfo"\n                       document-content-info="documentContentInfo" fixed="true"></block>\n\n                <div class="document__block-list" jui-droppable\n                     opt-tolerance="\'touch\'"\n                     opt-accept="\'.block-droppable\'"\n                     event-over="dragOver"\n                     event-out="dragOut"\n                     event-drop="drop">\n\n                    <!-- all other blocks  -->\n                    <!-- class="sortable-blocks" - marker-class. used for blocks drag-n-drop from doc tool panel -->\n                    <div ui-sortable="::sortableOptions" ng-model="contentBlocks" class="sortable-blocks" style="min-height: inherit">\n                        <block ng-repeat="block in contentBlocks" block="block" block-list="blockList"\n                               document-info="documentInfo" document-content-info="documentContentInfo"\n                               fixed="false" content-blocks="contentBlocks"></block>\n                        <div class="document-page__sheet-drop-hint" ng-if="contentBlocks.length === 0">\n                            <i class="icon icon--drag-content"></i>\n                            <p>Drag your content here</p>\n                        </div>\n                    </div>\n                </div>\n                <!-- footer  -->\n                <block ng-if="footerBlock" block="footerBlock" block-list="blockList" document-info="documentInfo"\n                       document-content-info="documentContentInfo" fixed="true"></block>\n            </div>\n\n            <div ng-if="::!contentEditable" class="document-page__content">\n                <!-- header -->\n                <block ng-if="::headerBlock" block="headerBlock" block-list="blockList" document-info="documentInfo"\n                       document-content-info="documentContentInfo"></block>\n\n                <!-- all other blocks  -->\n                <div class="document__block-list">\n                    <block ng-repeat="block in contentBlocks" block="block" block-list="blockList"\n                           document-info="documentInfo" document-content-info="documentContentInfo" content-blocks="contentBlocks"></block>\n                </div>\n\n                <!-- footer  -->\n                <block ng-if="::footerBlock" block="footerBlock" block-list="blockList" document-info="documentInfo"\n                       document-content-info="documentContentInfo"></block>\n            </div>\n\n        </div>\n    </div>\n\n</div>\n\n'),
    e.put("/views/extension/settings-extension.html", '<div class="scrollpane scrollpane--has-toolbar p">\n    <p class="m--bottom-sm t--medium color--dimmed">You\'re logged in as</p>\n\n    <ul class="list list--bordered list--bordered-bottom">\n        <li class="contact-card clearfix p--sm bg--very-light" style="margin-bottom: 13px">\n            <avatar user="profile" class="pull-left m--top-none" size="40"></avatar>\n            <div class="media-body">\n                {{profile | fullName}}\n                <div class="t--small-dimmed">{{profile.email}}</div>\n            </div>\n        </li>\n        <li><a href="{{\'/a/#/settings/profile/\' | appBaseUrl }}" target="_blank">Profile settings</a></li>\n        <li ng-show="showTokens"><a ng-click="openTokens()">Tokens</a></li>\n        <li><a href="https://www.pandadoc.com/faqs/" target="_blank">Help</a></li>\n        <li><a href="{{\'/logout\' | appBaseUrl }}" target="_blank">Logout</a></li>\n    </ul>\n</div>\n'),
    e.put("/views/extension/tokens-extension.html", '<div class="scrollable h100" style="padding: 14px">\n\n    <div class="radius-3 m--bottom" style="background: #E7F5EA;padding: 14px;">\n        <p ng-show="tokens.length > 0">Autofill CRM data into PandaDoc using the list of "Tokens" below. These values will be merged automatically into your PandaDoc document upon sending.</p>\n        <p ng-show="tokens.length === 0">There is no data on this page to be merged into PandaDoc. Please fill in the default fields or add custom ones to use them as tokens.</p>\n        <a href="https://www.pandadoc.com/faqs/tokens-can-use/" class="link-underline" target="_blank">Learn how to use tokens &raquo;</a>\n    </div>\n\n    <ul class="list--bordered list--bordered-top list--bordered-bottom">\n        <li ng-repeat="token in tokens" class="p--vert-xs">\n            <div class="m--vert-xs">\n                <span class="token" style="line-height:1;padding: 4px 7px;margin-bottom: 3px;word-wrap: break-word">[{{token.key}}]</span>\n            </div>\n            <div class="m--left-sm">{{token.value}}</div>\n        </li>\n    </ul>\n</div>\n'),
    e.put("/views/extension/top-panel-extension.html", '<div class="panel panel--top">\n    <div class="page-header" style="padding: 0 14px;">\n        <div class="page-header__p1">\n            <div class="page-header__el t--larger t--nowrap">\n                <i class="icon icon--big icon--logo-pd" style="float: left;margin: 4px 3px 0 0" ng-show="state === \'home\'"></i>\n                <a ng-click="openDocumentList()" class="doctools__back-btn" ng-show="state === \'settings\'">\n                    <i class="icon icon--xlg icon--arrow-back"></i>\n                </a>\n                <a ng-click="openSettings()" class="doctools__back-btn" ng-show="state === \'settings.tokens\'">\n                    <i class="icon icon--xlg icon--arrow-back"></i>\n                </a>\n                <span class="inline-block t--nowrap push-self" style="line-height: 28px">{{ title }}</span>\n            </div>\n        </div>\n        <div class="page-header__p2">\n            <div class="page-header__el page-header__el--pad-top">\n                <button class="btn btn--no-ui simple-hover" ng-click="openSettings()" ng-show="state === \'home\'" style="margin-top: 1px">\n                    <i class="icon icon--big icon--settings color--brand"></i>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/inbox/empty.html", '<div class="page-stub ">\n    <i class="page-stub__icon icon icon--circle-inbox color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-sm t--xlarge t--bold">Here you\'ll find the documents <br>sent to you by others</h1>\n    <p class="m--auto t--larger m--bottom" style="max-width: 420px">Send interactive PandaDocs to your contractors and prospects to close more deals.</p>\n    <button class="btn btn-primary btn-lg" ng-click="addDocument()">Send a new document</button>\n</div>\n'),
    e.put("/views/inbox/inbox.html", '<div class="scrollable h100" ng-class="{\'bg-white\': isEmpty || isNotFound}"\n     scroll-processor scroll-processor-on-scroll="getDocuments()" scroll-processor-container=".scrollable-marker">\n    <div class="inbox-list scrollable-marker">\n\n        <div ng-repeat="period in periods" ng-if="period.documents.length > 0">\n\n            <h2 class="inbox-list__hd color--dimmed" ng-if="visibleSectionsCount() > 1">{{period.name | translate}}</h2>\n\n            <table class="table-data inbox-list__tbl">\n                <col width="30%"/>\n                <col width="10%"/>\n                <col width="50%"/>\n                <col width="20%"/>\n                <tr ng-repeat="doc in period.documents" class="row--clickable anim--expand" tabindex="0">\n                    <td>\n                        <a class=" stretcher stretcher--lg media contact-card p--left" href="#/inbox/{{doc.id}}">\n                            <div hg-if=\'doc.date_created\'>\n                                <avatar size="28" user="doc.owner" class="pull-left"></avatar>\n                                <div class="media-body">\n                                    {{doc.owner | fullName}}\n                                    <div class="t--small-dimmed">{{doc.date_received | moment }}</div>\n                                </div>\n                            </div>\n                        </a>\n                    </td>\n\n                    <td class="a--left">\n                        <a class="stretcher stretcher--lg t--medium" href="#/inbox/{{doc.id}}" tabindex="0">\n                            <recipient-action document="doc"></recipient-action>\n                        </a>\n                    </td>\n\n                    <td>\n                        <a class="stretcher stretcher--lg t--medium" href="#/inbox/{{doc.id}}">\n                            {{doc.name}}\n                        </a>\n                    </td>\n\n                    <td class="p--left-lg t--small-dimmed a--middle" ng-if="doc.removing">\n                        Removing...\n                    </td>\n\n                    <td class="p--left-lg t--small-dimmed a--middle" ng-if="doc.moving">\n                        Moving...\n                    </td>\n\n                    <td class="a--right p--right-sm a--middle" ng-if="!doc.removing && !doc.moving">\n                        <span class="inbox__item-action">\n                            <button ng-if="doc.folder" class="btn btn--toolbar" ng-click="removeDocument(doc)"\n                                tooltip="Delete document">\n                                <i class="icon icon--lg push-next icon--delete"></i>\n                            </button>\n                        </span>\n                        <div class="inbox__item-action" tooltip="Move to folder">\n                            <move-to-folder ng-if="doc.folder" always-enabled="true" service="foldersService" selected="doc"></move-to-folder>\n                        </div>\n\n                        <span class="inbox__item-action">\n                            <button class="btn btn--toolbar" ng-click="downloadDocument(doc)"\n                                    tooltip="Download document">\n                                <i class="icon icon--lg push-next icon--download"></i>\n                            </button>\n                        </span>\n\n                    </td>\n                </tr>\n\n                <tr ng-show="loading && $last">\n                    <td colspan="4" style="padding-left:27px"><i class="icon spinner"></i></td>\n                </tr>\n\n            </table>\n\n        </div>\n\n        <div ng-show="!loading && visibleSectionsCount() === 0" class="p--lg">\n            <ng-include ng-if="isEmpty" src="\'/views/inbox/empty.html\'"></ng-include>\n            <ng-include ng-if="isNotFound" src="\'/views/inbox/not-found.html\'"></ng-include>\n        </div>\n\n    </div>\n\n</div>\n'),
    e.put("/views/inbox/not-found.html", '<div class="page-stub">\n    <i class="icon icon--huge icon--box-empty m--bottom-lg color--icon-dimmed"></i>\n    <h1 class="m--bottom-lg">No documents found</h1>\n    <button ng-click="addDocument()" class="btn btn-default t--caps t--bold">Upload a document</button>\n</div>\n'),
    e.put("/views/layout/base.html", '<div class="h100 page" ng-class="{\n        \'adjust-for-panel-left\':$state.current.data.hasLeftPanel,\n        \'adjust-for-panel-left-expanded\': leftPanelExpanded\n        }">\n\n    <div ng-if="$state.current.data.hasLeftPanel" class="panel panel--left navpanel--dark">\n        <div class="navpanel--dark h100" ui-view="panel-left"></div>\n    </div>\n    <!--/.side-panel-->\n\n    <div class="h100 page__wrap">\n\n        <div ng-if="$state.current.data.hasTopPanel">\n            <div ui-view="panel-top"></div>\n        </div>\n\n\n        <persistent-notification ng-show="hasPersistentNotification"></persistent-notification>\n\n        <main class="min-height--window page-content" ng-class="{\n        \'adjust-for-panel-right\':$state.current.data.hasRightPanel,\n        \'adjust-for-header\':$state.current.data.hasTopPanel,\n        \'adjust-for-doctools\': $state.current.data.hasDocToolsPanel,\n        \'adjust-for-docstatus\': $state.current.data.hasDocStatusPanel,\n        \'adjust-for-persist-notif\': hasPersistentNotification\n        }" >\n            <div ui-view="" class="h100"></div>\n        </main>\n    </div>\n    <!--/.page-content-->\n    <!-- application alerts/messages -->\n    <global-notification></global-notification>\n</div>\n'),
    e.put("/views/layout/base.phone.html", '<div class="h100 page">\n    <div ui-view="panel-top"></div>\n\n    <div ui-view="" class="min-height--window page-content adjust-for-header pos--abs left-0 top-0 w100"></div>\n</div>\n'),
    e.put("/views/library/item-editor.html", '<document-pad loading-content="loadingContent" document-content-info="documentContentInfo" document-info="documentInfo"></document-pad>\n'),
    e.put("/views/library/item.html", '<div ui-view="panel-center" class="h100"></div>\n<div ng-if="$state.current.data.hasRightPanel"ui-view="panel-right"></div>\n'),
    e.put("/views/library/library-folders.html", '<folders-list service="libraryFoldersService" folder-type="\'library\'"></folders-list>\n'),
    e.put("/views/library/library-items.html", '<div class="h100">\n\n    <library-items-list get-items="getItems"\n        empty-list-template="/views/library/items/empty-list.html"\n        not-found-template="/views/library/items/not-found.html"\n     ></library-items-list>\n\n</div>\n'),
    e.put("/views/library/library.html", '<div class="scrollpane h100">\n\n    <!-- fodlers -->\n\n    <div class="subpanel ui--dark" ui-view="folders"></div>\n\n    <!-- items -->\n    <div class="h100 adjust-for-subpanel" ui-view="items"></div>\n\n</div>\n'),
    e.put("/views/library/not-found.html", '<div class="page-stub">\n    <i class="icon icon--huge icon--doc-404 color--icon-dimmed block"></i>\n\n    <h1>Content Template not found</h1>\n\n    <p class="color--dimmed block">\n        This Content Template may have been deleted or you don\'t have access to it\n    </p>\n</div>'),
    e.put("/views/library/tools-panel.html", '<doc-tools-list document-content-info="documentContentInfo" document-info="documentInfo"></doc-tools-list>'),
    e.put("/views/onboarding/layout-dark.html", '<div modal-transclude  class="modal onboarding onboarding--dark">\n</div>\n'),
    e.put("/views/onboarding/layout-light.html", '<div modal-transclude  class="modal onboarding onboarding--light">\n</div>\n'),
    e.put("/views/settings/base.html", '<div class="scrollpane">\n    <div class="subpanel ui--dark anim--slide-in-from-left">\n        <ul class="list list--bordered list--bordered-dark nav--settings">\n            <li allow="ADMIN">\n                <div class="p--top p--bottom-sm p--left t--small-dimmed t--bold t--caps" style="font-size: 11px">\n                    General\n                </div>\n            </li>\n            <li>\n                <a ng-class="{\'active\': activeRoute == \'settings.profile\'}" href="#/settings/profile/">\n                    <i class="icon icon--lg push-next icon--user"></i>\n                    Profile\n                </a>\n            </li>\n            <li allow="OWNER">\n                <a ng-class="{\'active\': activeRoute === \'settings.account.subscription\' || activeRoute === \'settings.account.subscription.checkout\' || activeRoute === \'settings.account.pay-as-you-go\'}" href="#/settings/account/">\n                    <i class="icon icon--lg push-next icon--balance"></i>\n                    Account\n                </a>\n            </li>\n\n            <li allow="OWNER">\n                <a ng-class="{\'active\': activeRoute == \'settings.workspaces\'}" ng-show="isMultipleWorkspacesAvailable" href="#/settings/workspaces/">\n                    <i class="icon icon--lg push-next icon--workspaces"></i>\n                    Workspaces\n                </a>\n            </li>\n\n            <li ng-if="isFreePlan">\n                <a ng-class="{\'active\': activeRoute == \'settings.rewards\'}" href="#/settings/rewards/">\n                    <i class="icon icon--lg push-next icon--rewards"></i>\n                    Get free docs\n                </a>\n            </li>\n\n\n            <li allow="ADMIN">\n                <div class="p--top p--bottom-sm p--left t--small-dimmed t--bold t--caps" style="font-size: 11px">\n                    Workspace Settings\n                </div>\n            </li>\n\n            <li allow="OWNER">\n                <a ng-class="{\'active\': activeRoute == \'settings.integrations\'}" href="#/settings/integrations/">\n                    <i class="icon icon--lg push-next icon--integrations"></i>\n                    Integrations\n                </a>\n            </li>\n\n            <li allow="ADMIN">\n                <a ng-class="{\'active\': activeRoute == \'settings.team\'}" href="#/settings/team/">\n                    <i class="icon icon--lg push-next icon--contacts-3"></i>\n                    Team\n                </a>\n            </li>\n\n            <li allow="OWNER" ng-show="isWorkspaceSettinsAvailable">\n                <a ng-class="{\'active\': activeRoute == \'settings.workspace\'}" href="#/settings/workspace/">\n                    <i class="icon icon--lg push-next icon--workspace-settings"></i>\n                    Workspace\n                </a>\n            </li>\n\n            <li allow="OWNER" ng-show="isBrandingAvailable" style="display: none;">\n                <a ng-class="{\'active\': activeRoute == \'settings.branding\'}" href="#/settings/branding/">\n                    <i class="icon icon--lg push-next icon--branding"></i>\n                    Branding\n                </a>\n            </li>\n\n        </ul>\n    </div>\n    <div ui-view="settings_content" class="scrollpane__bd adjust-for-subpanel anim--slide-in-from-left"></div>\n</div>\n\n'),
    e.put("/views/settings/coupons.html", '<div class="modal-content">\n    <div class="modal-header m--none">\n        Redeem coupon code\n        <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    </div>\n    <div class="modal-body p--lg" style="min-height:135px">\n        <label for="coupon" class="control-label color--text-default">Enter your coupon code:</label>\n        <form ng-disabled="loading" class="form-row m--bottom-sm" ng-class="{\'has-error\':coupon.status==\'error\'&&!loading}">\n            <div class="form-row__stretcher">\n                <input class="form-control" placeholder="Coupon code" ng-disabled="coupon.status==\'success\'"\n                       ng-model="coupon.code" name="coupon" id="coupon" required focus-me/>\n            </div>\n            <div class="form-row__fixed">\n                <button class="btn btn-default btn--stretch-narrow t--bold"\n                        ng-click="sendCouponCode()" ng-disabled="loading || !coupon.code || coupon.status==\'success\'">\n                    Redeem <spinner visible="loading" class="m--left-sm"></spinner>\n                </button>\n            </div>\n        </form>\n        <div class="color--red anim--expand" ng-show="coupon.status==\'error\'">{{ coupon.text }}</div>\n        <div class="color--success anim--expand" ng-show="coupon.status==\'success\'">{{ coupon.text }}</div>\n        <style>.modal-dialog {max-width: 380px;}</style>\n    </div>\n</div>'),
    e.put("/views/settings/notifications.html", '<div class="p--lg p--top-none anim--slide-in-from-left">\n\n    <h1 class="section-header">Notifications</h1>\n\n    <div class="hr block"></div>\n\n    <span ng-if="loading"><i class="icon spinner"></i></span>\n\n    <form ng-show="!loading" name="email-notifictions-settings-form" novalidate class="block">\n        <h2 class="section-header t--larger">Send me an email when: </h2>\n\n        <ul class="m--bottom-lg">\n\n            <li class="checkbox">\n                <label>\n                    {{ \'settings.email.all\' | translate}}\n                    <input type="checkbox" ng-model="notification.all" indeterminate="indeterminate">\n                </label>\n            </li>\n\n            <li>\n                <ul class="p--left">\n\n                    <li class="checkbox">\n                        <label>\n                            {{ \'settings.email.document_opened\' | translate}}\n                            <input type="checkbox" ng-model="notification.document_opened.state">\n                        </label>\n                    </li>\n\n                    <li class="checkbox">\n                        <label>\n                            {{ \'settings.email.recipient_completed\' | translate}}\n                            <input type="checkbox" ng-model="notification.recipient_completed.state">\n                        </label>\n                    </li>\n\n                    <li class="checkbox">\n                        <label>\n                            {{ \'settings.email.document_completed\' | translate}}\n                            <input type="checkbox" ng-model="notification.document_completed.state">\n                        </label>\n                    </li>\n\n                    <li class="checkbox">\n                        <label>\n                            {{ \'settings.email.comment_added\' | translate}}\n                            <input type="checkbox" ng-model="notification.comment_added.state">\n                        </label>\n                    </li>\n\n                </ul>\n            </li>\n        </ul>\n\n    </form>\n\n</div>\n'),
    e.put("/views/settings/profile.html", '<div class="p--lg p--top anim--slide-in-from-left">\n\n    <form name="updateProfileForm" novalidate class="block">\n        <h1 class="section-header">Update profile</h1>\n\n        <div class="hr block"></div>\n\n        <div class="block--text clearfix settings-container">\n\n            <avatar user="profile"></avatar>\n\n            <button class="btn btn--transparent pull--padding-left m--top-sm" ng-click="updateAvatar()">\n                <i class="icon icon--edited icon--small push-next"></i>\n                Change avatar\n            </button>\n\n        </div>\n\n        <div class="block--text clearfix settings-container">\n            <div class="form-group w50 pull-left">\n                <label for="first_name" class="control-label">First name</label>\n\n                <div class="p--horis-lg p--left-none">\n                    <input class="form-control" ng-model="profile.first_name" name="first_name" id="first_name"/>\n                </div>\n            </div>\n            <div class="form-group w50 pull-left">\n                <label for="last_name" class="control-label">Last name</label>\n                <input class="form-control" ng-model="profile.last_name" name="last_name" id="last_name"/>\n            </div>\n        </div>\n\n        <div class="block--text clearfix settings-container">\n            <div class="form-group w50 pull-left">\n                <label for="email" class="control-label">Email</label>\n\n                <div class="p--horis-lg p--left-none">\n                    <input type="email" class="form-control" ng-model="profile.email" id="email"\n                           name="email" required ng-disabled="true"/>\n                </div>\n            </div>\n            <div class="form-group w50 pull-left" style="padding-top:34px;">\n                <span ng-if="!profile.email_verified"><resend-verification-email></resend-verification-email></span>\n                <span ng-if="profile.email_verified" class="color--dimmed">{{\'profile.email_activated\' | translate}}</span>\n            </div>\n\n        </div>\n\n        <button class="btn btn-primary btn--stretch-narrow t--caps" ng-click="updateProfile()" ng-disabled="!profileHasChanged || !profile.first_name || !profile.last_name">\n            Save\n        </button>\n        <!--<button class="btn btn-primary " ng-click="resetChanges()"  ng-show="profileHasChanged">Cancel</button>-->\n    </form>\n\n    <button class="btn btn--transparent pull--padding-left" ng-click="showPasswordChangeForm()"\n            ng-show="!changePasswordFormVisible">\n        <i class="icon icon--lock icon--small push-next"></i>\n        Change password\n    </button>\n\n    <form class="" name="changePasswordForm" novalidate ng-show="changePasswordFormVisible">\n        <h1 class="section-header">Change password</h1>\n\n        <div class="hr block"></div>\n\n        <div class="block--text clearfix settings-container">\n            <div class="form-group w50 pull-left">\n                <label for="old_password" class="control-label">Current password</label>\n\n                <div class="p--horis-lg p--left-none">\n                    <input type="password" class="form-control" ng-model="passwordModel.old_password" id="old_password"\n                           name="old_password" required/>\n                </div>\n            </div>\n        </div>\n\n        <div class="block--text clearfix settings-container">\n            <div class="form-group w50 pull-left">\n                <label for="new_password" class="control-label">New password</label>\n\n                <div class="p--horis-lg p--left-none">\n                    <input type="password" class="form-control" ng-model="passwordModel.new_password" id="new_password"\n                           name="new_password" required/>\n                </div>\n            </div>\n            <div class="form-group w50 pull-left">\n                <label for="repeat_password" class="control-label">Repeat password</label>\n\n                <div class="">\n                    <input type="password" class="form-control" ng-model="passwordModel.repeat_password"\n                           id="repeat_password" name="repeat_password" required/>\n                </div>\n            </div>\n        </div>\n\n        <button class="btn btn-default" ng-click="hidePasswordChangeForm()">Cancel</button>\n        <button class="btn btn-primary pull-left m--right-sm" ng-click="updatePassword()"\n                ng-disabled="!isPasswordChangeFormValid">\n            Save new password\n        </button>\n    </form>\n\n    <div class="hr block m--top"></div>\n\n    <profile-signature profile="profile"></profile-signature>\n\n</div>\n\n<ng-include src="\'/views/settings/notifications.html\'" ng-controller="NotificationSettingsController"></ng-include>\n'),
    e.put("/views/templates/create.html", '\n<div class="centerer">\n    <div class="centerer__bd">\n        <form class="box p--vert">\n            <div class="box__content w100">\n                <h1 class="section-header t--large p a--center">Add user roles you\'re using <br> in the template</h1>\n                <div class="block">\n                    <h3 class="t--larger m--none"><label for="name" class="color--text-default">Template name</label></h3>\n                    <input type="text" class="form-control" id="name" placeholder="e.g. Final Offer" ng-model="template.name">\n                </div>\n\n                <div class="hr block"></div>\n\n                <h3 class="t--larger m--none"><label for="contact">Roles</label></h3>\n\n                <role-list document-info="documentInfo" ng-if="documentInfo"></role-list>\n\n                <div class="hr" ng-if="documentInfo.document.roles.length > 0"></div>\n\n                <role-form document-info="documentInfo" ng-if="documentInfo"></role-form>\n\n                <br/>\n\n                <div class="a--center">\n                    <button type="button" class="btn btn-primary btn-lg t--larger t--bold p--horis" ng-click="next()">Next</button>\n                </div>\n\n            </div>\n        </form>\n    </div>\n</div>\n'),
    e.put("/views/templates/creation-way.html", '<div class="centerer">\n    <div class="centerer__bd" ng-if="available">\n\n        <div class="box p--none a--left" style="max-width:540px; min-width: 540px">\n\n            <div class="box__content--stretched new-doc-dlg">\n\n                <div class="grid a--center">\n                    <div class="grid__item w50 new-doc-dlg__part">\n                        <h3 class="t--primary m--bottom-sm">Upload a template</h3>\n                        <p class="t--small-dimmed m--bottom-sm">Use PDF or Word doc</p>\n\n                        <a ng-click="upload()" class="btn btn-primary"> Upload </a>\n                    </div>\n                    <div class="grid__item w50 new-doc-dlg__part">\n                        <h3 class="t--primary m--bottom-sm">Create a template</h3>\n                        <p class="t--small-dimmed m--bottom-sm">Start from scratch</p>\n\n                        <a ng-click="blank()" class="btn btn-primary" ng-disabled="creating">\n                            <spinner visible="creating"></spinner>\n                            Create\n                        </a>\n                    </div>\n                </div>\n                <div class="hr m--vert"></div>\n            </div>\n        </div>\n    </div>\n</div>'),
    e.put("/views/templates/details-embed.html", '<div ui-view="panel-center" class="h100"></div>\n'),
    e.put("/views/templates/details.html", '<div ui-view="panel-center" class="h100"></div>\n<div ng-if="$state.current.data.hasRightPanel" ui-view="panel-right"></div>\n'),
    e.put("/views/templates/embed-template.html", '<embed-document document-content-info="documentContentInfo" injected="injected" document-info="documentInfo"></embed-document>'),
    e.put("/views/templates/folders.html", '<folders-list service="foldersService" folder-type="\'templates\'"></folders-list>\n'),
    e.put("/views/templates/switch-workspace.html", '<div class="page-stub">\n\n    <spinner visible="!document || !workspace"></spinner>\n\n    <i ng-show="document && workspace" class="page-stub__icon icon icon--circle-templates color--green m--bottom-lg"></i>\n    <h1 ng-show="document && workspace">Template "{{document.name}}" is located <br/>in "{{workspace.name}}" workspace</h1>\n\n    <button ng-show="document && workspace" ng-click="switch()" ng-disabled="switching" class="btn btn-primary btn-lg t--bold">\n        <spinner visible="switching"></spinner>\n        Switch to "{{workspace.name}}"\n    </button>\n</div>\n'),
    e.put("/views/templates/template.html", '<document-pad loading-content="loadingContent" document-content-info="documentContentInfo" document-info="documentInfo"></document-pad>\n'),
    e.put("/views/templates/templates.html", '<div class="h100">\n\n    <templates-list get-documents="getDocuments"\n        empty-list-template="/views/templates/list/empty-list.html"\n        not-found-template="/views/templates/list/not-found.html"\n    ></templates-list>\n</div>\n'),
    e.put("/views/templates/top-level.html", '<div class="scrollpane h100">\n\n    <!-- sections -->\n\n    <div class="subpanel ui--dark" ui-view="folders"></div>\n\n    <!-- content -->\n    <div class="h100 adjust-for-subpanel" ui-view="templates"></div>\n\n</div>\n'),
    e.put("/views/widgets/inline-widget-preview-base.html", '<div\n        id="widget-{{widgetInfo.widget.id}}"\n        class="widget widget--type-{{widgetInfo.widget.type}} block-droppable "\n        jui-draggable\n        event-start="dragStart"\n        event-drag="drag"\n        event-stop="dragStop"\n        opt-helper="\'clone\'"\n        opt-scroll="false"\n        opt-appendTo="\'.document__zoom-pad\'"\n        opt-disabled="!draggable"\n        opt-handle="\'.widget__editable-overlay, .widget__ui\'"\n        uref="{{widgetInfo.widget.uref}}"\n        ng-class="{\n        \'widget--static\':     widgetInfo.static,\n        \'widget--draggable\':  draggable,\n        \'widget--disabled\':   !draggable,\n        \'widget--editable\':   editable,\n        \'widget--completed\':  hasValue,\n        \'widget--required\':  widgetInfo.widget.required,\n        \'ui-draggable-dragging\': widgetInfo.isMoving\n        }"\n\n        >\n\n    <div class="widget__resizer"\n         event-start="resizeStarted"\n         event-resize="resizeResize"\n         event-stop="resizeCompleted"\n         opt-disabled="!resizable"\n         opt-autoHide="!resizable"\n         opt-aspectRatio="widgetInfo.aspectRatio"\n         jui-resizable>\n\n        <div class="widget__ui" ng-include="widgetPreviewTemplate"></div>\n        <div class="widget__label color--user-{{widgetInfo.actorColor}} bg--user-{{widgetInfo.actorColor}}"\n             ng-show="widgetInfo.actorInitials.length > 0 && hasLabel"><!-- no spaces\n        --><span ng-repeat="initial in widgetInfo.actorInitials"><!-- no spaces\n            --><span class="widget__label-txt">{{initial.head}}</span><!--no spaces\n            --><span class="widget__label-txt widget__full-name">{{initial.tail}}&nbsp;</span><!--no spaces\n        --></span><!-- no spaces\n     --></div>\n\n        <div class="widget__label color--user-{{widgetInfo.roleColor}} bg--user-{{widgetInfo.roleColor}}"\n             ng-show="widgetInfo.roleInitials.length > 0 && hasLabel"><!-- no spaces\n            --><span ng-repeat="initial in widgetInfo.roleInitials"><!-- no spaces\n                --><span class="widget__label-txt">{{initial.head}}</span><!-- no spaces\n                --><span class="widget__label-txt widget__full-name">{{initial.tail}}&nbsp;</span><!-- no spaces\n            --></span><!-- no spaces\n     --></div>\n    </div>\n    <div class="widget__editable-overlay" ng-show="!editable"></div>\n</div>\n'),
    e.put("/views/widgets/widget-handle-base.html", '<div class="widget-handle btn btn--sq-icon block-droppable"\n     ng-click="addWidget()"\n\n     jui-draggable\n     opt-containment="\'document\'"\n     opt-appendTo="\'body\'"\n     opt-iframeFix="true"\n     opt-helper="\'clone\'"\n     event-start="dragStart"\n     event-stop="dragStop"\n     data-widget-type="{{widget.type}}">\n    <span class="btn--sq-icon__bd">\n            <i class="icon icon--big {{widget.icon}}"></i>\n        <span class="btn--sq-icon__text">{{\'widget.type.\' + widget.type | translate}}</span>\n    </span>\n\n</div>\n'),
    e.put("/views/widgets/widget-preview-base.html", '<div\n        id="widget-{{widgetInfo.widget.id}}"\n        class="widget widget--type-{{widgetInfo.widget.type}}"\n        jui-draggable\n        event-start="dragStart"\n        event-drag="drag"\n        event-stop="dragStop"\n        opt-helper="\'clone\'"\n        opt-scroll="false"\n        opt-appendTo="\'.document__zoom-pad\'"\n        opt-disabled="!draggable"\n        opt-handle="\'.widget__editable-overlay, .widget__ui\'"\n        uref="{{widgetInfo.widget.uref}}"\n        ng-class="{\n        \'widget--static\':     widgetInfo.static,\n        \'widget--draggable\':  draggable,\n        \'widget--disabled\':   !draggable,\n        \'widget--editable\':   editable,\n        \'widget--completed\':  hasValue,\n        \'widget--required\':  widgetInfo.widget.required,\n        \'ui-draggable-dragging\': widgetInfo.isMoving\n        }">\n\n    <div class="widget__resizer"\n         event-start="resizeStarted"\n         event-resize="resizeResize"\n         event-stop="resizeCompleted"\n         opt-disabled="!resizable"\n         opt-autoHide="!resizable"\n         opt-aspectRatio="widgetInfo.aspectRatio"\n         opt-minHeight="minHeight"\n         opt-minWidth="minWidth"\n         jui-resizable>\n\n        <div class="widget__ui" ng-include="widgetPreviewTemplate"></div>\n        <div class="widget__label color--user-{{widgetInfo.actorColor}} bg--user-{{widgetInfo.actorColor}}"\n             ng-if="widgetInfo.actorInitials.length > 0 && hasLabel"><!-- no spaces\n        --><span ng-repeat="initial in widgetInfo.actorInitials"><!--\n            --><span class="widget__label-txt">{{initial.head}}</span><!--\n            --><span class="widget__label-txt widget__full-name">{{initial.tail}}&nbsp;</span><!--\n        --></span><!--\n     --></div>\n\n        <div class="widget__label color--user-{{widgetInfo.roleColor}} bg--user-{{widgetInfo.roleColor}}"\n             ng-if="widgetInfo.roleInitials.length > 0 && hasLabel"><!--\n            --><span ng-repeat="initial in widgetInfo.roleInitials"><!--\n                --><span class="widget__label-txt">{{initial.head}}</span><!--\n                --><span class="widget__label-txt widget__full-name">{{initial.tail}}&nbsp;</span><!--\n            --></span><!--\n     --></div>\n    </div>\n    <div class="widget__editable-overlay" ng-show="!editable"></div>\n</div>\n'),
    e.put("/views/widgets/widget-settings-base.html", '<div>\n<!--    <div ng-if="widgetInfo.editable">\n        <button class="btn--no-ui btn--close" title="Close panel" ng-click="close()"><i class="icon icon--close"></i></button>\n    </div>-->\n    <ng-include src="widgetSettingsTemplate"></ng-include>\n</div>\n'),
    e.put("/views/blocks/dialogs/convert-block-to-cli-dialog.html", '<div class="modal-header m--none">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h4 class="modal-title">Add to content library</h4>\n</div>\n<div class="modal-body p t--medium" style="min-height: 145px">\n    <!-- step 1: choose CLI creation option - new pr existing  -->\n    <form class="form-row" ng-if="options.step === STEPS.CHOOSE_OPTION">\n        <div class="color--dimmed">Add this block to:</div>\n        <ul class="m--bottom-sm">\n            <li class="radio">\n                <label>\n                    <input type="radio" ng-model="options.createNewCLI" ng-value="true" /> a new library item\n                </label>\n            </li>\n            <li class="radio">\n                <label>\n                    <input type="radio" ng-model="options.createNewCLI" ng-value="false" /> an existing library item\n                </label>\n            </li>\n        </ul>\n    </form>\n\n    <!-- step 1-1: type new CLI name  -->\n    <form class="form-row" ng-if="options.step === STEPS.ENTER_NAME" ng-submit="createCLI()">\n        <label class="control-label">New library item name</label>\n        <input type="text" class="form-control" ng-model="options.name" focus-me required/>\n    </form>\n\n    <!-- step 1-2: selecting CLI  -->\n\n    <div ng-if="options.step === STEPS.SELECT_ITEM">\n\n        <form class="w100 search-form m--bottom-sm">\n            <input ng-model="CLIListMixin.filterModel.filter" class="w100 form-control" type="text" placeholder="Search"/>\n        </form>\n\n        <ul ng-show="CLIListMixin.parentFolder && CLIListMixin.parents.length > 1 && !CLIListMixin.filtering">\n            <li>\n                <button class="btn btn--transparent ellipsis w100 a--left p--left-sm btn--no-outline" ng-click="CLIListMixin.up()">\n                    <i class="icon icon--lg icon--up push-next"></i>\n                    {{CLIListMixin.parentFolder.name}}\n                </button>\n            </li>\n        </ul>\n        <div class="scrollable" style="max-height: 45vh"\n             scroll-processor scroll-processor-on-scroll="CLIListMixin.loadLibraryItems()">\n\n            <ul class="list list--bordered library-items">\n                <li ng-repeat="folder in CLIListMixin.folders track by $index" ng-if="!CLIListMixin.filtering">\n                    <a href="" ng-click="CLIListMixin.down(folder)">\n                        <i class="icon icon--folder push-next"></i>\n                        {{folder.name}}\n                    </a>\n                </li>\n                <li ng-repeat="item in CLIListMixin.items" ng-click="selectItem(item)">\n                    <a class="list__item--oneline p--left-sm p--right-none ellipsis " ng-class="{\'list__item-disabled\': !item.available}">\n                        <input ng-disabled="!item.available" type="checkbox" ng-model="selectionModel.checkboxes[item.id]" ng-click="$event.stopPropagation()" class="m--right-sm"/>\n                        <i class="icon icon--doc-detailed icon--lg push-next"></i>\n                        {{item.name}}\n                    </a>\n                </li>\n                <li class="m--left-sm">\n                    <spinner visible="CLIListMixin.loadingItems || CLIListMixin.loadingFolders"></spinner>\n                </li>\n            </ul>\n        </div>\n        <div class="color--dimmed m--left-sm">\n\n            <p class="m--top-sm" ng-if="CLIListMixin.filtering && !CLIListMixin.loadingItems && CLIListMixin.items.length === 0">\n                Nothing found</p>\n\n            <div class="m--top-sm" ng-if="!CLIListMixin.loadingItems && !CLIListMixin.filtering && CLIListMixin.items.length === 0">\n                <div ng-if="CLIListMixin.parentFolder.isRoot && CLIListMixin.folders.length === 0">\n                    <p>The Content Library is where you can save time by storing sections of your documents for re-use in other documents.</p>\n                    <p>You don\'t have any Content Templates yet. <a ui-sref="library({\'folderId\': CLIListMixin.parentFolder.id})">Go to Content Library</a></p>\n                </div>\n                <div ng-if="!CLIListMixin.parentFolder.isRoot">\n                    You don\'t have any Content Templates in this folder yet.\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n</div>\n<div class="modal-footer">\n    <button ng-click="$dismiss()" class="btn btn-default btn--stretch-narrow"\n            ng-if="options.step === STEPS.CHOOSE_OPTION">Cancel</button>\n    <button ng-click="back()" class="btn btn-default btn--stretch-narrow"\n            ng-if="options.step === STEPS.SELECT_ITEM || options.step === STEPS.ENTER_NAME">Back</button>\n\n    <button ng-if="options.step === STEPS.CHOOSE_OPTION" ng-click="next()"\n            class="btn btn-primary btn--stretch-narrow" focus-me>Next</button>\n    <button ng-if="options.step === STEPS.ENTER_NAME" ng-click="createCLI()"\n            class="btn btn-primary btn--stretch-narrow" ng-disabled="!options.name || creatingCLI">\n        <spinner visible="creatingCLI" class="push-next"></spinner>\n        Add\n    </button>\n    <button ng-if="options.step === STEPS.SELECT_ITEM" ng-disabled="!options.cli || addingToCLI" ng-click="addToCLI()"\n            class="btn btn-primary btn--stretch-narrow">\n        <spinner visible="addingToCLI" class="push-next"></spinner>\n        Add\n    </button>\n</div>\n\n<style>\n    .modal-dialog {\n        max-width: 500px;\n    }\n</style>\n'),
    e.put("/views/blocks/pricingtable/add-new-column-dialog.html", '<div class="modal-content">\n    <div class="modal-header m--none">\n        <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n        <div class="modal-title">Add new column</div>\n    </div>\n    <div class="modal-body p--lg">\n        <form class="form-row m--bottom-sm">\n            <div class="form-row__stretcher">\n                <span class="pull-right form-control-static" style="padding-left:10px;padding-right: 5px">or</span>\n                <div class="media-body">\n                    <select ng-model="selection.column" ng-options="column.name for column in columns" class="form-control">\n                        <option value="">Select column</option>\n                    </select>\n                </div>\n            </div>\n            <div class="form-row__fixed">\n                <button class="btn btn-primary btn--stretch-narrow" ng-click="$close()">\n                    Create empty\n                </button>\n            </div>\n        </form>\n    </div>\n    <style>.modal-dialog {max-width: 380px;}</style>\n</div>\n'),
    e.put("/views/blocks/pricingtable/pricingtable-footer.html", '<div class="pricing-footer clearfix">\n    <table class="pricing-footer__tbl">\n        <tr class="pricing-footer__qty" ng-if="block.data.settings.showTotalQty">\n            <td><input class="pricing-footer__label" type="text" ng-model="block.data.settings.labels.totalQty" ng-model-options="{debounce: 800}" placeholder="Quantity" ng-readonly="!isInEditMode()"/></td>\n            <td class="pricing-footer__number">{{block.data.result.qty | cy : \'no-symbol\' : block.data.settings.decimalPlaces : true}}</td>\n        </tr>\n        <tr class="pricing-footer__subtotal" ng-if="block.data.settings.showSubtotal">\n            <td><input class="pricing-footer__label" type="text" ng-model="block.data.settings.labels.subtotal" ng-model-options="{debounce: 800}" placeholder="Subtotal" ng-readonly="!isInEditMode()"/></td>\n            <td class="pricing-footer__number">{{block.data.result.subtotal | cy : block.data.options.currency : block.data.settings.decimalPlaces}}</td>\n        </tr>\n        <tr ng-if="block.data.options.discount.global && block.data.options.discount.value">\n            <td>\n                <input class="pricing-footer__label" type="text" ng-model="block.data.options.discount.name" ng-model-options="{debounce: 800}" placeholder="Discount" ng-readonly="!isInEditMode()"/>\n                <span ng-if="block.data.options.discount.type === \'percent\'">\n                    ({{block.data.options.discount.value | cy : \'no-symbol\' : block.data.settings.decimalPlaces}}%)\n                </span>\n            </td>\n            <td class="pricing-footer__number">\n                <span ng-if="block.data.result.discount >= 0">-</span>{{block.data.result.discount| cy : block.data.options.currency : block.data.settings.decimalPlaces}}\n            </td>\n        </tr>\n        <tr ng-if="block.data.options.tax_first.global && block.data.options.tax_first.value">\n            <td>\n                <input class="pricing-footer__label" type="text" ng-model="block.data.options.tax_first.name" ng-model-options="{debounce: 800}" placeholder="Tax 1" ng-readonly="!isInEditMode()"/>\n                <span ng-if="block.data.options.tax_first.type === \'percent\'">\n                    ({{block.data.options.tax_first.value | cy : \'no-symbol\' : block.data.settings.decimalPlaces}}%)\n                </span>\n            </td>\n            <td class="pricing-footer__number">\n                {{block.data.result.tax_first | cy : block.data.options.currency : block.data.settings.decimalPlaces}}\n            </td>\n        </tr>\n        <tr ng-if="block.data.options.tax_second.global && block.data.options.tax_second.value">\n            <td>\n                <input class="pricing-footer__label" type="text" ng-model="block.data.options.tax_second.name" ng-model-options="{debounce: 800}" placeholder="Tax 2" ng-readonly="!isInEditMode()"/>\n                <span ng-if="block.data.options.tax_second.type === \'percent\'">\n                    ({{block.data.options.tax_second.value | cy : \'no-symbol\' : block.data.settings.decimalPlaces}}%)\n                </span>\n            </td>\n            <td class="pricing-footer__number">\n                {{block.data.result.tax_second | cy : block.data.options.currency : block.data.settings.decimalPlaces}}\n            </td>\n        </tr>\n        <tr class="pricing-footer__total" ng-if="block.data.settings.showGrandTotal">\n            <td><input class="pricing-footer__label" type="text" ng-model="block.data.settings.labels.grandTotal" ng-model-options="{debounce: 800}" placeholder="Total" ng-readonly="!isInEditMode()"/></td>\n            <td class="pricing-footer__number">{{block.data.result.total | cy : block.data.options.currency : block.data.settings.decimalPlaces}}</td>\n        </tr>\n\n        <tr ng-if="tableOptions.showProfit">\n            <td class="p--bottom-sm"></td>\n            <td class="p--bottom-sm"></td>\n        </tr>\n        <tr ng-if="tableOptions.showProfit" tooltip="{{\'pricing_table.help.cost_margin_table_section\'|translate}}">\n            <td class="doc-table__uneditable a--top" style="background-position:right bottom">Cost</td>\n            <td class="t--normal pricing-footer__number doc-table__uneditable" style="background-position:left bottom">{{block.data.result.cost | cy : block.data.options.currency  : block.data.settings.decimalPlaces}}</td>\n        </tr>\n        <tr ng-if="tableOptions.showProfit" tooltip="{{\'pricing_table.help.cost_margin_table_section\'|translate}}">\n            <td class="doc-table__uneditable p--bottom-sm a--top" style="background-position:right top">Profit</td>\n            <td class="t--normal pricing-footer__number doc-table__uneditable p--bottom-sm" style="background-position:left top">{{block.data.result.profit | cy : block.data.options.currency : block.data.settings.decimalPlaces}}<br>{{block.data.result.margin | cy : \'no-symbol\' : block.data.settings.decimalPlaces}}%</td>\n        </tr>\n    </table>\n</div>\n'),
    e.put("/views/blocks/pricingtable/pricingtable.html", '<div>\n    <table-wrapper block="block" mode="mode" table-type="pricing" table-options="tableOptions"></table-wrapper>\n</div>\n'),
    e.put("/views/blocks/settings/block-section.html", '<div class="block-section" ng-class="{\'block-section--expanded\': sectionVisible, \'block-section__disabled\': sectionDisabled}">\n\n    <!-- Head -->\n    <div class="block-section__hd clearfix prevent-selection">\n\n        <!-- Arrow -->\n        <div class="block-section__toggle" ng-click="toggleSection()">\n            <i class="icon icon--arrow-expand"></i>\n        </div>\n\n        <!-- Settings -->\n        <div class="block-section__settings btn--no-outline" tabindex="0"\n             ng-if="blockSectionMenuItems" ng-click="toggleMenu()"\n             hide-on-click="{ spyOn: \'menuVisible\', hideWith: \'hideMenu\'}">\n            <i class="icon icon--settings-dots icon--lg center"></i>\n            <div class="popover bottom popover--arrow-sm anim--expand" ng-show="menuVisible">\n                <div class="arrow"></div>\n                <ul class="list list--bordered">\n                    <li ng-repeat="menuItem in blockSectionMenuItems">\n                        <a ng-click="applyAction(menuItem.action)" class="{{menuItem.className}}">{{menuItem.label}}</a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n        <!-- Title -->\n        <h3 class="block-section__name ellipsis" ng-click="toggleSection()">{{blockSectionTitle}}</h3>\n    </div>\n\n    <!-- Content -->\n    <div class="block-section__bd anim--fadein clearfix"\n          ng-class="{\'block-section__bd--open\': sectionVisible}">\n\n        <div ng-transclude></div>\n    </div>\n</div>\n'),
    e.put("/views/blocks/settings/block-settings-base.html", '<div>\n    <ng-include src="blockSettingsTemplate" ng-if="!block.is_locked"></ng-include>\n\n    <!-- Block locking: -->\n    <div class="m--top-sm">\n        <p ng-if="block.is_locked" class="p--sm bg--very-light">\n            Content of this block is locked from&nbsp;editing\n            <span ng-if="!isWorkspaceAdmin && !isWorkspaceOwner">Please contact your manager to release lock.</span>\n        </p>\n\n        <div class="m--bottom-sm" ng-if="(isWorkspaceAdmin || isWorkspaceOwner) && blockLockingAvailable">\n            <label class="chechbox">\n                <input type="checkbox" ng-model="block.is_locked">\n                Lock from editing\n            </label>\n        </div>\n\n        <!--<div class="doctool-subhead doctool-subhead--lined m--bottom-sm"><span>History</span></div>-->\n        <!--<ol>-->\n            <!--<li class="m--bottom-sm">Serge Barysiuk <span class="color--dimmed">locked this block from editing <span>15 minutes ago</span></span></li>-->\n            <!--<li class="m--bottom-sm">Serge Barysiuk <span class="color--dimmed">locked this block from editing <span>15 minutes ago</span></span></li>-->\n            <!--<li class="m--bottom-sm">Serge Barysiuk <span class="color--dimmed">locked this block from editing <span>15 minutes ago</span></span></li>-->\n        <!--</ol>-->\n    </div>\n</div>\n'),
    e.put("/views/blocks/settings/cover.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="coverPage" block-section-title="Cover Page" block-section-scope="this" block-section-menu-items="[{\n        \'label\': \'Remove block\',\n        \'action\': \'removeBlock\',\n        \'className\': \'color--red\'\n      }]">\n        <!-- background image -->\n        <div class="form-row form-row--vert-middle m--bottom">\n            <div class="form-row__stretcher">Background image</div>\n            <div class="form-row__fixed">\n                <image-picker-popover options="backgroundImages" image="block.data.background"></image-picker-popover>\n            </div>\n        </div>\n\n        <!-- logo layout -->\n        <div class="doctool-subhead m--bottom-sm">\n            <span>Logo image</span>\n        </div>\n        <label class="checkbox">\n            Show logo\n            <input type="checkbox" ng-model="block.data.logo.visible">\n        </label>\n\n        <div class="btn-sq-holder m--bottom">\n            <button class="btn btn--sq-icon" ng-class="{\'active\': block.data.logo.layout === layout}" ng-repeat="layout in logoLayouts" ng-click="changeLogoLayout(layout)">\n                <span class="btn--sq-icon__bd">\n                <i class="icon icon--xxbig icon--layout-logo_{{layout}} color--text-default"></i>\n                <span class="btn--sq-icon__text">{{\'cover.logo.layouts.\' + layout | translate}}</span>\n                </span>\n            </button>\n        </div>\n\n        <!-- text layout -->\n\n        <div class="doctool-subhead m--bottom-sm">\n            <span>Text layout</span>\n        </div>\n        <div class="btn-sq-holder m--bottom">\n            <button class="btn btn--sq-icon" ng-class="{\'active\': block.data.text.layout === layout}" ng-repeat="layout in textLayouts" ng-click="changeTextLayout(layout)">\n                <span class="btn--sq-icon__bd">\n                <i class="icon icon--xxbig icon--layout-{{layout}} color--text-default"></i>\n                <span class="btn--sq-icon__text">{{\'cover.text.layouts.\' + layout | translate}}</span>\n                </span>\n            </button>\n        </div>\n\n        <remove-block-button label="Remove Cover Page"></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/footer.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="pageFooter" block-section-title="Page Footer" block-section-scope="this" block-section-menu-items="[{\n        \'label\': \'Remove block\',\n        \'action\': \'removeBlock\',\n        \'className\': \'color--red\'\n      }]">\n        <block-layouts></block-layouts>\n\n        <ul class="m--bottom">\n            <li class="checkbox">\n                <label>\n                    Show page numbers in PDF\n                    <input type="checkbox" ng-model="block.data.options.show_page_number_in_pdf">\n                </label>\n            </li>\n        </ul>\n\n        <div class="hr block-text"></div>\n        <!--<save-as-template></save-as-template>-->\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/header.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="pageHeader" block-section-title="Page Header" block-section-scope="this" block-section-menu-items="[{\n        \'label\': \'Remove block\',\n        \'action\': \'removeBlock\',\n        \'className\': \'color--red\'\n      }]">\n        <block-layouts></block-layouts>\n\n        <ul class="m--bottom">\n            <li class="checkbox">\n                <label>\n                    Show page numbers in PDF\n                    <input type="checkbox" ng-model="block.data.options.show_page_number_in_pdf">\n                </label>\n            </li>\n        </ul>\n\n        <div class="hr block-text"></div>\n        <!--<save-as-template></save-as-template>-->\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/heading.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="heading" block-section-title="Heading" block-section-scope="this" block-section-menu-items="defaultMenuItems">\n        <block-layouts></block-layouts>\n        <!--<apply-block-settings-button></apply-block-settings-button>-->\n        <div class="hr block-text"></div>\n        <!--<save-as-template></save-as-template>-->\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/html.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="html" block-section-title="HTML" block-section-scope="this" block-section-menu-items="defaultMenuItems">\n        <div class="clear--both p--bottom">\n            <label class="control-label">\n                Height\n            </label>\n\n            <div class="grid grid--spacing-sm">\n                <div class="grid__item w100">\n                    <div class="form-row">\n                        <div class="form-row__stretcher">\n                            <input type="number" class="form-control" ng-model="block.data.options.height">\n                        </div>\n                        <div class="form-row__fixed form-control-static">px</div>\n                    </div>\n                </div>\n            </div>\n\n            <ul class="m--bottom">\n                <li class="checkbox">\n                    <label>\n                        Show in PDF\n                        <input type="checkbox" ng-model="block.show_in_pdf">\n                    </label>\n                </li>\n            </ul>\n\n        </div>\n\n        <button class="btn btn-block btn-primary block" ng-click="editHTML()">\n            Edit HTML\n        </button>\n\n        <div class="hr block-text"></div>\n        <!--<save-as-template></save-as-template>-->\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/image.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="image" block-section-title="Image" block-section-scope="this" block-section-menu-items="defaultMenuItems">\n        <block-layouts></block-layouts>\n        <!--<apply-block-settings-button></apply-block-settings-button>-->\n        <div class="hr block-text"></div>\n        <!--<save-as-template></save-as-template>-->\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/pagebreak.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="pageBreak" block-section-title="Page break">\n        <block-layouts></block-layouts>\n        <!--<apply-block-settings-button></apply-block-settings-button>-->\n        <div class="hr block-text"></div>\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/pdf.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="pdf" block-section-title="Attachment" block-section-scope="this" block-section-menu-items="defaultMenuItems">\n\n\n        <p class="p--sm bg--very-light t--small m--bottom-sm" >\n            Attachment block allows you to add another document to your existing templates or documents.\n        </p>\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/pricingtable.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="table" block-section-title="Pricing Table" block-section-scope="this" block-section-menu-items="defaultMenuItems">\n\n        <div class="t--small-dimmed m--bottom-sm">Currency</div>\n        <select ng-model="block.data.options.currency" ng-options="currency.code as currency.display_name group by currency.group for (code, currency) in currencies" class="form-control m--bottom-lg"></select>\n\n        <div class="t--small-dimmed m--bottom-sm">Decimal places <help-tooltip message="pricing_table.help.decimals"></help-tooltip></div>\n\n        <div class="clear-both m--bottom">\n            <input type="number" ng-model="block.data.settings.decimalPlaces" class="form-control" style="width:108px;" min="0" max="2" ng-blur="checkDecimalPlaces()"/>\n        </div>\n\n\n        <!-- taxes -->\n        <div class="doctool-subhead m--bottom-sm">\n            <span>Taxes</span>\n        </div>\n\n        <tax-setting ng-if="block.data.options.tax_first" class="clear-both m--bottom-sm" is-valid="tax_first_valid" tax="block.data.options.tax_first" removable="!block.data.options.tax_second" remove-tax="removeFirstTax"></tax-setting>\n\n        <tax-setting ng-if="block.data.options.tax_second" class="m--top clear-both" is-valid="tax_second_valid" tax="block.data.options.tax_second" removable="true" remove-tax="removeSecondTax"></tax-setting>\n\n        <button class="btn btn--smaller color--text-default btn--transparent pull--padding-left t--smaller" ng-click="addTax()" ng-if="!block.data.options.tax_first || !block.data.options.tax_second">\n            <span class="icon icon--plus-circled push-next"></span> Add tax\n        </button>\n\n        <!-- discounts -->\n\n        <div class="doctool-subhead m--bottom-sm m--top"><span>Discounts</span></div>\n        <div ng-if="block.data.options.discount" class="clear-both m--top">\n\n            <ul class="m--bottom-sm">\n                <li class="radio">\n                    <label>\n                        <input type="radio" ng-model="block.data.options.discount.global" ng-value="true" /> Total discount\n                    </label>\n                </li>\n                <li class="radio">\n                    <label>\n                        <input type="radio" ng-model="block.data.options.discount.global" ng-value="false" /> Line item discount\n                    </label>\n                </li>\n            </ul>\n\n            <p class="t--small-dimmed color--red" ng-if="block.data.options.discount.global && !discount_valid">\n                No more than 15 digits in total (13 digits in integer part and 2 digits in fraction part)\n            </p>\n\n            <div class="form-row m--bottom-sm" ng-if="block.data.options.discount.global">\n                <div class="form-row__stretcher p--right-sm">\n                    <input type="number" class="form-control" ng-class="{\'border--1px border--red\' : !discount_valid}" ng-model="block.data.options.discount.value" placeholder="Discount" />\n                </div>\n                <div class="form-row__fixed">\n                    <number-type-selector style="width:64px" number-type-model="block.data.options.discount.type" options="discountTypeOptions"></number-type-selector>\n                </div>\n            </div>\n\n            <button class="m--bottom color--red btn btn--transparent btn--smaller t--smaller pull-right pull--padding-right" ng-click="removeDiscount()">\n                Remove discount\n            </button>\n        </div>\n\n        <div class="clear-both">\n\n            <button ng-if="!block.data.options.discount" class="m--bottom color--text-default btn btn--smaller btn--transparent pull--padding-left t--smaller" ng-click="addDiscount()">\n                <span class="icon icon--plus-circled push-next"></span> Add discount\n            </button>\n\n        </div>\n\n        <!-- table headers and borders -->\n        <table-headers class="clear-both"></table-headers>\n        <table-borders></table-borders>\n\n        <!-- totals -->\n        <div class="doctool-subhead m--bottom-sm"><span>Totals</span></div>\n        <ul class="m--bottom">\n            <li class="checkbox">\n                <label>\n                    Show subtotal\n                    <input type="checkbox" ng-model="block.data.settings.showSubtotal">\n                </label>\n            </li>\n            <li class="checkbox">\n                <label>\n                    Show grand total\n                    <input type="checkbox" ng-model="block.data.settings.showGrandTotal">\n                </label>\n            </li>\n            <li class="checkbox">\n                <label>\n                    Show total quantity\n                    <input type="checkbox" ng-model="block.data.settings.showTotalQty">\n                </label>\n            </li>\n        </ul>\n\n        <!--<apply-block-settings-button></apply-block-settings-button>-->\n        <div class="hr block-text" ng-if="profitAndMarginAvailable"></div>\n        <!--<save-as-template></save-as-template>-->\n\n        <!-- table profit and margin -->\n        <div class="m--bottom tooltip-hook-2" ng-if="profitAndMarginAvailable">\n            <label class="checkbox">\n                Show Profit and Margin\n                <style>\n                    .tooltip-hook-2 .tooltip {\n                        margin-top: 0px !important;\n                        margin-left: 5px !important;\n                    }\n                </style>\n                <help-tooltip message="pricing_table.help.show_cost_margin"></help-tooltip>\n                <input type="checkbox" ng-model="block.data.settings.showProfit">\n            </label>\n        </div>\n\n        <!-- include table in document total -->\n        <!-- <div class="hr block-text"></div> -->\n\n        <!--         <ul class="m--bottom">\n            <li class="checkbox">\n                <label>\n                    <input type="checkbox" ng-model="block.pricingtable.include_in_document_total"> Include in total\n                    <help-tooltip message="pricing_table.help.include_in_document_total"></help-tooltip>\n                </label>\n            </li>\n        </ul>\n -->\n\n        <div class="hr block-text" ng-if="hasCrmIntegration"></div>\n\n        <!-- crm integration -->\n        <ul class="m--bottom" ng-if="hasCrmIntegration">\n            <li class="checkbox tooltip-fix-hook">\n                <label>\n                    <input type="checkbox" ng-model="block.data.settings.salesforce.inject"> Automatically add products to this table\n                    <help-tooltip message="integration.salesforce.copy_products_to_pricing_table"></help-tooltip>\n                </label>\n                <style>\n                .tooltip-fix-hook .tooltip {\n                    width: 150px\n                }\n                </style>\n            </li>\n        </ul>\n\n        <!-- block public id and tokens -->\n\n        <div ng-if="isTemplates">\n\n            <div class="doctool-subhead m--bottom-sm"><span>Tokens</span></div>\n            <ul class="token-list m--bottom" tooltip="Click a token to copy" ng-if="predefinedTokens.length">\n                <li class="token-list__item" ng-repeat="token in predefinedTokens track by $index">\n                    <span class="token" copy-button copy-button-silent data-clipboard-text="{{prefix}}{{token.name}}{{postfix}}">\n                    {{prefix}}{{token.name}}{{postfix}}\n                </span>\n                </li>\n            </ul>\n\n            <p class="t--small-dimmed" ng-if="predefinedTokens.length">\n                You can use these predefined tokens in a document and they will automatically show current value from this block.\n            </p>\n\n        </div>\n\n\n\n        <!-- remove button -->\n        <button class="btn btn--transparent pull-right pull--padding-right color--red m--bottom" ng-click="removeBlock()" type="button">\n            <i class="icon icon--small icon--trash push-next"></i> Remove table\n        </button>\n    </block-section>\n\n    <!-- Row section -->\n\n    <block-section block-section-id="row" block-section-title="Row" block-section-scope="this">\n        <ul class="m--bottom" ng-if="tableRow">\n            <li class="checkbox">\n                <label>\n                    Optional\n                    <input type="checkbox" ng-model="tableRow.options.optional">\n                </label>\n            </li>\n\n            <li class="checkbox">\n                <label>\n                    Qty editable\n                    <input type="checkbox" ng-model="tableRow.options.qty_editable">\n                </label>\n            </li>\n        </ul>\n\n        <div class="form-row m--bottom-sm" ng-if="tableRow && profitAndMarginAvailable">\n            <div class="form-row__stretcher">\n                <label>Item Cost\n                    <help-tooltip message="pricing_table.help.item_cost"></help-tooltip>\n                </label>\n                <p class="t--small-dimmed color--red" ng-if="tableRow.data.cost && !validCost">\n                    No more than 15 digits in total (13 digits in integer part and 2 digits in fraction part)\n                </p>\n                <div class="clearfix">\n                    <div class="w30 pull-left p--right-sm">\n                        <input class="form-control" type="text" ng-model="block.data.options.currency" readonly/>\n                    </div>\n                    <div class="w70 pull-left">\n                        <input class="form-control" type="number" ng-model="tableRow.data.cost" name="cost" ng-class="{\'border--1px border--red\' : !validCost}" />\n                    </div>\n                </div>\n            </div>\n        </div>\n        <remove-row-button></remove-row-button>\n\n    </block-section>\n\n</div>\n'),
    e.put("/views/blocks/settings/table.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="table" block-section-title="Table" block-section-scope="this" block-section-menu-items="defaultMenuItems">\n        <table-headers class="clear--both"></table-headers>\n        <table-borders></table-borders>\n        <div class="hr block-text m--top"></div>\n        <remove-block-button></remove-block-button>\n    </block-section>\n    <block-section block-section-id="row" block-section-title="Row" block-section-scope="this">\n        <remove-row-button></remove-row-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/text.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="text" block-section-title="Text" block-section-scope="this" block-section-menu-items="defaultMenuItems">\n        <block-layouts></block-layouts>\n        <!--<apply-block-settings-button></apply-block-settings-button>-->\n        <div class="hr block-text"></div>\n        <!--<save-as-template></save-as-template>-->\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/toc.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="toc" block-section-title="Table of Contents" block-section-scope="this" block-section-menu-items="defaultMenuItems">\n        <div>\n            <div class="doctool-subhead m--bottom-sm m--top-sm"><span>Include in Table of Contents</span></div>\n            <ul class="m--bottom-sm p--left-sm">\n                <li class="checkbox">\n                    <label>\n                        Headings 1\n                        <input type="checkbox" ng-model="block.data.settings.include_h1">\n                    </label>\n                </li>\n                <li class="checkbox">\n                    <label>\n                        Headings 2\n                        <input type="checkbox" ng-model="block.data.settings.include_h2">\n                    </label>\n                </li>\n                <li class="checkbox">\n                    <label>\n                        Headings 3\n                        <input type="checkbox" ng-model="block.data.settings.include_h3">\n                    </label>\n                </li>\n            </ul>\n        </div>\n\n        <button class="color--text-default btn btn--smaller btn--transparent t--smaller p--horis-sm" ng-click="refreshTableOfContents(block)">\n            <span class="icon icon--refresh push-next"></span> Refresh Table of Contents\n        </button>\n\n        <div class="m--bottom"></div>\n\n        <div class="doctool-subhead m--bottom-sm"><span>Advanced</span></div>\n        <div class="checkbox p--left-lg">\n            <label>\n                <input type="checkbox" ng-model="block.data.settings.show_right_side_navigation" /> Show right-side navigation for recipients\n                <help-tooltip message="toc.toc_rightside_nav"></help-tooltip>\n            </label>\n        </div>\n\n        <div class="m--bottom"></div>\n\n        <!--<apply-block-settings-button></apply-block-settings-button>-->\n        <div class="hr block-text"></div>\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/settings/video.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="video" block-section-title="Video" block-section-scope="this" block-section-menu-items="defaultMenuItems">\n\n        <label>Video URL</label>\n\n        <input ng-model="model.videoUrl" class="form-control m--bottom-sm" type="url" placeholder="https://">\n\n        <p class="t--small color--dimmed m--bottom-lg">Enter a video URL to embed it in your document. YouTube and Vimeo are supported.</p>\n\n        <button class="btn btn-block btn-primary m--bottom-sm" ng-click="saveLink()" ng-disabled="savingUrl || !model.videoUrl">\n            <spinner visible="savingUrl"></spinner>\n            Save\n        </button>\n\n        <remove-block-button></remove-block-button>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/table/basic-table.html", '<div class="doc-table" id="table-{{::tableUUID}}">\n\n    <div class="doc-block__controls doc-block__controls--top-right" ng-if="!block.is_locked">\n        <button class="btn btn--block-control btn--block-control-has-text" ng-click="addColumn()">\n            <i class="icon icon--plus icon--xs push-next"></i> Add column\n        </button>\n    </div>\n\n    <table class="doc-table__tbl" ng-class="{\n        \'doc-table__tbl--borders-h\': block.data.settings.horizontalBorder,\n        \'doc-table__tbl--borders-v\': block.data.settings.verticalBorder\n    }">\n\n        <col ng-repeat="columnObj in model.columns" ng-style="{width: getColumnWidth(columnObj) +\'%\'}">\n\n        <thead ng-show="block.data.settings.showHeaders">\n            <tr class="tr">  <!-- \'tr\' - just a class-marker, is used in js code -->\n                <th ng-repeat="columnObj in model.columns"\n                    column-ref="{{columnObj.column.ref}}"\n                    ng-class="{\'opacity-5\': columnObj.dragging}"\n                    class="basic-table-cell--marker"\n                    jui-resizable\n                    event-start="columnResizeStart"\n                    event-stop="columnResizeStop"\n                    event-resize="columnResize(columnObj)"\n                    opt-helper="\'doc-table_resizable-column\'"\n                    opt-handles="\'e\'"\n                    basic-table-highlighted-part="cell">\n\n                    <span class="btn btn--block-control doc-table__column-drag"\n                        jui-draggable\n                        opt-axis="\'x\'"\n                        opt-appendTo="\'#table-{{::tableUUID}}\'"\n                        opt-helper="columnDragHelper(columnObj)"\n                        event-stop="onColumnDragStop(columnObj)"\n                        event-drag="onColumnDrag"\n                        opt-opacity="\'0.5\'"\n                        opt-cancel="\'.contenteditable\'"\n                        ng-if="isInEditMode()">\n                        <i class="icon icon--move"></i>\n                    </span>\n                    <span ng-include="columnObj.template"></span>\n                </th>\n            </tr>\n        </thead>\n\n        <tbody ui-sortable="rowSortableOptions" ng-model="model.rows">\n            <tr ng-repeat="rowObj in model.rows" row-index="{{$index}}"\n                ng-class="{\n                \'doc-table__row-dragging\': rowObj.dragging\n                }"\n                ng-hide="rowObj.section && (rowObj.section.isDefault || !rowObj.section.options.showHeader)"\n                basic-table-highlighted-part="row">\n\n                <td colspan="{{model.columns.length}}"\n                    ng-if="::rowObj.section"\n                    class="doc-table__tbl-section"\n                    ng-class="{\'opacity-5\': rowObj.dragging}">\n\n                    <ng-include src="::rowObj.template"></ng-include>\n                    <span class="btn btn--block-control doc-table__row-drag" ng-if="::isInEditMode()" tabindex="-1">\n                        <i class="icon icon--move"></i>\n                    </span>\n                </td>\n\n                <td ng-repeat="cellObj in rowObj.cells" ng-if="rowObj.cells" class="basic-table-cell--marker cell-for-{{::cellObj.columnObj.column.ref}}-{{::tableUUID}}"\n                    ng-class="{\'opacity-5\': cellObj.columnObj.dragging}">\n                    <ng-include src="::cellObj.template"></ng-include>\n\n                    <span class="btn btn--block-control doc-table__row-drag" ng-if="$first && isInEditMode()" tabindex="-1">\n                        <i class="icon icon--move"></i>\n                    </span>\n                </td>\n\n            </tr>\n        </tbody>\n    </table>\n    <div class="doc-table__row-controls" ng-if="!block.is_locked">\n        <div class="doc-block__controls doc-block__controls--bottom">\n            <button class="btn btn--block-control btn--block-control-has-text" ng-click="addRow()">\n                <i class="icon icon--plus icon--xs push-next"></i> Add row\n            </button>\n            <button class="btn btn--block-control btn--block-control-has-text" ng-click="addSection()">\n                <i class="icon icon--plus icon--xs push-next"></i> Add section\n            </button>\n        </div>\n    </div>\n\n    <div ng-include="::tableFooterTemplate"></div>\n\n</div>\n\n\n'),
    e.put("/views/blocks/table/table-wrapper.html", '<div>\n    <div class="doc-table" id="table-{{::tableWrapperScope.tableUUID}}" ng-show="wrapped || !showOriginalTable">\n        <table class="doc-table__tbl"></table>\n    </div>\n    <div class="doc-table__footer" ng-show="wrapped || !showOriginalTable" ng-include="::tableWrapperScope.tableFooterTemplate"></div>\n\n    <basic-table ng-if="!wrapped" ng-show="showOriginalTable" block="block" mode="mode" table-options="tableOptions"></basic-table>\n\n    <div class="doc-table__overlay">\n        <spinner visible="1" class="spinner--inverted"></spinner>\n    </div>\n</div>\n\n\n\n\n'),
    e.put("/views/catalog/list/empty-list-ro.html", '<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-catalog color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No items in this folder</h1>\n</div>\n'),
    e.put("/views/catalog/list/empty-list.html", '<div class="page-stub" ng-show="isRootFolder">\n    <i class="page-stub__icon icon icon--circle-catalog color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-sm m--auto t--xlarge t--bold" style="max-width: 520px">The Catalog automates pricing of your quotes, proposals, and invoices</h1>\n    <p class="m--auto t--larger m--bottom" style="max-width: 470px">Pre-configure items and prices in the catalog. While in the pricing table, items and discounts are suggested as you type.</p>\n    <div><button ng-click="startImport()" class="btn btn-primary btn-lg m--bottom-sm t--bold">Import from a CSV file</button></div>\n    <a href="" ng-click="addItem()" class="link-hover t--bold t--medium">Add a new item manually</a>\n</div>\n\n<div class="page-stub" ng-show="!isRootFolder">\n    <i class="page-stub__icon icon icon--circle-catalog color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No items in this folder</h1>\n    <button ng-click="addItem()" class="btn btn-primary btn-lg t--bold">Add a new item</button>\n</div>\n'),
    e.put("/views/catalog/list/list-ro.html", '<div class="scrollpane scrollpane--has-toolbar">\n    <!-- toolbar -->\n    <div class="toolbar">\n        <ul class="toolbar__set toolbar__set--left with-separators">\n        </ul>\n\n        <ul class="toolbar__set toolbar__set--right toolbar__set--padded">\n            <li>\n                <grid-filter></grid-filter>\n            </li>\n        </ul>\n    </div>\n    <!-- grid -->\n    <div grid class="scrollpane__bd p"\n         scroll-processor scroll-processor-on-scroll="moreItems()" scroll-processor-container=".table-data">\n        <table ng-table="tableParams" ng-show="!isEmpty"\n               template-pagination="/views/directives/grid/empty-pagination.html"\n               class="table-data">\n\n            <col class="w10"> <!-- sku -->\n            <col> <!-- name -->\n            <col class="w15"> <!-- price -->\n            <col class="w30"> <!-- author -->\n\n            <tbody>\n\n                <tr ng-repeat="item in $data" class="row--clickable anim--expand">\n\n                    <td data-title="\'SKU\'" sortable="\'sku\'" header-class="w10" class="p--left-none">\n                        <a class="stretcher t--medium" href="#/catalog/{{dataSourceId}}/{{folderId}}/items/{{item.id}}">\n                            {{item.sku}}\n                        </a>\n                    </td>\n\n                    <td data-title="\'Name\'" sortable="\'name\'">\n                        <a class="stretcher stretcher--one-line" href="#/catalog/{{dataSourceId}}/{{folderId}}/items/{{item.id}}">\n                            {{item.name}}\n                        </a>\n                    </td>\n\n                    <td data-title="\'Price\'" sortable="\'price\'" header-class="w30">\n                        <a class=" stretcher " href="#/catalog/{{dataSourceId}}/{{folderId}}/items/{{item.id}}">\n                          {{item.price | cy : item.currency}}\n                        </a>\n                    </td>\n\n                    <td data-title="\'Created By\'" sortable="\'date_created\'" header-class="w15" class="cell--author">\n                        <a class=" stretcher media contact-card" href="#/catalog/{{dataSourceId}}/{{folderId}}/items/{{item.id}}">\n                            <div hg-if=\'item.date_created\'>\n                                <avatar size="28" user="item.owner" class="pull-left"></avatar>\n                                <div class="media-body">\n                                    {{item.owner | fullName}}\n                                    <div class="t--small-dimmed">{{item.date_created | moment }}</div>\n                                </div>\n                            </div>\n                        </a>\n                    </td>\n                </tr>\n\n                <tr ng-show="tableParams.settings().$loading">\n                    <td class="p"></td>\n                    <td colspan="3"><i class="icon spinner"></i></td>\n                </tr>\n            </tbody>\n        </table>\n\n        <div ng-show="isEmpty" class="p--lg">\n            <ng-include src="emptyListTemplate" ng-if="!isNotFound"></ng-include>\n            <ng-include src="notFoundTemplate" ng-if="isNotFound"></ng-include>\n        </div>\n\n    </div>\n\n</div>\n'),
    e.put("/views/catalog/list/list.html", '<div class="scrollpane scrollpane--has-toolbar">\n    <!-- toolbar -->\n    <div class="toolbar">\n        <ul class="toolbar__set toolbar__set--left with-separators">\n            <li>\n                <button class="btn btn--toolbar" ng-click="addItem()">\n                    <i class="icon icon--lg push-next icon--plus"></i>\n                    <span class="btn-text">New item</span>\n                </button>\n            </li>\n            <li>\n                <move-to-folder service="catalogService" selected="selected" permissions="permissions"></move-to-folder>\n            </li>\n            <li>\n                <button selection class="btn btn--toolbar" ng-click="removeItem()">\n                    <i class="icon icon--lg push-next icon--delete"></i>\n                    <span class="btn-text">Remove</span>\n                </button>\n            </li>\n            <li ng-if="isWorkspaceOwner || isWorkspaceAdmin">\n                <catalog-import></catalog-import>\n            </li>\n            <li class="no-separator toolbar__text">\n                <selection-counter></selection-counter>\n            </li>\n        </ul>\n\n        <ul class="toolbar__set toolbar__set--right toolbar__set--padded">\n            <li>\n                <grid-filter></grid-filter>\n            </li>\n        </ul>\n    </div>\n    <!-- grid -->\n    <div grid class="scrollpane__bd"\n          scroll-processor scroll-processor-on-scroll="moreItems()" scroll-processor-container=".table-data"\n        >\n        <table ng-table="tableParams" ng-show="!isEmpty"\n               template-pagination="/views/directives/grid/empty-pagination.html"\n               class="table-data table--has-row-checkboxes">\n\n                <col class="cell-checkbox">\n                <col class="w10"> <!-- sku -->\n                <col> <!-- name -->\n                <col class="w15"> <!-- price -->\n                <col class="w30"> <!-- author -->\n\n                <tbody>\n\n                    <tr ng-repeat="item in $data" class="row--clickable anim--expand">\n                        <td header-class="row--clickable" class="cell-checkbox" header="\'/views/directives/grid/selectall.html\'" ng-click="select($event, item)">\n                            <checkbox-cell item="item" selection-model="selectionModel"></checkbox-cell>\n                        </td>\n\n                        <td data-title="\'SKU\'" sortable="\'sku\'" header-class="w10" class="p--left-none">\n                            <a class="stretcher t--medium" href="#/catalog/{{dataSourceId}}/{{folderId}}/items/{{item.id}}">\n                                {{item.sku}}\n                            </a>\n\n                        </td>\n\n                        <td data-title="\'Name\'" sortable="\'name\'">\n                            <a class="stretcher stretcher--one-line" href="#/catalog/{{dataSourceId}}/{{folderId}}/items/{{item.id}}">\n                                {{item.name}}\n                            </a>\n                        </td>\n\n                        <td data-title="\'Price\'" sortable="\'price\'" header-class="w30">\n                            <a class=" stretcher " href="#/catalog/{{dataSourceId}}/{{folderId}}/items/{{item.id}}">\n                                {{item.price | cy : item.currency }}\n                            </a>\n                        </td>\n\n                        <td data-title="\'Created By\'" sortable="\'date_created\'" header-class="w15" class="cell--author">\n                            <a class=" stretcher media contact-card" href="#/catalog/{{dataSourceId}}/{{folderId}}/items/{{item.id}}">\n                                <div hg-if=\'item.date_created\'>\n                                    <avatar size="28" user="item.owner" class="pull-left"></avatar>\n                                    <div class="media-body">\n                                        {{item.owner | fullName}}\n                                        <div class="t--small-dimmed">{{item.date_created | moment }}</div>\n                                    </div>\n                                </div>\n                            </a>\n                        </td>\n                    </tr>\n\n                    <tr ng-show="tableParams.settings().$loading">\n                        <td class="p"></td>\n                        <td colspan="4"><i class="icon spinner"></i></td>\n                    </tr>\n                </tbody>\n            </table>\n\n        <div ng-show="isEmpty" class="p--lg">\n            <ng-include src="emptyListTemplate" ng-if="!isNotFound"></ng-include>\n            <ng-include src="notFoundTemplate" ng-if="isNotFound"></ng-include>\n        </div>\n\n    </div>\n\n</div>\n'),
    e.put("/views/catalog/list/not-found-ro.html", '<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-catalog color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No items found</h1>\n</div>\n'),
    e.put("/views/catalog/list/not-found.html", '<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-catalog color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No items found</h1>\n    <button ng-click="addItem()" class="btn btn-primary btn-lg t--bold">Add a new item</button>\n</div>\n'),
    e.put("/views/catalog/selector/catalog-item-selector-option.html", '<a class="p--horis-sm">\n    <h4 class="t--bold">{{match.model.name}}</h4>\n    <h4 class="t--bold">{{match.model | catalogItemPrice}}</h4>\n</a>\n'),
    e.put("/views/catalog/selector/catalog-item-selector.html", '<textarea\n       class="contenteditable"\n       msd-elastic\n       msd-elastic-append-to="parent"\n       placeholder="Item name"\n       autocomplete="off"\n       typeahead="item.name for item in getItems($viewValue)"\n       ng-model="item.name"\n       typeahead-on-select="selectItem($item, $model, $label)"\n       typeahead-wait-ms="500"\n       typeahead-template-url="/views/catalog/selector/catalog-item-selector-option.html">\n</textarea>\n'),
    e.put("/views/common/dialogs/contact-us-dialog.html", '<div class="modal-header">\n    {{header}}\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n</div>\n<div class="modal-body">\n    <p>{{message}} Please contact our <a href="" contact-us>support team</a>.</p>\n</div>\n<div class="modal-footer">\n    <button ng-click="$close()" class="btn btn-default btn--stretch-narrow">Ok</button>\n</div>\n\n\n'),
    e.put("/views/common/dialogs/declined-payment-dialog.html", '<div class="modal-header">\n    Unable to process your payment\n</div>\n<div class="modal-body p">\n    <p class="m--none p">\n      Unfortunately we couldn\'t process your payment. Please <a href="" contact-us>contact us</a> and our Customer Success Team will help you sort this out.\n    </p>\n</div>\n<div class="modal-footer">\n    <button ng-click="$close()" class="btn btn-primary btn--stretch-narrow">Ok</button>\n</div>\n'),
    e.put("/views/common/dialogs/document-tokens-dialog.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h3 class="modal-title">Review tokens</h3>\n</div>\n<div class="modal-body review-tokens-dlg">\n    <div class="review-tokens-dlg__preview m--bottom"></div>\n\n    <p ng-if="!fromContentLibrary" class="t--larger a--center t--bold">\n        You have {{count}} unfilled <ng-pluralize count="count" when="{\'1\': \'token\', \'other\': \'tokens\'}"></ng-pluralize> in this document.\n    </p>\n    <p ng-if="fromContentLibrary" class="t--larger a--center t--bold">\n        {{count}} additional unfilled <ng-pluralize count="count" when="{\'1\': \'token has\', \'other\': \'tokens have\'}"></ng-pluralize> been added to this document.\n    </p>\n    <p class="p--horis t--medium a--center">Please review them on the right panel and fill in if needed.</p>\n\n    <div class="a--center m--top">\n        <button ng-click="viewTokens()" class="btn btn-primary btn--stretch-narrow a--center btn-lg" focus-me>\n            Review and Fill\n        </button>\n    </div>\n\n    <style>.modal-dialog {  max-width: 480px; }</style>\n</div>\n'),
    e.put("/views/common/dialogs/editor-dialog.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h3 class="modal-title">Edit HTML content</h3>\n</div>\n\n<div class="modal-body p--none">\n    <div ui-ace="aceParams" ng-model="content" style="height: 400px"></div>\n</div>\n\n<div class="modal-footer">\n    <button ng-click="$dismiss()" class="btn btn-default btn--stretch-narrow">Cancel</button>\n    <button ng-click="$close(content)" class="btn btn-primary btn--stretch-narrow">Save</button>\n</div>\n<style>\n    .modal-dialog {\n        width: 600px;\n    }\n</style>\n'),
    e.put("/views/common/dialogs/embed-signed-document-dialog.html", '<div class="modal-body a--center dialog-tpl-done">\n\n    <i class="icon icon--huge icon--tick-circled color--brand m--bottom"></i>\n\n    <h3>Thank you!</h3>\n\n    <p class="color--dimmed m--none">The document has been signed successfully.</p>\n\n    <!--    <button ng-click="$close()" class="btn btn-primary btn-lg dialog-tpl-done__action">Close</button>-->\n\n    <div class="dialog-tpl-intro__copyright">\n        <a href="http://pandadoc.com">Powered by PandaDoc</a>\n    </div>\n    <style>\n        .modal-dialog {\n            max-width: 420px;\n            padding-top: 10%;\n        }\n    </style>\n</div>\n\n'),
    e.put("/views/common/dialogs/embed-signed-testdrive-dialog.html", '<div class="modal-body a--center dialog-tpl-done">\n\n    <img ng-src="{{\'img/pd-like.png\' | staticBaseUrl}}" width="150" class="m--bottom"/>\n\n    <h3>That was easy!</h3>\n\n    <p class="color--dimmed m--none">Now create and send your own documents!</p>\n\n    <a class="btn btn-primary btn-lg dialog-tpl-done__action m--bottom-sm" target="_top"\n       href="https://app.pandadoc.com/signup/?ss=public-sample-pandadoc" target="_top">Try PandaDoc for Free</a>\n\n    <p class="t--small-dimmed">Already registered? <a href="https://app.pandadoc.com/login/" target="_top">Log in</a></p>\n\n    <style>\n        .modal-dialog {\n            max-width: 420px;\n            padding-top: 45px;\n        }\n    </style>\n</div>\n\n'),
    e.put("/views/common/dialogs/embed-user-info-dialog.html", '<div class="modal-body dialog-tpl-intro">\n    <div class="dialog-tpl-intro__logo">\n        <img ng-src="{{\'img/logo-pandadoc-sq.png\' | staticBaseUrl}}" alt=""/>\n    </div>\n    <h2 class="a--center dialog-tpl-intro__hdr">Enter your name and email to view this document</h2>\n\n    <form name="userInfoForm" novalidate>\n        <div class="form-group">\n            <label for="first_name">First name</label>\n            <input class="form-control border--2px" ng-model="userInfo.first_name"\n                   name="first_name" id="first_name" focus-me/>\n        </div>\n        <div class="form-group">\n            <label for="last_name">Last name</label>\n            <input class="form-control border--2px" ng-model="userInfo.last_name"\n                   name="last_name" id="last_name"/>\n        </div>\n        <div class="form-group">\n            <label for="email">Email</label>\n            <div class="input-group">\n                <input type="text" class="form-control border--2px" ng-model="userInfo.email"\n                       id="email" name="email" required/>\n            </div>\n        </div>\n\n        <div class="a--center dialog-tpl-intro__action">\n            <button ng-click="$close(userInfo)" class="btn btn-lg btn-primary btn--stretch-narrow" type="submit"\n                    ng-disabled="!userInfo.email">Continue\n            </button>\n        </div>\n\n    </form>\n\n    <div class="dialog-tpl-intro__copyright">\n        <a href="http://pandadoc.com">Powered by PandaDoc</a>\n    </div>\n\n    <style>\n        .modal-dialog {\n            max-width: 420px;\n            padding-top: 45px;\n        }\n    </style>\n\n</div>\n'),
    e.put("/views/common/dialogs/empty-widgets-dialog.html", '<div class="modal-header">\n    Fill in your fields?\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n</div>\n<div class="modal-body">\n    <p>You didn\'t fill out all the fields you assigned to yourself. It is required before completing the document.</p>\n</div>\n<div class="modal-footer">\n    <button ng-click="fillOut()" class="btn btn-primary btn--stretch-narrow" focus-me>\n        Fill out fields\n    </button>\n</div>\n\n\n'),
    e.put("/views/common/dialogs/inactive-subscription-dialog.html", '<div class="modal-header">\n    Your subscription has been suspended\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n</div>\n\n<div class="modal-body" ng-if="isOwner">\n    <p>Your subscription has been suspended. Please <a href="{{billingUrl}}">update your billing details</a> or contact our <a href="" contact-us >support team</a>.</p>\n</div>\n\n<div class="modal-body" ng-if="!isOwner">\n    <p>Please contact account owner to update billing details.</p>\n</div>\n\n<div class="modal-footer">\n    <button ng-click="$close()" class="btn btn-default btn--stretch-narrow">Ok</button>\n</div>\n\n\n'),
    e.put("/views/common/dialogs/no-assigned-widgets-dialog.html", '<div class="modal-header">\n    Unassigned fields\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n</div>\n<div class="modal-body">\n    <p>There are still unassigned fields. Make sure you pick a recipient to fill out every field.</p>\n</div>\n<div class="modal-footer">\n    <button ng-click="assign()" ng-disabled="working" class="btn btn-primary btn--stretch-narrow" focus-me>\n        <spinner visible="working" class="push-next"></spinner>\n        Assign to me\n    </button>\n    <button ng-click="close()"  ng-disabled="working" class="btn btn-default btn--stretch-narrow">Ok</button>\n</div>\n\n\n'),
    e.put("/views/common/dialogs/role-assignment-dialog.html", '<div class="modal-header">\n    Assign people to roles\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n</div>\n<div class="modal-body">\n    <ul class="role-assgnt m--bottom-lg">\n        <role-assignment assignment="assignment" index="$index+1" ng-repeat="assignment in assignments"\n                         class="role-assgnt__item m--bottom-sm"></role-assignment>\n    </ul>\n</div>\n<div class="modal-footer">\n    <button ng-click="close()" class="btn btn-primary btn--stretch-narrow">Ok</button>\n</div>\n\n\n'),
    e.put("/views/common/dialogs/successful-payment-dialog.html", '<div class="modal-body padding a--center">\n\n    <img ng-src="{{\'img/pd-like.png\' | staticBaseUrl}}" alt="" class="m--vert" style="width: 244px;height: 204px;"/>\n\n    <h3 class="m--bottom-sm"> Congratulations! </h3>\n\n    <p class="color--dimmed t--medium m--bottom">\n        You\'ve got\n        <span ng-if="count > 0"><span class="t--bold"> {{count}}</span> more </span>\n        <span ng-if="count < 0"><span class="t--bold"> Unlimited </span></span>\n        documents to send!\n    </p>\n    <button ng-click="$close()" class="btn btn-primary btn-lg btn--stretch-narrow m--bottom" focus-me>OK\n    </button>\n\n    <style>\n        .modal-dialog {\n            max-width: 460px;\n            padding-top: 10%;\n        }\n    </style>\n</div>\n\n\n\n'),
    e.put("/views/common/dialogs/upload-dialog.html", '<div class="modal-header prevent-selection">\n    <button type="button" class="close" ng-click="$dismiss()" ng-disabled="uploading" aria-hidden="true">&times;</button>\n    <h3 class="modal-title">Upload files</h3>\n</div>\n<div class="modal-body p--none" file-drop="onFileDrop">\n    <!-- select file -->\n    <div class="upload-zone p a--center m"\n         ng-show="!isShowImagePreview()" >\n        <div class="m--vert-lg">\n\n            <div class="upload-zone-icon m--bottom">\n                <img ng-show="!fileItem" ng-src="{{ \'img/icon-upload.svg\' | staticBaseUrl}}" alt="" />\n\n                <div ng-show="fileItem && fileItem.progress < 100">\n                    <img class="upload-zone-icon__bg" ng-src="{{ \'img/icon-complete.svg\' | staticBaseUrl}}" alt=""/>\n                    <div class="upload-zone-icon__clip anim--fadein" ng-style="{height: fileItem.progress + \'%\'}">\n                        <img ng-src="{{ \'img/icon-complete.svg\' | staticBaseUrl}}" alt="" />\n                    </div>\n                </div>\n            </div>\n\n            <h3 class="upload-zone__title">Drop a file here</h3>\n\n            <span class="inline-block a--middle color--dimmed m--right-sm">or</span>\n\n            <div class="pos--rel btn btn-primary">\n                Choose a file\n                <input name="file" id="file" type="file" nv-file-select uploader="uploader"\n                       class="opacity-0 pos--abs top-0 left-0 w100 h100"/>\n            </div>\n\n        </div>\n    </div>\n\n    <!-- preview -->\n    <div ng-if="isShowImagePreview()" class="image-upload anim--fadein">\n        <img class="image-upload__preview" ng-src="{{imagePreview}}" ng-class="{\'opacity-7\': isUploading()}"/>\n    </div>\n\n</div>\n\n\n<div class="modal-footer">\n\n    <button ng-click="cancel()" ng-if="fileItem" class="btn btn-default btn--stretch-narrow">\n        Cancel\n    </button>\n\n    <div class="pos--rel btn btn-default pull-left" ng-if="imagePreview">\n        Choose another image\n        <input name="file" id="file" type="file" nv-file-select uploader="uploader"\n            class="opacity-0 pos--abs top-0 left-0 w100 h100"/>\n    </div>\n\n    <button ng-click="done()" ng-disabled="!fileItem || isUploading()" class="btn btn-primary btn--stretch-narrow pos--rel" focus-me>\n        <span class="pos--rel z-1">\n            <span ng-if="!isUploading()">Done</span>\n            <span ng-if="isUploading()">Uploading...</span>\n        </span>\n    </button>\n\n</div>\n<style>\n    .modal-dialog {\n        width: 620px;\n    }\n</style>\n'),
    e.put("/views/common/dialogs/yammer-contacts-invite-dialog.html", '<div class="modal-content p">\n    <div class="modal-body p--bottom-none a--center">\n        <h2>Select people who you\'d like to invite to PandaDoc</h2>\n\n        <!-- grid -->\n        <div style="height: 450px;" class="m--bottom-lg">\n\n            <div class="scrollpane scrollpane--has-toolbar">\n                <div class="toolbar">\n                    <ul class="toolbar__set toolbar__set--right toolbar__set--padded">\n                        <li class="">\n                            <grid-filter></grid-filter>\n                        </li>\n                    </ul>\n                </div>\n\n                <div grid class="scrollpane__bd a--left" update-url="false"\n                     scroll-processor scroll-processor-on-scroll="moreItems()"\n                     scroll-processor-container=".table-data">\n\n                    <table ng-table="tableParams" ng-show="!isEmpty"\n                           template-pagination="/views/directives/grid/empty-pagination.html"\n                           class="table-data table--has-row-checkboxes">\n\n                        <col class="cell-checkbox">\n                        <col class="w50">\n                        <col class="w50">\n\n                        <tbody>\n                        <tr ng-repeat="contact in $data" class="row--clickable anim--expand">\n\n                            <td header-class="row--clickable" class="cell-checkbox"\n                                header="\'/views/directives/grid/selectall.html\'" ng-click="select($event, contact)">\n                                <checkbox-cell item="contact" selection-model="selectionModel"></checkbox-cell>\n                            </td>\n\n                            <td data-title="\'Name\'" sortable="\'name\'">\n                                <a class="stretcher media media--h35-two-lines" href="#/contacts/{{contact.id}}">\n                                    <avatar user="contact" size="35" class="pull-left m--right-sm"></avatar>\n                                    <div class="media-body">\n                                        {{contact | fullName}}\n                                        <div class="t--small-dimmed">{{contact.company}}</div>\n                                    </div>\n                                </a>\n                            </td>\n\n                            <td data-title="\'Email\'" sortable="\'email\'">\n                                <a class="stretcher" href="#/contacts/{{contact.id}}">\n                                    {{contact.email}}\n                                </a>\n                            </td>\n\n                        </tr>\n\n                        <tr ng-show="tableParams.settings().$loading">\n                            <td class="p"></td>\n                            <td>\n                                <i class="icon spinner"></i>\n                            </td>\n                            <td></td>\n                        </tr>\n                        </tbody>\n\n                    </table>\n\n                    <div ng-show="isEmpty" class="page-stub">\n                        <i class="icon icon--huge icon--contacts-3 color--icon-dimmed m--bottom"></i>\n\n                        <h1>No contacts found</h1>\n                    </div>\n\n                </div>\n\n            </div>\n\n        </div>\n\n        <button class="btn btn-lg btn-primary" ng-click="invite()" ng-if="!all" ng-disabled="selected.length === 0"\n                focus-me>\n            Invite\n            <ng-pluralize count="selected.length"\n                          when="{ \'0\'    : \'\',\n                         \'1\'    : \'1 contact\',\n                         \'other\': \'{} contacts\' }">\n            </ng-pluralize>\n        </button>\n\n        <button class="btn btn-lg btn-primary" ng-click="invite()" ng-if="all" focus-me>Invite all contacts</button>\n\n    </div>\n\n    <style>\n        .modal-dialog {\n            width: 700px;\n        }\n    </style>\n</div>'),
    e.put("/views/common/dialogs/yammer-contacts-sync-dialog.html", '<div class="modal-content p--lg">\n    <div class="modal-body a--center">\n\n        <h1>We\'re now synchronising your Yammer contacts.</h1>\n\n        <p class="t--small-dimmed">On the next step you will be able to choose who you want to invite.</p>\n\n        <table class="integration-success__logos ">\n            <tr>\n                <td class="integration-success__logo">\n                    <img ng-src="{{\'img/integrations/logo-yammer.png\' | staticBaseUrl}}"\n                         alt="{{\'integration.yammer.name\' | translate}}"/>\n                <td class="integration-success__icon"><i class="icon icon--xxxbig icon--integration"></i></td>\n                <td class="integration-success__logo">\n                    <img ng-src="{{\'img/integrations/logo-pandadoc.png\' | staticBaseUrl}}" alt=""/></td>\n            </tr>\n        </table>\n\n        <div class="m--horis-lg">\n            <div class="progress progress-striped active">\n                <div class="progress-bar" style="width:{{syncProgress}}%;min-width:3px;"></div>\n            </div>\n        </div>\n\n        <button class="btn btn-lg btn-primary" ng-click="skip()">Ok, I\'ll do it later</button>\n    </div>\n</div>\n'),
    e.put("/views/common/signature/initials-dialog.html", '<div class="sign-dlg modal-content">\n    <div class="modal-header">\n        <button type="button" class="close"  ng-click="close()" aria-hidden="true">&times;</button>\n        <h4 class="modal-title a--center">\n            <div class="btn-group btn-group--green">\n                <button ng-if="HAS_DRAW_TAB" ng-click="changeTab(TABS.DRAW)" btn-radio="TABS.DRAW"  ng-model="model.selectedTab" class="btn btn-primary" type="button">Draw</button>\n                <button ng-if="HAS_TYPE_TAB" ng-click="changeTab(TABS.TYPE)" btn-radio="TABS.TYPE"  ng-model="model.selectedTab" class="btn btn-primary" type="button">Type</button>\n            </div>\n        </h4>\n    </div>\n\n    <div class="modal-body">\n        <div ng-show="model.selectedTab === TABS.DRAW" ng-if="HAS_DRAW_TAB">\n            <signature-pad></signature-pad>\n        </div>\n        <div ng-show="model.selectedTab === TABS.TYPE" ng-if="HAS_TYPE_TAB">\n            <signature-type></signature-type>\n        </div>\n\n        <div ng-show="model.selectedTab === TABS.NONE">\n            <img ng-if="source" ng-src="data:{{source.dataFormat}},{{source.data}}" style="width:100%;"/>\n        </div>\n    </div>\n\n    <div class="modal-footer sign-dlg__footer">\n        <signature-color-picker ng-show="model.selectedTab === TABS.DRAW || model.selectedTab === TABS.TYPE"></signature-color-picker>\n        <button ng-show="model.selectedTab !== TABS.NONE" ng-click="done()" class="btn btn-primary btn--stretch-narrow">{{buttonText | translate}}</button>\n        <button ng-show="model.selectedTab === TABS.NONE" ng-click="close()" class="btn btn-default btn--stretch-narrow">Cancel</button>\n    </div>\n</div>\n'),
    e.put("/views/common/signature/inline-signature-view.html", '<span class="signature-view" ng-click="launchDialog()">\n    <img ng-src="data:{{source.dataFormat}},{{source.data}}" class="signature-view__signature-img" ng-if="source"/>\n\n    <span class="signature-view__placeholder ellipsis" ng-if="showLabel" ng-show="!source">\n        <span ng-if="signature">\n\n        <svg class="icon push-next" viewBox="0 1 12 12">\n            <path d="M5.792,7.336l-3.881,3.879c-0.083,0.084-0.132,0.195-0.132,0.324c0,0.25,0.203,0.457,0.458,0.457\n                c0.066,0,0.128-0.014,0.186-0.039c0,0,6.466-2.805,6.54-2.838c0.15-0.068,0.268-0.201,0.313-0.367l1.051-3.771l0.211,0.209\n                c0.221,0.22,0.572,0.22,0.794,0c0.221-0.219,0.221-0.575,0-0.794L8.102,1.169c-0.22-0.22-0.574-0.22-0.795,0\n                c-0.22,0.219-0.22,0.574,0,0.793l0.209,0.209L3.737,3.224C3.57,3.271,3.438,3.391,3.369,3.546l-2.832,6.536\n                C0.515,10.137,0.5,10.195,0.5,10.26c0,0.254,0.207,0.459,0.459,0.459c0.131,0,0.248-0.053,0.328-0.139l3.875-3.875\n                C5.11,6.568,5.08,6.425,5.08,6.271c0-0.632,0.512-1.145,1.146-1.145c0.633,0,1.144,0.513,1.144,1.145\n                c0,0.631-0.515,1.147-1.146,1.147C6.073,7.418,5.927,7.387,5.792,7.336z"/>\n        </svg>\n\n            Click to sign</span>\n        <span ng-if="initials">Initials</span>\n    </span>\n\n    <span class="signature-view__placeholder" ng-if="!source && !showLabel">\n\n        <svg class="icon push-next" viewBox="0 1 12 12" ng-if="signature">\n            <path d="M5.792,7.336l-3.881,3.879c-0.083,0.084-0.132,0.195-0.132,0.324c0,0.25,0.203,0.457,0.458,0.457\n                c0.066,0,0.128-0.014,0.186-0.039c0,0,6.466-2.805,6.54-2.838c0.15-0.068,0.268-0.201,0.313-0.367l1.051-3.771l0.211,0.209\n                c0.221,0.22,0.572,0.22,0.794,0c0.221-0.219,0.221-0.575,0-0.794L8.102,1.169c-0.22-0.22-0.574-0.22-0.795,0\n                c-0.22,0.219-0.22,0.574,0,0.793l0.209,0.209L3.737,3.224C3.57,3.271,3.438,3.391,3.369,3.546l-2.832,6.536\n                C0.515,10.137,0.5,10.195,0.5,10.26c0,0.254,0.207,0.459,0.459,0.459c0.131,0,0.248-0.053,0.328-0.139l3.875-3.875\n                C5.11,6.568,5.08,6.425,5.08,6.271c0-0.632,0.512-1.145,1.146-1.145c0.633,0,1.144,0.513,1.144,1.145\n                c0,0.631-0.515,1.147-1.146,1.147C6.073,7.418,5.927,7.387,5.792,7.336z"/>\n        </svg>\n        <svg class="icon push-next" viewBox="0 1 14 14" ng-if="initials">\n            <path d="M3.346,8.412c0,0.848-0.504,1.418-1.279,1.418c-0.566,0-0.984-0.305-1.304-0.636L0,10.625\n			C0.591,11.248,1.378,11.5,2.214,11.5c1.673,0,2.891-0.981,2.891-3.062V2.5H3.346V8.412z M9.645,2.5H6.409v8.841h3.248\n			c2.559,0,4.343-1.75,4.343-4.427C14,4.263,12.216,2.5,9.645,2.5z M9.645,9.684H8.156V4.157h1.501c1.673,0,2.559,1.206,2.559,2.757\n			C12.216,8.425,11.269,9.684,9.645,9.684z"/>\n        </svg>\n        {{label}}\n    </span>\n</span>\n'),
    e.put("/views/common/signature/profile-signature-view.html", '<div>\n    <div class="block--text">\n        <div ng-if="!profile.signature" style="width: 320px; height: 116px" class="signature-placeholder">\n           No signature\n        </div>\n        <img class="signature-placeholder" ng-if="profile.signature" ng-src="data:{{profile.signature.dataFormat}},{{profile.signature.data}}" style="height: 116px;"/>\n    </div>\n    <button ng-disabled="launched" class="btn btn--transparent pull--padding-left" ng-click="changeSignature()">\n        <span ng-if="profile.signature"><i class="icon icon--edited icon--small push-next"></i> Change signature</span>\n        <span ng-if="!profile.signature"><i class="icon icon--sign icon--small push-next"></i> Setup signature</span>\n    </button>\n\n</div>\n'),
    e.put("/views/common/signature/signature-color-picker.html", '<div class="signature-color-picker">\n    <button ng-repeat="color in buttons" ng-class="{\'active\': color === current}" ng-click="selectColor(color)"\n            class="btn signature-color signature-color--{{color.label}}">\n        {{\'colors.\' + color.label | translate}}\n    </button>\n</div>\n'),
    e.put("/views/common/signature/signature-dialog.html", '<div class="sign-dlg modal-content">\n    <div class="modal-header">\n        <button type="button" class="close"  ng-click="close()" aria-hidden="true">&times;</button>\n        <h4 class="modal-title a--center">\n            <div class="btn-group btn-group--green">\n                <button ng-if="HAS_DRAW_TAB" ng-click="changeTab(TABS.DRAW)"   btn-radio="TABS.DRAW"    ng-model="model.selectedTab" class="btn btn-primary" type="button">Draw</button>\n                <button ng-if="HAS_TYPE_TAB" ng-click="changeTab(TABS.TYPE)"   btn-radio="TABS.TYPE"    ng-model="model.selectedTab" class="btn btn-primary" type="button">Type</button>\n                <button ng-if="HAS_UPLOAD_TAB" ng-click="changeTab(TABS.UPLOAD)" btn-radio="TABS.UPLOAD"  ng-model="model.selectedTab" ng-show="uploadSupported" class="btn btn-primary" type="button">Upload</button>\n                <button ng-click="changeTab(TABS.MY)"     btn-radio="TABS.MY"      ng-model="model.selectedTab" ng-show="mySignatureSupported" class="btn btn-primary" type="button">My signature</button>\n            </div>\n        </h4>\n    </div>\n\n    <div class="modal-body">\n        <div ng-show="model.selectedTab === TABS.DRAW" ng-if="HAS_DRAW_TAB">\n            <signature-pad></signature-pad>\n        </div>\n        <div ng-show="model.selectedTab === TABS.TYPE" ng-if="HAS_TYPE_TAB">\n            <signature-type></signature-type>\n        </div>\n\n        <div ng-show="model.selectedTab === TABS.UPLOAD" ng-if="HAS_UPLOAD_TAB">\n            <signature-upload></signature-upload>\n        </div>\n        <div ng-show="model.selectedTab === TABS.MY">\n            <signature-my></signature-my>\n        </div>\n\n        <div ng-show="model.selectedTab == TABS.NONE">\n            <img ng-if="source" ng-src="data:{{source.dataFormat}},{{source.data}}" style="width:100%;"/>\n        </div>\n    </div>\n\n    <div class="modal-footer sign-dlg__footer">\n        <div>\n            <signature-color-picker\n                    ng-show="model.selectedTab === TABS.DRAW || model.selectedTab === TABS.TYPE"></signature-color-picker>\n        </div>\n        <button ng-show="model.selectedTab !== TABS.NONE" ng-click="done()" class="btn btn-primary btn--stretch-narrow">{{buttonText | translate}}</button>\n        <button ng-show="model.selectedTab === TABS.NONE " ng-click="close()" class="btn btn-default btn--stretch-narrow">Cancel</button>\n    </div>\n</div>\n'),
    e.put("/views/common/signature/signature-my.html", '<div class="a--center">\n    <img ng-if="mysignature" ng-src="data:{{mysignature.dataFormat}},{{mysignature.data}}"\n         style="width:auto;max-height: 100%"/>\n</div>'),
    e.put("/views/common/signature/signature-pad.html", '<div id="{{signaturePadId}}" class="draw-signature">\n    <div class="draw-signature__canvas-wrap">\n        <button ng-click="clear()" class="btn btn-default btn-xs draw-signature__clear">Clear</button>\n        <div class="draw-signature__canvas"></div>\n    </div>\n</div>\n'),
    e.put("/views/common/signature/signature-type.html", '<div class="sig-type">\n    <div class="a--center m--bottom">\n        <input type="text" ng-model="signatureModel.text" class="form-control sig-type__input" focus-me autofocus=""/>\n    </div>\n    <ul class="clearfix">\n        <li ng-repeat="font in fonts"\n            ng-click="selectFont(font)"\n            class="sig-type__list-item">\n\n            <button class="btn sig-type__font-preview tk-{{font}} sig-type__font-preview--{{color.label}}"\n                    ng-class="{ \'active\': selectedFont === font}">\n                <span>{{signatureModel.text}}</span>\n            </button>\n\n        </li>\n    </ul>\n</div>'),
    e.put("/views/common/signature/signature-upload.html", '<div class="sig-upl" ng-class="{\'sig-upl--file-chosen\': fileSource}">\n    <div class="sig-upl__wrap">\n\n        <div class="clearfix m--bottom p--horis-lg">\n            <div ng-if="!fileSource" class="sig-upl__msg-noimage">Upload an image or a scan of your signature</div>\n            <div ng-show="!fileSource">\n                <div class="btn btn-primary sig-upl__file">\n                    <input type="file"/>\n                    Select image\n                </div>\n            </div>\n        </div>\n        <p ng-if="unsupportedBrowser"></p>\n\n        <div ng-show="fileSource" class="draw-signature__canvas-wrap">\n            <button ng-click="clearFile()" ng-if="fileSource"\n                    class="btn btn-default btn-xs draw-signature__clear">Clear\n            </button>\n            <div class="draw-signature__canvas">\n                <canvas id="uploadPreview" width="560" height="218"></canvas>\n            </div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/common/signature/signature-view.html", '<div class="signature-view" ng-click="launchDialog()">\n    <img ng-src="data:{{source.dataFormat}},{{source.data}}" class="signature-view__signature-img" ng-if="source"/>\n\n    <div class="signature-view__placeholder ellipsis" ng-if="showLabel" ng-show="!source">\n        <span ng-if="signature">\n\n            <svg class="icon push-next" viewBox="0 1 12 12">\n                <path d="M5.792,7.336l-3.881,3.879c-0.083,0.084-0.132,0.195-0.132,0.324c0,0.25,0.203,0.457,0.458,0.457\n                    c0.066,0,0.128-0.014,0.186-0.039c0,0,6.466-2.805,6.54-2.838c0.15-0.068,0.268-0.201,0.313-0.367l1.051-3.771l0.211,0.209\n                    c0.221,0.22,0.572,0.22,0.794,0c0.221-0.219,0.221-0.575,0-0.794L8.102,1.169c-0.22-0.22-0.574-0.22-0.795,0\n                    c-0.22,0.219-0.22,0.574,0,0.793l0.209,0.209L3.737,3.224C3.57,3.271,3.438,3.391,3.369,3.546l-2.832,6.536\n                    C0.515,10.137,0.5,10.195,0.5,10.26c0,0.254,0.207,0.459,0.459,0.459c0.131,0,0.248-0.053,0.328-0.139l3.875-3.875\n                    C5.11,6.568,5.08,6.425,5.08,6.271c0-0.632,0.512-1.145,1.146-1.145c0.633,0,1.144,0.513,1.144,1.145\n                    c0,0.631-0.515,1.147-1.146,1.147C6.073,7.418,5.927,7.387,5.792,7.336z"/>\n            </svg>\n\n            Click to sign\n        </span>\n        <span ng-if="initials">\n            <svg class="icon push-next" viewBox="0 1 14 14" ng-if="initials">\n                <path d="M3.346,8.412c0,0.848-0.504,1.418-1.279,1.418c-0.566,0-0.984-0.305-1.304-0.636L0,10.625\n			        C0.591,11.248,1.378,11.5,2.214,11.5c1.673,0,2.891-0.981,2.891-3.062V2.5H3.346V8.412z M9.645,2.5H6.409v8.841h3.248\n			        c2.559,0,4.343-1.75,4.343-4.427C14,4.263,12.216,2.5,9.645,2.5z M9.645,9.684H8.156V4.157h1.501c1.673,0,2.559,1.206,2.559,2.757\n			        C12.216,8.425,11.269,9.684,9.645,9.684z"/>\n            </svg>\n            Initials\n        </span>\n    </div>\n\n    <div class="signature-view__placeholder" ng-if="!source && !showLabel">\n\n        <svg class="icon push-next" viewBox="0 1 12 12" ng-if="signature">\n            <path d="M5.792,7.336l-3.881,3.879c-0.083,0.084-0.132,0.195-0.132,0.324c0,0.25,0.203,0.457,0.458,0.457\n                c0.066,0,0.128-0.014,0.186-0.039c0,0,6.466-2.805,6.54-2.838c0.15-0.068,0.268-0.201,0.313-0.367l1.051-3.771l0.211,0.209\n                c0.221,0.22,0.572,0.22,0.794,0c0.221-0.219,0.221-0.575,0-0.794L8.102,1.169c-0.22-0.22-0.574-0.22-0.795,0\n                c-0.22,0.219-0.22,0.574,0,0.793l0.209,0.209L3.737,3.224C3.57,3.271,3.438,3.391,3.369,3.546l-2.832,6.536\n                C0.515,10.137,0.5,10.195,0.5,10.26c0,0.254,0.207,0.459,0.459,0.459c0.131,0,0.248-0.053,0.328-0.139l3.875-3.875\n                C5.11,6.568,5.08,6.425,5.08,6.271c0-0.632,0.512-1.145,1.146-1.145c0.633,0,1.144,0.513,1.144,1.145\n                c0,0.631-0.515,1.147-1.146,1.147C6.073,7.418,5.927,7.387,5.792,7.336z"/>\n        </svg>\n        <svg class="icon push-next" viewBox="0 1 14 14" ng-if="initials">\n            <path d="M3.346,8.412c0,0.848-0.504,1.418-1.279,1.418c-0.566,0-0.984-0.305-1.304-0.636L0,10.625\n			C0.591,11.248,1.378,11.5,2.214,11.5c1.673,0,2.891-0.981,2.891-3.062V2.5H3.346V8.412z M9.645,2.5H6.409v8.841h3.248\n			c2.559,0,4.343-1.75,4.343-4.427C14,4.263,12.216,2.5,9.645,2.5z M9.645,9.684H8.156V4.157h1.501c1.673,0,2.559,1.206,2.559,2.757\n			C12.216,8.425,11.269,9.684,9.645,9.684z"/>\n        </svg>\n        {{label}}\n    </div>\n</div>\n'),
    e.put("/views/directives/branded-logo/branded-logo.html", '<img ng-src="{{logoUrl}}"/>'),
    e.put("/views/directives/breadcrumbs/breadcrumbs.html", '<ol class="breadcrumbs breadcrumbs--main">\n    <li class="page-header__expander" ng-if="isApp">\n        <left-panel-expander></left-panel-expander>\n    </li>\n\n    <li ng-if="!isApp">\n        <div class="pd-home-logo">\n            <branded-logo/>\n        </div>\n    </li>\n\n    <li ng-repeat = "crumb in breadcrumbs track by $index" class="breadcrumb">\n        <a ng-if="!$last" href="{{crumb.url}}">{{crumb.name}}</a>\n        <h1 ng-if="$last" >\n            <span ng-if="crumb.isDocument || crumb.isTemplate || crumb.isLibraryItem"><document-rename edit-immediately="crumb.editImmediately" document-info="crumb.documentInfo"></document-rename></span>\n            <span ng-if="!crumb.isDocument && !crumb.isTemplate && !crumb.isLibraryItem">{{crumb.name}}</span>\n        </h1>\n        <document-status status="{{crumb.status}}" icon text ng-if="crumb.isDocument && isApp" class="doc-status--appended"></document-status>\n\n        <span ng-if="crumb.isDocument || crumb.isTemplate || crumb.isLibraryItem" class="t--smaller p--left-sm">\n            <document-save-status></document-save-status>\n        </span>\n    </li>\n</ol>\n'),
    e.put("/views/directives/doctools/doc-tools-list.html", '<div>\n\n    <div class="panel panel--right">\n        <navpanel theme="light">\n            <navpanel-set position="top">\n                <navpanel-button ng-if="!tool.hidden" ng-repeat="tool in tools" href="" name="{{tool.name}}" click-action="toolAction(tool)" doc-tool="true"\n                                 button-content="{{tool.buttonContent}}" custom-class="{{tool.styleModifier}}" icon="{{tool.icon}}" route="{{tool.route}}"></navpanel-button>\n            </navpanel-set>\n        </navpanel>\n\n    </div>\n\n    <div ng-show="showToolContent">\n        <div class="doctools scrollable-marker"  ui-view="tool-content"></div>\n    </div>\n\n    <div class="doctools-loading" ng-if="!documentInfo">\n        <i class="icon icon--big spinner"></i>\n    </div>\n</div>\n\n\n'),
    e.put("/views/directives/feed/actions-feed.html", '<div scroll-processor\n     scroll-processor-on-scroll="getActions()"\n     scroll-processor-container=".timeline__items"\n     scroll-processor-scrollable=".scrollable-marker" class="timeline"\n     ng-class="{\'timeline--dashboard\': loading || !loading && actions && actions.length}">\n\n    <div class="page-stub" ng-if="!loading && actions && actions.length === 0">\n        <p class="color--dimmed t--medium m--bottom">\n            No activity.\n        </p>\n    </div>\n\n    <div ng-hide="actions && actions.length === 0">\n\n        <div class="timeline__items">\n            <p class="timeline-point timeline-point__heading timeline-point--action" ng-repeat="action in actions">\n                <span class="timeline-point__action" ng-if="!documentRelated">\n                    <i class="icon icon--xs icon--doc-action-{{action.type}} timeline-point__icon"></i>\n                    <span class="color--dark">{{action.actor | fullName}}</span>\n                    {{ \'doc.action.\' + action.type | translate}} <span ng-if="!action.document.isTemplate">document</span>  <span ng-if="action.document.isTemplate">template</span>\n                    <a ng-href="{{action.document.linkToDocument}}" class="color--dark">{{action.document.name}}</a>\n                </span>\n\n                <span class="timeline-point__action" ng-if="documentRelated">\n                    <i class="icon icon--xs icon--doc-action-{{action.type}} timeline-point__icon"></i>\n                    <span class="color--dark">{{action.actor | fullName}}</span>\n                    {{ \'doc.action.\' + action.type | translate}} <span ng-if="!action.document.isTemplate"> this document</span>  <span ng-if="action.document.isTemplate"> this template</span>\n                </span>\n\n                <span class="dot">&middot;</span>\n\n                <span class="timeline-point__time"> {{action.date_created | moment }} </span>\n            </p>\n        </div>\n\n    </div>\n\n    <div class="p--sm" ng-if="loading"><i class="icon spinner"></i></div>\n</div>\n'),
    e.put("/views/directives/feed/message.html", '<div class="media media--comment" id="timeline-message-{{message.id}}">\n    <!--<span class="pull-left">-->\n        <!--<avatar class="avatar" user="message.owner" size="30"></avatar>-->\n    <!--</span>-->\n\n    <div class="media-body">\n        <h4 class="media--comment__heading color--dimmed">\n            <avatar class="avatar pull-left" user="message.owner" size="20"></avatar>\n            <span class="color--dark">  {{message.owner | fullName}}</span>\n            <span ng-show="message.document" class="t--normal"> commented on </span>\n            <a ng-if="message.document" ng-href="{{message.document.linkToDocument}}" class="color--dark">{{message.document.name}}</a>\n        </h4>\n        <div class="media--comment__content">{{message.text}}</div>\n\n        <div class="media--comment__meta color--dimmed">\n            <ng-pluralize count="message.messages.length"\n                          when="{ \'0\'    : \'Comment\',\n                          \'one\'  : \'1 comment\',\n                          \'other\': \'{} comments\' }">\n            </ng-pluralize>\n\n            <span class="dot" ng-show="hasCommentForm">&middot;</span>\n            {{message.date_created | moment }}\n        </div><!--/.media--comment__meta -->\n\n    </div><!--/.media-body-->\n\n    <!-- Nested comments-->\n    <div class="media--comment__nested-comments">\n        <div class="media media--comment" ng-repeat="submessage in message.messages">\n            <div class="media-body">\n                <h4 class="media--comment__heading">\n                    <avatar class="avatar pull-left" user="submessage.owner" size="20"></avatar>\n                    <span class="color--dark">{{submessage.owner | fullName}}</span>\n                </h4>\n                <div class="media--comment__content m--right-none">{{submessage.text}}</div>\n                <div class="media--comment__meta color--dimmed">\n                    <span class="">{{submessage.date_created | moment }}</span>\n                </div>\n            </div><!--/.media-body-->\n\n        </div><!--/.media-->\n\n        <!--Comment form -->\n        <form class="form-row media--comment__form" ng-show="hasCommentForm" ng-submit="sendComment(commentModel.comment)">\n            <div class="form-row__stretcher">\n                <textarea msd-elastic class="form-control input-sm" placeholder="Comment" ng-model="commentModel.comment"></textarea>\n            </div>\n            <button class="btn btn-default form-row__fixed input-sm" type="submit" ng-disabled="sendingComment || commentModel.comment.length == 0">\n                <spinner visible="sendingComment"></spinner>\n                Post\n            </button>\n        </form>\n    </div>\n</div>\n'),
    e.put("/views/directives/feed/messages-feed.html", '<div scroll-processor\n     scroll-processor-on-scroll="getMessages()"\n     scroll-processor-container=".timeline__items"\n     scroll-processor-scrollable=".scrollable-marker" class="timeline"\n     ng-class="{\'timeline--dashboard\': loading || !loading && messages && messages.length}">\n\n    <post-message-form ng-if="allowMessages" document="documentInfo.document" class="m--top-sm message-form--sm"\n                       placeholder="These are public comments and will be seen by originator and recipient"></post-message-form>\n\n    <div class="hr m--bottom-sm" ng-if="allowMessages"></div>\n\n    <div class="page-stub" ng-if="!loading && messages && messages.length === 0">\n        <p class="color--dimmed t--medium m--bottom">\n            No comments\n        </p>\n    </div>\n\n    <div ng-hide="messages && messages.length === 0" class="m--bottom">\n\n        <div class="timeline__items">\n            <message ng-repeat="message in messages" messages="messages" message="message" has-comment-form="message.editable" document-info="documentInfo"></message>\n        </div>\n\n    </div>\n    <div class="p--bottom-sm" ng-if="loading"><i class="icon spinner"></i></div>\n</div>\n\n'),
    e.put("/views/directives/feed/recent-documents.html", '<ul class="inline-block">\n    <li ng-show="!recentDocuments">\n        <i class="icon spinner"></i>\n    </li>\n\n    <li ng-repeat="document in recentDocuments" class="recent-doc anim--expand">\n        <a href="#/documents/{{document.id}}" class="" ng-click="trackOpen()">\n            <span class="recent-doc__title">{{document.name}}</span>\n            <div>\n                <document-status status="{{document.status}}" icon text ></document-status>\n                <document-signers document="document"/>\n            </div>\n        </a>\n    </li>\n</ul>\n'),
    e.put("/views/directives/folders/folders-list.html", '<div class="scrollpane scrollpane--has-toolbar">\n    <div class="toolbar toolbar--dark toolbar--padding">\n        <ul class="toolbar__set toolbar__set--left w70 " style="white-space: nowrap">\n            <li class="w100">\n                <!-- parent level -->\n\n                <i class="icon spinner spinner--inverted m--top" ng-if="loadingParentFolder && !loadingFolders"></i>\n\n                <button ng-show="currentFolder && currentFolderParent" class="btn btn--toolbar ellipsis w100 a--left" ng-click="up()">\n                    <i class="icon icon--lg icon--up push-next"></i>\n                    {{currentFolder.name}}\n                </button>\n            </li>\n        </ul>\n        <ul class="toolbar__set toolbar__set--right w30 " style="white-space: nowrap">\n            <li class="w100 a--right" ng-if="hasPermissions">\n\n                <button class="btn btn--toolbar btn--toolbar-pull-right a--right"\n                        ng-show="folders.length"\n                        ng-if="!editMode" ng-click="editModeOn()">\n                    <i class="icon icon--small icon--edited"></i> Edit\n                </button>\n\n                <button class="btn btn--toolbar btn--no-hover p--horis-none w100 a--right"\n                        ng-if="editMode" ng-click="editModeOff()">\n                    <span class="btn btn-xs btn-primary ">Done</span>\n                </button>\n\n            </li>\n        </ul>\n    </div>\n\n    <div class="scrollpane__bd" scroll-processor scroll-processor-on-scroll="moreFolders()">\n\n        <ul class="list list--bordered list--bordered-dark m--horis">\n\n            <li ng-repeat="folder in folders" class="anim--expand" title="{{folder.name}}">\n\n                <a ng-if="!editMode" href="" ng-click="down(folder)"\n                   class="list__item--oneline p--left-none p--right-none ellipsis">\n                    <i class="icon icon--folder push-next"></i>\n                    {{folder.name}}\n                </a>\n\n                <div ng-if="editMode" class="folder-edit media">\n                    <div class="folder-edit__appendix">\n                        <button ng-if="folder.editable" ng-click="deleteFolder(folder)"\n                                class="btn btn--transparent btn-block folder-edit__btn ">\n                            <i class="icon icon--delete icon--lg color--red" title="Delete"></i>\n                        </button>\n                    </div>\n                    <div class="media-body">\n                        <button ng-if="folder.editable" class="btn btn--transparent btn-block ellipsis folder-edit__btn" ng-click="renameFolder(folder)">\n                            <i class="icon icon--edited"></i> {{folder.name}}\n                        </button>\n                        <span class="btn btn--transparent btn-block ellipsis folder-edit__btn" ng-if="!folder.editable">\n                            {{folder.name}}\n                        </span>\n                    </div>\n                </div>\n\n            </li>\n\n            <li ng-if="loadingFolders" class="p--sm p--left-none">\n                <i class="icon spinner spinner--inverted"></i>\n            </li>\n\n            <li ng-if="hasPermissions">\n                <newfolder></newfolder>\n            </li>\n\n        </ul>\n    </div>\n\n</div>\n\n\n'),
    e.put("/views/directives/grid/checkbox-cell.html", '<input type="checkbox" ng-model="selectionModel.checkboxes[item.id]" ng-click="$event.stopPropagation()"/>\n'),
    e.put("/views/directives/grid/empty-pagination.html", '<div class="ng-cloak pagination-holder">\n\n</div>'),
    e.put("/views/directives/grid/filter.html", '<form class="search-form">\n    <input ng-model="filterModel.filter" class="form-control input--search" type="text" placeholder="Search"/>\n</form>'),
    e.put("/views/directives/grid/grid.html", "<div></div>"),
    e.put("/views/directives/grid/loading-indicator.html", '<div class="centerer">\n    <div class="centerer__bd">\n        <i class="icon spinner"></i>\n    </div>\n</div>'),
    e.put("/views/directives/grid/selectall.html", '<input type="checkbox" ng-click="selectAll($event)" ng-model="selectionModel.all" id="select_all" name="filter-checkbox" value=""/>\n'),
    e.put("/views/directives/inbox/inbox-badge.html", '<div>\n    <button class="btn btn--notif" ng-click="openInbox()">\n        <span class="btn--notif__badge" ng-if="count">{{count}}</span>\n        Inbox\n    </button>\n</div>\n'),
    e.put("/views/directives/invoices/invoices.html", '<div class="clearfix">\n\n    <!-- linked invoices -->\n    <div class="doctool-subhead m--bottom-sm" ng-if="hasLinkedInvoices()">\n        <span>Linked invoices</span>\n    </div>\n\n    <ul class="m--bottom" ng-if="hasLinkedInvoices()">\n        <li ng-repeat="invoice in invoices" ng-show="invoice.external_id" ><a target="_blank" ng-href="{{invoice.xero_url}}">Invoice {{$index + 1}}: {{documentInfo.document.name}}</a></li>\n    </ul>\n\n    <!-- help texts -->\n    <p class="p--sm bg--very-light t--small m--bottom-sm" ng-if="isTemplates">\n        Send one invoice or split payments into multiple invoices. Once document is accepted, you will see "Generate invoices" button.\n    </p>\n\n    <p class="p--sm bg--very-light t--small m--bottom-sm" ng-if="!isTemplates && !hasLinkedInvoices() && !integrationSettings.auto_create">\n        When you click "Generate invoices" we\'ll create\n        <ng-pluralize count="invoices.length" when="{\'1\': \'1 invoice\', \'0\': \'the invoices\', \'other\': \'{} invoices\'}"></ng-pluralize> in Xero.\n\n    </p>\n\n    <p class="p--sm bg--very-light t--small m--bottom-sm" ng-if="!isTemplates && !hasLinkedInvoices() && integrationSettings.auto_create">\n        When document is completed we\'ll create\n        <ng-pluralize count="invoices.length" when="{\'1\': \'1 invoice\', \'0\': \'the invoices\', \'other\': \'{} invoices\'}"></ng-pluralize> in Xero automatically.\n    </p>\n\n    <!-- sent to -->\n    <div class="block--text animated m--bottom">\n        <div class="doctool-subhead m--bottom-sm">\n            <span>Send invoices to</span>\n        </div>\n        <div class="from-row"  ng-if="isTemplates">\n            <select ng-model="selectedRoleModel.roleId" ng-options="role.id as role.name for role in documentInfo.document.roles" class="form-control">\n                <option value="">Not Assigned</option>\n            </select>\n        </div>\n\n        <div class="from-row" ng-if="!isTemplates">\n            <select ng-model="selectedContactModel.contactId" ng-disabled="integrationSettings.auto_create && !documentInfo.permissions.canEditDocumentContent"\n                    ng-options="recipient.contact.id as recipient.contact | fullName:{email:true} for recipient in documentInfo.document.recipients" class="form-control">\n                <option value="">Not Assigned</option>\n            </select>\n        </div>\n    </div>\n\n    <!-- pricing tables -->\n    <div class="doctool-subhead m--bottom-sm">\n        <span>Invoice total</span>\n    </div>\n\n    <ul class="m--bottom">\n        <li class="radio m--top-none">\n            <label>\n                <input type="radio" ng-model="integrationSettings.include_tax" ng-value="true" ng-disabled="integrationSettings.auto_create && !documentInfo.permissions.canEditDocumentContent"/>\n                Total is tax inclusive\n            </label>\n        </li>\n        <li class="radio">\n            <label>\n                <input type="radio" ng-model="integrationSettings.include_tax" ng-value="false" ng-disabled="integrationSettings.auto_create && !documentInfo.permissions.canEditDocumentContent"/>\n                Total is tax exclusive\n            </label>\n        </li>\n    </ul>\n\n    <p class="p--sm bg--very-light t--small m--bottom-sm" ng-show="pricingTables.length">\n        <span ng-show="pricingTables.length > 1">\n            This document contains more than one pricing table.\n        </span>\n        Please choose the tables to include in the payment amount.\n    </p>\n\n    <p class="p--sm bg--very-light t--small m--bottom" ng-show="!pricingTables.length">\n        There aren\'t any pricing tables in document to include in the payment amount.\n    </p>\n\n    <ul class="m--bottom-sm">\n        <li ng-repeat="pricingTable in pricingTables" class="clearfix m--vert-sm">\n            <label class="checkbox pull-left m--none">\n                <input type="checkbox" ng-model="pricingTable.pricingtable.use_in_xero"\n                       ng-disabled="!documentInfo.permissions.canEditDocumentContent">\n                Pricing table {{$index + 1}}\n            </label>\n\n            <span class="inline-block m--left-sm pull-right color--dimmed clickable" ng-click="scrollTo(pricingTable)" ng-if="integrationSettings.include_tax">\n                {{pricingTable.data.result.total | cy : pricingTable.data.options.currency}}\n                <span ng-if="hasOptionalOrQtyEditableRows(pricingTable)" class="t--small color--dimmed">*</span>\n            </span>\n\n            <span class="inline-block m--left-sm pull-right color--dimmed clickable" ng-click="scrollTo(pricingTable)" ng-if="!integrationSettings.include_tax">\n                {{pricingTable.data.result.subtotal - pricingTable.data.result.discount | cy : pricingTable.data.options.currency}}\n                <span ng-if="hasOptionalOrQtyEditableRows(pricingTable)" class="t--small color--dimmed">*</span>\n            </span>\n\n        </li>\n    </ul>\n\n    <p class="p--sm t--small m--bottom-sm" ng-show="hasFlexibleTotal()">\n        <span class="t--small color--dimmed">*</span>\n        Payment amount depends on the selection of optional items in the pricing table\n    </p>\n\n\n    <!-- invoices settings-->\n\n    <div class="doctool-subhead m--bottom-sm" ng-show="documentInfo.permissions.canEditDocumentContent">\n        <span>Invoices settings</span>\n    </div>\n\n    <ul class="m--bottom" ng-show="documentInfo.permissions.canEditDocumentContent">\n        <li class="radio m--top-none">\n            <label>\n                <input type="radio" ng-model="integrationSettings.auto_create" ng-value="true"/>\n                Automatically generate invoices when document is completed\n            </label>\n        </li>\n        <li class="radio">\n            <label>\n                <input type="radio" ng-model="integrationSettings.auto_create" ng-value="false"/>\n                Generate invoices manually\n            </label>\n        </li>\n    </ul>\n\n\n    <div class="doctool-subhead m--bottom-sm" ng-show="invoices.length">\n        <span>Invoices</span>\n    </div>\n\n    <div ng-repeat="invoice in invoices" class="clearfix">\n\n        <div class="form-row form-row--vert-middle m--bottom-sm">\n            <div class="form-row__stretcher">\n\n                <div class="p--top-xs pull-left">\n                    Invoice {{$index + 1}}\n                </div>\n                <div class="pull-right">\n                    <input class="form-control inline-block a--center input-sm push-self push-next p--none" type="number" ng-blur="validate(invoice)"\n                           min="0" max="100" ng-model="invoice.amount_of_total" ng-disabled="invoice.removing || (invoices.length === 1 && invoice.amount_of_total === 100) || (integrationSettings.auto_create && !documentInfo.permissions.canEditDocumentContent)"\n                           style="width: 40px"/> %\n                </div>\n\n            </div>\n            <div class="form-row__fixed pos--rel" ng-class="{\'bg--very-light\': invoice.expanded}">\n                <span class="pos--abs w100 top-0 bottom-0" style="box-shadow: 0 5px #f4f4f4" ng-show="invoice.expanded"></span>\n                <button class="btn btn--transparent btn-sm btn--no-outline pull-right pos--rel z-1" ng-click="toggleInvoice(invoice)">\n                    <i class="icon icon--settings icon--small a--top" style="margin-top: 3px" ng-show="!invoice.expanded"></i>\n                    <i class="icon icon--close icon--small a--top anim--fadein-grow" style="margin-top: 3px" ng-show="invoice.expanded"></i>\n                </button>\n            </div>\n        </div>\n\n        <div class="m--bottom p--left-sm p--right-sm p--vert-xs clearfix bg--very-light anim--expand" style="margin-top:-8px"\n             ng-show="invoice.expanded">\n\n            <label class="control-label">Description</label>\n            <textarea msd-elastic="\\n" class="form-control resize-v" placeholder="Invoice description" ng-disabled="invoice.removing || (integrationSettings.auto_create && !documentInfo.permissions.canEditDocumentContent)"\n                      ng-trim="false" ng-model="invoice.description"></textarea>\n\n            <button class="pull-right color--red btn btn--transparent p--horis-sm btn--no-outline"\n                    ng-click="removeInvoice(invoice)" ng-if="!integrationSettings.auto_create || documentInfo.permissions.canEditDocumentContent">\n                <i class="icon icon--trash icon--small" ng-if="!invoice.removing && !invoice.confirmDelete"></i>\n                <span ng-if="invoice.confirmDelete && !invoice.removing">Delete invoice?</span>\n                <spinner visible="invoice.removing"></spinner>\n            </button>\n        </div>\n\n    </div>\n\n    <spinner visible="loadingInvoices" class="m--bottom"></spinner>\n\n    <button ng-show="!loadingInvoices && (!integrationSettings.auto_create || documentInfo.permissions.canEditDocumentContent)" ng-click="addInvoice()" ng-disabled="creatingInvoice"\n        class="btn btn--smaller color--text-default btn--transparent pull--padding-left t--smaller m--bottom">\n        <span class="icon icon--plus-circled push-next"></span>\n        Add\n        <ng-pluralize count="invoices.length" when="{\'0\': \'an\', \'1\': \'another\', \'other\': \'another\'}"></ng-pluralize>\n        invoice\n\n        <spinner visible="creatingInvoice" class="push-self"></spinner>\n    </button>\n\n\n    <button class="btn btn-block btn-default" ng-click="generateInvoices()" ng-if="!isTemplates && !integrationSettings.auto_create"\n            ng-disabled="generatingInvoices || !invoices.length || !hasPricingTablesForExport() || !selectedContactModel.contactId" ng-show="!loadingInvoices">\n        <spinner visible="generatingInvoices" class="push-next"></spinner>\n        Generate invoices\n    </button>\n\n\n    <p class="p--sm bg--very-light t--small m--bottom-sm" ng-show="!isTemplates && (invoices.length && hasPricingTablesForExport() && selectedContactModel.contactId) && integrationSettings.auto_create">\n        <span ng-if="!documentInfo.permissions.canEditDocumentContent && hasLinkedInvoices()">\n            Invoices have been automatically generated.\n        </span>\n        <span ng-if="documentInfo.permissions.canEditDocumentContent || !hasLinkedInvoices()">\n            Invoices will be automatically generated when document is completed.\n        </span>\n    </p>\n\n\n    <p class="p--sm color--red t--small m--bottom-sm m--top-sm" ng-if="!isTemplates && (!invoices.length || !hasPricingTablesForExport() || !selectedContactModel.contactId)">\n        At least one pricing table, recipient and invoice should be specified.\n    </p>\n\n</div>\n\n'),
    e.put("/views/directives/leftpanel/leftpanel-expander.html", '<a href="" ng-click="toggle()">\n    <i class="icon icon--lg icon--menu"></i>\n</a>\n\n'),
    e.put("/views/directives/leftpanel/leftpanel.html", '<div>\n\n    <!-- navigation buttons -->\n    <navpanel-expandable theme="dark">\n        <navpanel-set position="top">\n\n            <li>\n                <a href="" class="btn btn--navpanel btn--navpanel-expandable btn--navpanel-workspaces" ng-click="expandWorkspaces()">\n                    <i class="icon">\n                        <img ng-if="currentWorkspace.branding.icon_src" ng-src="{{currentWorkspace.branding.icon_src}}" alt="" width="30"/>\n                        <img ng-if="!currentWorkspace.branding.icon_src" ng-src="{{currentWorkspace.branding.main_logo}}" alt="" width="30"/>\n                    </i>\n                    <span class="btn-text">{{currentWorkspace.name}}</span>\n                    <span class="workspace-dropdown-arr fade in" ng-show="workspaces.length > 0" ng-class="{\'workspace-dropdown-arr--open\': isWorkspacesExpanded }"></span>\n                </a>\n            </li>\n            <li class="workspace-list hide-scrollbar" ng-class="{\'workspace-list--open\': isWorkspacesExpanded && leftPanelExpanded}">\n                <div class=" hide-scrollbar__scroller">\n                    <a href="" ng-repeat="workspace in workspaces"\n                       class="btn btn--navpanel btn--navpanel-expandable" ng-click="switchToWorkspace(workspace)">\n                        <i class="icon icon--big">\n                            <img ng-if="workspace.branding.icon_src" ng-src="{{workspace.branding.icon_src}}" alt=""/>\n                            <img ng-if="!workspace.branding.icon_src" ng-src="{{workspace.branding.main_logo}}" alt=""/>\n                        </i>\n                        <span class="btn-text ">{{workspace.name}}</span>\n                    </a>\n                </div>\n            </li>\n\n            <div class="workspace-sep" ng-show="isWorkspacesExpanded && leftPanelExpanded"></div>\n\n            <navpanel-button ng-repeat="button in navigation.top" ng-if="button.visible" show-badge="{{button.showBadge}}"\n                 badge-name="{{button.badgeName}}" route="{{button.route}}" name="{{ button.name | translate}}"\n                 click-action="collapseLeftPanel()" show-simple-badge="{{button.showSimpleBadge}}"\n                 href="{{button.href}}" icon="{{button.icon}}" custom-class="btn--navpanel-expandable"\n                 tooltip-text="{{leftPanelExpanded ? \'\' : button.name }}" tooltip-position="right">\n            </navpanel-button>\n\n\n        </navpanel-set>\n\n        <navpanel-set position="bottom">\n            <navpanel-button ng-repeat="button in navigation.bottom" ng-if="button.visible" show-badge="{{button.showBadge}}"\n                badge-name="{{button.badgeName}}" route="{{button.route}}" name="{{ button.name | translate}}"\n                href="{{button.href}}" icon="{{button.icon}}" target="{{button.target}}"  custom-class="btn--navpanel-expandable"\n                click-action="collapseLeftPanel()" show-simple-badge="{{button.showSimpleBadge}}"\n                tooltip-text="{{leftPanelExpanded ? \'\' : button.name }}" tooltip-position="right">\n            </navpanel-button>\n        </navpanel-set>\n    </navpanel-expandable>\n\n</div>\n'),
    e.put("/views/directives/navpanel/navpanel-button.html", '<li>\n    <a ng-click="clickAction()" href="{{href}}" class="btn btn--navpanel {{customClass}}" ng-class="{\'is--active\': isActive}" target="{{target}}"\n       tooltip="{{tooltipText | translate}}" tooltip-placement="{{tooltipPosition}}" tooltip-append-to-body="true">\n        <ng-include src="buttonContent" ng-show="buttonContent"></ng-include>\n        <i class="icon icon--big icon--{{icon}}" ng-show="!buttonContent"></i>\n        <span class="btn-text" ng-bind="name" ng-if="name"></span>\n        <span class="navpanel__badge" ng-show="showBadge && badgeCount">{{badgeCount}}</span>\n        <span class="badge navpanel__badge-simple" ng-show="showSimpleBadge && badgeCount"></span>\n    </a>\n</li>\n'),
    e.put("/views/directives/navpanel/navpanel-expandable.html", '<div class="navpanel navpanel--{{theme}}" ng-transclude>\n\n</div>\n'),
    e.put("/views/directives/navpanel/navpanel-set.html", '<div class="navpanel__{{position}}">\n    <ul class="navpanel__set" ng-transclude>\n    </ul>\n</div>'),
    e.put("/views/directives/navpanel/navpanel.html", '<div class="navpanel navpanel--{{theme}}" ng-transclude>\n\n</div>'),
    e.put("/views/directives/profile/profile-widget.html", '<div>\n    <a ng-click="togglePopover()" class="header-avatar">\n        <avatar size="28" user="profile"></avatar>\n    </a>\n    <div class="popover bottom popover--profile anim--expand" ng-show="isPopoverVisible">\n        <div class="arrow"></div>\n            <ul class="list list--bordered nav--no-last-border">\n                <li class="contact-card clearfix p bg--very-light">\n                    <avatar user="profile" class="pull-left m--top-none" size="40"></avatar>\n                    <div class="media-body">\n                        {{profile | fullName}}\n                        <span class="t--small-dimmed">{{profile.email}}</span>\n                    </div>\n                </li>\n                <li><a href="#/settings/profile/">Profile settings</a></li>\n                <li ng-if="workspaces.length > 1"><a workspace-selector workspaces="workspaces">Workspaces</a></li>\n                <li allow="OWNER"><a href="#/settings/account/subscription/">Account</a></li>\n                <li><a href="https://www.pandadoc.com/faqs/" target="_blank">Help</a></li>\n                <li><a href="" ng-click="logout()">Logout</a></li>\n            </ul>\n    </div>\n</div>\n\n'),
    e.put("/views/directives/trial-notification/trial-notification.html", '<div class="nag" ng-if="visible && showSubscribeMessage">\n    <span ng-if="daysLeft">\n        Your PandaDoc trial ends in\n        {{daysLeft}} <ng-pluralize count="daysLeft" when="{\'1\' : \'day\', \'other\': \'days\'}"></ng-pluralize>.\n    </span>\n    <span ng-if="daysLeft <= 0">\n        Your trial period has ended.\n    </span>\n    <a ng-if="isOwner" href="#/settings/account/subscription/" class="link-camouflage">Subscribe here</a>\n    <span ng-if="!isOwner && daysLeft <= 0">Please contact your account owner</span>\n</div>\n'),
    e.put("/views/doctools/analytics/analytics-welcome.html", '<div class="modal-body p--lg a--center">\n    <h1 class="m--bottom-sm">Meet the Analytics</h1>\n\n    <p class="color--dimmed t--larger block">\n        In-document analytics helps you gain insight in to what your recipients are doing every step of the way.\n    </p>\n\n    <div class="block">\n        <img ng-src="{{\'img/analytics-tut.gif\' | staticBaseUrl}}" alt="" width="496" height="318" style="width:496px;height: 318px"\n             class="maxw100 border--1px border--light-gray"/>\n    </div>\n    <button class="btn btn-primary btn-lg " ng-click="close()">Got it!</button>\n</div>\n\n'),
    e.put("/views/doctools/analytics/analytics.html", '<div class="p" ng-if="!loading && available">\n    <h3 class="section-header">Analytics <sup class="t--small-dimmed">beta</sup></h3>\n\n    <div ng-if="noRecipients">\n        <div class="hr block-text m--top"></div>\n        <p class="color--dimmed">Analytic data will be collected for each recipient after you send this document.</p>\n    </div>\n\n    <div ng-if="!noRecipients">\n\n        <p class="color--dimmed">Document recipients:</p>\n        <ul class="media-list">\n            <li class="media card m--bottom" ng-repeat="analytics in documentAnalytics">\n                <avatar class="pull-left" user="analytics.recipient.contact" size="35"></avatar>\n                <div class="media-body">\n                    <h4 class="card__hdr break-word">\n                        <span>\n                            {{analytics.recipient.contact | fullName}}\n                            <span class="recipient-status recipient-status--{{analytics.recipient.type}}">{{\'recipients.types.\' + analytics.recipient.type | translate}}</span>\n                        </span>\n                    </h4>\n                    <span ng-if="!analytics.opened" class="color--dimmed">Not viewed yet</span>\n                    <span ng-if="analytics.opened"><span class="color--dimmed">First view:</span> {{ analytics.opened | fromNowShort}}</span>\n                </div>\n            </li>\n        </ul>\n\n    </div>\n\n    <div ng-if="!noRecipients">\n\n        <div ng-if="documentInfo.document.recipients && documentInfo.document.recipients.length !== 1">\n\n            <div class="hr block-text m--top"></div>\n\n            <p class="color--dimmed">Show analytics for:</p>\n\n            <div class="analytics-select-wrap" sticky=".doctools" sticky-class="sticky" in-place-class="place">\n\n                <div class="dropdown" is-open="dropdown.isOpen" dropdown>\n                    <div class="selector btn btn-block dropdown-toggle " dropdown-toggle ng-if="selectedRecipient" tabindex="0">\n                        <div class="media card selector__active">\n                            <avatar class="pull-left" user="selectedRecipient.contact" size="25"></avatar>\n                            <div class="media-body" style="padding-top: 4px">\n                                <h4 class="card__hdr break-word"> <span>\n                                {{selectedRecipient.contact | fullName}}\n                                </span></h4>\n                            </div>\n                        </div>\n                        <div class="caret"></div>\n                    </div>\n\n                    <ul class="dropdown-menu analytics-dropdown w100">\n\n                        <li ng-repeat="recipient in documentInfo.document.recipients">\n                            <a ng-click="select(recipient)" class="media card anim--expand p--sm" tabindex="0">\n\n                                <avatar class="pull-left" user="recipient.contact" size="25"></avatar>\n                                <div class="media-body" style="padding-top: 4px">\n                                    <h4 class="card__hdr break-word">\n                              <span>\n                                {{recipient.contact | fullName}}\n                              </span>\n                                    </h4>\n                                </div>\n                            </a>\n                        </li>\n                    </ul>\n\n                </div>\n            </div>\n\n        </div>\n        <div ng-if="!loadingAnalytics && hasRecipientAnalytics && !documentContentInfo.isEditableContent">\n            <ul class="unstyled">\n                <li class="analytics__page m--bottom anim--expand" ng-if="analytics.page.isLoaded"\n                    ng-repeat="analytics in recipientAnalytics track by $index">\n                    <div class="analytics__page-p1">\n                        <div class="docpage" ng-click="scrollToPage(analytics.page)">\n                            <!-- box view, without separate image for every page -->\n                            <element-copy ng-if="analytics.page.isLoaded && !analytics.page.img && documentContentInfo.isBoxContent" document-selector=".document"\n                                          page-selector=".document-page" selector="object.page-copy"\n                                          width="96"\n                                          index="analytics.index"\n                                          page="analytics.page"></element-copy>\n\n                            <!-- static pages -->\n                            <element-copy ng-if="analytics.page.isLoaded && !analytics.page.img && documentContentInfo.isStaticContent" document-selector=".document"\n                                          page-selector=".document-page" selector="img.page-copy"\n                                          width="96"\n                                          index="analytics.index"\n                                          page="analytics.page"></element-copy>\n\n                            <!-- box view, with separate image for every page -->\n                            <span ng-if="analytics.page.isLoaded && analytics.page.img">\n                                <patient-image image-src="analytics.page.img" image-width="analytics.page.size.width" class="page-copy"></patient-image>\n                            </span>\n\n                            <div ng-if="analytics.info" class="docpage__chart" easypiechart\n                                 percent="analytics.info.percent" options="pieChartOptions">\n                                <span class="docpage__val" ng-bind="analytics.info.timeSpent.headNumber"></span>\n                                <span class="docpage__unit" ng-bind="analytics.info.timeSpent.headDuration"></span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="analytics__page-p2">\n\n                        <h4 class="m--bottom-sm">Page {{analytics.index + 1}}</h4>\n                        <ul ng-if="analytics.info" class="t--smaller">\n                            <li>\n                                <span class="color--dimmed">Time spent:</span>\n                                <strong tooltip="{{analytics.info.timeSpent.full}}">{{analytics.info.timeSpent.head}}</strong>\n                            </li>\n                            <li>\n                                <span class="color--dimmed">Times viewed:</span>\n                                <strong>{{analytics.info.count}}</strong>\n                            </li>\n                            <li class="w100">\n                                <span class="color--dimmed" style="margin-right:-.8em">Was opened:</span>\n                                <strong class="ellipsis" style="margin-left:.8em">{{analytics.info.lastOpened |\n                                    fromNowShort}}</strong>\n                            </li>\n                        </ul>\n\n                        <ul ng-if="!analytics.info" class="t--smaller">\n                            <li>\n                                <span class="color--dimmed">Not viewed yet</span>\n                            </li>\n                            <li>&nbsp;</li>\n                            <li>&nbsp;</li>\n                        </ul>\n\n                    </div>\n                </li>\n            </ul>\n        </div>\n\n        <div ng-show="!loadingAnalytics && hasRecipientAnalytics && documentContentInfo.isEditableContent"\n             class="pos--rel clearfix">\n\n            <div id="cloned-content-container" class="analytics__editable-doc user-theme"></div>\n\n            <div class="pos--abs top-0 left-0">\n\n                <ul class="unstyled m--bottom">\n                    <li class="w100 analytics__page analytics__page--editable-doc anim--expand" ng-if="analytics.page.isLoaded"\n                        ng-repeat="analytics in recipientAnalytics track by $index" ng-style="{height: analytics.page.height + \'px\'}">\n                        <div class="analytics__page-p1">\n                            <div class="docpage docpage--split" ng-click="scrollToBlock(analytics.page)" ng-style="{height: analytics.page.height - 2 + \'px\'}">\n                                <div ng-if="analytics.info" class="docpage__chart" easypiechart\n                                     percent="analytics.info.percent" options="pieChartOptions">\n                                    <span class="docpage__val" ng-bind="analytics.info.timeSpent.headNumber"></span>\n                                    <span class="docpage__unit" ng-bind="analytics.info.timeSpent.headDuration"></span>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="analytics__page-p2" >\n\n                            <h4 class="m--bottom-sm">Page {{analytics.page.number}}</h4>\n                            <ul ng-if="analytics.info" class="t--smaller">\n                                <li>\n                                    <span class="color--dimmed">Time spent:</span>\n                                    <strong tooltip="{{analytics.info.timeSpent.full}}">{{analytics.info.timeSpent.head}}</strong>\n                                </li>\n                                <li>\n                                    <span class="color--dimmed">Times viewed:</span>\n                                    <strong>{{analytics.info.count}}</strong>\n                                </li>\n                                <li class="w100">\n                                    <span class="color--dimmed" style="margin-right:-.8em">Was opened:</span>\n                                    <strong class="ellipsis" style="margin-left:.8em">{{analytics.info.lastOpened |\n                                        fromNowShort}}</strong>\n                                </li>\n                            </ul>\n\n                            <ul ng-if="!analytics.info" class="t--smaller">\n                                <li>\n                                    <span class="color--dimmed">Not viewed yet</span>\n                                </li>\n                                <li>&nbsp;</li>\n                                <li>&nbsp;</li>\n                            </ul>\n\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            <div class="clear-both"></div>\n\n        </div>\n\n        <div ng-show="!loadingAnalytics && !hasRecipientAnalytics">\n            <div class="hr block-text m--top"></div>\n            <p class="color--dimmed">This recipient has not viewed the document yet.</p>\n        </div>\n\n       <spinner visible="loadingAnalytics"></spinner>\n    </div>\n\n</div>\n'),
    e.put("/views/doctools/comments/comments.html", '<div class="p">\n\n    <h2 class="section-header m--bottom-none">\n        Comments\n    </h2>\n\n    <div class="m--top">\n        <messages-feed document-related="true" document-info="documentInfo" allow-messages="documentInfo.isSentOrCompleted"></messages-feed>\n    </div>\n\n</div>\n'),
    e.put("/views/doctools/complete/complete-before-sending-error-dialog.html", '<div class="modal-header">\n    Unable to complete document\n    <button type="button" class="close" ng-click="$close()" aria-hidden="true">&times;</button>\n</div>\n<div class="modal-body">\n    <p>You must fill all required fields. <strong>{{empty}}</strong> has to be filled in.\n    </p>\n</div>\n<div class="modal-footer">\n    <button ng-click="close()" class="btn btn-primary btn--stretch-narrow" focus-me>\n        Fill and complete\n    </button>\n    <button ng-click="close()" class="btn btn-default btn--stretch-narrow">Ok</button>\n</div>\n\n\n'),
    e.put("/views/doctools/content/content.html", '<div class="p">\n\n    <h2 class="section-header m--bottom-none">\n        Content\n    </h2>\n\n    <ul class="list list--tabs list--justified m--bottom" ng-class="{\'list--unfocused\': section === SECTIONS.BLOCK_SETTINGS || section === SECTIONS.WIDGET_SETTINGS}">\n        <li ng-class="{\'active\': section === \'blocks\' || section === SECTIONS.BLOCK_SETTINGS}">\n            <a href="" ng-click="showSection(\'blocks\')">Blocks</a>\n        </li>\n        <li ng-class="{\'active\': section === \'widgets\' || section === SECTIONS.WIDGET_SETTINGS}">\n            <a href="" ng-click="showSection(\'widgets\')">Fields</a>\n        </li>\n        <li ng-class="{\'active\': section == \'tokens\'}" ng-if="supportTokens">\n            <a href="" ng-click="showSection(\'tokens\')">Tokens</a>\n        </li>\n    </ul>\n\n    <!-- <h3 class="t--medium" ng-if="section === SECTIONS.WIDGET_SETTINGS"> -->\n        <!--<a class="icon icon--arrow-back" ng-click="closeWidgetSettings()">&nbsp;</a>-->\n        <!-- <span>Field settings</span> -->\n    <!-- </h3> -->\n\n    <div class="">\n\n        <!-- blocks sections-->\n        <div class="btn-sq-holder m--bottom" ng-if="section === SECTIONS.BLOCKS">\n            <block-handle block="block" ng-repeat="block in blocks"></block-handle>\n        </div>\n\n        <!-- block settings section -->\n        <block-settings ng-if="block && section === SECTIONS.BLOCK_SETTINGS"></block-settings>\n\n        <!-- widgets section-->\n        <ul class="btn-sq-holder m--bottom" ng-if="section === SECTIONS.WIDGETS">\n            <widget-handle widget="widget" ng-repeat="widget in widgets"></widget-handle>\n        </ul>\n\n        <!-- widget settings section -->\n        <div ng-if="widgetInfo && section === SECTIONS.WIDGET_SETTINGS">\n            <widget-settings widget-info="widgetInfo" highlight="highlight" document-info="documentInfo"></widget-settings>\n        </div>\n\n        <!-- tokens section -->\n        <div ng-if="section === SECTIONS.TOKENS">\n            <ng-include src="\'/views/doctools/content/template-tokens.html\'" ng-if="isTemplates"></ng-include>\n            <ng-include src="\'/views/doctools/content/document-tokens.html\'" ng-if="!isTemplates"></ng-include>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/doctools/content/document-tokens.html", '<p class="t--small-dimmed" ng-if="!loading && totalCount > 0">\n    Review and fill in your tokens. PandaDoc will automatically update all places in the document where a specific token was added.<br><br>\n    By clicking on each token, you can navigate to the location in the document.\n</p>\n\n<p class="t--small-dimmed a--center" ng-if="!loading && totalCount === 0">\n    This document does not have tokens\n</p>\n\n<div ng-if="documentInfo.tokens && totalCount > 0">\n\n    <p>Custom tokens:</p>\n\n    <div class="hr"></div>\n\n    <ul class="m--bottom" >\n        <li class="m--bottom" ng-repeat="token in documentInfo.tokens track by $index" ng-show="token.count > 0">\n            <div class="media m--bottom-sm">\n                <span class="pull-right"> &times;{{token.count}}</span>\n                <div class="media-body">\n                    <span class="token clickable" ng-click="onTokenClick(token)">\n                        {{prefix}}{{token.name}}{{postfix}}\n                    </span>\n                </div>\n            </div>\n            <input type="text" class="form-control" ng-model="token.value" ng-disabled="token.type ===\'predefined\'" ng-focus="onTokenValueClick(token)"/>\n        </li>\n    </ul>\n</div>\n\n<spinner visible="loading"></spinner>\n'),
    e.put("/views/doctools/content/template-tokens.html", '<p class="t--small-dimmed" ng-if="!loadingTokens">\n    To add a new token use the <b>{{prefix}}Token{{postfix}}</b>  format and it will be automatically added to your Custom tokens list.\n</p>\n\n<div ng-repeat="roleToken in roleTokens">\n    <p class="t--small-dimmed pull-left">{{roleToken.role.name}}</p>\n\n    <a ng-click="roleToken.toggleTokens()" class="t--small pull-right">\n        <span ng-if="roleToken.showTokens">Hide tokens</span>\n        <span ng-if="!roleToken.showTokens">Show tokens</span>\n    </a>\n\n    <div class="clearfix"></div>\n\n    <ul class="token-list m--bottom" tooltip="Click a token to copy" ng-show="roleToken.showTokens">\n        <li class="token-list__item" ng-repeat="token in roleToken.tokens track by $index">\n            <span class="token" copy-button copy-button-silent data-clipboard-text="{{prefix}}{{token.name}}{{postfix}}">\n                {{prefix}}{{token.name}}{{postfix}}\n            </span>\n            <span class="push-self" ng-if="token.count"> &times;{{token.count}}</span>\n        </li>\n    </ul>\n\n</div>\n\n<div ng-show="customTokens.length > 0">\n    <p class="t--small-dimmed pull-left">Custom tokens</p>\n\n    <a ng-click="toggleCustomTokens()" class="t--small pull-right">\n        <span ng-if="showCustomTokens">Hide tokens</span>\n        <span ng-if="!showCustomTokens">Show tokens</span>\n    </a>\n\n    <div class="clearfix"></div>\n\n    <spinner visible="initializingCustomTokens"></spinner>\n\n    <ul class="token-list m--bottom" tooltip="Click a token to copy" ng-show="showCustomTokens && !initializingCustomTokens">\n        <li class="token-list__item" ng-repeat="token in customTokens track by $index">\n            <span class="token" copy-button copy-button-silent data-clipboard-text="{{prefix}}{{token.name}}{{postfix}}">\n                {{prefix}}{{token.name}}{{postfix}}\n            </span>\n            <span class="push-self" ng-if="token.count"> &times;{{token.count}}</span>\n        </li>\n    </ul>\n\n</div>\n\n<div ng-show="predefinedTokens.length > 0">\n    <p class="t--small-dimmed pull-left">Predefined tokens</p>\n\n    <a ng-click="togglePredefinedTokens()" class="t--small pull-right">\n        <span ng-if="showPredefinedTokens">Hide tokens</span>\n        <span ng-if="!showPredefinedTokens">Show tokens</span>\n    </a>\n\n    <div class="clearfix"></div>\n\n    <ul class="token-list m--bottom" tooltip="Click a token to copy" ng-show="showPredefinedTokens">\n        <li class="token-list__item" ng-repeat="token in predefinedTokens track by $index">\n            <span class="token" copy-button copy-button-silent data-clipboard-text="{{prefix}}{{token.name}}{{postfix}}">\n                {{prefix}}{{token.name}}{{postfix}}\n            </span>\n            <span class="push-self" ng-if="token.count"> &times;{{token.count}}</span>\n        </li>\n    </ul>\n\n</div>\n\n<spinner visible="loadingTokens"></spinner>\n'),
    e.put("/views/doctools/design/design.html", '<div class="p">\n\n    <h2 class="section-header">\n        <a class="doctools__back-btn" ng-click="openPreferences()">\n            <i class="icon icon--arrow-back"></i>\n        </a>\n        Design\n        <spinner visible="working"></spinner>\n    </h2>\n\n    <div class="doctool-subhead m--bottom"><span>Current theme</span></div>\n\n    <div ng-if="currentTheme">\n        <img ng-if="documentHasPublicTheme()" ng-src="{{currentTheme.preview_image}}" alt="{{currentTheme.name}}"/>\n        <ng-include ng-if="!documentHasPublicTheme()" src="\'/views/doctools/design/theme-thumb.html\'" ng-repeat="theme in [currentTheme]"></ng-include>\n\n        <button class="btn btn--smaller color--text-default btn--transparent pull--padding-left t--smaller m--top-sm m--bottom a--left"\n                ng-click="editTheme()">\n            <span class="icon icon--edit push-next"></span> Edit theme\n        </button>\n    </div>\n\n    <div ng-if="!currentTheme" class="m--bottom">\n        <spinner visible="true"></spinner>\n    </div>\n\n    <div class="doctool-subhead m--bottom"><span>Theme catalog</span></div>\n    <spinner visible="!themes"></spinner>\n\n    <ul>\n        <li ng-repeat="theme in themes" class="m--bottom pos--rel z-1">\n            <a href="" ng-click="applyTheme(theme.id)" title="Apply this theme" class="img-link">\n                <img ng-if="theme.public" ng-src="{{theme.preview_image}}" alt="{{theme.name}}" />\n                <ng-include ng-if="!theme.public" src="\'/views/doctools/design/theme-thumb.html\'" ng-repeat="theme in [theme]"></ng-include>\n            </a>\n            <button ng-if="(!theme.public) && deleteAllowed(theme)" ng-click="deleteTheme(theme)" title="Remove theme"\n                class="btn close pos--abs z-2 top-0 right-0 square-20 color--red">&times;</button>\n        </li>\n    </ul>\n\n</div>\n'),
    e.put("/views/doctools/design/edit-css.html", '<div class=" p theme-css-panel">\n    <div class="theme-css-panel___hd clearfix">\n        <button class="btn btn-primary pull-right" ng-click="save()">Save</button>\n        <h2 class="section-header">\n            <a class="doctools__back-btn" ng-click="openTheme()">\n                <i class="icon icon--arrow-back"></i>\n            </a>\n          Theme styles\n          <spinner visible="working"></spinner>\n        </h2>\n    </div>\n    <div class="theme-css-panel___bd" ng-class="{\'theme-css-panel___bd--disabled\': loading}">\n      <div ui-ace="{mode: \'less\', onLoad: editorLoaded}" ng-model="theme.custom_css"\n        class="h100" ng-hide="loading"></div>\n    </div>\n</div>\n'),
    e.put("/views/doctools/design/theme-thumb.html", '<div class="theme-thumb" style="background-image: url(\'{{theme.styles.doc_background_image.src}}\');">\n    <div class="theme-thumb__name">\n        <div class="theme-thumb__name-txt">{{theme.name}}</div>\n    </div>\n</div>\n'),
    e.put("/views/doctools/design/theme.html", '<div class="p">\n\n    <h2 class="section-header">\n        <a class="doctools__back-btn" ng-click="openDesign()">\n            <i class="icon icon--arrow-back"></i>\n        </a>\n        <span class="inline-block push-next">Theme</span>\n        <spinner visible="working"></spinner>\n    </h2>\n\n    <div ng-show="!loading">\n        <form name="themeForm">\n            <div class="doctool-subhead m--bottom"><span>Main settings</span></div>\n\n            <div class="form-row m--bottom">\n                <label>Heading font</label>\n                  <select ng-model="headingFont" ng-change="onFontChanged()" ng-options="font.name as font.name for font in headingFonts" class="form-control">\n                      <option value=""></option>\n                  </select>\n            </div>\n\n            <div class="form-row m--bottom">\n                <label>Text font</label>\n                <select ng-model="textFont" ng-change="onFontChanged()" ng-options="font.name as font.name for font in textFonts" class="form-control">\n                    <option value=""></option>\n                </select>\n            </div>\n\n            <div class="form-row form-row--vert-middle m--bottom">\n                <div class="form-row__stretcher">Theme color <help-tooltip message="design.options.theme_color"></help-tooltip></div>\n                <div class="form-row__fixed">\n                    <spectrum-colorpicker ng-model="mainColorModel.color" options="{\n                    showInput: true,\n                    preferredFormat: \'hex\',\n                    offset: {\n                        adjustLeft:-96\n                    }\n                }"></spectrum-colorpicker>\n                </div>\n            </div>\n\n            <div class="form-row form-row--vert-middle m--bottom">\n                <div class="form-row__stretcher">Background image</div>\n                <div class="form-row__fixed">\n                    <image-picker-popover options="backgroundImages" image="theme.background_image"></image-picker-popover>\n                </div>\n            </div>\n\n            <div class="form-row m--bottom">\n                <label>Background type <help-tooltip message="design.options.background_type"></help-tooltip></label>\n                <select ng-model="theme.background_image.backgroundType" ng-options="option.value as option.label for option in backgroundOptions" class="form-control">\n                    <option value=""></option>\n                </select>\n            </div>\n\n\n        </form>\n\n        <div class="doctool-subhead m--bottom"><span>PDF settings</span></div>\n        <div class="block--text animated">\n            <label>Paper size</label>\n            <div class="from--row">\n                <div class="form--row__stretcher">\n                    <select ng-model="theme.paper_size" ng-options="paper_size.id as paper_size.label for paper_size in paperSizes" ng-if="theme" class="form-control"></select>\n                </div>\n            </div>\n        </div>\n\n        <div class="doctool-subhead m--bottom"><span>Advanced</span></div>\n        <div class="form-row form-row--vert-middle m--bottom">\n            <div class="form-row__stretcher form-control-static"> Custom CSS</div>\n            <div class="form-row__fixed">\n                <button class="btn btn--smaller t--smaller a--left btn--light-gray"\n                        ng-click="editCss()" ng-disabled="working">\n                    <span class="icon icon--edit push-next"></span> Edit styles\n                </button>\n            </div>\n        </div>\n\n        <div class="hr"></div>\n\n        <button class="btn btn--smaller color--text-default btn--transparent pull--padding-left t--smaller m--top-sm  a--left"\n                ng-click="saveAsNewTheme()" ng-disabled="working">\n            <span class="icon icon--plus icon--small push-next"></span> Save as New Theme\n        </button>\n    </div>\n</div>\n'),
    e.put("/views/doctools/download/active-download-button.html", '<div class="icon icon--big icon--animated animation--downloading ">\n    <div class="animation--downloading__frame">\n        <i class="icon icon--big icon--download-arrow slidedown-fade "></i>\n    </div>\n    <i class="icon icon--big icon--download-box"></i>\n</div>\n'),
    e.put("/views/doctools/edit/edit.html", '<div class="p--lg">\n\n    <h2 class="section-header m--bottom-sm">Edit document</h2>\n\n    <p class="color--dimmed t--small">Editing document will create a new version.</p>\n    <ul>\n        <li tooltip="Use this only to change the fields\' positions or recipients." tooltip-placement="top">\n            <a ng-click="rearrangeWidgets()" ng-disabled="editing" ng-if="canRearrangeWidgets"\n               class="btn  btn--transparent a--left pull--padding-left width--auto">\n                <spinner visible="editing"></spinner>\n                <i class="icon icon--big push-next icon--widget-move"></i>\n                <span ng-if="!editing">Rearrange Fields</span>\n                <span ng-if="editing">Rearranging Fields</span>\n            </a>\n        </li>\n        <li tooltip="Use this to update the document\'s content by uploading a new file." tooltip-placement="top">\n            <a ng-click="newRevision()" ng-disabled="editing"\n               class="btn  btn--transparent a--left pull--padding-left width--auto">\n                <i class="icon icon--big push-next icon--upload"></i>\n                Upload a new source file\n            </a>\n        </li>\n\n    </ul>\n\n</div>\n'),
    e.put("/views/doctools/embed/embed.html", '<div class="p--lg" ng-if="available">\n\n    <h2 class="section-header m--bottom-sm">Embed <sup class="t--small-dimmed">beta</sup></h2>\n\n    <div ng-if="documentInfo && !documentInfo.document.token" class="p--top-sm">\n      <p class="t--small-dimmed">\n          Embed this template to a web page to allow your customers sign it publicly from your web site or application.<br><br>\n          Every signed document will be saved to your account automatically.<br><br>\n          You can find more information in <a ng-href="{{documentationUrl}}" target="_blank">API documentation</a> or\n          contact us via Help button to discuss an integration.<br><br>\n      </p>\n      <button class="btn btn-block btn-primary" ng-click="embed()" ng-disabled="embedding">\n          <spinner visible="embedding"></spinner>\n          Get embed code\n      </button>\n    </div>\n\n    <div ng-if="documentInfo && documentInfo.document.token" class="p--top-sm">\n        <p class="t--small-dimmed">\n            Use this code to embed a template to your website. Full documentation can be\n            found on <a ng-href="{{documentationUrl}}" target="_blank">API docs page.</a>\n        </p>\n        <textarea id="script-to-copy" readonly class="m--top-sm m--bottom-sm resize-v form-control t--small" style="height: 150px;" select-on-click>\n<div id="{{embed_id}}"><!-- embed template placeholder --></div>\n<script type="text/javascript">\n    var pandadoc_embed_config = {\n        embed_uuid: \'{{documentInfo.document.token}}\',\n        host : \'{{host}}\',\n        width : 900, height : 700,\n        element_id: \'{{embed_id}}\'\n    };\n    (function() {\n        var pds = document.createElement(\'script\'); pds.type = \'text/javascript\'; pds.async = true; pds.src = \'{{staticBaseURL}}embed/embed.js\';\n        (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(pds);\n    })();\n</script>\n<noscript>Please enable JavaScript to view and sign this document.<a href="https://www.pandadoc.com/?utm_source=embed-noscript">Powered by PandaDoc.</a></noscript>\n        </textarea>\n\n        <button class="btn btn-block btn-primary m--bottom-lg" data-clipboard-target="script-to-copy" copy-button>\n            Copy embed code\n        </button>\n\n        <p class="t--small-dimmed">\n          Alternatively, you can use direct link to embed the template\n        </p>\n\n        <input id="link-to-copy" class="m--top-sm m--bottom-sm form-control t--small" type="text" readonly select-on-click value="{{directLink}}"/>\n\n        <button class="btn btn-block btn-primary m--bottom-lg" data-clipboard-target="link-to-copy" copy-button>\n            Copy direct link\n        </button>\n\n\n        <h2 class="section-header">\n            Advanced mode\n        </h2>\n\n        <p class="t--small-dimmed m--bottom-lg">\n            If you need to pre-fill user\'s or template information automatically, you can use our advanced API.\n            Callbacks for all actions are also supported. Learn more on our <a ng-href="{{documentationUrl}}" target="_blank">API docs page.</a>\n        </p>\n\n        <button class="btn btn-block btn-danger" ng-click="disable()" ng-disabled="disabling">\n            <spinner visible="disabling"></spinner>\n            Disable embedding\n        </button>\n    </div>\n\n</div>\n'),
    e.put("/views/doctools/integrations/xero.html", '<div class="p">\n\n    <h2 class="section-header">Xero integration</h2>\n\n    <spinner visible="loading"></spinner>\n\n    <!-- if no connected -->\n    <div ng-if="!isIntegrationEnabled && !loading">\n        <p class="p--sm bg--very-light t--small m--bottom">\n            Xero integration will help you to convert an accepted proposal or quote to an invoice in Xero.\n            <br>\n            You will be able to setup a different parameters how to convert a document to an invoice\n        </p>\n\n        <button class="btn btn-block btn-default" ng-click="connect()">Enable Xero integration</button>\n    </div>\n\n    <div ng-if="isIntegrationEnabled && !loading">\n        <invoices document-info="documentInfo" type="integration"></invoices>\n    </div>\n\n</div>\n\n'),
    e.put("/views/doctools/library/library-dnd-item.html", '<!-- \'library-item\' class - just a marker for drag-n-drop logic -->\n<a class="library-item list__item--oneline p--left-none p--right-none ellipsis"\n   jui-draggable\n   opt-containment="\'document\'"\n   opt-appendTo="\'.page-content\'"\n   opt-helper="\'clone\'"\n   opt-scroll="false"\n   opt-connectToSortable="\'.sortable-blocks\'"\n   event-start="dragStart"\n   opt-revert="\'invalid\'"\n   data-library-item-id="{{item.id}}"\n   href=""\n   tooltip="Drag this to a place in the document/template where you would like to add the content" tooltip-placement="top" tooltip-popup-delay="500">\n    <i class="icon icon--doc-detailed icon--lg push-next"></i>\n    {{item.name}}\n</a>\n'),
    e.put("/views/doctools/library/library.html", '<div class="p">\n\n    <h2 class="section-header">\n        <span class="m--right-sm">Content Library</span>\n        <spinner visible="working"></spinner>\n    </h2>\n\n    <div class="m--bottom" ng-disabled="working">\n\n        <form class="w100 search-form m--bottom-sm">\n            <input ng-model="CLIListMixin.filterModel.filter" class="w100 form-control" type="text" placeholder="Search"/>\n        </form>\n\n        <ul ng-show="CLIListMixin.parentFolder && CLIListMixin.parents.length > 1 && !CLIListMixin.filtering">\n            <li>\n                <button class="btn btn--transparent ellipsis w100 a--left p--left-none" ng-click="CLIListMixin.up()">\n                    <i class="icon icon--lg icon--up push-next"></i>\n                    {{CLIListMixin.parentFolder.name}}\n                </button>\n            </li>\n        </ul>\n      <div style="margin: 0 -10px" class="m--bottom">\n        <ul class="list list--bordered m--horis library-items"\n            scroll-processor scroll-processor-scrollable=".doctools" scroll-processor-on-scroll="CLIListMixin.loadLibraryItems()">\n          <li ng-repeat="folder in CLIListMixin.folders" ng-if="!CLIListMixin.filtering">\n            <a href="" ng-click="CLIListMixin.down(folder)" class=" p--left-none p--right-none">\n              <i class="icon icon--folder push-next"></i>\n              {{folder.name}}\n            </a>\n          </li>\n\n          <li ng-repeat="item in CLIListMixin.items" ng-click="insertLibraryItem(item)">\n              <div ng-include="\'/views/doctools/library/library-dnd-item.html\'"></div>\n          </li>\n\n          <li>\n              <spinner visible="CLIListMixin.loadingItems || CLIListMixin.loadingFolders"></spinner>\n          </li>\n        </ul>\n\n      </div>\n\n        <p class="t--small-dimmed" ng-if="CLIListMixin.filtering && !CLIListMixin.loadingItems && CLIListMixin.items.length === 0">Nothing found</p>\n\n        <div class="t--small-dimmed" ng-if="!CLIListMixin.loadingItems && !CLIListMixin.filtering && CLIListMixin.items.length === 0">\n            <div ng-if="CLIListMixin.parentFolder.isRoot && CLIListMixin.folders.length === 0">\n                <p>The Content Library is where you can save time by storing sections of your documents for re-use in other documents.</p>\n                <p>You don\'t have any Content Templates yet. <a ui-sref="library({folderId:\'default\'})">Go to Content Library.</a></p>\n            </div>\n            <div ng-if="!CLIListMixin.parentFolder.isRoot">\n                You don\'t have any Content Templates in this folder yet.\n            </div>\n        </div>\n    </div>\n\n\n    <div class="doctools-loading" style="width: 300px" ng-if="inserting"></div>\n\n</div>\n'),
    e.put("/views/doctools/more/moredoctools-list.html", '<div class="p">\n    <h2 class="section-header">More</h2>\n    <ul class="list list--bordered list--bordered-bottom list--bordered-top">\n        <li ng-if="!tool.hidden" ng-repeat="tool in preferencesTools">\n            <a ng-click="toolAction(tool)" class="{{tool.styleModifier}}" ng-disabled="tool.working">\n                <i class="icon icon--lg push-next icon--{{tool.icon}}"></i>\n                {{tool.name}}\n                <spinner visible="tool.working"></spinner>\n            </a>\n        </li>\n    </ul>\n</div>\n'),
    e.put("/views/doctools/people/list.html", '<div class="p">\n\n    <h2 class="section-header">Recipients</h2>\n\n    <participants-form has-close-button="true" existed="documentInfo.document.recipients"\n        ng-if="documentInfo.isOwner && !documentInfo.isWaitingForApproval && !documentInfo.isApproved && !documentInfo.isRejected"\n        delegate="this" class="doc-participants--in-panel"></participants-form>\n\n    <div class="hr block-text m--top" ng-show="documentInfo.document.recipients.length > 0"></div>\n\n    <div class="m--bottom">\n        <div class="checkbox" ng-if="documentInfo.document.recipients.length > 0 && documentInfo.permissions.canEditDocumentContent">\n            <label>\n                Signing Order <help-tooltip message="sign_in_order.help.sign_in_order"></help-tooltip>\n                <input type="checkbox" ng-model="documentInfo.document.has_ordering" ng-disabled="!recipientReorderAllowed">\n            </label>\n        </div>\n        <div class="p--sm bg--very-light t--smaller m--bottom" ng-if="showSigningOrderHelpMessage">\n            {{\'sign_in_order.help.signing_order_enabled\' | translate}}\n        </div>\n    </div>\n\n    <!-- if sortable and draft document -->\n    <ul class="media-list" ui-sortable="recipientsSortableOptions" ng-model="documentInfo.document.recipients" ng-if="documentInfo.document.has_ordering && recipientReorderAllowed">\n        <li class="pos--rel bg--white movable" ng-repeat="recipient in documentInfo.document.recipients">\n            <div class="media card m--bottom">\n                <div class="card__drag">\n                    <div class="icon card__drag-icon"></div>{{$index+1}}\n                </div>\n                <avatar class="pull-left" user="recipient.contact" size="35"></avatar>\n                <div class="media-body">\n                    <h4 class="card__hdr break-word">\n                        <span ng-class="{\'append-btn\': documentInfo.isOwner}">\n                            {{recipient.contact | fullName}}\n                            <span class="recipient-status recipient-status--{{recipient.type}}">{{\'recipients.types.\' + recipient.type | translate}}</span>\n                            <button ng-if="documentInfo.permissions.canEditDocumentContent" ng-click="removeRecipient(recipient)"\n                                    class="btn close append-btn__btn color--red square20" title="Remove contact">&times;</button>\n\n                        </span>\n                    </h4>\n                    {{recipient.contact.email}}\n                </div>\n            </div>\n        </li>\n    </ul>\n\n    <!-- if sortable and send document -->\n    <ul class="media-list" ng-if="documentInfo.document.has_ordering && !recipientReorderAllowed">\n        <li class="pos--rel" ng-repeat="recipient in documentInfo.document.recipients">\n            <div class="media card m--bottom anim--expand">\n                <avatar class="pull-left" user="recipient.contact" size="35"></avatar>\n                <div class="media-body">\n\n                    <button ng-if="hasMenu" ng-click="recipient.showMenu()"\n                            class="btn btn--transparent square-20 btn--no-outline pos--abs right-0 top-0 z-1 p--none">\n                        <i class="icon icon--config color--icon-dimmed" style="margin-top: -3px"></i></button>\n                    <div class="popover bottom popover--arrow-sm menu--recipient"\n                         ng-show="recipient.menuVisible" hide-on-click="{ spyOn: \'recipient.menuVisible\', hideWith: \'recipient.hideMenu\'}">\n                        <div class="arrow" style="left:auto;right: 4px"></div>\n                        <ul class="list list--bordered">\n                            <li ng-if="recipient.currentSigner && hasSendReminderOption" class="t--smaller">\n                                <a href="" ng-click="sendReminder(recipient)" class="ellipsis">Send reminder to {{recipient.contact | fullName}}</a>\n                            </li>\n                            <li class="menuitem-direct-link" ng-if="hasCopyDirectLink && recipient.gotEmail && recipient.public_url">\n                                <div class="color--dimmed t--smaller">Direct link</div>\n                                <input class="form-control input-sm recipient-link" type="text" readonly select-on-click value="{{recipient.public_url}}"/>\n                            </li>\n                            <li class="t--smaller" ng-if="hasRemoveRecipientOption">\n                                <a href="" ng-click="removeRecipient(recipient)" class="color--red">Delete recipient</a>\n                            </li>\n                        </ul>\n                    </div>\n                    <h4 class="card__hdr break-word" ng-class="{\'opacity-5\': !recipient.gotEmail}">\n                        <span ng-class="{\'append-btn\': documentInfo.isOwner}">\n                            {{recipient.contact | fullName}}\n                            <span class="recipient-status recipient-status--{{recipient.type}}">{{\'recipients.types.\' + recipient.type | translate}}</span>\n                        </span>\n                    </h4>\n                    <span ng-class="{\'opacity-5\': !recipient.gotEmail}">{{recipient.contact.email}}</span>\n                </div>\n\n            </div>\n        </li>\n    </ul>\n\n    <!-- if not sortable -->\n    <ul class="media-list" ng-if="!documentInfo.document.has_ordering">\n        <li class="pos--rel" ng-repeat="recipient in documentInfo.document.recipients">\n            <div class="media card m--bottom anim--expand">\n                <avatar class="pull-left" user="recipient.contact" size="35"></avatar>\n                <div class="media-body">\n\n                    <button ng-if="hasMenu" ng-click="recipient.showMenu()"\n                            class="btn btn--transparent square-20 btn--no-outline pos--abs right-0 top-0 z-1 p--none">\n                        <i class="icon icon--config color--icon-dimmed" style="margin-top: -3px"></i></button>\n                    <div class="popover bottom popover--arrow-sm menu--recipient"\n                         ng-show="recipient.menuVisible" hide-on-click="{ spyOn: \'recipient.menuVisible\', hideWith: \'recipient.hideMenu\'}">\n                        <div class="arrow" style="left:auto;right: 4px"></div>\n                        <ul class="list list--bordered">\n                            <li ng-if="recipient.type === SIGNER && !recipient.is_done && hasSendReminderOption" class="t--smaller">\n                                <a href="" ng-click="sendReminder(recipient)" class="ellipsis">Send reminder to {{recipient.contact | fullName}}</a>\n                            </li>\n                            <li class="menuitem-direct-link" ng-if="hasCopyDirectLink && recipient.public_url">\n                                <div class="color--dimmed t--smaller">Direct link</div>\n                                <input class="form-control input-sm recipient-link" type="text" readonly select-on-click value="{{recipient.public_url}}"/>\n                            </li>\n                            <li class="t--smaller" ng-if="hasRemoveRecipientOption">\n                                <a href="" ng-click="removeRecipient(recipient)" class="color--red">Delete recipient</a>\n                            </li>\n                        </ul>\n                    </div>\n                    <h4 class="card__hdr break-word">\n                        <span ng-class="{\'append-btn\': documentInfo.isOwner}">\n                            {{recipient.contact | fullName}}\n                            <span class="recipient-status recipient-status--{{recipient.type}}">{{\'recipients.types.\' + recipient.type | translate}}</span>\n                            <button ng-if="documentInfo.permissions.canEditDocumentContent" ng-click="removeRecipient(recipient)"\n                                    class="btn close append-btn__btn color--red square-20" title="Remove contact">&times;</button>\n\n                        </span>\n                    </h4>\n                    <span>{{recipient.contact.email}}</span>\n                </div>\n\n            </div>\n        </li>\n    </ul>\n\n</div>\n'),
    e.put("/views/doctools/revisions/revisions.html", '<div class="p">\n\n    <h2 class="section-header">\n        <a class="doctools__back-btn" ng-click="openPreferences()">\n            <i class="icon icon--arrow-back"></i>\n        </a>\n        Current version\n        <spinner visible="loading"></spinner>\n    </h2>\n\n    <div ng-if="!loading">\n\n        <div ng-if="currentRevision">\n\n            <div class="media revision-card revision-card--current">\n\n                <div class="revision-card__icon color--icon-dimmed">\n                    <svg viewBox="0 0 72 96">\n                        <path fill="#b3b4b9" d="M54.805,0H0v96h72V17.24L54.805,0z M53,7l11,11H53V7z M66,90H6V6h42v17h18V90z"/>\n                    </svg>\n\n                    <div class="revision-card__rev">#{{currentRevision.number}}</div>\n                </div>\n\n                <div class="media-body revision-card__body color--icon-dimmed m--bottom-sm">\n                    <div class="m--none color--text-default t--medium">{{currentRevision.owner | fullName}}</div>\n                    <div>{{documentInfo.document.name | truncate:40}}</div>\n                    <div>{{revision.date_created | moment }}</div>\n\n                    <button ng-click="downloadRevision(currentRevision)" class="btn btn-default  m--top-sm" title="Download this revision">\n                        <i class="icon icon--small icon--download push-next"></i> Download\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <h3  class="doctool-subhead m--bottom-sm m--top-lg"><span>Previous versions</span></h3>\n\n        <div class="m--bottom" ng-repeat="revision in previousRevisions">\n\n            <div class="media revision-card" >\n\n                <div class="revision-card__icon color--icon-dimmed">\n                    <svg viewBox="0 0 72 96">\n                        <path fill="#b3b4b9" d="M54.805,0H0v96h72V17.24L54.805,0z M53,7l11,11H53V7z M66,90H6V6h42v17h18V90z"/>\n                    </svg>\n\n                    <div class="revision-card__rev">#{{revision.number}}</div>\n                </div>\n\n                <div class="pull-right m--left">\n\n                    <button ng-click="downloadRevision(revision)" class="btn btn-default btn-block revision-card__dl" title="Download this revision">\n                        <i class="icon icon--small icon--download"></i>\n                    </button>\n                </div>\n\n\n                <div class="media-body revision-card__body color--icon-dimmed">\n                    <div class="m--none color--text-default t--medium">{{revision.owner | fullName}}</div>\n                    <div>{{documentInfo.document.name | truncate:40}}</div>\n                    <div>{{revision.date_created | moment }}</div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/doctools/roles/roles.html", '<div class="p">\n    <h2 class="section-header">Roles</h2>\n    <p>All template roles must be assigned to recipients of the document based on this</p>\n    <role-form document-info="documentInfo" ng-if="documentInfo.isOwner"></role-form>\n    <div class="hr block-text m--top" ng-show="documentInfo.document.roles.length > 0"></div>\n\n    <div class="m--bottom" ng-if="documentInfo.isTemplate && documentInfo.document.roles.length > 0 && documentInfo.isOwner">\n        <div class="checkbox ">\n            <label>\n                Signing Order <help-tooltip message="sign_in_order.help.sign_in_order"></help-tooltip>\n                <input type="checkbox" ng-model="documentInfo.document.has_ordering">\n            </label>\n        </div>\n        <div class="p--sm bg--very-light t--smaller m--bottom" ng-if="documentInfo.document.has_ordering">\n            {{\'sign_in_order.help.signing_order_enabled\' | translate}}\n        </div>\n    </div>\n\n    <role-list document-info="documentInfo"></role-list>\n</div>\n'),
    e.put("/views/doctools/send/send-confirmation-dialog.html", '<div class="modal-content p--lg">\n    <div class="modal-body p--lg a--center">\n        <i class="icon icon--huge icon--email m--bottom-sm color--icon-dimmed"></i>\n\n        <h2 class="section-header">The document has been sent</h2>\n\n        <p class="color--dimmed block">\n            We\'ll send a notification to you whatever happens with it<br>\n            (someone opens, signs, annotates, forwards it, etc.)\n        </p>\n        <button ng-click="timeline()" class="btn btn-lg btn-primary">View the document timeline</button>\n    </div>\n</div>\n\n'),
    e.put("/views/doctools/send/send-dialog.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h4 class="modal-title">Send document</h4>\n</div>\n<div class="modal-body p--none">\n\n    <div class="form-row color--dimmed" ng-if="!canChangeSender">\n        <div class="form-row__fixed p--vert-sm p--left"><strong>From:</strong></div>\n        <div class="form-row__stretcher p--sm p--left-sm p--bottom-none">\n            {{sender | fullName}}\n        </div>\n    </div>\n\n    <div class="form-row" ng-if="canChangeSender">\n        <div class="form-row__fixed p--vert-sm p--left color--dimmed"><strong>From:</strong></div>\n        <div class="form-row__stretcher p--left-sm p--bottom-none p--right-sm">\n            <div class="combo-field dropdown has-caret inline-block p--right-lg" dropdown>\n                <div dropdown-toggle  data-toggle="dropdown" class="p--vert-sm simple-hover" ng-class="{\'clickable\' : senders.length > 0}">\n                    <div class="ellipsis" style="max-width: 465px">{{sender | fullName}}</div>\n\n                    <div ng-show="senders.length > 0" class="dropdown-toggle"><span class="caret"></span></div>\n                </div>\n\n                <ul class="dropdown dropdown-menu anim--expand" ng-show="senders.length > 0" style="max-width: 496px;margin:-6px 0 0 -6px">\n                    <li ng-repeat="user in senders">\n                        <a href="" ng-click="selectSender(user)" class="dropdown-list-item p--horis-xs clickable" tabindex="0">\n                            <div class="form-row form-row--vert-middle">\n                                <div class="form-row__fixed">\n                                    <avatar user="user" size="24" class="maxw-none"></avatar>\n                                </div>\n                                <div class="form-row__stretcher">\n                                    <h4 class="ellipsis">{{user | fullName}}</h4>\n                                </div>\n                            </div>\n                        </a>\n                        <div class="hr m--bottom-xs" ng-if="!$last"></div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <div class="form-row color--dimmed border--bottom">\n        <div class="form-row__fixed p--bottom-sm p--left"><strong>To:</strong></div>\n        <div class="form-row__stretcher p--sm p--left-sm p--top-none">\n            <div ng-show="!allShown">\n                <span ng-repeat="recipient in shortRecipients">\n                    {{recipient.contact | fullName}}<span>, </span>\n                </span>\n                <a href="" ng-click="toggleShowAll()">show all {{recipientsCount}}</a>\n            </div>\n            <div ng-show="allShown">\n                <span ng-repeat="recipient in recipients">\n                    {{recipient.contact | fullName}}<span ng-if="!$last">, </span>\n                </span>\n            </div>\n        </div>\n    </div>\n\n    <div class="form-row border--bottom">\n        <div class="form-row__fixed p--vert-sm p--left color--dimmed" style="padding-top: 12px!important;"><strong>Subject:</strong></div>\n        <div class="form-row__stretcher p--left-sm p--bottom-none p--right-sm">\n            <input type="text" ng-model="subjectModel.subject" placeholder="Subject"\n                   class="form-control border--none p--none" style="height: 42px">\n        </div>\n    </div>\n\n    <form>\n        <textarea class="form-control border--none radius-0 p--vert-sm resize-v p--horis" rows="6" ng-model="messageModel.message"\n                  placeholder="Optional message" ng-trim="false" focus-me></textarea>\n    </form>\n</div>\n<div class="modal-footer">\n    <button ng-click="send()" class="btn btn-primary btn--stretch-narrow pull-right"\n            ng-disabled="sending">\n        <spinner visible="sending" class="push-next"></spinner>\n        <span ng-if="!sending">Send</span>\n        <span ng-if="sending">Sending</span>\n    </button>\n    <button ng-click="$dismiss()" class="btn btn-default btn--stretch-narrow pull-left">Cancel</button>\n</div>\n'),
    e.put("/views/doctools/timeline/feed.html", '<div class="p p--top-sm">\n\n    <div>\n\n        <ul class="list list--tabs list--justified t--nowrap">\n            <li ng-class="{\'active\': section === SECTIONS.COMMENTS}">\n                <a href="" ng-click="show(SECTIONS.COMMENTS)">Comments</a>\n            </li>\n            <li ng-class="{\'active\': section === SECTIONS.AUDIT_TRAIL}" ng-if="hasAccessToAuditTrail && documentHistory.length > 0">\n                <a href="" ng-click="show(SECTIONS.AUDIT_TRAIL)">Audit trail</a>\n            </li>\n            <li ng-class="{\'active\': section === SECTIONS.ACTIONS}">\n                <a href="" ng-click="show(SECTIONS.ACTIONS)">Actions</a>\n            </li>\n        </ul>\n\n    </div>\n\n    <!--<div ng-if="!hasAccessToAuditTrail || section === SECTIONS.TIMELINE || documentHistory.length === 0">-->\n\n        <!--<h2 class="section-header m--top-sm m--bottom-none" ng-hide="hasAccessToAuditTrail && documentHistory.length > 0">Timeline</h2>-->\n        <!--<document-timeline document-info="documentInfo"></document-timeline>-->\n    <!--</div>-->\n\n    <div class="m--top" ng-if="section === SECTIONS.ACTIONS && documentInfo">\n        <actions-feed document-related="true" document-info="documentInfo"></actions-feed>\n    </div>\n\n    <div class="m--top" ng-if="section === SECTIONS.COMMENTS && documentInfo">\n        <messages-feed document-related="true" document-info="documentInfo" allow-messages="documentInfo.isSentOrCompleted && (documentInfo.isOwner || documentInfo.isRecipient)"></messages-feed>\n    </div>\n\n    <div class="m--top" ng-if="section === SECTIONS.AUDIT_TRAIL && hasAccessToAuditTrail">\n        <document-audit-timeline events="documentHistory"></document-audit-timeline>\n    </div>\n\n</div>\n'),
    e.put("/views/doctools/toc/toc.html", '<div class="p document--non-editable">\n\n    <h2 class="section-header m--bottom-sm">\n        Content\n    </h2>\n    <ol class="list list-unstyled toc-list">\n        <li ng-repeat="header in toc">\n            <a class="toc-list__link"  ng-class="{\n                \'toc-list__h1\': header.isH1,\n                \'toc-list__h2\': header.isH2,\n                \'toc-list__h3\': header.isH3\n            }"\n               href="" ng-click="scrollTo(header, $index)"\n               ng-bind-html="header.text ? header.text : \'&nbsp;\'"></a>\n        </li>\n    </ol>\n\n</div>\n'),
    e.put("/views/doctools/widgets/content-welcome.html", '<div class="modal-body p--lg a--center">\n    <h1 class="m--bottom-sm">Blocks &amp; Fields</h1>\n\n    <p class="color--dimmed t--medium block" style="padding: 0 40px;">\n        <b>Blocks</b> are pieces of your content. Drag and drop them to a page to add to a document. <br/> <br/>\n        <b>Fields</b> add functionality to your documents. Put them in the areas of the document where it needs to be signed or filled-in\n    </p>\n\n    <div class="block  ">\n        <img ng-src="{{\'img/blocks-and-fields-tutorial.gif\' | staticBaseUrl}}" alt="" width="496" height="318" style="width:496px;height: 318px"\n             class="maxw100 border--1px border--light-gray"/>\n    </div>\n    <button class="btn btn-primary btn-lg " ng-click="close()">Got it!</button>\n</div>\n\n'),
    e.put("/views/doctools/widgets/list.html", '<div class="p">\n\n    <h2 class="section-header m--bottom-none">\n        Content\n        <spinner visible="creatingWidget"></spinner>\n    </h2>\n\n    <ul class="list list--tabs m--bottom">\n        <li ng-class="{\'active\': !settingsVisible}">\n            <a href="" ng-click="closeWidgetSettings()">Fields</a>\n        </li>\n    </ul>\n\n    <div ng-if="settingsVisible">\n        <widget-settings widget-info="widgetInfo" highlight="highlight" document-info="documentInfo"></widget-settings>\n    </div>\n\n    <!--h3 ng-if="!settingsVisible" class="widget-list-title m--bottom-sm"><span>Fields</span></h3-->\n\n    <div class="btn-sq-holder m--bottom" ng-if="widgetsVisible">\n\n        <widget-handle widget="widget" ng-repeat="widget in fieldWidgets"></widget-handle><!--\n        --><widget-handle widget="widget" ng-repeat="widget in staticWidgets"></widget-handle>\n\n    </div>\n\n</div>\n'),
    e.put("/views/doctools/widgets/widgets-welcome.html", '<div class="modal-body p--lg a--center">\n    <h1 class="m--bottom-sm">Meet the Fields</h1>\n\n    <p class="color--dimmed t--larger block">\n        Fields add functionality to your documents.<br>\n        Put them in the areas of the document where it needs to be<br>\n        signed or filled-in\n    </p>\n\n    <div class="block  ">\n        <img ng-src="{{\'img/fields-tutorial.gif\' | staticBaseUrl}}" alt="" width="496" height="318" style="width:496px;height: 318px"\n             class="maxw100 border--1px border--light-gray"/>\n    </div>\n    <button class="btn btn-primary btn-lg " ng-click="close()">Got it!</button>\n</div>\n\n'),
    e.put("/views/doctools/workflow/workflow.html", '<div class="p">\n\n    <h2 class="section-header">\n        <a class="doctools__back-btn" ng-click="goBackToMore()">\n            <i class="icon icon--arrow-back"></i>\n        </a>\n        Workflow\n    </h2>\n\n    <div class="p--sm bg--very-light t--smaller m--bottom">\n        <strong>Workflow</strong> defines a lifecycle of a document and allows to add additional steps like Approval.\n    </div>\n\n    <document-status-timeline>\n\n        <!-- DRAFT -->\n        <document-status-item status="STATUS.DRAFT"></document-status-item>\n\n        <!-- APPROVE -->\n        <document-status-item status="STATUS.APPROVED" ng-class="{\'opacity-5\' : !approval}">\n\n            <button class="btn btn-primary m--bottom-sm " ng-if="approval && !approval.enabled" ng-click="enableApproval()">\n                Enable Approval\n            </button>\n\n            <div ng-if="approval && approval.enabled" ng-class="{\'opacity-5\' : approval && !approval.is_editable}">\n                <label class="t--small-dimmed m--bottom-xs">\n                    Should be approved by: <help-tooltip ng-if="approval.is_editable" message="workflow.approval_selector"></help-tooltip>\n                </label>\n\n                <role-or-member-selector selected="selected" class="m--bottom-sm" placeholder="Select"\n                     disabled="!approval.is_editable" style="margin-left:-2px;"></role-or-member-selector>\n\n                <button class="btn btn-danger m--bottom-sm " ng-if="approval.is_editable" ng-click="disableApproval()">\n                    Disable Approval\n                </button>\n            </div>\n        </document-status-item>\n\n        <!-- SEND -->\n        <document-status-item status="STATUS.SENT"></document-status-item>\n\n        <!-- VIEWED -->\n        <document-status-item status="STATUS.VIEWED"></document-status-item>\n\n        <!-- COMPLETED -->\n        <document-status-item status="STATUS.COMPLETED"></document-status-item>\n\n    </document-status-timeline>\n\n</div>\n'),
    e.put("/views/documents/create/blank.html", '<div class="box box--upload p">\n    <div class="box__content--stretched">\n        <div class="block">\n            <i class="page-stub__icon icon icon--circle-documents color--green"></i>\n        </div>\n        <h1 class="m--bottom">Build and design interactive PandaDocs</h1>\n        <p class="t--small-dimmed m--bottom-lg">PandaDoc\'s powerful documents builder helps you create and customize <br/>interactive quotes, proposals, contracts and other sales collateral.</p>\n        <button class="btn btn-primary btn-lg" ng-click="blank()" ng-disabled="creating">\n            <spinner visible="creating" class="push-next"></spinner>\n            Create a doc\n        </button>\n    </div>\n</div>\n'),
    e.put("/views/documents/create/new-from-template.html", '<templates-selector class="inline-template-selector"><i class="icon spinner"></i></templates-selector>\n'),
    e.put("/views/documents/create/new.html", '<div class="centerer">\n    <div class="centerer__bd">\n\n        <div class="box box--static p--none a--left">\n            <div class="new-doc-dlg">\n\n                <ul class="list list--tabs list--tabs--lg">\n                    <li class="w33" ng-class="{\n                            \'active\': $state.current.name === \'documents.upload\',\n                            \'disabled\': !documentCreateOptionsAvailability.upload\n                        }">\n                        <a ng-click="documentCreateOptionsAvailability.upload && upload()">\n                            <span>Upload a doc</span>\n                        </a>\n                    </li>\n                    <li class="w33" ng-class="{\n                            \'active\': $state.current.name === \'documents.new-blank\',\n                            \'disabled\': !documentCreateOptionsAvailability.blank\n                        }">\n                        <a ng-click="documentCreateOptionsAvailability.blank && blank()">\n                            <span>Create a doc</span>\n                        </a>\n                    </li>\n                    <li class="w33" ng-class="{\n                            \'active\': $state.current.name === \'documents.new-from-template\',\n                            \'disabled\': !documentCreateOptionsAvailability.templates\n                        }">\n                        <a ng-click="documentCreateOptionsAvailability.templates && fromTemplate()">\n                            <span>From template</span>\n                        </a>\n                    </li>\n                </ul>\n                <div ui-view="create-option" class="new-doc-dlg__create-option"></div>\n            </div>\n\n        </div>\n    </div>\n</div>'),
    e.put("/views/documents/create/upload.html", '<file-uploader-inline ng-if="uploading" delegate="this"></file-uploader-inline>\n<file-process  ng-if="processing" delegate="this" options="processingOptions" class=""></file-process>\n'),
    e.put("/views/documents/dialogs/document-approval-dialog.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h4 class="modal-title" ng-if="isApproval">Approve document</h4>\n    <h4 class="modal-title" ng-if="!isApproval">Reject document</h4>\n</div>\n<div class="modal-body p--none">\n\n    <div class="form-row color--dimmed">\n        <div class="form-row__fixed p--sm"><strong>From:</strong></div>\n        <div class="form-row__stretcher p--sm p--left-none">\n            <i class="icon icon--contacts-2 push-next a--baseline" ng-if="isApproverARole"></i>\n            {{moderatorName}}\n        </div>\n    </div>\n\n    <div class="hr m--bottom-xs"></div>\n\n    <div class="form-row color--dimmed">\n        <div class="form-row__fixed p--sm"><strong>To:</strong></div>\n        <div class="form-row__stretcher p--sm p--left-none">{{documentInfo.document.owner | fullName}}</div>\n    </div>\n\n    <div class="hr m--bottom-xs"></div>\n\n    <form class="">\n        <textarea class="form-control w100 border--none radius-0 resize-v" rows="7" ng-model="messageModel.message"\n          placeholder="Optional message" focus-me ng-trim="false"></textarea>\n    </form>\n</div>\n<div class="modal-footer">\n    <button ng-click="action()" class="btn btn-primary btn--stretch-narrow pull-right" ng-class="{\'btn-danger\': !isApproval}"\n            ng-disabled="working">\n        <spinner visible="working"></spinner>\n        <span ng-if="!working && isApproval">Approve</span>\n        <span ng-if="!working && !isApproval">Reject</span>\n        <span ng-if="working && isApproval">Approving</span>\n        <span ng-if="working && !isApproval">Rejecting</span>\n    </button>\n    <button ng-click="$dismiss()" class="btn btn-default btn--stretch-narrow pull-left">Cancel</button>\n</div>\n'),
    e.put("/views/documents/embed/embed-document.html", '<div class="h100">\n\n    <div class="document document-scrollable-marker document--non-editable"\n         ng-class="{\'document--widget-labels-visible\': documentInfo.widgetLabelsOn}">\n\n        <div class="document__zoom-pad"\n             ng-class="{\'document__zoom-pad--adjust-for-action-panel\':actionPanelVisible}"\n             ng-style="documentContentInfo.documentSize.zoomStyle" >\n\n            <div class="document-page document-page--loading" ng-if="!documentInfo">\n                <div class="document-page__sheet"></div>\n            </div>\n\n            <document-page ng-if="!documentContentInfo.isEditableContent" action-panel-visible="true" document-content-info="documentContentInfo" document-info="documentInfo" ng-repeat="page in documentContentInfo.pages" page="page"></document-page>\n\n            <div class="document__action-panel-bumper" ng-class="{\'document__action-panel-bumper-big\':actionPanelVisible}"\n                 ng-style="documentContentInfo.documentSize.bumperStyle">\n            </div>\n        </div>\n    </div>\n\n    <document-status-panel document-content-info="documentContentInfo" document-info="documentInfo"></document-status-panel>\n\n    <document-action-panel document-content-info="documentContentInfo" document-info="documentInfo" ng-if="actionPanelVisible"></document-action-panel>\n\n</div>\n'),
    e.put("/views/documents/embed/embed-document.phone.html", '<div class="h100">\n\n    <div class="document document-scrollable-marker document--non-editable document--widget-labels-visible">\n\n        <div class="document__zoom-pad"\n             ng-class="{\'document__zoom-pad--adjust-for-action-panel\':actionPanelVisible}"\n             ng-style="documentContentInfo.documentSize.zoomStyle" >\n\n            <div class="document-page document-page--loading" ng-if="!documentInfo">\n                <div class="document-page__sheet"></div>\n            </div>\n\n            <document-page ng-if="!documentContentInfo.isEditableContent" action-panel-visible="true" document-content-info="documentContentInfo" document-info="documentInfo" ng-repeat="page in documentContentInfo.pages" page="page"></document-page>\n\n            <div class="document__action-panel-bumper" ng-class="{\'document__action-panel-bumper-big\':actionPanelVisible}"\n                 ng-style="documentContentInfo.documentSize.bumperStyle">\n            </div>\n        </div>\n    </div>\n\n    <document-action-panel document-content-info="documentContentInfo" document-info="documentInfo" ng-if="actionPanelVisible"></document-action-panel>\n\n</div>\n'),
    e.put("/views/documents/list/empty-list-ro.html", '<div class="page-stub" ng-show="isRootFolder">\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-sm t--xlarge t--bold">Here you\'ll find the documents <br/>you\'ve created</h1>\n    <p class="m--auto t--larger m--bottom" style="max-width: 400px">Send interactive PandaDocs to your contractors and prospects to close more deals.</p>\n</div>\n\n<div class="page-stub" ng-show="!isRootFolder">\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No documents in this folder</h1>\n</div>\n'),
    e.put("/views/documents/list/empty-list.html", '\n<div class="page-stub" ng-show="isRootFolder">\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-sm t--xlarge t--bold">Here you\'ll find the documents <br/>you\'ve created</h1>\n    <p class="m--auto t--larger m--bottom" style="max-width: 400px">Send interactive PandaDocs to your contractors and prospects to close more deals.</p>\n    <button ng-click="addDocument()" class="btn btn-primary btn-lg t--bold">Send a new document</button>\n</div>\n\n<div class="page-stub" ng-show="!isRootFolder">\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No documents in this folder</h1>\n    <button ng-click="addDocument()" class="btn btn-primary btn-lg t--bold">Send a new document</button>\n</div>\n'),
    e.put("/views/documents/list/list-contact-documents.html", '<div class="scrollpane">\n    <!-- toolbar -->\n    <div class="toolbar">\n        <ul class="toolbar__set toolbar__set--right toolbar__set--padded">\n            <li>\n                <grid-filter></grid-filter>\n            </li>\n        </ul>\n    </div>\n    <!-- grid -->\n    <div grid scroll-processor scroll-processor-on-scroll="moreItems()"\n         scroll-processor-scrollable=".scrollpane__bd" scroll-processor-container=".table-data">\n\n        <table ng-table="tableParams" ng-show="!isEmpty"\n               template-pagination="/views/directives/grid/empty-pagination.html"\n               class="table-data">\n\n            <col> <!-- title -->\n            <col class="w15">\n            <!-- status -->\n            <col class="w25">\n            <!-- signers -->\n            <col class="w25">\n            <!-- author -->\n\n            <tbody>\n\n            <tr ng-repeat="doc in $data" class="row--clickable anim--expand">\n\n                <td data-title="\'Title\'" sortable="\'name\'" class="p--left-none">\n                    <a class="stretcher t--medium" href="#/{{parentState}}/{{doc.id}}">\n                        {{doc.name}}\n                    </a>\n\n                </td>\n\n                <td data-title="\'Status\'" sortable="\'status\'" header-class="w15 cell--status" class="cell--status">\n                <a class="stretcher stretcher--one-line" href="#/{{parentState}}/{{doc.id}}">\n                        <document-status status="{{doc.status}}" icon text></document-status>\n                    </a>\n                </td>\n\n                <td data-title="\'Recipients\'" header-class="w25">\n                    <a class=" stretcher " href="#/{{parentState}}/{{doc.id}}">\n                    <document-signers document="doc"/>\n                    </a>\n                </td>\n\n                <td data-title="\'Created By\'" sortable="\'date_created\'" header-class="w15" class="cell--author">\n                <a class=" stretcher media contact-card" href="#/{{parentState}}/{{doc.id}}">\n                        <div ng-if=\'doc.date_created\'>\n                        <avatar size="28" user="doc.owner" class="pull-left"></avatar>\n                            <div class="media-body">\n                                {{doc.owner | fullName}}\n                                <div class="t--small-dimmed">{{doc.date_created | moment }}</div>\n                            </div>\n                        </div>\n                    </a>\n                </td>\n            </tr>\n\n            <tr ng-show="tableParams.settings().$loading">\n                <td colspan="4"><i class="icon spinner"></i></td>\n            </tr>\n            </tbody>\n        </table>\n\n        <div ng-show="isEmpty" class="p--lg">\n            <ng-include src="emptyListTemplate" ng-if="!isNotFound"></ng-include>\n            <ng-include src="notFoundTemplate" ng-if="isNotFound"></ng-include>\n        </div>\n\n    </div>\n\n</div>\n'),
    e.put("/views/documents/list/list-ro.html", '<div class="scrollpane scrollpane--has-toolbar">\n    <!-- toolbar -->\n    <div class="toolbar" ng-hide="hideToolbar">\n        <ul class="toolbar__set toolbar__set--right toolbar__set--padded">\n            <li>\n                <grid-filter></grid-filter>\n            </li>\n        </ul>\n    </div>\n    <!-- grid -->\n    <div grid class="scrollpane__bd p--left p--right p--bottom"\n         scroll-processor scroll-processor-on-scroll="moreItems()" scroll-processor-container=".table-data"\n            >\n        <table ng-table="tableParams" ng-show="!isEmpty"\n               template-pagination="/views/directives/grid/empty-pagination.html"\n               class="table-data">\n\n            <col> <!-- title -->\n            <col class="w15"> <!-- status -->\n            <col class="w25"> <!-- recipients -->\n            <col class="w15"> <!-- author -->\n\n            <tbody>\n\n            <tr ng-repeat="doc in $data" class="row--clickable anim--expand">\n\n                <td data-title="\'Title\'" sortable="\'name\'" class="p--left-none">\n                    <a class="stretcher t--medium" ng-click="onDocumentClickCallback(doc.id)" >\n                        {{doc.name}}\n                    </a>\n\n                </td>\n\n                <td data-title="\'Status\'" sortable="\'status\'" header-class="w10 cell--status" class="cell--status">\n                <a class="stretcher stretcher--one-line" ng-click="onDocumentClickCallback(doc.id)">\n                        <document-status status="{{doc.status}}" icon text></document-status>\n                    </a>\n                </td>\n\n                <td data-title="\'Recipients\'" header-class="w25">\n                    <a class=" stretcher " ng-click="onDocumentClickCallback(doc.id)">\n                    <document-signers document="doc"/>\n                    </a>\n                </td>\n\n                <td data-title="\'Created By\'" sortable="\'date_created\'" header-class="w15" class="cell--author">\n                <a class=" stretcher media contact-card" ng-click="onDocumentClickCallback(doc.id)">\n                        <div hg-if=\'doc.date_created\'>\n                            <avatar size="28" user="doc.owner" class="pull-left"></avatar>\n                            <div class="media-body">\n                                {{doc.owner | fullName}}\n                                <div class="t--small-dimmed">{{doc.date_created | moment }}</div>\n                            </div>\n                        </div>\n                    </a>\n                </td>\n            </tr>\n\n            <tr ng-show="tableParams.settings().$loading">\n                <td class="p"></td>\n                <td colspan="3"><i class="icon spinner"></i></td>\n            </tr>\n            </tbody>\n        </table>\n\n        <div ng-show="isEmpty" class="p--lg">\n            <ng-include src="emptyListTemplate" ng-if="!isNotFound"></ng-include>\n            <ng-include src="notFoundTemplate" ng-if="isNotFound"></ng-include>\n        </div>\n\n    </div>\n\n</div>\n'),
    e.put("/views/documents/list/list.html", '<div class="scrollpane scrollpane--has-toolbar">\n    <!-- toolbar -->\n    <div class="toolbar">\n        <ul class="toolbar__set toolbar__set--left with-separators">\n            <li>\n                <move-to-folder service="foldersService" selected="selected"></move-to-folder>\n            </li>\n            <li>\n                <duplicate-document selected="selected"></duplicate-document>\n            </li>\n            <li>\n                <button selection="{condition: \'isAvailable\'}" selection class="btn btn--toolbar" ng-click="removeDocument()">\n                    <i class="icon icon--lg push-next icon--delete"></i>\n                    <span class="btn-text">Remove</span>\n                </button>\n            </li>\n            <li class="no-separator toolbar__text">\n                <selection-counter></selection-counter>\n            </li>\n        </ul>\n\n        <ul class="toolbar__set toolbar__set--right toolbar__set--padded">\n            <li>\n                <grid-filter></grid-filter>\n            </li>\n        </ul>\n    </div>\n    <!-- grid -->\n    <div grid class="scrollpane__bd"\n          scroll-processor scroll-processor-on-scroll="moreItems()" scroll-processor-container=".table-data"\n        >\n        <table ng-table="tableParams" ng-show="!isEmpty"\n               template-pagination="/views/directives/grid/empty-pagination.html"\n               class="table-data table--has-row-checkboxes">\n\n                <col class="cell-checkbox">\n                <col> <!-- title -->\n                <col class="w15"> <!-- status -->\n                <col class="w25"> <!-- recipients -->\n                <col class="w15"> <!-- author -->\n\n                <tbody>\n\n                    <tr ng-repeat="doc in $data" class="row--clickable anim--expand">\n                        <td header-class="row--clickable" class="cell-checkbox" header="\'/views/directives/grid/selectall.html\'" ng-click="select($event, doc)">\n                            <checkbox-cell item="doc" selection-model="selectionModel"></checkbox-cell>\n                        </td>\n\n                        <td data-title="\'Title\'" sortable="\'name\'" class="p--left-none">\n                            <a class="stretcher t--medium" href="#/{{parentState}}/{{doc.id}}">\n                                {{doc.name}}\n                            </a>\n\n                        </td>\n\n                        <td data-title="\'Status\'" sortable="\'status\'" header-class="w10 cell--status"\n                            class="cell--status">\n                        <a class="stretcher stretcher--one-line" href="#/{{parentState}}/{{doc.id}}">\n                            <document-status status="{{doc.status}}" icon text></document-status>\n                            </a>\n                        </td>\n\n                        <td data-title="\'Recipients\'" header-class="w25">\n                            <a class=" stretcher " href="#/{{parentState}}/{{doc.id}}">\n                            <document-signers document="doc"/>\n                            </a>\n                        </td>\n\n                        <td data-title="\'Created By\'" sortable="\'date_created\'" header-class="w15" class="cell--author">\n                        <a class=" stretcher media contact-card" href="#/{{parentState}}/{{doc.id}}">\n                                <div hg-if=\'doc.date_created\'>\n                                    <avatar size="28" user="doc.owner" class="pull-left"></avatar>\n                                    <div class="media-body">\n                                        {{doc.owner | fullName}}\n                                        <div class="t--small-dimmed">{{doc.date_created | moment }}</div>\n                                    </div>\n                                </div>\n                            </a>\n                        </td>\n                    </tr>\n\n                    <tr ng-show="tableParams.settings().$loading">\n                        <td class="p"></td>\n                        <td colspan="4"><i class="icon spinner"></i></td>\n                    </tr>\n                </tbody>\n            </table>\n\n        <div ng-show="isEmpty" class="p--lg">\n            <ng-include src="emptyListTemplate" ng-if="!isNotFound"></ng-include>\n            <ng-include src="notFoundTemplate" ng-if="isNotFound"></ng-include>\n        </div>\n\n    </div>\n\n</div>\n'),
    e.put("/views/documents/list/not-found-ro.html", '<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No documents found</h1>\n</div>\n'),
    e.put("/views/documents/list/not-found.html", '<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No documents found</h1>\n    <button ng-click="addDocument()" class="btn btn-primary btn-lg t--bold">Send a new document</button>\n</div>\n'),
    e.put("/views/documents/list/sdk-empty-list-ro.html", '<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-documents color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No related documents yet</h1>\n</div>\n\n'),
    e.put("/views/documents/list/sdk-extension-empty-list-ro.html", '<div class="page-stub sdk-extension__empty-list">\n    <i class="icon icon--huge icon--circle-documents m--bottom m--top-lg color--brand"></i>\n    <h1 class="m--bottom-lg t--primary">No related documents</h1>\n    <p class="color--dimmed m--bottom-lg sdk-extension__empty-list__message">Keep contacts engaged and opportunities moving forward by creating, sending and tracking docs in PandaDoc!</p>\n    <div class="clearfix m--bottom-sm sdk-extension__empty-list__new-doc-btn">\n        <button ng-click="sdkOnNewDocument()" class="btn btn-primary t--larger" ng-disabled="sdkCreatingNewDocument">\n            <spinner visible="sdkCreatingNewDocument" class="push-next" />\n            <span ng-show="sdkCreatingNewDocument">Collecting data...</span>\n            <span ng-show="!sdkCreatingNewDocument">Create a new document</span>\n        </button>\n    </div>\n</div>\n'),
    e.put("/views/documents/list/sdk-extension-list-ro-header.html", ""),
    e.put("/views/documents/list/sdk-extension-list-ro.html", '<div class="h100 scrollable p t--medium sdk-extension__doclist-panel">\n\n    <div class="m--bottom-sm a--center sdk-extension__doclist-pane__new-doc-btn" ng-show="!isEmpty">\n        <button ng-click="sdkOnNewDocument()" class="btn btn-primary btn-block t--medium" ng-disabled="sdkCreatingNewDocument">\n            <spinner visible="sdkCreatingNewDocument" class="push-next" />\n            <span ng-show="sdkCreatingNewDocument">Collecting data...</span>\n            <span ng-show="!sdkCreatingNewDocument">Create a new document</span>\n        </button>\n    </div>\n\n    <h2 class="m--bottom-sm t--normal t--medium color--dimmed sdk-extension__doclist-pane__table-title" ng-show="!isEmpty">Related documents:</h2>\n\n    <div grid scroll-processor scroll-processor-on-scroll="moreItems()" scroll-processor-container=".table-data" class="sdk-extension__doclist-pane__table-content">\n        <table ng-table="tableParams" ng-show="!isEmpty" template-pagination="/views/directives/grid/empty-pagination.html" class="table-data m--none" style="border:1px solid #eee" template-header="/views/documents/list/sdk-extension-list-ro-header.html">\n            <tbody>\n                <tr ng-repeat="doc in $data" class="anim--expand row--clickable">\n                    <td>\n                        <a class="stretcher clearfix" style="padding: 10px 14px" ng-click="onDocumentClickCallback(doc.id, doc.name)">\n                            <div class="m--bottom-xs t--wrap table-data__title">{{ doc.name }}</div>\n                            <document-status status="{{ doc.status }}" icon text class="pull-left"></document-status>\n                            <div class="t--small-dimmed pull-right table-data__date">{{ doc.date_created | moment }}</div>\n                        </a>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n\n        <div class="a--center m--top-sm" ng-show="tableParams.settings().$loading">\n            <i class="icon spinner m--bottom"></i>\n        </div>\n\n        <div ng-show="isEmpty">\n            <ng-include src="emptyListTemplate" ng-if="!isNotFound"></ng-include>\n            <ng-include src="notFoundTemplate" ng-if="isNotFound"></ng-include>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/documents/pad/document-action-panel.html", '<div class="document-action-panel document-action-panel--default clearfix p--lg">\n\n    <div class="pull-right document-action-panel__action" ng-if="!documentInfo.isRecipientCompletedDocument">\n        <button ng-show="isCompleted" ng-if="!documentInfo.isRecipientCompletedDocument"\n                class="btn btn-primary document-action-panel__button" ng-click="complete()" ng-disabled="completing">\n            <spinner visible="completing" class="push-next a--baseline"></spinner>\n            <span ng-if="!completing">Done</span>\n            <span ng-if="completing">Finalizing</span>\n        </button>\n        <div class="popover top document-action-panel__popover anim--expand" ng-if="showCompletionHelpMessage">\n            <div class="arrow"></div>\n            <div class="popover-content">\n                <p>Click <strong>Done</strong> to complete the document.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class="pull-right document-action-panel__action" ng-if="!documentInfo.isRecipientCompletedDocument && actions">\n        <button ng-if="!isCompleted" class="btn btn-primary document-action-panel__button" data-ng-click="nextAction()">\n            Next\n        </button>\n        <div class="popover top document-action-panel__popover anim--expand"\n             ng-if="showNavigationHelpMessage && !isCompleted">\n            <div class="arrow"></div>\n            <div class="popover-content">\n                Click <strong>Next</strong> to navigate through the fields that need to be filled&nbsp;in\n            </div>\n        </div>\n    </div>\n\n    <div class="document-action-panel__action-name a--left" ng-show="!documentInfo.isRecipientCompletedDocument">\n        <div style="padding-bottom:5px;">\n            <span ng-if="actions">\n                <ng-pluralize count="requiredCount - completedCount"\n                              when="{\n              \'0\':\'All items are filled in\',\n              \'1\':\'You have {} item to fill in\',\n              \'other\':\'You have {} items to fill in\'\n              }">\n                </ng-pluralize>\n            </span>\n            <span ng-if="!actions">Loading...</span>\n\n        </div>\n        <div class="progress progress--lite progress-striped active" style="max-width:450px;" ng-show="actions">\n            <div class="progress-bar" ng-style="getProgress()"></div>\n        </div>\n    </div>\n\n    <p class="a--center t--medium m--none" ng-show="documentInfo.isRecipientCompletedDocument">\n        <i class="icon icon--big icon--completed color--green push-next"></i>\n        You have completed this document.</br>\n        <span ng-if="!documentCompletedByAll">Once the document is completed by all signers, you will be able to download a signed copy.</span>\n        <span ng-if="documentCompletedByAll">You can <a href="" ng-click="downloadFile()">download</a> a signed version now.</span>\n    </p>\n</div>\n'),
    e.put("/views/documents/pad/document-action-panel.phone.html", '<div class="document-action-panel document-action-panel--phone clearfix" ng-class="{\'doc-complete\':isCompleted}">\n\n    <p class="a--center t--medium m--none" ng-show="documentInfo.isRecipientCompletedDocument">\n        <i class="icon icon--big icon--completed color--green m--horis-sm"></i>\n        You have completed this document\n    </p>\n\n\n    <div class="pull-right" ng-if="!documentInfo.isRecipientCompletedDocument && actions">\n        <button ng-if="!isCompleted" class="btn btn-primary document-action-panel__button" data-ng-click="nextAction()">Next</button>\n    </div>\n\n    <div class="document-action-panel__action-name a--left" ng-show="!documentInfo.isRecipientCompletedDocument">\n        <span ng-if="!actions">\n            <ng-pluralize count="requiredCount - completedCount"\n                      when="{\n              \'0\':\'All items are filled in.\',\n              \'1\':\'You have {} item to fill in.\',\n              \'other\':\'You have {} items to fill in.\'\n              }">\n            </ng-pluralize>\n        </span>\n        <span ng-if="!actions">Loading...</span>\n    </div>\n\n    <button ng-show="isCompleted" ng-if="!documentInfo.isRecipientCompletedDocument" ng-click="complete()"\n            class="btn btn-primary document-action-panel__button">\n        <spinner visible="completing" class="push-next a--baseline"></spinner>\n        <span ng-if="!completing">Done</span>\n        <span ng-if="completing">Finalizing</span>\n    </button>\n</div>\n'),
    e.put("/views/documents/pad/document-action.html", '<div class="document-action" id="action-{{action.widget.id}}"\n     ng-attr-title="{{action.widget.required ? \'This field is required\':\'\'}}">\n    <i class="icon icon--small icon--flag color--red" ng-if="action.widget.required"></i>\n</div>\n'),
    e.put("/views/documents/pad/document-status-panel.html", '<div class="page-controls">\n    <button ng-click="toggleLabels()" type="button" title="Toggle fields assignment labels"\n            class="btn btn--transparent page-controls__item page-controls__item--togglable"\n            ng-class="{\'active\' : documentInfo.widgetLabelsOn}" ng-if="hasLabelToggle">\n        <i class="icon icon--assignment-label"></i>\n    </button>\n</div>\n'),
    e.put("/views/documents/pad/inline-document-action.html", '<div class="document-action document-action--inline" id="action-{{action.widget.id}}"\n     ng-attr-title="{{action.widget.required ? \'This field is required\':\'\'}}">\n    <i class="icon icon--small icon--flag color--red" ng-if="action.widget.required"></i>\n</div>\n'),
    e.put("/views/documents/pad/pad.html", '<div class="h100 user-theme">\n    <div class="pos--rel z-3" style="height:0" ng-if="documentContentInfo.isEditableContent && documentInfo.permissions.canEditDocumentContent">\n        <text-editor-toolbar class="editor-toolbar--stuck"></text-editor-toolbar>\n    </div>\n\n    <div class="document document-scrollable-marker document-type-{{documentContentInfo.type}}" tabindex="0"\n         ng-class="{\'document--non-editable\': !documentInfo.isDraft, \'document--widget-labels-visible\': documentInfo.widgetLabelsOn}">\n\n        <div class="document__zoom-pad"\n             ng-style="documentContentInfo.documentSize.zoomStyle"\n\n             jui-droppable\n             opt-tolerance="\'touch\'"\n             opt-accept="\'.widget-handle\'"\n             event-over="dragOver"\n             event-out="dragOut"\n             event-drop="drop"\n             tabindex="0">\n\n            <div class="document-page document-page--loading" ng-if="!documentContentInfo || (loadingContent && !documentContentInfo.isEditableContent)">\n                <div class="document-page__sheet"></div>\n            </div>\n\n            <document-page ng-if="!loadingContent && !documentContentInfo.isEditableContent" document-content-info="documentContentInfo" document-info="documentInfo"\n                           action-panel-visible="actionPanelVisible" page="page" ng-repeat="page in pages track by $index"></document-page>\n\n            <editor ng-if="documentContentInfo.isEditableContent" document-content-info="documentContentInfo"\n                    document-info="documentInfo" block-list="documentContentInfo.blockList"></editor>\n\n\n            <attach-document-action-page ng-if="!loadingContent && hasPDFAttachmentFeature && (documentContentInfo.isStaticContent || documentContentInfo.isBoxContent) && documentInfo.permissions.canEditDocumentContent"\n                document-content-info="documentContentInfo" document-info="documentInfo"></attach-document-action-page>\n\n            <div class="document__action-panel-bumper" ng-class="{\'document__action-panel-bumper-big\':hasBottomPanel}"\n                 ng-style="documentContentInfo.documentSize.bumperStyle">\n            </div>\n        </div>\n\n        <token-value-manager document-info="documentInfo" document-content-info="documentContentInfo" ng-style="documentContentInfo.documentSize.zoomStyle"></token-value-manager>\n\n    </div>\n\n    <document-status-panel document-content-info="documentContentInfo" document-info="documentInfo"></document-status-panel>\n\n    <document-action-panel document-info="documentInfo" document-content-info="documentContentInfo" ng-if="actionPanelVisible"></document-action-panel>\n\n    <document-pad-bottom-panel document-info="documentInfo"></document-pad-bottom-panel>\n\n    <document-approve-panel document-info="documentInfo" ng-if="documentInfo.isWaitingForApproval && documentInfo.isApprover"></document-approve-panel>\n\n    <block-drop-message ng-if="documentContentInfo.isEditableContent && documentInfo.permissions.canEditDocumentContent"></block-drop-message>\n\n\n</div>\n'),
    e.put("/views/documents/pad/pad.phone.html", '<div class="h100 user-theme">\n\n    <div class="document document--phone document-scrollable-marker"\n         ng-class="{\'document--non-editable\': !documentInfo.isDraft, \'document--widget-labels-visible\': documentInfo.widgetLabelsOn}" tabindex="0">\n        <div class="document__zoom-pad"\n             ng-class="{\'document__zoom-pad--adjust-for-action-panel\':actionPanelVisible}"\n             ng-style="documentContentInfo.documentSize.zoomStyle"\n             jui-droppable\n             opt-tolerance="\'touch\'"\n             opt-accept="\'.widget-handle\'"\n             event-over="dragOver"\n             event-out="dragOut"\n             event-drop="drop"\n             tabindex="0">\n\n            <div class="document-page document-page--loading" ng-if="!documentContentInfo">\n                <div class="document-page__sheet"></div>\n            </div>\n\n            <document-page ng-if="!documentContentInfo.isEditableContent" document-content-info="documentContentInfo"\n                           document-info="documentInfo" action-panel-visible="actionPanelVisible" page="page" ng-repeat="page in pages"></document-page>\n\n\n            <editor ng-if="documentContentInfo.isEditableContent" document-content-info="documentContentInfo"\n                    document-info="documentInfo" block-list="documentContentInfo.blockList"></editor>\n\n\n            <attach-document-action-page document-content-info="documentContentInfo" document-info="documentInfo"\n                ng-if="hasPDFAttachmentFeature && (documentContentInfo.isStaticContent || documentContentInfo.isBoxContent) && documentInfo.permissions.canEditDocumentContent">\n            </attach-document-action-page>\n\n\n            <div class="document__action-panel-bumper" ng-class="{\'document__action-panel-bumper-big\':hasBottomPanel}" ng-style="documentContentInfo.documentSize.bumperStyle">\n            </div>\n\n        </div>\n\n        <token-value-manager document-info="documentInfo" document-content-info="documentContentInfo" ng-style="documentContentInfo.documentSize.zoomStyle"></token-value-manager>\n\n    </div>\n\n    <document-action-panel ng-if="actionPanelVisible" document-content-info="documentContentInfo" document-info="documentInfo"></document-action-panel>\n\n    <document-pad-bottom-panel document-info="documentInfo"></document-pad-bottom-panel>\n\n    <document-approve-panel document-info="documentInfo" ng-if="documentInfo.isWaitingForApproval && documentInfo.isApprover"></document-approve-panel>\n</div>\n'),
    e.put("/views/documents/toolbar/duplicate-document-button.html", '<span>\n    <button class="btn btn--toolbar" ng-click="duplicate()" ng-disabled="!enabled">\n        <i class="icon icon--lg push-next icon--copy"></i>\n        <span class="btn-text">Duplicate</span>\n    </button>\n</span>\n'),
    e.put("/views/documents/toolbar/movetofolder-button.html", '<span>\n    <button ng-if="alwaysEnabled" class="btn btn--toolbar" ng-click="showDialog()">\n        <i class="icon icon--lg push-next icon--folder-move-to"></i>\n        <span class="btn-text">Move to folder</span>\n    </button>\n\n    <button ng-if="!alwaysEnabled" selection="{condition: \'isAvailable\'}" class="btn btn--toolbar" ng-click="showDialog()">\n        <i class="icon icon--lg push-next icon--folder-move-to"></i>\n        <span class="btn-text">Move to folder</span>\n    </button>\n</span>\n'),
    e.put("/views/documents/toolbar/movetofolder-dialog-folders.html", '<div>\n    <div ng-disabled="!folder.selectable" ng-click="select(folder)" class="btn nav--folders__btn ellipsis" ng-class="{\'active\': folder.active, \'opened\': folder.opened}">\n       <i class="icon color--text-default" ng-class="{\'icon--folder-opened\': folder.opened && !folder.loading, \'icon--folder\': !(folder.opened || folder.loading), \'spinner\': folder.loading}"></i>\n        {{folder.name}} <span class="t--small-dimmed" ng-if="folder.id === currentFolderId">(current folder)</span>\n    </div>\n\n    <ul class="list list--bordered" ng-if="folder.opened">\n        <li ng-repeat="folder in folder.subFolders" ng-include="\'/views/documents/toolbar/movetofolder-dialog-folders.html\'"></li>\n    </ul>\n</div>\n'),
    e.put("/views/documents/toolbar/movetofolder-dialog.html", '<form ng-submit="selectFolder(activeFolder)">\n    <div class="modal-header">\n        <button type="button" class="close" ng-click="$close()" aria-hidden="true">&times;</button>\n        <h4 class="modal-title ellipsis">Move <strong>{{selectedDocumentsTitle}}</strong> to folder</h4>\n    </div>\n    <div class="modal-body">\n        <ul class="list nav--folders" ng-show="folders">\n            <li ng-repeat="folder in folders"\n                ng-include="\'/views/documents/toolbar/movetofolder-dialog-folders.html\'"></li>\n        </ul>\n        <span ng-show="!folders">Loading...</span>\n        <span ng-show="folders.totalCount == 0">You don\'t have any folders yet. Please create folders first.</span>\n    </div>\n    <div class="modal-footer">\n        <button type="submit" class="btn btn-primary btn--stretch-narrow" ng-disabled="!activeFolder || activeFolder.id === currentFolderId">Move</button>\n        <div class="form-control-static a--left pull-left" ng-if="activeFolder">\n            Selected folder: <b>{{activeFolder.name}}</b>\n        </div>\n    </div>\n</form>\n'),
    e.put("/views/documents/toolbar/newfolder-button.html", '<a href="" data-ng-click="showDialog()" class="list__item--oneline p--horis-none ellipsis">\n    <i class="icon icon--folder-add push-next"></i>\n    <span class="color--dimmed t--smaller">Add a new folder</span>\n</a>\n'),
    e.put("/views/documents/toolbar/newfolder-dialog.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="close()" aria-hidden="true">&times;</button>\n    <h4 class="modal-title">Add folder</h4>\n</div>\n<div class="modal-body">\n    <form class="form-row">\n        <div class="form-row__stretcher">\n            <input type="text" ng-model="folder.name" class="form-control" id="folderName" placeholder="Folder name"\n                   focus-me>\n        </div>\n        <button type="submit" ng-click="addFolder()" ng-disabled="folder.name.length == 0"\n                class="btn btn-primary btn--stretch-narrow">Add\n        </button>\n    </form>\n    <style>.modal-dialog{max-width: 400px}</style>\n</div>\n\n\n'),
    e.put("/views/layout/parts/left_nav_panel.html", "<left-panel></left-panel>\n"),
    e.put("/views/layout/parts/top_panel.html", '<div class="panel panel--top">\n    <div class="page-header">\n\n        <div class="page-header__p1">\n            <breadcrumbs></breadcrumbs>\n        </div>\n        <!--/.page-header-p1-->\n\n        <div class="page-header__p2">\n            <div class="page-header__el page-header__el--pad-top">\n                <button  ng-if="!isTemplateSection" ng-click="addDocument()" class="btn btn--smaller btn-primary btn--create-doc ">\n                    New Document\n                </button>\n\n                <button ng-if="isTemplateSection" ng-click="addTemplate()" class="btn btn--smaller btn-primary btn--create-doc ">\n                    New Template\n                </button>\n            </div>\n            <inbox-badge class="page-header__el page-header__el--bordered"></inbox-badge>\n            <div class="page-header__el page-header__el--bordered page-header_el--avatar page-header__el--pad-left page-header__el--pad-top">\n                <profile-widget></profile-widget>\n            </div>\n            <trial-notification></trial-notification>\n        </div>\n        <!--/.page-header-p2-->\n\n    </div>\n    <!--/.page-header-->\n\n</div>\n<!--/.panel--top-->\n'),
    e.put("/views/library/items/empty-list.html", '<div class="page-stub" ng-show="isRootFolder">\n    <i class="page-stub__icon icon icon--circle-content color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-sm t--xlarge t--bold">Save time by reusing your content</h1>\n    <p class="m--auto t--larger m--bottom" style="max-width: 420px">The content library stores blocks of text (product specs, legal clauses, etc.) that you use regularly, helping you create all types of docs fast.</p>\n    <button ng-click="addItem()" class="btn btn-primary btn-lg  t--bold">Create a new content template</button>\n</div>\n\n<div class="page-stub" ng-show="!isRootFolder">\n    <i class="page-stub__icon icon icon--circle-content color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No content templates in this folder</h1>\n    <button ng-click="addItem()" class="btn btn-primary btn-lg  t--bold">Create a new content template</button>\n</div>\n'),
    e.put("/views/library/items/list.html", '<div class="scrollpane scrollpane--has-toolbar">\n    <!-- toolbar -->\n    <div class="toolbar">\n        <ul class="toolbar__set toolbar__set--left with-separators">\n            <li>\n                <button class="btn btn--toolbar" ng-click="addItem()" ng-disabled="creatingItem">\n                    <i class="icon icon--lg icon--plus" ng-if="!creatingItem"></i>\n                    <spinner visible="creatingItem"></spinner>\n                    <span class="btn-text">New Content Template</span>\n                </button>\n            </li>\n            <li>\n                <move-to-folder service="libraryService" selected="selected" permissions="LIBRARY_FOLDERS_PERMISSIONS"></move-to-folder>\n            </li>\n            <li>\n                <duplicate-document selected="selected"></duplicate-document>\n            </li>\n            <li>\n                <button selection class="btn btn--toolbar" ng-click="removeItem()">\n                    <i class="icon icon--lg push-next icon--delete"></i>\n                    <span class="btn-text">Remove</span>\n                </button>\n            </li>\n            <li class="no-separator toolbar__text">\n                <selection-counter></selection-counter>\n            </li>\n        </ul>\n\n        <ul class="toolbar__set toolbar__set--right toolbar__set--padded">\n            <li>\n                <grid-filter></grid-filter>\n            </li>\n        </ul>\n    </div>\n    <!-- grid -->\n    <div grid class="scrollpane__bd"\n         scroll-processor scroll-processor-on-scroll="moreItems()" scroll-processor-container=".table-data"\n            >\n        <table ng-table="tableParams" ng-show="!isEmpty"\n               template-pagination="/views/directives/grid/empty-pagination.html"\n               class="table-data table--has-row-checkboxes">\n\n            <col class="cell-checkbox">\n            <col> <!-- title -->\n            <col class="w25"> <!-- author -->\n\n            <tbody>\n\n            <tr ng-repeat="item in $data" class="row--clickable anim--expand">\n\n                <td header-class="row--clickable" class="cell-checkbox" header="\'/views/directives/grid/selectall.html\'" ng-click="select($event, item)">\n                    <checkbox-cell item="item" selection-model="selectionModel"></checkbox-cell>\n                </td>\n\n                <td data-title="\'Title\'" sortable="\'name\'" class="p--left-none">\n                    <a class="stretcher t--medium" href="#/library/{{item.id}}">\n                        {{item.name}}\n                    </a>\n                </td>\n\n                <td data-title="\'Created By\'" sortable="\'date_created\'" header-class="w15" class="cell--author">\n                    <a class=" stretcher media contact-card" href="#/library/{{item.id}}">\n                        <div hg-if=\'item.date_created\'>\n                            <avatar size="28" user="item.owner" class="pull-left"></avatar>\n                            <div class="media-body">\n                                {{item.owner | fullName}}\n                                <div class="t--small-dimmed">{{item.date_created | moment }}</div>\n                            </div>\n                        </div>\n                    </a>\n                </td>\n            </tr>\n\n            <tr ng-show="tableParams.settings().$loading">\n                <td class="p"></td>\n                <td colspan="2"><i class="icon spinner"></i></td>\n            </tr>\n            </tbody>\n        </table>\n\n        <div ng-show="isEmpty" class="p--lg">\n            <ng-include src="emptyListTemplate" ng-if="!isNotFound"></ng-include>\n            <ng-include src="notFoundTemplate" ng-if="isNotFound"></ng-include>\n        </div>\n\n    </div>\n\n</div>\n'),
    e.put("/views/library/items/not-found.html", '<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-content color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No content templates found</h1>\n    <button ng-click="addItem()" class="btn btn-primary btn-lg  t--bold">Create a new content template</button>\n</div>\n'),
    e.put("/views/onboarding/controllers/onboarding-greeting.html", '<div ng-controller="OnboardingGreetingController" class="onboarding__bd" ng-if="ready">\n\n    <div ng-if="header_image" class="onboarding__poll-header-img">\n        <img width="{{header_image_width}}" ng-src="{{\'img/onboarding/qr-pd.png\' | staticBaseUrl}}" />\n    </div>\n\n    <div ng-if="greeting" class="onboarding__greeting">\n\n        <div class="onboarding__greeting-msg" ng-bind-html="greeting.message"></div>\n\n        <div class="onboarding__greeting-author a--middle">\n\n            <div class="media inline-block w100">\n                <img ng-src="{{\'img/avatar-mikita.png\' | staticBaseUrl}}" alt="" class="pull-left" width="60"/>\n                <div class="media-body">\n                    <strong>{{greeting.author}}</strong>\n                    <div class="onboarding__greeting-ttl" ng-bind-html="greeting.author_title"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <ng-include src="view" ng-if="greeting"></ng-include>\n</div>\n'),
    e.put("/views/onboarding/controllers/onboarding-poll.html", '<div ng-controller="OnboardingPollController" class="onboarding__bd" ng-if="ready" ng-show="questions">\n\n    <div ng-if="header_image" class="onboarding__poll-header-img">\n        <img width="{{header_image_width}}" ng-src="{{\'img/onboarding/qr-pd.png\' | staticBaseUrl}}" />\n    </div>\n\n    <div ng-if="greeting" class="onboarding__greeting">\n\n        <div class="onboarding__greeting-msg" ng-bind-html="greeting.message"></div>\n\n        <div class="onboarding__greeting-author a--middle">\n\n            <div class="media inline-block w100">\n                <img ng-src="{{\'img/avatar-mikita.png\' | staticBaseUrl}}" alt="" class="pull-left" width="60"/>\n                <div class="media-body">\n                    <strong>{{greeting.author}}</strong>\n                    <div class="onboarding__greeting-ttl" ng-bind-html="greeting.author_title"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <onboarding-poll-single-page ng-show="!pollDone" questions="questions" button-title="Next"></onboarding-poll-single-page>\n\n    <ng-include ng-show="nextStepTemplateUrl && pollDone" src="nextStepTemplateUrl"></ng-include>\n</div>\n'),
    e.put("/views/onboarding/controllers/onboarding-slides.html", '<div ng-controller="OnboardingSlidesController" class="onboarding-slides"\n     ng-class="{\'onboarding-slides--video-playing\': videoUrl}">\n    <div class="onboarding-slides__bd">\n        <onboarding-slides slides="slides"></onboarding-slides>\n        <a class="btn close onboarding-slides__close" ng-click="close()">&times;</a>\n    </div>\n</div>\n'),
    e.put("/views/onboarding/directives/join-webinar.html", '<div>\n    <div ng-show="description.length > 0" class="onboarding__slide-txt m--bottom color--dimmed t--primary">{{description}}</div>\n    <a class="btn btn-primary m--bottom-sm" ng-click="joinWebinar()">Join a webinar</a>\n</div>\n'),
    e.put("/views/onboarding/directives/onboarding-banners.html", '<div>\n    <div class="dashboard__p2-cta" ng-if="banner">\n\n        <a href="" class="dashboard__p2-cta-content" ng-click="joinWebinarAction()" ng-if="banner === \'join-webinar-banner\'">\n            <span class="dashboard__p2-cta-img">\n                <img ng-src="{{\'img/onboarding/webinar.png\' | staticBaseUrl}}" width="48" alt=""/>\n            </span>\n            <span class="dashboard__p2-cta-txt t--bold">Join a free Webinar&nbsp;&rsaquo;</span>\n        </a>\n\n        <a href="" class="dashboard__p2-cta-content" ng-click="requestDemoAction()" ng-if="banner === \'request-demo-banner\'">\n            <span class="dashboard__p2-cta-img">\n                <img ng-src="{{\'img/onboarding/presentation.png\' | staticBaseUrl}}" width="40" alt=""/>\n            </span>\n            <span class="dashboard__p2-cta-txt t--bold">Request a free Demo&nbsp;&rsaquo;</span>\n        </a>\n\n        <a href="" class="dashboard__p2-cta-content" ng-click="convertTemplateAction()" ng-if="banner === \'convert-template-banner\'">\n            <span class="dashboard__p2-cta-img">\n                <img ng-src="{{\'img/onboarding/convert.png\' | staticBaseUrl}}" width="42" alt=""/>\n            </span>\n            <span class="dashboard__p2-cta-txt">Сonvert your document template to PandaDoc &nbsp;&rsaquo;</span>\n        </a>\n\n        <a href="" class="dashboard__p2-cta-content" ng-click="inviteMembersAction()" ng-if="banner === \'invite-members-banner\'">\n            <span class="dashboard__p2-cta-img">\n                <img ng-src="{{\'img/onboarding/user-add.png\' | staticBaseUrl}}" width="46" alt=""/>\n            </span>\n            <span class="dashboard__p2-cta-txt t--bold">Invite Your Team Members &nbsp;&rsaquo;</span>\n        </a>\n        <div class="close dashboard__p2-cta-close" ng-click="closeAction()">&times;</div>\n    </div>\n\n</div>\n'),
    e.put("/views/onboarding/directives/poll-single-page.html", '<div class="m--auto onboarding__poll" style="max-width: 300px">\n    <form novalidate name="form">\n        <ul>\n            <li ng-repeat="question in questions">\n                <label class="control-label">{{question.title}}</label>\n                <div class="validation validation--floating m--bottom-sm">\n                    <select name="{{question.id}}" class="form-control form-control--dark w100" tabindex="1" ng-model="question.currentAnswer" ng-options="answer.value as answer.title for answer in question.answers" required>\n                        <option value="" ng-if="question.placeholder && !question.currentAnswer">{{question.placeholder}}</option>\n                    </select>\n                    <div class="validation__msg" ng-show="(form.$submitted || form[question.id].$touched) && form[question.id].$error.required">{{question.error.required ? question.error.required : \'This field is required\'}}</div>\n                </div>\n            </li>\n        </ul>\n\n        <button class="btn m--vert-lg btn--white btn--stretch-narrow m--auto display-block" ng-click="doneAction()" tabindex="1">{{buttonTitle ? buttonTitle : \'Done\'}}</button>\n    </form>\n</div>\n'),
    e.put("/views/onboarding/directives/poll.html", '<form ng-submit="next()"  ng-show="questions" class="onboarding__poll a--center">\n    <div ng-show="currentQuestion">\n        <h2 class="m--bottom t--botd">{{currentQuestion.title}}</h2>\n        <ul ng-show="currentQuestion.answers" class="inline-block m--bottom-lg t--nowrap t--larger a--left">\n            <li ng-repeat="answer in currentQuestion.answers">\n                <label class="radio">\n                    <span class="icon--push-self">{{answer.title}}</span>\n                    <input type="radio" ng-value="answer.value" ng-model="$parent.currentAnswer"/>\n                </label>\n            </li>\n        </ul>\n\n        <div>\n            <button class="btn btn-lg p--horis btn--white onboarding__cta" type="submit"\n                ng-disabled="!currentAnswer">Next &rsaquo;</button>\n        </div>\n    </div>\n</form>\n'),
    e.put("/views/onboarding/directives/request-demo.html", '<div>\n    <a class="btn btn-primary m--bottom-sm" ng-click="showForm = true" ng-show="!showForm">Request a demo</a>\n\n    <div ng-if="showForm">\n        <p class="color--dimmed m--bottom-sm">Please enter your phone number:</p>\n        <div class="inline-block" style="max-width: 290px">\n            <form ng-submit="requestDemo()" class="form-row m--bottom">\n                <div class="form-row__stretcher">\n                    <input type="tel" ng-model="phoneModel.phone" class="form-control" focus-me />\n                </div>\n                <button class="form-row__fixed btn btn-primary btn--stretch-narrow" ng-disabled="!phoneModel.phone || sending" ng-click="requestDemo()">\n                   <spinner visible="sending"></spinner>\n                    Submit\n                </button>\n            </form>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/onboarding/directives/slide-content.html", '<div class="onboarding__slide-bd-centerer">\n    <h2 ng-bind-html="slide.title"></h2>\n    <div class="onboarding__slide-txt m--bottom-lg color--dimmed t--primary" ng-bind-html="slide.text"></div>\n</div>\n'),
    e.put("/views/onboarding/directives/slide-header.html", '\n<div class="onboarding__slide-hd-wrap">\n    <div ng-if="!slide.header_video_url">\n        <img ng-src="{{slide.header_image | staticBaseUrl}}" ng-if="!slide.header_video_url" alt=""\n             class="onboarding__slide-img"/>\n        <div class="onboarding__slide-img-hdr" ng-if="slide.header_title">\n            <h2 class="t--large t--bold" ng-bind-html="slide.header_title"></h2>\n        </div>\n    </div>\n\n    <img ng-src="{{slide.header_image | staticBaseUrl}}"\n         ng-if="slide.header_video_url && !videoUrl" alt=""\n         ng-click="playVideo(slide.header_video_url)" class="onboarding__slide-video"/>\n\n    <div ng-if="slide.header_video_url && videoUrl" class="onboarding-slides__video m--bottom-lg">\n        <youtube-video video-url="videoUrl" player-vars="{autoplay: 1, autohide: 1, showinfo: 0, rel: 0}"></youtube-video>\n    </div>\n</div>\n'),
    e.put("/views/onboarding/directives/slides.html", '<div class="onboarding-slides__slides anim--expand" ng-class="{\'onboarding-slides__slides--video-playing\': videoUrl}">\n    <carousel>\n        <slide ng-repeat="slide in slides">\n            <div ng-include="headerTemplate(slide)" class="onboarding__slide-top"></div>\n            <div ng-include="contentTemplate(slide)" class="onboarding__slide-bd"></div>\n        </slide>\n    </carousel>\n</div>\n'),
    e.put("/views/onboarding/views/join-webinar-dialog.html", '<div class="onboarding-slides">\n    <div class="onboarding-slides__bd">\n\n        <div class="box box--static p--none a--left" ng-controller="JoinWebinarDialogController">\n            <div class="a--center ">\n                <div class="p--lg">\n\n                    <div class="a--center m--vert-lg">\n                        <img ng-src="{{\'img/webinar-hosts.jpg\' | staticBaseUrl}}" alt="" />\n                    </div>\n\n                    <div ng-show="webinarJoined">\n                        <h2>Thank you!</h2>\n                        <div class="onboarding__slide-txt m--bottom color--dimmed t--primary">\n                            You should receive a confirmation email any moment now. We\'re looking forward to seeing you at the webinar!\n                        </div>\n                        <button class="form-row__fixed btn btn-primary btn--stretch-narrow" ng-click="goToDashboard()">\n                            Go to Dashboard\n                        </button>\n                    </div>\n\n                    <div ng-show="!webinarJoined">\n                        <h2 style="font-size: 22px" class="m--bottom">\n                            PandaDoc has a lot under the hood. Join our free webinar and we will take you through our app.\n                        </h2>\n\n                        <join-webinar ng-show="!webinarJoined"></join-webinar>\n\n                    </div>\n\n                </div>\n            </div>\n            <a class="btn close onboarding-slides__close" ng-click="close()">&times;</a>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/onboarding/views/pre-qualification-organization-info.html", '<div ng-controller="OnboardingOrganizationInfoController" class="m--auto" style="max-width: 300px;">\n    <form name="form" novalidate>\n        <ul>\n            <li class="m--bottom-sm">\n                <label class="control-label">Company name</label>\n                <div class="validation validation--floating">\n                    <input focus-me name="company_name" type="text" ng-model="organization.company_name" class="form-control form-control--dark" required ng-maxlength="60"/>\n                    <div class="validation__msg" ng-show="(form.$submitted || form.company_name.$touched) && form.company_name.$error.required">Please enter your company name</div>\n                    <div class="validation__msg" ng-show="(form.$submitted || form.company_name.$touched) && form.company_name.$error.maxlength">Company name cannot be longer than 60 characters</div>\n                </div>\n            </li>\n            <li class="m--bottom-sm">\n                <label class="control-label">Phone</label>\n                <div class="validation validation--floating">\n                    <input name="phone" type="text" ng-model="organization.phone" class="form-control form-control--dark" required ng-maxlength="60"/>\n                    <div class="validation__msg" ng-show="(form.$submitted || form.phone.$touched) && form.phone.$error.required">Please enter your phone number</div>\n                    <div class="validation__msg" ng-show="(form.$submitted || form.phone.$touched) && form.phone.$error.maxlength">Phone number cannot be longer than 60 characters</div>\n                </div>\n            </li>\n            <li class="m--bottom-sm">\n                <label class="control-label">Industry</label>\n                <div class="validation validation--floating">\n                    <select name="industry" class="form-control form-control--dark" ng-options="industry for industry in industries" ng-model="organization.industry" required>\n                        <option value="" ng-if="!organization.industry">- Select industry -</option>\n                    </select>\n                    <div class="validation__msg" ng-show="(form.$submitted || form.industry.$touched) && form.industry.$error.required">Please select your industry</div>\n                </div>\n            </li>\n        </ul>\n\n        <button class="btn m--vert-lg btn--white btn--stretch-narrow m--auto display-block" ng-click="doneAction()">Done</button>\n    </form>\n</div>\n'),
    e.put("/views/onboarding/views/pre-qualification-sample-document.html", '<div ng-controller="OnboardingCheckSampleDocumentController"\n     class="a--center m--auto" style="max-width: 300px;">\n    <p class="m--bottom m--top-lg">\n        <a class="btn btn--white btn-lg" ng-click="checkSampleDocumentAction()">Check the sample document</a>\n    </p>\n    <a ng-click="close()" class="link-camouflage opacity-5">No, Thanks</a>\n</div>\n'),
    e.put("/views/onboarding/views/request-demo-dialog.html", '<div class="onboarding-slides">\n    <div class="onboarding-slides__bd">\n\n        <div class="box box--static p--none a--left" ng-controller="RequestDemoDialogController">\n            <div class="a--center ">\n                <div class="p--lg">\n\n                    <div class="a--center m--vert-lg">\n                        <img ng-src="{{\'img/demo-hosts.jpg\' | staticBaseUrl}}" alt="" />\n                    </div>\n\n                    <div ng-show="demoRequested">\n                        <h2>Thank you, we got your request!</h2>\n                        <div class="onboarding__slide-txt m--bottom color--dimmed t--primary">\n                            A PandaDoc representative will be reaching out to you\n                            <br/> soon to schedule your demo for a date and time that’s\n                            <br/> convenient for you.\n                        </div>\n                        <button class="form-row__fixed btn btn-primary btn--stretch-narrow" ng-click="goToDashboard()">\n                            Go to Dashboard\n                        </button>\n                    </div>\n\n                    <div ng-show="!demoRequested">\n                        <h2 style="font-size: 22px" class="m--bottom">\n                        	Sign up for a demo of PandaDoc to get the inside scoop from our experts!\n                        </h2>\n                        <request-demo show-form="1"></request-demo>\n                    </div>\n\n                </div>\n            </div>\n            <a class="btn close onboarding-slides__close" ng-click="close()">&times;</a>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/settings/account/account.html", '<div class="p--lg p--top anim--slide-in-from-left">\n\n    <h1 class="section-header">Account</h1>\n\n    <div class="hr block"></div>\n\n    <!--<ul class="list list--tabs m--bottom">-->\n        <!--<li ng-class="{\'active\': activeRoute == \'settings.account.subscription\'}">-->\n            <!--<a href="#/settings/account/subscription/">Subscription</a>-->\n        <!--</li>-->\n        <!--<li ng-class="{\'active\': activeRoute == \'settings.account.history\'}">-->\n            <!--<a href="#/settings/account/history/">Account history</a>-->\n        <!--</li>-->\n        <!--<li ng-class="{\'active\': activeRoute == \'settings.account.management\'}">-->\n            <!--<a href="#/settings/account/management/">Account management</a>-->\n        <!--</li>-->\n    <!--</ul>-->\n\n    <div ui-view="content"></div>\n\n</div>\n'),
    e.put("/views/settings/account/confirm-account-change.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h4 class="modal-title">Confirm subscription</h4>\n</div>\n<div class="modal-body">\n    <p>You\'re about to change your current <b>{{\'billing.plan.\' + currentPlan.handle + \'.name\' | translate}}</b> plan.\n        Your new plan is</p>\n    <table class="m--bottom" height="60">\n        <tr>\n            <td class="a--top">\n                <h4 class="t--larger">{{\'billing.plan.\' + newPlan.handle + \'.name\' | translate}}</h4>\n                <a href="" class="link-brand-dimmed link-underline m--top-sm" ng-if="isAnnual" ng-click="chooseMonthlyPlan()">or pay monthly</a>\n                <a href="" class="link-brand-dimmed link-underline m--top-sm" ng-if="!isAnnual" ng-click="chooseAnnualPlan()">or pay annually</a>\n            </td>\n            <td class="p--left a--right">\n                <h4 class="t--larger">${{newPlan.total_price}} <span class="color--dimmed">/ {{\'billing.interval.\' + newPlan.interval | translate}}</span></h4>\n                <!-- annual plan -->\n                <span class="color--dimmed">\n                    <ng-pluralize count="newPlan.actual_seats" when="{\'1\' : \'1 user\', \'other\': \'{} users\'}"></ng-pluralize> &times; ${{newPlan.monthlyPrice | number : 0}} <span ng-if="isAnnual">&times; 12 months</span>\n                    <span ng-if="isAnnual"></br>(It\'s just ${{newPlan.monthlyPrice * newPlan.actual_seats}}&thinsp;/&thinsp;month!)</span>\n                </span>\n\n            </td>\n        </tr>\n    </table>\n    <p>Once you click confirm, your credit card will be charged the above amount minus your current account credit.</p>\n</div>\n<div class="modal-footer">\n    <button ng-click="confirmSubscription()" ng-disabled="switchingToNewPlan" class="btn btn-primary btn--stretch-narrow pull-right">\n        <spinner visible="switchingToNewPlan"></spinner>\n        <span ng-if="!switchingToNewPlan">Confirm</span>\n        <span ng-if="switchingToNewPlan">Updating</span>\n    </button>\n    <button ng-click="$dismiss()" class="btn btn-default btn--stretch-narrow pull-left">Cancel</button>\n</div>\n<style>.modal-dialog {max-width: 510px;}</style>\n'),
    e.put("/views/settings/account/history.html", "history"),
    e.put("/views/settings/account/management.html", "management"),
    e.put("/views/settings/account/old-subscription-plan.html", '<div class="plan" ng-class="{\'plan--active\': hovered}" ng-show="subscription.plan">\n\n    <subscription-state subscription="subscription"></subscription-state>\n\n    <div class="plan__bd">\n        <div class="plan__part-1-1">\n            <h2 class="plan__title">{{\'billing.plan.\' + subscription.plan.handle + \'.name\' | translate}}\n                <span class="color--brand">is your plan</span>\n            </h2>\n            <p class="color--dimmed m--none">{{\'billing.plan.\' + subscription.plan.handle + \'.description\' | translate}}</p>\n        </div>\n        <div class="plan__part-1-2">\n            <div class="plan__part-1-2-wrap">\n\n                <div class="plan__price-comment">\n                    Billed <span ng-if="subscription.plan.interval === ANNUAL">annually</span><span ng-if="subscription.plan.interval === MONTHLY">monthly</span>\n                    <span ng-if="subscription.plan.handle === \'pd_plans_v2_enterprise_an_10_plus\'">\n                        <br/> 10+ team members\n                    </span>\n                </div>\n\n                <div class="plan__price-dlr">$</div>\n                <div class="plan__price-val">{{subscription.plan.monthlyPrice}}</div>\n                <div class="plan__price-comment-2">a month\n                    <span ng-if="subscription.plan.handle === \'pd_plans_v2_enterprise_an_10_plus\'"><br/> per user</span>\n                </div>\n            </div>\n        </div>\n        <div class="plan__part-2">\n            <div class="plan__part-2-wrap">\n                <div class="plan__features ">\n                    <ul class="unstyled plan__feature-list plan__feature-list--collapsed" ng-if="subscription.plan.type === PROFESSIONAL">\n                        <li>5 templates</li>\n                        <li>Unlimited docs & eSignatures</li>\n                        <li>Documents analytics</li>\n                        <li>Document Builder</li>\n                        <li>Custom branding</li>\n                        <li>Price table and catalog</li>\n                        <li>Email Support</li>\n                    </ul>\n\n                    <ul class="unstyled plan__feature-list plan__feature-list--collapsed" ng-if="subscription.plan.type === BUSINESS">\n                        <!-- unique features -->\n                        <li>Unlimited templates</li>\n                        <li>Unlimited docs & eSignatures</li>\n                        <li>Documents analytics</li>\n                        <li>Email and Phone Support</li>\n                        <li>Document Builder</li>\n                        <li>Custom branding</li>\n                    </ul>\n\n                    <ul class="unstyled plan__feature-list plan__feature-list--collapsed" ng-if="subscription.plan.type === ENTERPRISE"\n                        ng-class="{\'plan__feature-list--collapsed\': featureListCollapsed}">\n                        <!-- unique features -->\n                        <li>Unlimited templates</li>\n                        <li>Unlimited docs & eSignatures</li>\n                        <li>Documents analytics</li>\n                        <li>Multiple teams and workspaces</li>\n                        <li>Advanced security permissions and roles</li>\n                        <li>API and custom integrations</li>\n                        <li>Email and phone support + Dedicated Account Manager</li>\n                        <li>Private Team Training Sessions</li>\n                        <li>Document Design Assistance</li>\n\n                        <!-- features from professional + business plan -->\n                        <li class="plan__descendant-feature">Document Builder</li>\n                        <li class="plan__descendant-feature">Custom branding</li>\n                        <li class="plan__descendant-feature">Price table and catalog</li>\n                        <li class="plan__descendant-feature">Content library</li>\n                        <li class="plan__descendant-feature">Workflows and Approvals</li>\n                        <li class="plan__descendant-feature">Documents embedding and signing in your website</li>\n\n                        <li><a  class="link-dotted" ng-click="featureListCollapsed = !featureListCollapsed">\n                            <span ng-show="featureListCollapsed">Show all features</span>\n                            <span ng-show="!featureListCollapsed">Show less</span>\n                        </a></li>\n                    </ul>\n\n                </div>\n                <div class="plan__action">\n                    <button ng-disabled="switchingToAnotherPlan" class="btn btn-primary p--horis-sm" ng-if="updateBillingDetailsUrl" ng-click="checkout()">\n                        Update billing info\n                    </button>\n\n                    <span class="color--dimmed" ng-if="!updateBillingDetailsUrl">\n                        Please <a class="link-hover" contact-us>contact us</a> if you would like to update your billing details.\n                    </span>\n\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/settings/account/subscription-checkout.html", '<div class="m--bottom pos--rel" style="max-width: 620px">\n\n    <spinner visible="loading"></spinner>\n\n    <div ng-show="selectedPlan">\n\n        <div class="pull-right" ng-show="!switchingToNewPlan">\n            <span class="t--large a--top inline-block">$</span>\n            <span class="t--xl a--top reset-line-height">{{selectedPlan.total_price | number : 0}}</span>\n            <span class="a--top inline-block push-self p--top-xs">total</span>\n        </div>\n\n        <div class="pull-right" ng-show="switchingToNewPlan">\n            <spinner visible="switchingToNewPlan"></spinner>\n        </div>\n        <h1 class="t--large inline-block">Your plan: <b>{{\'billing.plan.\' + selectedPlan.handle + \'.name\' | translate}}</b></h1>\n        <a class="link-secondary push-self t--italic t--medium simple-hover" ng-click="backToPlans()">change plan</a>\n\n\n        <ul class="t--larger" ng-if="!subscription.plan.is_active && subscription.plan.handle === \'pd_plans_v2_enterprise_an_10_plus\'">\n            <li ng-class="{\'radio\' : monthlyPlan}" ng-if="annualPlan">\n                <label class="push-self">\n                    Pay annually\n                    <span class="color--dimmed" ng-if="annualPlan.actual_seats > 10">\n                        (${{annualPlan.monthlyPrice | number : 0}} &times; <ng-pluralize count="annualPlan.actual_seats" when="{\'1\' : \'1 user\', \'other\': \'{} users\'}"></ng-pluralize> &times; 12 months)\n                    </span>\n                    <span class="color--dimmed" ng-if="annualPlan.actual_seats < 10">\n                         (${{annualPlan.monthlyPrice | number : 0}} &times; 10 users &times; 12 months)\n                    </span>\n                </label>\n            </li>\n\n        </ul>\n\n\n        <ul class="t--larger" ng-if="subscription.plan.is_active">\n            <li ng-class="{\'radio\' : monthlyPlan}" ng-if="annualPlan">\n                <label class="push-self">\n                    Pay annually <span ng-if="monthlyPlan">and save {{ 100 - (annualPlan.monthlyPrice * 100 / monthlyPlan.monthlyPrice) | number : 0}}%</span>\n                    <span class="color--dimmed">\n                        (${{annualPlan.monthlyPrice | number : 0}} &times; <ng-pluralize count="annualPlan.actual_seats" when="{\'1\' : \'1 user\', \'other\': \'{} users\'}"></ng-pluralize> &times; 12 months)\n                    </span>\n                    <input type="radio" name="planModel" ng-model="selectedPlanModel.selected" ng-value="annualPlan.id" ng-show="monthlyPlan" ng-disabled="switchingToNewPlan">\n                </label>\n            </li>\n            <li class="radio" ng-if="monthlyPlan">\n                <label>\n                    <span class="push-self">\n                        Pay month-to-month\n                        <span class="color--dimmed">\n                            (${{(monthlyPlan.monthlyPrice * monthlyPlan.actual_seats)| number : 0}} for <ng-pluralize count="monthlyPlan.actual_seats" when="{\'1\' : \'1 user\', \'other\': \'{} users\'}"></ng-pluralize> each month)\n                        </span>\n                    </span>\n                    <input type="radio" name="planModel" ng-model="selectedPlanModel.selected" ng-value="monthlyPlan.id" ng-disabled="switchingToNewPlan">\n                </label>\n            </li>\n        </ul>\n\n        <!-- coupon management -->\n        <p class="m--bottom a--right" ng-if="subscription && isChargifySubscription && (isSubscriptionInTrial || isSubscriptionFree)">\n            <a ng-click="showRedeemCouponDialog()" class="link-dotted simple-hover">Have a coupon code? </a>\n        </p>\n\n        <div class="hr m--top m--bottom-lg"></div>\n\n        <h2 class="t--large t--normal">Billing information</h2>\n\n        <div class="pos--rel">\n            <iframe width="100%" height="300" ng-src="{{checkoutFormUrl | appBaseUrl : true}}" frameborder="0"></iframe>\n            <div class="pos--abs top-0 left-0 w100 h100 opacity-5 bg--white" ng-if="switchingToNewPlan"></div>\n        </div>\n\n    </div>\n\n\n</div>\n'),
    e.put("/views/settings/account/subscription-plan.html", '<div class="plan" ng-show="plan" ng-class="{\'plan--active\': hovered}">\n\n    <subscription-state subscription="subscription" ng-if="isCurrentPlan()"></subscription-state>\n\n    <div class="plan__bd">\n        <div class="plan__part-1-1">\n            <h2 class="plan__title">{{\'billing.plan.\' + plan.handle + \'.name\' | translate}}\n                <span class="color--brand" ng-if="isCurrentPlan()">is your plan</span></h2>\n            <p class="color--dimmed m--none">{{\'billing.plan.\' + plan.handle + \'.description\' | translate}}</p>\n        </div>\n        <div class="plan__part-1-2">\n            <div class="plan__part-1-2-wrap">\n\n                <div class="plan__price-comment">\n                    Billed annually\n                    <span ng-if="hasAnnualAndMonthlyVariations()">\n                        <br/> or ${{getMonthlyPlan().monthlyPrice}} month-to-month\n                    </span>\n                </div>\n\n                <div class="plan__price-dlr">$</div>\n                <div class="plan__price-val">{{getAnnualPlan().monthlyPrice}}</div>\n                <div class="plan__price-comment-2">a month <br/> per user</div>\n            </div>\n        </div>\n        <div class="plan__part-2">\n            <div class="plan__part-2-wrap">\n                <div class="plan__features ">\n                    <ul class="unstyled plan__feature-list plan__feature-list--collapsed" ng-if="type === PROFESSIONAL">\n                        <li>5 templates</li>\n                        <li>Unlimited docs & eSignatures</li>\n                        <li>Documents analytics</li>\n                        <li>1-10 team members</li>\n                        <li>Document Builder</li>\n                        <li>Custom branding</li>\n                        <li>Price table and catalog</li>\n                        <li>Email Support</li>\n                    </ul>\n\n                    <ul class="unstyled plan__feature-list plan__feature-list--collapsed" ng-if="type === BUSINESS"\n                        ng-class="{\'plan__feature-list--collapsed\': featureListCollapsed}">\n                        <!-- unique features -->\n                        <li>Unlimited templates</li>\n                        <li>Unlimited docs & eSignatures</li>\n                        <li>Documents analytics</li>\n                        <li>Content library</li>\n                        <li>Workflows and Approvals</li>\n                        <li>Documents embedding and signing in your website</li>\n                        <li>Email and Phone Support</li>\n                        <li>Salesforce integration</li>\n\n                        <!-- features from professional plan -->\n                        <li class="plan__descendant-feature">1-10 team members</li>\n                        <li class="plan__descendant-feature">Document Builder</li>\n                        <li class="plan__descendant-feature">Custom branding</li>\n                        <li class="plan__descendant-feature">Price table and catalog</li>\n\n                        <li><a  class="link-dotted" ng-click="featureListCollapsed = !featureListCollapsed">\n                            <span ng-show="featureListCollapsed">Show all features</span>\n                            <span ng-show="!featureListCollapsed">Show less</span>\n                        </a></li>\n                    </ul>\n\n                    <ul class="unstyled plan__feature-list plan__feature-list--collapsed" ng-if="type === ENTERPRISE"\n                        ng-class="{\'plan__feature-list--collapsed\': featureListCollapsed}">\n                        <!-- unique features -->\n                        <li>Unlimited templates</li>\n                        <li>Unlimited docs & eSignatures</li>\n                        <li>Documents analytics</li>\n                        <li>Multiple teams and workspaces</li>\n                        <li>Advanced security permissions and roles</li>\n                        <li>API and custom integrations</li>\n                        <li>Email and phone support + Dedicated Account Manager</li>\n                        <li>Private Team Training Sessions</li>\n                        <li>Document Design Assistance </li>\n\n                        <!-- features from professional + business plan -->\n                        <li class="plan__descendant-feature">Salesforce integration</li>\n                        <li class="plan__descendant-feature">Document Builder</li>\n                        <li class="plan__descendant-feature">Custom branding</li>\n                        <li class="plan__descendant-feature">Price table and catalog</li>\n                        <li class="plan__descendant-feature">Content library</li>\n                        <li class="plan__descendant-feature">Workflows and Approvals</li>\n                        <li class="plan__descendant-feature">Documents embedding and signing in your website</li>\n\n                        <li><a  class="link-dotted" ng-click="featureListCollapsed = !featureListCollapsed">\n                            <span ng-show="featureListCollapsed">Show all features</span>\n                            <span ng-show="!featureListCollapsed">Show less</span>\n                        </a></li>\n                    </ul>\n\n                </div>\n                <div class="plan__action">\n                    <button ng-disabled="switchingToAnotherPlan" class="btn btn-primary p--horis-sm" ng-if="isCurrentPlan() && updateBillingDetailsUrl" ng-click="checkout()">\n                        Update billing info\n                    </button>\n\n                    <span class="color--dimmed" ng-if="isCurrentPlan() && !updateBillingDetailsUrl">\n                        Please <a class="link-hover" contact-us>contact us</a> if you would like to update your billing details.\n                    </span>\n\n                    <button ng-disabled="switchingToAnotherPlan" class="btn plan__action__select" ng-class="{\'btn-default\': !hovered, \'btn-primary\': hovered}" ng-click="select()" ng-if="!isCurrentPlan()">\n                        <spinner visible="switchingToThisPlan"></spinner>\n                        Select this plan\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/settings/account/subscription-state.html", '<div class="plan__aside">\n\n    <!-- loading -->\n    <spinner visible="!subscription"></spinner>\n\n    <!-- Top part -->\n    <div class="plan__aside-hd" ng-show="subscription">\n        <!-- trial state -->\n        <div class="t--smaller" ng-if="isSubscriptionInTrial">\n            <p>\n                <span ng-if="trialDaysLeft > 0">You are on trial. <br/> Only <b>{{ trialDaysLeft }}</b> <ng-pluralize\n                    count="trialDaysLeft" when="{\'1\' : \'day\', \'other\': \'days\'}"></ng-pluralize> left.\n                </span>\n                <span ng-if="trialDaysLeft <= 0">Your trial period has ended.</span>\n            </p>\n        </div>\n\n        <p class="t--smaller color--brand " ng-if="isSubscriptionActive">\n            All good. Your account is in a good standing.</p>\n\n        <div class="t--smaller" ng-if="!isSubscriptionActive && !isSubscriptionFree && !isSubscriptionInTrial">\n            <p><span class="color--red">Your account has been temporarily suspended.</span>\n                <br><br> Please update your billing details to reactivate it.</p>\n        </div>\n\n    </div>\n\n    <!-- Bottom part -->\n    <div ng-show="subscription" class="plan__aside-ft">\n        <!-- paid subscription -->\n        <div ng-if="!isSubscriptionFree && !isSubscriptionInTrial && !isSubscriptionInTrial">\n\n            <!-- annual plans -->\n            <p ng-if="isSubscriptionAnnual">\n                Annual payment is <span class="t--nowrap"><b class="color--text-default">${{subscription.total_price | number : 0}}</b>. </span>\n\n                <span class="color--dimmed t--small" ng-if="subscription.plan.is_active"><br/>\n                    <ng-pluralize count="subscription.actual_seats" when="{\'1\' : \'1 user\', \'other\': \'{} users\'}"></ng-pluralize>\n                    &times; ${{subscription.plan.monthlyPrice | number : 0}} &times; 12 months</span>\n\n                <!-- old enterpise -->\n                <span class="color--dimmed t--small"\n                      ng-if="subscription.plan.handle === \'pd_plans_v2_enterprise_an_10_plus\' && (!isSubscriptionEnterprise || subscription.actual_seats > 10)"><br/>\n                    <ng-pluralize count="subscription.actual_seats" when="{\'1\' : \'1 user\', \'other\': \'{} users\'}"></ng-pluralize>\n                    &times; ${{subscription.plan.monthlyPrice | number : 0}} &times; 12 months</span>\n\n                <span class="color--dimmed t--small"\n                      ng-if="subscription.plan.handle === \'pd_plans_v2_enterprise_an_10_plus\' && isSubscriptionEnterprise && subscription.actual_seats < 10"><br/>\n                    10 users &times; ${{subscription.plan.monthlyPrice | number : 0}} &times; 12 months</span>\n\n            </p>\n\n            <!-- monthly plans -->\n            <p ng-if="!isSubscriptionAnnual">\n                Monthly payment is <span class="t--nowrap"><b class="color--text-default">${{subscription.total_price | number : 0}}</b>&thinsp;/&thinsp;month.</span>\n                <span class="color--dimmed t--small" ng-if="subscription.plan.is_active"><br/>\n                    <ng-pluralize count="subscription.actual_seats" when="{\'1\' : \'1 user\', \'other\': \'{} users\'}"></ng-pluralize>\n                    &times; ${{subscription.plan.monthlyPrice | number : 0}}</span>\n\n            </p>\n\n        </div>\n\n        <div ng-if="isSubscriptionActive">\n            <p>Next charge will happen on <b class="color--text-default">{{subscription.next_assessment_date | date}}.</b></p>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/settings/account/subscription.html", '<div class="m--bottom pos--rel" style="max-width: 925px">\n\n    <!-- free plan -->\n    <div ng-if="isSubscriptionFree" class="m--bottom">\n        You have <b>{{subscription && subscription.docs_count === -1 ? \'Unlimited\' : subscription.docs_count}}</b> documents to send.\n    </div>\n\n    <div class="account-plans-list">\n\n        <old-subscription-plan subscription="subscription" ng-if="subscription.plan && !subscription.plan.is_active"></old-subscription-plan>\n\n        <subscription-plan plans="plans" type="PROFESSIONAL" subscription="subscription"></subscription-plan>\n        <subscription-plan plans="plans" type="BUSINESS" subscription="subscription"></subscription-plan>\n        <subscription-plan plans="plans" type="ENTERPRISE" subscription="subscription"></subscription-plan>\n\n    </div>\n\n    <spinner visible="loading"></spinner>\n\n    <p class="m--top">Need more seats? Please <a class="link-hover" contact-us>contact us</a> and we will extend your account.</p>\n\n    <div class="cancel-subscription m--top">\n        <div ng-if="isChargifySubscription && !isSubscriptionFree">\n            <p><button class="btn btn-link color--red" ng-click="cancelSubscription()" ng-disabled="isCancelingInProgress">\n                Cancel subscription.\n                <spinner visible="canceling" class="push-self"></spinner>\n            </button> Cancelling your subscription will result in loss of functionality within your account.</p>\n        </div>\n        <div ng-if="!isChargifySubscription || isSubscriptionFree">\n            <hr class="m--vert"/>\n            <p class="color--dimmed">\n                Please <a contact-us>contact us</a> if you would like to completely cancel your account.\n            </p>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/settings/billing/billing.html", '<div ng-if="ready && chargify" ng-include="\'/views/settings/billing/chargify/billing-plans.html\'"></div>\n<div ng-if="ready && stripe" ng-include="\'/views/settings/billing/stripe/billing-packages.html\'"></div>'),
    e.put("/views/settings/branding/branding.html", '<div class="p--lg p--top anim--slide-in-from-left">\n    <span ng-if="!branding"><i class="icon spinner"></i></span>\n\n    <div ng-if="branding">\n        <h1 class="section-header">Branding</h1>\n        <div class="hr block"></div>\n\n        <div class="branding__logo m--bottom">\n\n            <h2 class="section-header t--medium">Logo</h2>\n            <div class="media m--bottom">\n                <div class="pos--rel pull-left m--right branding-logo">\n                    <img ng-src="{{branding.main_logo}}" class="branding-logo__img"/>\n                </div>\n                <div class="media-body w40">\n                    <p class="t--small-dimmed m--bottom-none" style="margin-top: -2px">\n                        A logo will be displayed for your customers in all documents and emails you send.\n                        The image file should be in <strong>PNG or GIF</strong> format and scaled to <strong>200 x 50 pixels</strong>.\n                        An image with a transparent background is preferable.\n                    </p>\n                    <image-file-uploader delegate="logoUploaderDelegate"\n                                         css-class="btn btn--transparent pull--padding-left"\n                                         icon-class="icon--edit"\n                                         text="Change logo"></image-file-uploader>\n                </div>\n            </div>\n\n            <h2 class="section-header t--medium">Workspace Icon</h2>\n            <div class="media m--bottom">\n                <div class="pos--rel pull-left m--right branding-logo">\n                    <img ng-src="{{branding.icon_src}}" class="branding-logo__img"/>\n                </div>\n                <div class="media-body w40">\n                    <p class="t--small-dimmed m--bottom-none" style="margin-top: -2px">Workspace icon will be displayed in the application and is not visible to your customers. Icon should have square proportions.</p>\n\n                    <image-file-uploader delegate="iconUploaderDelegate"\n                                         css-class="btn btn--transparent pull--padding-left"\n                                         icon-class="icon--edit"\n                                         text="Customize icon"></image-file-uploader>\n                </div>\n            </div>\n\n\n\n            <!--div class="m--bottom-lg anim--expand" ng-if="showIconEditor">\n                <div class="hr"></div>\n\n                <h2 class="section-header t--medium">Customize icon</h2>\n                <div class="inline-block btn--stretch-narrow a--top m--right-sm">\n                    <label>Letters</label>\n                    <input focus-me maxlength="3" class="form-control m--bottom"\n                           style="width: 4em;height:30px" ng-model="iconTitle"\n                        placeholder="AB"/>\n                </div>\n\n                <div class="inline-block btn--stretch-narrow a--top p--right-lg border--right-gray">\n\n                    <label>Background color&nbsp;</label>\n                    <div class="m--bottom-sm">\n                        <spectrum-colorpicker ng-model="iconColor" options="{\n                        change: onColorChanged,\n                        showInput: true,\n                        preferredFormat: \'hex\',\n                        offset: {\n                            adjustLeft:-80\n                        }\n                    }"></spectrum-colorpicker>\n                    </div>\n                </div>\n\n                <div class="inline-block btn--stretch-narrow a--top p--left-lg">\n\n                    Or upload an icon\n                    <div>\n                        <image-file-uploader text="Select image" delegate="imageUploaderDelegate"\n                             css-class="btn btn--transparent pull--padding-left m--right-sm" icon-class="icon--edit"></image-file-uploader>\n                        <button class="btn btn-danger" ng-if="logoImageUrl" ng-click="removeImage()">Remove image</button>\n                    </div>\n\n                </div>\n\n                <div class="">\n                    <button class="btn btn-primary btn--stretch-narrow m--right-sm">Save</button>\n                    <button class="btn btn-default btn--stretch-narrow" ng-click="toggleIconEditor()">Cancel</button>\n                </div>\n\n            </div-->\n\n        </div>\n\n        <div class="hr block"></div>\n\n        <div class="branding__emails m--bottom">\n            <h2 class="section-header t--medium">Emails</h2>\n            <p>The logo selected above will be used for all emails.</p>\n            <label class="control-label">Email footer text</label>\n            <textarea class="form-control w50 m--bottom" ng-model="branding.email_footer_text" rows="4" msd-elastic="\\n"\n                      placeholder="PandaDoc is an application to send, track, annotate, and sign documents online in a fast, secure and professional way.">\n                PandaDoc is an application to send, track, annotate, and sign documents online in a fast, secure and professional way.\n            </textarea>\n            <button class="btn btn-primary btn--stretch-narrow" ng-click="updateEmailBrandingSettings()">Save</button>\n        </div>\n\n        <!--div class="hr block"></div>\n        <div class="branding__doc-themes m--bottom">\n            <h2 class="section-header t--medium">Document Themes</h2>\n        </div-->\n    </div>\n</div>\n'),
    e.put("/views/settings/integrations/integration-settings.html", '<div class="p integration-settings" ng-if="!integration">\n  <spinner visible="!integration"></spinner>\n</div>\n<div class="p integration-settings" ng-if="integration">\n    <div>\n        <img ng-src="{{\'img/integrations/logo-\' + integration.integration | staticBaseUrl}}.png"\n             alt="{{\'integration.\' + integration.integration + \'.name\' | translate}}"\n             class="integration-settings__logo"/>\n\n         <div ng-if="integration.is_active && !chromeAddOn">\n             <button ng-click="disableIntegration()" ng-if="integration.integration !== \'webhook\'" class="btn btn-sm btn-danger integration-settings__disable" ng-disabled="disabling">\n                 <spinner visible="disabling" class="push-next"></spinner>\n                 Disable\n             </button>\n         </div>\n    </div>\n    <div class="hr m--bottom"></div>\n\n    <p class="color--dimmed m--bottom-lg">\n        {{\'integration.\' + integration.integration + \'.description\' | translate}}\n    </p>\n\n    <div ng-if="!integration.is_active">\n\n        <div ng-show="features.length > 0">\n            <p class="t--caps t--medium"> It allows you to:</p>\n            <ul class="m--bottom">\n                <li class="integration-settings__point" ng-repeat="feature in features">{{feature | translate}}</li>\n            </ul>\n            <div ng-show="!faq" class="hr block"></div>\n        </div>\n\n        <div ng-show="faq">\n            <p class="t--caps t--medium"> Integration setup help:</p>\n            <ul class="m--bottom">\n                <li class="integration-settings__point integration-settings__point--help">\n                    <a target="_blank" ng-href="{{faq}}" class="break-word link-hover">{{faq}}</a>\n                </li>\n            </ul>\n\n            <div class="hr block"></div>\n        </div>\n\n    </div>\n    <!-- contact sync -->\n\n    <div ng-if="contactSync">\n        <h2 class="t--larger" ng-show="contactSyncProcessing">\n            Connected successfully!<br/>\n            We have started importing contacts.\n        </h2>\n\n        <h2 class="t--larger" ng-show="contactSyncFailed">\n            We couldn\'t connect to <strong>{{\'integration.\' + integration.integration + \'.name\' | translate}}</strong>.<br/>\n            Please check your credentials and try again.\n        </h2>\n\n        <h2 class="t--larger" ng-show="contactSyncFinished">\n            We have just imported your contacts from {{\'integration.\' + integration.integration + \'.name\' | translate}}.\n        </h2>\n\n        <div ng-show="contactSyncProcessing">\n            <div class="progress progress-striped active">\n                <div class="progress-bar" ng-style="{\'width\':contactSyncProgress + \'%\'}"></div>\n                <style>.progress-bar{min-width:3px;}</style>\n            </div>\n        </div>\n\n        <ul ng-show="integration.is_active" class="list-formatted">\n            <li>Go to Contacts screen</li>\n            <li>New contacts are going to appear there. Isn\'t that great?</li>\n            <li>Did we import all contacts from {{\'integration.\' + integration.integration + \'.name\' | translate}}? No? Maybe you don\'t need them at all? </li>\n            <li>You can close this window now and have a cup of coffee</li>\n        </ul>\n    </div>\n\n\n    <div ng-if="chromeAddOn && isChrome && chromeAddOnLink" class="a--center">\n        <a class="btn btn-primary" target="_blank" ng-href="{{chromeAddOnLink}}">Install {{\'integration.\' + integration.integration + \'.name\' | translate}} Chrome extension</a>\n    </div>\n\n    <div ng-if="!integration.is_active && !chromeAddOn">\n        <!-- integration is not enabled -->\n\n        <!-- standard oAuth connect -->\n        <div ng-if="!connectionSettings">\n            <div ng-include="\'/views/settings/integrations/connect/generic-oauth.html\'"></div>\n        </div>\n        <!-- custom connection settings -->\n        <div ng-if="connectionSettings">\n            <div ng-include="connectionSettings.connectTemplate"></div>\n        </div>\n    </div>\n\n    <div ng-if="integration.is_active && !chromeAddOn">\n        <div ng-if="configurationSettings">\n            <div ng-include="configurationSettings.settingsTemplate"></div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/settings/integrations/integration-setup.html", '<div class="integration-setup">\n    <div class="integration-setup__overlay anim--fadein" ng-click="goBackToIntegrationsList()">\n        <div class="integration-setup__panel" ng-click="$event.stopPropagation();">\n            <div class="integration-setup__close anim--slide-in-from-left" ng-click="goBackToIntegrationsList()">&times;</div>\n            <div class="scrollable h100 anim--slide-in-from-right" ng-include="\'/views/settings/integrations/integration-settings.html\'"></div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/settings/integrations/integrations-list.html", '<div class=" h100 scrollpane">\n    <div class="scrollpane__bd z-1 p--lg p--top anim--slide-in-from-left">\n\n        <h1 class="section-header">Integrations</h1>\n\n        <div class="hr block"></div>\n        <div ng-if="noIntegrations">\n            <div class="page-stub">\n                <i class="icon icon--huge icon--cogs color--icon-dimmed block"></i>\n\n                <h1>PandaDoc integrations</h1>\n\n                <p class="color--dimmed block">Fellow Pandas are working super hard to add as many integrations as possible.\n                    Got ideas?</p>\n                <a class="btn btn-default block" ng-click="contactSupport()">Contact PandaDoc team</a>\n            </div>\n        </div>\n\n        <div ng-if="!integrations.length" class="block">\n            <i class="icon spinner"></i>\n        </div>\n        <div ng-if="integrations.length > 0">\n            <ul class="list-integrations clearfix m--bottom">\n                <li ng-repeat="integration in integrations" class="integration" ng-click="showDescription(integration)">\n                    <h2 class="integration__p1"><!--\n                    --><img ng-src="{{\'img/integrations/logo-\'+integration.integration | staticBaseUrl}}.png"\n                       alt="{{\'integration.\' + integration.integration + \'.name\' | translate}}"/><!--\n                    --></h2>\n                    <p class="integration__description t--smaller color--dimmed">{{\'integration.\' + integration.integration + \'.description\' | translate}}</p>\n                    <switch ng-if="!isAlwaysEnabled(integration)" is-disabled="true" class="inline-block" ng-model="integration.is_active" ng-change="angular.noop" on="On" off="Off"></switch>\n                    <button style="font-size: 10px;" class="btn btn-primary btn-sm t--caps inline-block" ng-if="isAlwaysEnabled(integration)">On</button>\n                </li>\n            </ul>\n        </div>\n    </div>\n\n    <div ui-view="integration_settings" class="z-2"></div>\n</div>\n'),
    e.put("/views/settings/rewards/rewards.html", '<div class="p--lg p--top pg--rewards restrict-page-width anim--slide-in-from-left">\n<div class="block pg-rewards__invite ">\n\n        <h1 class="t--xl a--center">Invite more friends to get more documents</h1>\n        <p class=" a--center t--larger color--dimmed m--bottom-lg">\n            For every friend who registered via your referral, both you and your friend will receive {{REWARD_DOCS_AMOUNT_TEXT}} free\n            <ng-pluralize count="REWARD_DOCS_AMOUNT" when="{ \'0\' : \'docs\', \'1\' : \'doc\', \'other\': \'docs\' }"></ng-pluralize>\n        </p>\n\n        <div class="grid grid--spacing-md block pg-rewards__inv-btns a--center">\n            <!--<div class="grid__item w50">-->\n                <!--<button class="btn btn-xl btn-danger btn-block " ng-click="inviteGmailContacts()">-->\n                    <!--<spinner visible="invitingGmailContacts" class="pos--rel"></spinner>-->\n                    <!--Invite contacts from Gmail-->\n                <!--</button>-->\n            <!--</div>-->\n            <div> <!-- remove .grid__item .w50 classes when only one btn is shown  -->\n                <button class="btn btn-xl btn-primary " ng-click="invitePandaDocContacts()">\n\n                    <spinner visible="invitingPandaDocContacts" class="pos--rel"></spinner>\n                    <span ng-show="!invitingPandaDocContacts">Invite all your contacts</span>\n                    <span ng-show="invitingPandaDocContacts">Sending invites...</span>\n                </button>\n            </div>\n        </div>\n\n        <h2 class="t--large a--center">\n            <label for="contacts-selector">..or enter names or email addresses below, separated by commas</label>\n        </h2>\n\n        <contacts-invite></contacts-invite>\n\n        <div class="hr m--top-lg m--bottom-lg"></div>\n\n        <h2 class="section-header a--center">More ways to invite your friends</h2>\n\n        <div class="m--top-lg m--bottom-lg grid grid--spacing-md">\n            <div class="grid__item w33">\n                <copy-in-clipboard value="referralModel.link"></copy-in-clipboard>\n            </div>\n            <div class="grid__item w33">\n                <a class="btn btn--block btn--share btn--facebook" ng-click="share($event, \'Facebook\')"\n                   href="http://www.facebook.com/sharer/sharer.php?s=100&p[url]={{referralModel.encodedLink(\'?f\')}}&p[images][0]=&p[title]=PandaDoc&p[summary]=Fast%20and%20easy%20way%20to%20send%20and%20sign%20documents%20online.">\n                    <i class="icon icon--facebook icon--lg push-next"></i>\n                    Share on Facebook</a>\n\n            </div>\n            <div class="grid__item w33">\n                <a class="btn btn--block btn--share btn--twitter" ng-click="share($event, \'Twitter\')"\n                   href="http://twitter.com/home?status=I%20get%20docs%20signed%20quickly%2C%20easily%2C%20and%20all%20online%20with%20%40PandaDoc!%20{{referralModel.encodedLink(\'?t\')}}">\n                    <i class="icon icon--twitter icon--lg push-next"></i>\n                    Share on Twitter</a>\n            </div>\n\n        </div>\n\n        <div class="m--top-lg m--bottom-lg grid grid--spacing-md">\n\n            <div class="grid__item w33">\n\n            </div>\n\n            <div class="grid__item w33">\n                <a class="btn btn--block btn--share btn--linkedin" ng-click="share($event, \'LinkedIn\')"\n                   href=https://www.linkedin.com/shareArticle?mini=true&url={{referralModel.encodedLink(\'?l\')}}&title=PandaDoc&summary=Fast%20and%20easy%20way%20to%20send%20and%20sign%20documents%20online&source=">\n                    <i class="icon icon--linkedin icon--lg push-next"></i>\n                    Share on LinkedIn\n                </a>\n\n            </div>\n            <div class="grid__item w33">\n                <a class="btn btn--block btn--share btn--gplus" ng-click="share($event, \'Google Plus\')"\n                   href="https://plus.google.com/share?url={{referralModel.encodedLink(\'?g+\')}}">\n                      <i class="icon icon--gplus icon--lg push-next"></i>\n                      Share on Google Plus\n                </a>\n            </div>\n\n        </div>\n\n\n        <!-- grid -->\n        <div grid scroll-processor scroll-processor-on-scroll="moreItems()" scroll-processor-container=".table-data" scroll-processor-scrollable=".scrollpane__bd">\n            <table ng-table="tableParams" ng-show="!isEmpty"\n                   template-pagination="/views/directives/grid/empty-pagination.html"\n                   class="table-data">\n\n                <col class="w33">\n                <col class="w33">\n                <col class="w33">\n\n                <tbody>\n                <tr ng-repeat="rewardItem in $data" class="anim--expand">\n\n                    <td data-title="\'Person\'" class="p--sm">\n                        {{rewardItem.referral | fullName}} {{\'referral.action.\' + rewardItem.type | translate}}\n                    </td>\n\n\n                    <td data-title="\'When\'" class="p--sm">\n                        {{rewardItem.date_created | moment}}\n                    </td>\n\n                    <td data-title="\'Reward\'" class="p--sm">\n                        <ng-pluralize count="rewardItem.extra_docs"\n                          when="{\n                           \'0\'    : \'\',\n                           \'1\'    : \'1 document\',\n                           \'other\': \'{} documents\' }">\n                        </ng-pluralize>\n                    </td>\n\n                </tr>\n\n                <tr ng-show="tableParams.settings().$loading">\n                    <td colspan="3" class="p--sm"><i class="icon spinner"></i></td>\n                </tr>\n                </tbody>\n            </table>\n\n        </div>\n    </div>\n\n\n</div>\n'),
    e.put("/views/settings/team/invitation.html", '<div class="settings-container m--bottom">\n    <form name="inviteForm" class="form-row m--bottom-sm" style="max-width:400px">\n        <div class="form-row__stretcher">\n            <input type="text" placeholder="User email" class="form-control" ng-model="userEmail" focus-me/>\n        </div>\n        <button ng-click="inviteUser(workspace, userEmail)" ng-disabled="inviteForm.$invalid || inviting"\n                class="btn btn-default btn--stretch-narrow form-row__fixed">Invite\n        </button>\n\n    </form>\n    <p class="t--small-dimmed">* The user will be assigned a <span class="border-bottom--dotted"\n                                                              tooltip="Team Member can send and view own documents, create own folders to store different documents but has no access to the settings of the account.">Team Member</span>\n        role. You can change it later.</p>\n\n    <button ng-repeat="integration in integrations" ng-disabled="inviting" ng-click="inviteFrom(integration)"\n            class="btn btn-primary btn--stretch-narrow form-row__fixed">\n        Invite from {{\'integration.\' + integration + \'.name\'| translate}}\n    </button>\n\n</div>\n'),
    e.put("/views/settings/team/invites-list.html", '<div class="settings-container m--bottom">\n\n    <div ng-if="!pendingInvites"><i class="icon spinner"></i></div>\n\n    <p ng-if="pendingInvites && !pendingInvites.length" class="color--dimmed">\n      No pending invitations.\n    </p>\n\n    <ul class="media-list inline-block" ng-if="pendingInvites">\n        <li ng-repeat="pending in pendingInvites" class=" pos--rel">\n            <div class="media media--h50-two-lines m--bottom-sm" style="min-width: 300px">\n\n                <avatar class="pull-left m--right-sm" user="pending"></avatar>\n\n                <div class="media-body t--nowrap">\n\n                    <div class="ellipsis m--right-lg">{{ pending.email }}</div>\n\n                    <button ng-click="pending.showMenu()"\n                            class="btn btn--transparent square-20 p--none btn--no-outline pos--abs right-0"\n                            style="top:3px">\n                    <i class="icon icon--config color--icon-dimmed"></i>\n                    </button>\n\n                    <div class="popover popover--arrow-sm bottom anim--expand" style="right: 0; top: 20px; left: auto;"\n                         ng-show="pending.menuVisible" hide-on-click="{ spyOn: \'pending.menuVisible\', hideWith: \'pending.hideMenu\'}">\n                        <div class="arrow" style="left:auto;right: 4px"></div>\n                        <ul class="list list--bordered">\n                            <li>\n                                <a href="" ng-click="resendInvitation(pending)" class="ellipsis t--small">Resend invitation to {{pending.email}}</a>\n                            </li>\n                            <li>\n                                <a href="" ng-click="deleteInvitation(pending)" class="color--red t--small">Cancel invitation</a>\n                            </li>\n                        </ul>\n                    </div>\n\n                    <div class="t--small-dimmed">\n                        Invited {{ pending.date_created | moment }}\n                    </div>\n\n                </div>\n\n            </div>\n        </li>\n    </ul>\n</div>\n\n'),
    e.put("/views/settings/team/members.html", '<div class="settings-container m--bottom pos--rel">\n\n    <div ng-if="!memberships"><i class="icon spinner"></i></div>\n\n    <ul class="media-list" ng-if="memberships" scroll-processor scroll-processor-on-scroll="loadMoreMembers()" scroll-processor-scrollable=".scrollpane__bd">\n        <li ng-repeat="membership in memberships" class="media media--h50-two-lines m--bottom-sm">\n            <avatar class="pull-left m--right-sm" user="membership.member.user"></avatar>\n            <div class="media-body">\n                <div class="pull-left">\n                    <button ng-if="!membership.owner" ng-click="removeMember(membership)"\n                            class="btn close color--red square-20 ng-scope" title="Remove member">×\n                    </button>\n                    <span class="push-next">\n                        {{ membership.member.user | fullName }}\n                        <span class="t--small-dimmed"\n                              ng-if="membership.hasName"><{{membership.member.user.email}}></span>\n                    </span>\n                </div>\n\n                <div class="clear-both">\n                    <div class="t--small-dimmed inline-block" ng-if="!membership.edit" ng-click="edit(membership)">\n                    <span ng-class="{\'border-bottom--dotted\' : isOwner && !membership.owner, \'pointer\' : isOwner && !membership.owner}">\n                        {{\'roles.\' + membership.member.role | translate}}\n                        <span ng-if="isOwner && !membership.owner" style="font-size: 10px;" ng-class="{\'pointer\' : isOwner && !membership.owner}">\n                            <span class="caret" style="border-top-color: #444;border-width: 3px 3px 0;margin-top: -2px"></span>\n                        </span>\n                    </span>\n                    </div>\n                    <div ng-if="membership.edit && !membership.owner" class="inline-block">\n                        <select ng-model="membership.member.role" ng-change="onRoleChange(membership)"\n                                ng-options="\'roles.\' + role | translate for role in roles">\n                        </select>\n                        &nbsp;&nbsp;<a data-ng-click="cancelEdit(membership)">Cancel</a>\n                    </div>\n\n                </div>\n            </div>\n        </li>\n    </ul>\n    <div class="roles-help-box p bg--very-light t--smaller">\n        <p><b>Owner</b>&#8202;&mdash;&#8202;Can send and view all documents within the account. Has access to all\n            account settings.</p>\n\n        <p><b>Manager</b>&#8202;&mdash;&#8202;Can send and view all documents within the account. Can add new users.</p>\n\n        <p><b>Team Member</b>&#8202;&mdash;&#8202;Can send and view own documents but has no access to the documents\n            sent by other team members.</p>\n\n    </div>\n</div>\n'),
    e.put("/views/settings/team/team-unavailable.html", '<div class="p--lg p--top">\n\n    <h1 class="section-header">Team</h1>\n    <div class="hr block"></div>\n    <div class="page-stub">\n\n        <i class="icon icon--huge icon--contacts-3 color--icon-dimmed block"></i>\n\n        <h1>Work within a team</h1>\n\n        <p class="color--dimmed block">\n            We\'re working hard to implement workspaces &ndash;\n            a place where your team <br> can collaborate together, share docs, discuss them before sending.</p>\n    </div>\n\n</div>'),
    e.put("/views/settings/team/team.html", '<div class="p--lg p--top anim--slide-in-from-left">\n\n    <h1 class="section-header">Team</h1>\n\n    <div class="hr block"></div>\n\n    <team-invite-member></team-invite-member>\n\n    <team-members></team-members>\n\n    <div class="settings-container m--bottom p--right-lg" >\n        <div class="doctool-subhead">\n            <span>Pending invites</span>\n        </div>\n    </div>\n\n    <team-pending-invites></team-pending-invites>\n\n</div>\n'),
    e.put("/views/settings/workspace/workspace.html", '<div class="p--lg p--top anim--slide-in-from-left">\n\n    <spinner visible="!workspace"></spinner>\n\n    <h1 class="section-header" ng-show="workspace"> "{{workspace.name}}" workspace settings</h1>\n\n    <div class="hr block" ng-show="workspace"></div>\n\n    <form ng-show="workspace" novalidate class="block">\n\n        <div class="grid grid--spacing-md block">\n            <!-- signature settings -->\n            <div class="grid__item w50">\n\n                <h2 class="section-header t--larger">Available Signature Types</h2>\n\n                <p class="t--small-dimmed color--red" ng-show="noSignatureTypeSelected">\n                    At least one signature type should be selected\n                </p>\n\n                <ul class="m--bottom-lg">\n                    <li class="checkbox">\n                        <label>\n                            <input type="checkbox" ng-model="workspace.settings.allowed_signature_draw"/> Draw\n                        </label>\n                    </li>\n                    <li class="checkbox">\n                        <label>\n                            <input type="checkbox" ng-model="workspace.settings.allowed_signature_type"/> Type\n                        </label>\n                    </li>\n                    <li class="checkbox">\n                        <label>\n                            <input type="checkbox" ng-model="workspace.settings.allowed_signature_upload"/> Upload\n                        </label>\n                    </li>\n\n                </ul>\n\n            </div>\n\n            <!-- initials settings -->\n            <div class="grid__item w50">\n\n                <h2 class="section-header t--larger">Available Initials Types</h2>\n\n                <p class="t--small-dimmed color--red" ng-show="noInitialsTypeSelected">\n                    At least one initials type should be selected\n                </p>\n\n                <ul class="m--bottom-lg">\n                    <li class="checkbox">\n                        <label>\n                            <input type="checkbox" ng-model="workspace.settings.allowed_initials_draw"/> Draw\n                        </label>\n                    </li>\n                    <li class="checkbox">\n                        <label>\n                            <input type="checkbox" ng-model="workspace.settings.allowed_initials_type"/> Type\n                        </label>\n                    </li>\n                </ul>\n\n            </div>\n\n        </div>\n\n\n        <button class="btn btn-primary btn--stretch-narrow t--caps" ng-disabled="noSignatureTypeSelected || noInitialsTypeSelected || saving" ng-click="save()">\n            <spinner visible="saving"></spinner>\n            <span ng-if="!saving">Save</span>\n            <span ng-if="saving">Saving...</span>\n        </button>\n    </form>\n\n</div>\n\n'),
    e.put("/views/settings/workspaces/workspace-selector-dialog.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h4 class="modal-title">Workspaces</h4>\n</div>\n<div class="modal-body">\n    <p class="color--dimmed">Please select a workspace you would like to switch to.</p>\n    <spinner visible="!workspaces || workspaces.length < 1"></spinner>\n    <ul class="list list--bordered">\n        <li ng-repeat="workspace in workspaces" class="p--left-none p--right-none">\n            <a style="line-height: 26px;" ng-click="switchToWorkspace(workspace)" ng-class="{\'active\' : isCurrentWorkspace(workspace)}">\n                <img ng-if="workspace.branding.icon_src" ng-src="{{workspace.branding.icon_src}}" alt="{{workspace.name}}" style="height:26px;" class="p--right-sm pull-left"/>\n                <img ng-if="!workspace.branding.icon_src" ng-src="{{workspace.branding.main_logo}}" alt="{{workspace.name}}" style="height:26px;" class="p--right-sm pull-left"/>\n                {{workspace.name}}\n                <span class="t--small-dimmed" ng-if="isCurrentWorkspace(workspace)">(active)</span>\n            </a>\n        </li>\n    </ul>\n    <style>.modal-dialog {max-width: 480px;}</style>\n</div>\n'),
    e.put("/views/settings/workspaces/workspaces.html", '<div class="p--lg p--top anim--slide-in-from-left">\n\n    <h1 class="section-header">Workspaces</h1>\n\n    <div class="hr block"></div>\n\n    <div class="pos--rel m--bottom" style="max-width: 550px; margin-right: 300px">\n\n        <button ng-click="createWorkspace()" class="btn t--no-caps btn-primary block">Create a new workspace</button>\n\n        <div class="hr m--bottom-xs m--right-lg"></div>\n\n        <i class="icon spinner m--vert-sm" ng-if="!workspaces"></i>\n\n        <ul class="m--right-lg" ng-if="workspaces">\n            <li ng-repeat="workspace in workspaces" class="p--vert-sm media border--bottom">\n                <img ng-if="workspace.branding.icon_src" ng-src="{{workspace.branding.icon_src}}" alt=""\n                     width="50" class="pull-left m--bottom-xs"/>\n\n                <img ng-if="!workspace.branding.icon_src" ng-src="{{workspace.branding.main_logo}}" alt=""\n                     width="50" class="pull-left m--bottom-xs"/>\n\n                <div class="media-body m--bottom-xs">\n\n                    <div class="m--top-xs m--bottom-sm t--medium">\n                        {{workspace.name}} <span class="color--dimmed" ng-if="isCurrentWorkspace(workspace)">(active)</span>\n                    </div>\n\n                    <div class="color--dimmed">\n                        <button class="btn btn-link" ng-click="editWorkspace(workspace)" ng-disabled="working">\n                            Change name\n                        </button>\n                        &middot;\n                        <button class="btn btn-link" ng-click="editTeam(workspace)" ng-disabled="working">\n                            Team\n                        </button>\n                        &middot;\n                        <button class="btn btn-link" ng-click="editIntegrations(workspace)" ng-disabled="working">\n                            Integrations\n                        </button>\n                        &middot;\n                        <button class="btn btn-link" ng-click="editBranding(workspace)" ng-disabled="working">\n                            Branding\n                        </button>\n                    </div>\n                </div>\n            </li>\n        </ul>\n\n        <div class="roles-help-box p bg--very-light t--smaller">\n            <p>PandaDoc supports multiple Workspaces.</p>\n\n            <p>A <strong>Workspace</strong> is a place where a specific group of people can work on documents together.</p>\n\n            <p>A <strong>Workspace</strong> is an isolated working environment and only its members have an access to\n                documents and other information within it.\n                It\'s a great way to separate different teams, divisions or parts of your organization.</p>\n\n            <p>One person can be added to multiple workspaces with different permission roles.</p>\n\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/templates/create/blank.html", '<div class="box box--upload p">\n    <div class="box__content--stretched">\n        <div class="block">\n            <i class="page-stub__icon icon icon--circle-templates color--green"></i>\n        </div>\n        <h1 class="m--bottom">Build and design a template</h1>\n        <p class="t--small-dimmed m--bottom-lg">\u2028\u2028PandaDoc\'s powerful builder helps you create and customize interactive templates</br> for your quotes, proposals, contracts, and other sales collateral.</p>\n        <button class="btn btn-primary btn-lg" ng-click="blank()" ng-disabled="creating">\n            <spinner visible="creating"></spinner>\n            Create a template\n        </button>\n    </div>\n</div>\n\n'),
    e.put("/views/templates/create/convert.html", '<div class="centerer">\n    <div class="centerer__bd">\n        <div class="box box--static p--none a--left">\n            <div ng-if="!uploading" class="a--center ">\n                <div class="p--lg">\n                    <div class="a--center m--vert-lg"> <img ng-src="{{\'img/tpl-converters.jpg\' | staticBaseUrl}}" alt="" /> </div>\n                    <div ng-show="sended">\n                        <h2 style="font-size: 22px" class="m--bottom">Thanks! We’ll convert the template to PandaDoc <br/>\n                        and present it to you and your team</h2>\n                        <div class="onboarding__slide-txt m--bottom t--primary">\n                            <p class="m--bottom t--medium">Got it! Meanwhile play with a <strong>Sample Sales Proposal Template</strong> we created<br /> for you and check PandaDoc\'s powerful document builder.</p>\n                        </div>\n                        <button class="form-row__fixed btn btn-primary btn--stretch-narrow" ng-click="goToTemplates()"> Go to Templates </button>\n                    </div>\n                    <div ng-show="!sended">\n                        <h2 style="font-size: 22px" class="m--bottom">Thanks! We’ll convert the template to PandaDoc <br/>\n                        and present it to you and your team</h2>\n                        <p class="m--bottom t--medium">Please enter your phone number so we contact you as soon as it\'s ready:</p>\n                        <form class="form-row m--auto m--bottom-lg" style="width: 300px">\n                            <div class="form-row__stretcher">\n                                <input type="tel" ng-model="phoneModel.phone" class="form-control" placeholder="Phone number" focus-me /> </div>\n                            <button class="form-row__fixed btn btn-primary btn--stretch-narrow" ng-disabled="!phoneModel.phone || sending" ng-click="sendPhoneNumber()">\n                                <spinner visible="sending"></spinner> Submit </button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            <div ng-if="uploading">\n                <file-uploader-inline delegate="this" fui-label-text="Drop your template here" fui-button-text="Choose it from your computer"></file-uploader-inline>\n            </div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/templates/create/new.html", '<div class="centerer">\n    <div class="centerer__bd">\n\n        <div class="box box--static p--none a--left">\n            <div class="new-doc-dlg">\n\n                <ul class="list list--tabs list--tabs--lg">\n                    <li class="w50" ng-class="{\n                        \'active\': $state.current.name === \'templates.upload\',\n                        \'disabled\': !documentCreateOptionsAvailability.upload\n                        }">\n                        <a ng-click="documentCreateOptionsAvailability.upload && upload()"><span>Upload a template</span></a>\n                    </li>\n                    <li class="w50" ng-class="{\n                        \'active\': $state.current.name === \'templates.new-blank\',\n                        \'disabled\': !documentCreateOptionsAvailability.blank\n                        }">\n                        <a ng-click="documentCreateOptionsAvailability.blank && blank()"><span>Create a template</span></a>\n                    </li>\n                </ul>\n                <div ui-view="create-option" class="new-doc-dlg__create-option"></div>\n            </div>\n\n        </div>\n    </div>\n</div>'),
    e.put("/views/templates/create/upload.html", '<file-uploader-inline ng-if="uploading" delegate="this"></file-uploader-inline>\n<file-process ng-if="processing" delegate="this" options="processingOptions"></file-process>\n\n\n'),
    e.put("/views/templates/directives/role-form.html", '<form ng-submit="createRole()" novalidate>\n    <div class="form-row">\n        <div class="form-row__stretcher">\n            <input type="text"\n                   class="form-control"\n                   placeholder="e.g. Client"\n                   autocomplete="off"\n                   ng-model="roleModel.name"\n                   focus-me>\n        </div>\n        <button type="submit" class="btn btn-primary t--caps form-row__fixed" ng-disabled="!roleModel.name || creatingRole">Add</button>\n    </div>\n</form>\n'),
    e.put("/views/templates/directives/role-list.html", '<div>\n    <ul class="media-list" ui-sortable="rolesSortableOptions" ng-model="documentInfo.document.roles"\n        ng-if="documentInfo.document.has_ordering && documentInfo.isOwner">\n        <li class="media m--bottom card bg--white movable" ng-repeat="role in documentInfo.document.roles">\n            <div class="card__drag" style="width:22px">\n                <div class="icon card__drag-icon"></div>\n            </div>\n            <div class="avatar--role pull-left bg--user-{{role.color}} color--white">#{{$index+1}}</div>\n            <div class="media-body">\n                <h4 class="card__hdr break-word">\n                <span class=" append-btn">\n                    {{role.name}}\n                    <span class="recipient-status recipient-status--{{role.type}}">{{\'recipients.types.\' + role.type | translate}}</span>\n                    <button ng-if="documentInfo.isOwner" ng-click="removeRole(role)"\n                            class="btn close append-btn__btn color--red square20" title="Remove">×\n                    </button>\n                </span>\n                </h4>\n                <a ng-if="documentInfo.isOwner" ng-click="renameRole(role)">rename</a>\n            </div>\n        </li>\n    </ul>\n\n    <ul class="media-list" ng-if="!documentInfo.document.has_ordering || !documentInfo.isOwner">\n        <li class="media m--bottom card" ng-repeat="role in documentInfo.document.roles">\n            <div class="avatar--role pull-left bg--user-{{role.color}} color--white">#{{$index+1}}</div>\n            <div class="media-body">\n                <h4 class="card__hdr break-word">\n                <span class=" append-btn">\n                    {{role.name}}\n                    <span class="recipient-status recipient-status--{{role.type}}">{{\'recipients.types.\' + role.type | translate}}</span>\n                    <button type="button" ng-if="documentInfo.isOwner" ng-click="removeRole(role)"\n                            class="btn close append-btn__btn color--red square20" title="Remove">×\n                    </button>\n                </span>\n                </h4>\n                <a ng-if="documentInfo.isOwner" ng-click="renameRole(role)">rename</a>\n            </div>\n        </li>\n    </ul>\n</div>\n'),
    e.put("/views/templates/directives/uploadcare-templates-tab.html", '<div>\n    <h2 class="section-header m--bottom-sm">Templates</h2>\n    <templates-selector class="dialog-template-selector"></templates-selector>\n</div>'),
    e.put("/views/templates/list/empty-list.html", '<div class="page-stub" ng-show="isRootFolder">\n    <i class="page-stub__icon icon icon--circle-templates color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-sm t--xlarge t--bold">Sending similar documents?</h1>\n\n    <div ng-if="!bigCompany">\n        <p class="m--auto t--larger m--bottom" style="max-width: 400px">Save time by creating templates <br/> with predefined fields and signatures</p>\n        <button ng-click="addTemplate()" class="btn btn-primary btn-lg t--bold">Create a new template</button>\n    </div>\n    <div ng-if="bigCompany">\n        <p class="m--auto t--larger m--bottom" style="max-width: 400px">\n            Convert an existing template for your quotes, proposals,\n            or contracts to PandaDoc.</p>\n        <div><button ng-click="convertTemplate()" class="btn btn-primary btn-lg m--bottom-sm t--bold">Convert your template</button></div>\n        <a href="" ng-click="addTemplate()" class="link-hover t--bold t--medium">\n            Create a template\n        </a>\n    </div>\n</div>\n\n<div class="page-stub" ng-show="!isRootFolder">\n    <i class="page-stub__icon icon icon--circle-templates color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No templates in this folder</h1>\n    <button ng-click="addTemplate()" class="btn btn-primary btn-lg t--bold">Create a new template</button>\n</div>\n'),
    e.put("/views/templates/list/list.html", '<div class="scrollpane scrollpane--has-toolbar">\n    <!-- toolbar -->\n    <div class="toolbar">\n        <ul class="toolbar__set toolbar__set--left with-separators">\n            <li>\n                <move-to-folder service="foldersService" selected="selected" permissions="TEMPLATE_FOLDERS_PERMISSIONS"></move-to-folder>\n            </li>\n            <li>\n                <duplicate-document selected="selected"></duplicate-document>\n            </li>\n            <li>\n                <button selection="{condition: \'isAvailable\'}" selection class="btn btn--toolbar" ng-click="removeDocument()">\n                    <i class="icon icon--lg push-next icon--delete"></i>\n                    <span class="btn-text">Remove</span>\n                </button>\n            </li>\n            <li class="no-separator toolbar__text">\n                <selection-counter></selection-counter>\n            </li>\n\n        </ul>\n\n        <ul class="toolbar__set toolbar__set--right toolbar__set--padded">\n            <li>\n                <grid-filter></grid-filter>\n            </li>\n        </ul>\n    </div>\n    <!-- grid -->\n    <div grid class="scrollpane__bd"\n         scroll-processor scroll-processor-on-scroll="moreItems()" scroll-processor-container=".table-data"\n        >\n        <table ng-table="tableParams" ng-show="!isEmpty"\n               template-pagination="/views/directives/grid/empty-pagination.html"\n               class="table-data table--has-row-checkboxes">\n\n                <col class="cell-checkbox">\n                <col >\n                <col class="w20">\n                <col class="w20">\n                <col class="w15">\n\n                <tbody>\n\n                <tr ng-repeat="template in $data" class="row--clickable anim--expand">\n                    <td header-class="row--clickable" class="cell-checkbox" header="\'/views/directives/grid/selectall.html\'" ng-click="select($event, template)">\n                        <checkbox-cell item="template" selection-model="selectionModel"></checkbox-cell>\n                    </td>\n\n                    <td data-title="\'Title\'" sortable="\'name\'" class="p--left-none">\n                        <a class="stretcher t--medium" href="#/templates/{{template.id}}">\n                            {{template.name}}\n                        </a>\n                    </td>\n\n                    <td header-class="w20">\n                        <a ng-click="createDocFromTemplate(template)" class="link-hover">Create doc from&nbsp;template&nbsp;&rsaquo;</a>\n                    </td>\n\n                    <td data-title="\'Roles\'" header-class="w20">\n                        <a class=" stretcher " href="#/templates/{{template.id}}">\n                        <div class="t--small-dimmed">\n                                <span>{{template.rolesDescription.roles}}</span>\n                                <span ng-show="template.rolesDescription.tail">+ {{template.rolesDescription.tail}} more</span>\n                            </div>\n                        </a>\n                    </td>\n\n\n                    <td data-title="\'Created By\'" sortable="\'date_created\'" header-class="w15" class="cell--author">\n                    <a class=" stretcher media contact-card" href="#/templates/{{template.id}}">\n                            <div hg-if=\'template.date_created\'>\n                                <avatar size="28" user="template.owner" class="pull-left"></avatar>\n                                <div class="media-body">\n                                    {{template.owner | fullName}}\n                                    <div class="t--small-dimmed">{{template.date_created | moment }}</div>\n                                </div>\n                            </div>\n                        </a>\n                    </td>\n                </tr>\n\n                <tr ng-show="tableParams.settings().$loading">\n                    <td class="p"></td>\n                    <td colspan="4"><i class="icon spinner"></i></td>\n                </tr>\n                </tbody>\n            </table>\n\n        <div ng-show="isEmpty" class="p">\n            <ng-include src="emptyListTemplate" ng-if="!isNotFound"></ng-include>\n            <ng-include src="notFoundTemplate" ng-if="isNotFound"></ng-include>\n        </div>\n\n\n    </div>\n\n</div>\n'),
    e.put("/views/templates/list/not-found.html", '\n<div class="page-stub">\n    <i class="page-stub__icon icon icon--circle-templates color--green m--bottom-lg"></i>\n    <h1 class="m--bottom-lg">No templates found</h1>\n    <button ng-click="addTemplate()" class="btn btn-primary btn-lg t--bold">Create a new template</button>\n</div>\n'),
    e.put("/views/templates/list/selector.html", '<div>\n\n    <div class="box box--upload p" ng-show="!hasActiveFilter() && !isLoading() && noTemplates() && noSubFolders() && isRootFolder()">\n        <div class="box__content--stretched">\n            <div class="block">\n                <i class="page-stub__icon icon icon--circle-templates color--green"></i>\n            </div>\n            <h1 class="m--bottom">Sending similar documents?</h1>\n            <p class="t--small-dimmed m--bottom-lg">Save time by reusing templates with predefined fields and signatures.</p>\n            <button class="btn btn-primary btn-lg" ng-click="createTemplate()">\n                Create a template\n            </button>\n        </div>\n    </div>\n\n\n    <div class="scrollable scrollable-marker p--lg p--top-sm" style="max-height:330px">\n\n        <div class="pull-right p--bottom-sm" ng-show="hasActiveFilter() || !(!isLoading() && noTemplates() && noSubFolders() && isRootFolder())">\n            <form class="search-form">\n                <input ng-model="filterModel.filter" class="form-control input--search" type="text" placeholder="Search"/>\n            </form>\n        </div>\n\n        <div class="clear-both"></div>\n        <!-- grid -->\n        <div scroll-processor\n             scroll-processor-on-scroll="loadTemplates()"\n             scroll-processor-container=".table-data"\n             scroll-processor-scrollable=".scrollable-marker">\n            <table class="table-data table--hide-thead table-data--top-border t--medium m--none">\n\n                <tr ng-if="parents.length && !parents[parents.length - 1].root && !hasActiveFilter()" class="row--clickable">\n                    <td>\n                        <a class="stretcher t--medium p--sm" ng-click="up()">\n                            <i class="icon icon--lg icon--up push-next"></i>\n                            {{parents[parents.length - 1].name}}\n                        </a>\n                    </td>\n                </tr>\n\n                <tr ng-repeat="folder in folders" ng-if="!hasActiveFilter()" class="row--clickable">\n                    <td>\n                        <a class="stretcher t--medium p--sm" ng-click="down(folder)">\n                            <i class="icon icon--folder push-next"></i>\n                            {{folder.name}}\n                        </a>\n                    </td>\n                </tr>\n\n                <tr ng-repeat="template in templates" class="row--clickable">\n                    <td sortable="\'name\'">\n                        <a class="stretcher t--medium p--sm" ng-click="createDocFromTemplate(template)">\n                            <i class="icon icon--doc-detailed icon--xlg push-next"></i>\n                            {{template.name}}\n                        </a>\n                    </td>\n                </tr>\n\n                <tr ng-show="isLoading()">\n                    <td class="p--sm"><i class="icon spinner"></i></td>\n                </tr>\n            </table>\n        </div>\n\n        <div class="box box--upload p" ng-show="hasActiveFilter() && !isLoading() && noTemplates()">\n            <div class="box__content--stretched">\n                <i class="page-stub__icon icon icon--circle-templates color--green m--bottom-lg"></i>\n                <p class="t--small-dimmed m--bottom-lg">No templates found.</p>\n            </div>\n        </div>\n\n        <div class="box box--upload p" ng-show="!hasActiveFilter() && !isLoading() && noTemplates() && !isRootFolder()">\n            <div class="box__content--stretched">\n                <p class="t--small-dimmed m--bottom-lg">No templates in this folder.</p>\n            </div>\n        </div>\n\n    </div>\n</div>\n'),
    e.put("/views/widgets/dialogs/upload-field-widget-dialog.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h2 class="modal-title">Upload file</h2>\n</div>\n<div class="modal-body">\n    <form novalidate>\n        <p class="color--dimmed" ng-if="widgetInfo.widget.properties.description">{{widgetInfo.widget.properties.description}}</p>\n        <input ng-disabled="uploading" class="form-control p--left-none"\n               name="file" id="file" type="file" nv-file-select="" uploader="uploader"/>\n    </form>\n</div>\n<div class="modal-footer">\n    <button ng-click="$dismiss()" class="btn btn-default btn--stretch-narrow" ng-disabled="uploading">\n        Cancel\n    </button>\n\n    <button ng-click="upload()" ng-disabled="uploading || !file" class="btn btn-primary btn--stretch-narrow pos--rel" focus-me>\n        <span class="pos--rel z-1">\n            <spinner visible="uploading" class="push-next"></spinner>\n            <span ng-if="!uploading">Upload</span>\n            <span ng-if="uploading">Uploading...</span>\n        </span>\n    </button>\n\n</div>\n\n\n<style>\n    .modal-dialog {\n        width: 450px;\n        max-width: 450px;\n    }\n</style>\n\n'),
    e.put("/views/widgets/preview/base.html", '<div>\n    <span class="block-content-label">{{widgetInfo.widget.title}}</span>\n</div>\n'),
    e.put("/views/widgets/preview/checkbox.html", '<label class="widget-checkbox">\n\n    <input class="widget-checkbox__input" type="checkbox" ng-model="widgetInfo.widget.data.value"\n           ng-disabled="!widgetInfo.editable"/>\n\n    <span class="widget-checkbox__animation-wrap">\n        <svg class="widget-checkbox__icon widget-checkbox__icon-checked" viewBox="0 0 28 28">\n            <path d="M13.019,18.357l2.292-2.307l0,0l4.588-4.614l-2.293-2.31l-4.586,4.616l-2.62-2.635l-2.295,2.308l2.62,2.635L13.019,18.357z"/>\n        </svg>\n    </span>\n    <svg class="widget-checkbox__icon widget-checkbox__icon-unchecked" viewBox=".5 .5 28 28">\n        <path d="M4,4v20h20V4H4z M7,21V7h14v14H7z"/>\n    </svg>\n\n</label>\n'),
    e.put("/views/widgets/preview/date.html", '<div class="widget-textfield h100" ng-class="\n    {\'popover-pos--left\':widgetInfo.placement.left,\n    \'popover-pos--right\':!widgetInfo.placement.left,\n    \'popover-pos--top\':widgetInfo.placement.top,\n    \'popover-pos--bottom\':!widgetInfo.placement.top\n    }">\n\n    <input auto-font type="text" placeholder="{{widgetInfo.widget.title}}"\n           class="widget__value" ng-model="widgetInfo.widget.data.date"\n           datepicker-popup="{{widgetInfo.dateFormat}}"\n           is-open="widgetInfo.opened"\n           ng-required="true" ng-disabled="!editable"/>\n\n</div>\n'),
    e.put("/views/widgets/preview/dropdown.html", '<div class="widget-dropdown">\n    <div class="widget-dropdown__ui" >\n        <input type="text" readonly class="widget__value" auto-font ng-model="widgetInfo.widget.data.value" placeholder="{{widgetInfo.widget.title}}"/>\n    </div>\n    <select class="widget-dropdown__select"\n           placeholder="{{widgetInfo.widget.title}}"\n           ng-model="widgetInfo.widget.data.value"\n           ng-options="item for item in widgetInfo.widget.properties.items"\n           ng-disabled="!editable">\n        <option value="">&nbsp;</option>\n    </select>\n</div>\n'),
    e.put("/views/widgets/preview/initials.html", '<signature-view settings="documentInfo.document.workspace_settings" widget-info="widgetInfo" source="widgetInfo.widget.data.value"\n                editable="editable" show-label="editable" label="Initials"></signature-view>\n'),
    e.put("/views/widgets/preview/masked.html", '<div class="widget-masked">\n\n    <input class="widget__value" auto-font ng-if="widgetInfo.masked"\n           placeholder="*****"\n           ng-model="widgetInfo.widget.data.value"\n           ng-disabled="!editable" type="password"/>\n\n    <input class="widget__value" auto-font ng-if="!widgetInfo.masked"\n           placeholder="{{loadingValue ? \'*****\' : widgetInfo.widget.title}}"\n           ng-model="widgetInfo.widget.data.value"\n           ng-disabled="!editable" type="text"/>\n\n    <button type="button" class="btn widget-masked__toggle" ng-click="showMaskedValue()"\n            ng-if="(widgetInfo.editable || documentInfo.isOwner) && widgetInfo.masked">\n        <svg viewBox="0 -1 14 14">\n            <path fill="#000000" d="M13.147,4.412 C12.137,2.871 9.68,0.312 7.001,0.312 C4.32,0.312 1.859,2.871 0.85,4.412 C0.623,4.764 0.498,5.143 0.489,5.521 C0.497,5.9 0.622,6.281 0.85,6.633 C1.861,8.172 4.318,10.731 6.999,10.731 C9.681,10.731 12.138,8.172 13.147,6.633 C13.378,6.283 13.502,5.9 13.51,5.522 C13.503,5.144 13.379,4.764 13.147,4.412 Z M7,8.125 C5.562,8.125 4.396,6.957 4.396,5.521 C4.396,4.083 5.563,2.916 7,2.916 C8.437,2.916 9.604,4.082 9.604,5.521 C9.604,6.957 8.438,8.125 7,8.125 Z M5.699,5.521 C5.699,6.237 6.282,6.822 7,6.822 C7.718,6.822 8.302,6.238 8.302,5.521 L8.302,5.511 C8.163,5.651 7.975,5.739 7.759,5.739 C7.341,5.739 7,5.398 7,4.979 C7,4.678 7.178,4.415 7.433,4.293 C7.298,4.245 7.152,4.219 7,4.219 C6.281,4.219 5.699,4.803 5.699,5.521 Z"></path>\n        </svg>\n    </button>\n\n    <button type="button" class="btn widget-masked__toggle" ng-click="hideMaskedValue()"\n            ng-if="(widgetInfo.editable || documentInfo.isOwner) && !widgetInfo.masked">\n\n        <svg viewBox="0 0 14 14">\n            <path fill="#000000" d="M2.67136431,9.73337202 C1.88601891,9.02232592 1.25308217,8.24659392 0.85,7.633 C0.622,7.281 0.497,6.9 0.489,6.521 C0.498,6.143 0.623,5.764 0.85,5.412 C1.859,3.871 4.32,1.312 7.001,1.312 C7.90514239,1.312 8.78399871,1.60347313 9.590479,2.04891666 L10.9033545,0.590820692 L12.0180717,1.5945166 L2.17544437,12.5258617 L1.06072714,11.5221658 L2.67136431,9.73337202 Z M7.79727005,4.04047696 C7.54595174,3.95964824 7.27802948,3.916 7,3.916 C5.563,3.916 4.396,5.083 4.396,6.521 C4.396,6.89485083 4.47502898,7.2505372 4.61731194,7.57217823 L7.79727005,4.04047696 Z M6.75641286,9.11373521 L4.85785652,11.2222956 C5.53745671,11.5364174 6.25971204,11.731 6.999,11.731 C9.681,11.731 12.138,9.172 13.147,7.633 C13.378,7.283 13.502,6.9 13.51,6.522 C13.503,6.144 13.379,5.764 13.147,5.412 C12.8067762,4.89290606 12.3023592,4.25829817 11.6805727,3.64490164 L11.6805727,3.64490164 L9.55337201,6.00739737 C9.58657864,6.17343694 9.604,6.34518076 9.604,6.521 C9.604,7.957 8.438,9.125 7,9.125 C6.91786129,9.125 6.83661004,9.12118916 6.75641286,9.11373521 L6.75641286,9.11373521 Z"></path>\n        </svg>\n    </button>\n</div>\n'),
    e.put("/views/widgets/preview/my-signature.html", '<div class="signature-view__wrapper">\n    <div class="widget__drag-handler" ng-click="activate($event)"></div>\n    <signature-view widget-info="widgetInfo" source="widgetInfo.widget.data.value" editable="editable" show-label="editable" label="My Signature"></signature-view>\n</div>\n'),
    e.put("/views/widgets/preview/signature.html", '<signature-view settings="documentInfo.document.workspace_settings" widget-info="widgetInfo" source="widgetInfo.widget.data.value" editable="editable"\n                show-label="editable" label="Signature"></signature-view>\n'),
    e.put("/views/widgets/preview/text.html", '<div class="widget-text">\n    <div class="widget__drag-handler" ng-click="activate()"></div>\n    <textarea class="form-control" ng-model="widgetInfo.widget.data.value"\n              placeholder="Type your text here..." ng-disabled="!editable" ng-trim="false"></textarea>\n</div>'),
    e.put("/views/widgets/preview/textfield.html", '<div class="widget-textfield h100">\n    <input class="widget__value" auto-font\n           placeholder="{{widgetInfo.widget.title}}"\n           ng-model="widgetInfo.widget.data.value"\n           ng-disabled="!editable" type="text"/>\n</div>\n'),
    e.put("/views/widgets/preview/uploadfield.html", '<div class="widget-uploadfield h100" auto-font>\n\n    <button class="widget-uploadfield__picker btn" ng-if="!hasValue || !widgetInfo.widget.id" type="button"\n            ng-click="showUploadDialog()" ng-disabled="!editable" tooltip-html-unsafe="{{widgetInfo.widget.properties.description}}">\n        {{widgetInfo.widget.title}}\n    </button>\n\n    <div ng-if="hasValue && widgetInfo.widget.id" class="h100">\n        <button ng-if="widgetInfo.editable" ng-click="removeFile()" ng-disabled="removingFile"\n             class="widget-uploadfield__del" title="Remove file">\n            <img ng-src="{{\'img/icon-trash.svg\' | staticBaseUrl }}" alt="" width="24"/>\n        </button>\n        <div class="widget-uploadfield__val">\n            <a href="" ng-if="documentInfo.isOwner && !removingFile" ng-click="downloadFile()">\n                <span ng-if="!downloading">Download file</span>\n                <span ng-if="downloading">Downloading file</span>\n            </a>\n            <span ng-if="!documentInfo.isOwner && !removingFile" class="color--dimmed">Attached file</span>\n            <span ng-if="removingFile" class="color--dimmed">Removing file...</span>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/widgets/settings/base.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="{{widgetInfo.widget.title | lowercase}}" block-section-title="{{widgetInfo.widget.title}}">\n        <form>\n            <title></title>\n            <field-name></field-name>\n            <required></required>\n            <actor-selector-form></actor-selector-form>\n            <role-selector></role-selector>\n            <div class="hr block-text"></div>\n            <remove-button></remove-button>\n        </form>\n    </block-section>\n</div>\n'),
    e.put("/views/widgets/settings/date.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="{{widgetInfo.widget.title | lowercase}}" block-section-title="{{widgetInfo.widget.title}}">\n        <form>\n            <title></title>\n            <field-name></field-name>\n            <required></required>\n            <date-format-selector></date-format-selector>\n            <actor-selector-form></actor-selector-form>\n            <role-selector></role-selector>\n            <div class="hr block-text"></div>\n            <remove-button></remove-button>\n        </form>\n    </block-section>\n</div>\n'),
    e.put("/views/widgets/settings/dropdown.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="{{widgetInfo.widget.title | lowercase}}" block-section-title="{{widgetInfo.widget.title}}">\n        <form>\n            <title></title>\n            <field-name></field-name>\n            <required></required>\n            <actor-selector-form></actor-selector-form>\n            <role-selector></role-selector>\n            <label class="control-label">Dropdown items</label>\n            <dropdown-items></dropdown-items>\n            <remove-button class="m--top"></remove-button>\n        </form>\n    </block-section>\n</div>\n'),
    e.put("/views/widgets/settings/initials.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="{{widgetInfo.widget.title | lowercase}}" block-section-title="{{widgetInfo.widget.title}}">\n        <form>\n            <field-name></field-name>\n            <required></required>\n            <actor-selector-form></actor-selector-form>\n            <role-selector></role-selector>\n            <div class="hr block-text"></div>\n            <remove-button></remove-button>\n        </form>\n    </block-section>\n</div>\n'),
    e.put("/views/widgets/settings/my-signature.html", '<form>\n    <div class="block--text">\n        My Signature field allows you to add your own signature to the document.\n    </div>\n    <div class="hr block-text"></div>\n    <remove-button></remove-button>\n</form>\n'),
    e.put("/views/widgets/settings/signature.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="{{widgetInfo.widget.title | lowercase}}" block-section-title="{{widgetInfo.widget.title}}">\n        <form>\n            <field-name></field-name>\n            <actor-selector-form></actor-selector-form>\n            <role-selector></role-selector>\n            <div class="hr block-text"></div>\n            <remove-button></remove-button>\n        </form>\n    </block-section>\n</div>\n'),
    e.put("/views/widgets/settings/text.html", '<form>\n    <div class="block--text">\n        Text field allows you to add static text to the document.\n    </div>\n    <div class="hr block-text"></div>\n    <remove-button></remove-button>\n</form>\n'),
    e.put("/views/widgets/settings/uploadfield.html", '<div style="margin-top: -20px">\n    <block-section block-section-id="{{widgetInfo.widget.title | lowercase}}" block-section-title="{{widgetInfo.widget.title}}">\n        <form>\n            <title></title>\n            <required></required>\n            <actor-selector-form></actor-selector-form>\n            <role-selector></role-selector>\n\n            <div class="block--text">\n                <label class="control-label">Help text</label>\n                <textarea class="form-control"  cols="35" rows="3" ng-model="widgetInfo.widget.properties.description" ng-disabled="!widgetInfo.isSettingsEditable"></textarea>\n            </div>\n\n            <div class="hr block-text"></div>\n            <remove-button></remove-button>\n        </form>\n    </block-section>\n</div>\n'),
    e.put("/views/blocks/layouts/cover/cover.html", '<div class="contenteditable">\n\n    <!-- logo-->\n    <div class="doc-block__bd highlighted-part" block-highlighted-part ng-show="block.data.logo.visible" ng-style="logoStyle"\n         jui-draggable\n         opt-axis="\'y\'"\n         event-stop="dragStop(\'logo\')"\n         event-start="dragStart"\n         event-drag="drag"\n         opt-disabled="!contentEditable"\n         opt-handle="\'.doc-block__control--drag\'">\n\n        <div class="cover-img" ng-class="{\n              \'cover-img--left\': block.data.logo.layout === \'left\',\n              \'cover-img--center\': block.data.logo.layout === \'center\',\n              \'cover-img--right\': block.data.logo.layout === \'right\'\n            }">\n            <div class="cover-img__bd">\n\n                <img-stub block="block" image="block.data.logo.image" is-editable="contentEditable"\n                      class="img-uploadable--compact" hide-empty="true"></img-stub>\n                <div class="color--dimmed a--center t--medium p--horis t--nowrap"\n                     ng-if="!block.data.logo.image.src && contentEditable">Add logo here</div>\n\n            </div>\n        </div>\n        <div class="doc-block__controls doc-block__controls--left" ng-if="contentEditable">\n            <div class="doc-block__control doc-block__control--drag btn--block-control">\n                <i class="icon icon--move"></i>\n            </div>\n        </div>\n    </div>\n\n    <!-- title-->\n    <div class="doc-block__bd highlighted-part" block-highlighted-part has-editor="true" ng-style="titleStyle"\n         jui-draggable\n         opt-axis="\'y\'"\n         event-stop="dragStop(\'title\')"\n         event-start="dragStart"\n         event-drag="drag"\n         opt-disabled="!contentEditable"\n         opt-handle="\'.doc-block__control--drag\'">\n\n\n        <div class="cover-title">\n            <h1>\n                <text-editor\n                    toolbar="shared"\n                    text-property="\'text\'"\n                    content="block.data.title"\n                    empty-text-placeholder="Type your header here..."\n                    content-editable="contentEditable"\n                    disable-image-controls="true">\n                </text-editor>\n            </h1>\n        </div>\n        <div class="doc-block__controls doc-block__controls--left" ng-if="contentEditable">\n            <div class="doc-block__control doc-block__control--drag btn--block-control">\n                <i class="icon icon--move"></i>\n            </div>\n        </div>\n    </div>\n\n    <!-- text -->\n    <div class="doc-block__bd highlighted-part" block-highlighted-part has-editor="true" ng-style="textStyle"\n         jui-draggable\n         opt-axis="\'y\'"\n         event-stop="dragStop(\'text\')"\n         event-start="dragStart"\n         event-drag="drag"\n         opt-disabled="!contentEditable"\n         opt-handle="\'.doc-block__control--drag\'">\n\n        <div class="grid grid--spacing-md cover-text">\n            <div class="grid__item w50" ng-if="block.data.text.layout === \'two_columns\'">\n                <text-editor\n                    toolbar="shared"\n                    text-property="\'left\'"\n                    content="block.data.text"\n                    empty-text-placeholder="Type your text here..."\n                    content-editable="contentEditable">\n                </text-editor>\n            </div>\n            <div class="grid__item w50" ng-if="block.data.text.layout === \'two_columns\'">\n                <text-editor\n                    toolbar="shared"\n                    text-property="\'right\'"\n                    content="block.data.text"\n                    empty-text-placeholder="Type your text here..."\n                    content-editable="contentEditable">\n                </text-editor>\n            </div>\n\n            <div class="grid__item w100" ng-if="block.data.text.layout === \'one_column\'">\n                <text-editor\n                    toolbar="shared"\n                    text-property="\'left\'"\n                    content="block.data.text"\n                    empty-text-placeholder="Type your text here..."\n                    content-editable="contentEditable">\n                </text-editor>\n            </div>\n        </div>\n        <div class="doc-block__controls doc-block__controls--left" ng-if="contentEditable">\n            <div class="doc-block__control doc-block__control--drag btn--block-control">\n                <i class="icon icon--move"></i>\n            </div>\n        </div>\n\n    </div>\n\n</div>\n'),
    e.put("/views/blocks/layouts/footer/footer_text.html", '<div class="doc-footer">\n\n    <div class="doc-header__bd">\n        <div class="doc-footer__text">\n            <text-editor\n                toolbar="shared"\n                text-property="\'text\'"\n                content="block.data"\n                content-editable="contentEditable"\n                empty-text-placeholder="Type your text here..."\n                activate-on-load="block.created">\n            </text-editor>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/blocks/layouts/footer/footer_text_image_left.html", '<div class="doc-footer">\n    <div class="doc-footer__bd">\n        <div class="doc-footer__img doc-footer__img--left">\n            <img-stub block="block" image="block.data.image" is-editable="contentEditable" class="img-uploadable--compact"></img-stub>\n            <div class="color--dimmed t--medium p--horis t--nowrap" ng-if="!block.data.image.src">Add logo here</div>\n        </div>\n        <div class="doc-footer__text">\n            <text-editor\n                toolbar="shared"\n                text-property="\'text\'"\n                content="block.data"\n                content-editable="contentEditable"\n                empty-text-placeholder="Type your text here..."\n                activate-on-load="block.created">\n            </text-editor>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/blocks/layouts/footer/footer_text_image_right.html", '<div class="doc-footer">\n    <div class="doc-footer__bd">\n        <div class="doc-footer__text">\n            <text-editor\n                toolbar="shared"\n                text-property="\'text\'"\n                content="block.data"\n                content-editable="contentEditable"\n                empty-text-placeholder="Type your text here..."\n                activate-on-load="block.created">\n            </text-editor>\n        </div>\n        <div class="doc-footer__img doc-footer__img--right">\n            <img-stub block="block" image="block.data.image" is-editable="contentEditable" class="img-uploadable--compact"></img-stub>\n            <div class="color--dimmed t--medium p--horis t--nowrap" ng-if="!block.data.image.src">Add logo here</div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/blocks/layouts/header/header_text.html", '<div class="doc-header">\n    <div class="doc-header__bd">\n        <div class="doc-header__text">\n            <text-editor\n                toolbar="shared"\n                text-property="\'text\'"\n                content="block.data"\n                content-editable="contentEditable"\n                empty-text-placeholder="Type your text here..."\n                activate-on-load="block.created">\n            </text-editor>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/blocks/layouts/header/header_text_image_left.html", '<div class="doc-header">\n    <div class="doc-header__bd">\n        <div class="doc-header__img doc-header__img--left">\n            <img-stub block="block" image="block.data.image" is-editable="contentEditable" class="img-uploadable--compact"></img-stub>\n            <div class="color--dimmed t--medium p--horis t--nowrap" ng-if="!block.data.image.src">Add logo here</div>\n        </div>\n        <div class="doc-header__text">\n            <text-editor\n                toolbar="shared"\n                text-property="\'text\'"\n                content="block.data"\n                content-editable="contentEditable"\n                empty-text-placeholder="Type your text here..."\n                activate-on-load="block.created">\n            </text-editor>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/blocks/layouts/header/header_text_image_right.html", '<div class="doc-header">\n    <div class="doc-header__bd">\n        <div class="doc-header__text">\n            <text-editor\n                toolbar="shared"\n                text-property="\'text\'"\n                content="block.data"\n                content-editable="contentEditable"\n                empty-text-placeholder="Type your text here..."\n                activate-on-load="block.created">\n            </text-editor>\n        </div>\n        <div class="doc-header__img doc-header__img--right">\n            <img-stub block="block" image="block.data.image" is-editable="contentEditable" class="img-uploadable--compact"></img-stub>\n            <div class="color--dimmed t--medium p--horis t--nowrap" ng-if="!block.data.image.src">Add logo here</div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/blocks/layouts/heading/heading_1.html", '<h1 class="contenteditable">\n    <text-editor\n        toolbar="none"\n        content="block.data"\n        text-property="\'text\'"\n        content-editable="contentEditable"\n        activate-on-load="block.created"\n        disable-image-controls="true"\n        empty-text-placeholder="Type your header here...">\n    </text-editor>\n</h1>\n'),
    e.put("/views/blocks/layouts/heading/heading_2.html", '<h2 class="contenteditable">\n    <text-editor\n        toolbar="none"\n        text-property="\'text\'"\n        content="block.data"\n        content-editable="contentEditable"\n        activate-on-load="block.created"\n        disable-image-controls="true"\n        empty-text-placeholder="Type your header here...">\n    </text-editor>\n</h2>\n'),
    e.put("/views/blocks/layouts/heading/heading_3.html", '<h3 class="contenteditable">\n    <text-editor\n        toolbar="none"\n        text-property="\'text\'"\n        content="block.data"\n        content-editable="contentEditable"\n        activate-on-load="block.created"\n        disable-image-controls="true"\n        empty-text-placeholder="Type your header here...">\n    </text-editor>\n</h3>\n'),
    e.put("/views/blocks/layouts/html/html.html", '<div>\n    <div ng-if="contentEditable" class="doc-block__controls doc-block__controls--top-right doc-block__controls--show-with-defaults" style="z-index: 1;">\n        <button class="btn btn--block-control btn--block-control-has-text" ng-click="editHTML()">\n            <i class="icon icon--edited icon--xs push-next"></i> Edit HTML\n        </button>\n    </div>\n    <iframe iframe-in-block ng-src="{{contentUrl}}" frameborder="0" height="{{block.data.options.height}}}px" width="100%"></iframe>\n</div>\n'),
    e.put("/views/blocks/layouts/image/image.html", '<img-stub block="block" image="block.data.images[0]" is-editable="contentEditable"></img-stub>'),
    e.put("/views/blocks/layouts/image/three_images.html", '<div class="grid grid--spacing-md">\r\n    <div class="grid__item w33"><img-stub block="block" image="block.data.images[0]" is-editable="contentEditable"></img-stub></div>\r\n    <div class="grid__item w33"><img-stub block="block" image="block.data.images[1]" is-editable="contentEditable"></img-stub></div>\r\n    <div class="grid__item w33"><img-stub block="block" image="block.data.images[2]" is-editable="contentEditable"></img-stub></div>\r\n</div>'),
    e.put("/views/blocks/layouts/image/two_images.html", '<div class="grid grid--spacing-md">\r\n    <div class="grid__item w50"><img-stub block="block" image="block.data.images[0]" is-editable="contentEditable"></img-stub></div>\r\n    <div class="grid__item w50"><img-stub block="block" image="block.data.images[1]" is-editable="contentEditable"></img-stub></div>\r\n</div>'),
    e.put("/views/blocks/layouts/pagebreak/pagebreak.html", '<div class="pagebreak">\n    <hr/></div>\n\n<!--todo remove hr -->'),
    e.put("/views/blocks/layouts/pdf/pdf.html", '<file-uploader-inline ng-if="uploading && !attachmentContent && contentEditable" delegate="this"\n  class="uploadcare-inline--in-doc-block"></file-uploader-inline>\n<file-process ng-if="processing && !attachmentContent && contentEditable" delegate="this" options="processingOptions"></file-process>\n\n<document-page ng-if="attachmentContent" document-content-info="attachmentContent" document-info="documentInfo"\n    action-panel-visible="false" page="page" ng-repeat="page in attachmentContent.pages track by $index"></document-page>\n'),
    e.put("/views/blocks/layouts/pricingtable/pricingtable.html", '<pricing-table ng-if="documentInfo" block="block" mode="tableMode" document-info="documentInfo"></pricing-table>\n'),
    e.put("/views/blocks/layouts/table/table.html", '<table-wrapper ng-if="documentInfo" block="block" mode="tableMode" table-type="basic"></table-wrapper>\n'),
    e.put("/views/blocks/layouts/text/text.html", '<div>\n    <text-editor\n        toolbar="shared"\n        content="block.data"\n        text-property="\'text\'"\n        content-editable="contentEditable"\n        empty-text-placeholder="Type your text here..."\n        activate-on-load="block.created"></text-editor>\n    <div class="doc-block__clearer"></div>\n</div>\n'),
    e.put("/views/blocks/layouts/text/text_image_left.html", '<div class="grid grid--spacing-md">\n    <div class="grid__item w33"><img-stub block="block" image="block.data.image" is-editable="contentEditable"></img-stub></div>\n    <div class="grid__item w66">\n        <text-editor\n            toolbar="shared"\n            text-property="\'text\'"\n            content="block.data"\n            content-editable="contentEditable"\n            empty-text-placeholder="Type your text here..."\n            activate-on-load="block.created">\n        </text-editor>\n        <div class="doc-block__clearer"></div>\n    </div>\n</div>\n'),
    e.put("/views/blocks/layouts/text/text_image_right.html", '<div class="grid grid--spacing-md">\n    <div class="grid__item w66">\n        <text-editor\n            toolbar="shared"\n            text-property="\'text\'"\n            content="block.data"\n            content-editable="contentEditable"\n            empty-text-placeholder="Type your text here..."\n            activate-on-load="block.created">\n        </text-editor>\n        <div class="doc-block__clearer"></div>\n    </div>\n    <div class="grid__item w33"><img-stub block="block" image="block.data.image" is-editable="contentEditable"></img-stub></div>\n</div>\n'),
    e.put("/views/blocks/layouts/toc/toc.html", '<div>\n    <div ng-if="contentEditable" class="doc-block__controls doc-block__controls--top-right doc-block__controls--show-with-defaults" style="z-index: 1;">\n        <button class="btn btn--block-control btn--block-control-has-text" ng-click="refreshTableOfContents(block)">\n            <i class="icon icon--refresh icon--small push-next"></i> Refresh\n        </button>\n    </div>\n    <ol class="list-unstyled table-of-contents" ng-if="!empty">\n        <li ng-repeat="header in tableOfContents" ng-class="{\n                \'table-of-contents__h1\': header.isH1,\n                \'table-of-contents__h2\': header.isH2,\n                \'table-of-contents__h3\': header.isH3\n            }">\n            <a class="table-of-contents__handler" href="" ng-click="scrollTo(header, $index)"\n               ng-bind-html="header.text ? header.text : \'&nbsp;\'"></a>\n            <a ng-if="contentEditable" ng-click="remove(header, $index)"  href=""\n               class="close table-of-contents__remove" title="Hide from TOC">\n                <i class="icon icon--sm icon--delete-sm"></i>\n               </a>\n        </li>\n    </ol>\n    <p class="color--dimmed" ng-if="empty">Add Headings and they will appear in your table of contents.</p>\n</div>\n'),
    e.put("/views/blocks/layouts/video/video.html", '<div class="video">\n    <div class="img-stub" ng-if="!block.data.url">\n        <div class="img-stub__video"></div>\n    </div>\n    <iframe iframe-in-block width="680" height="414" src="" frameborder="0" allowfullscreen\n        class="video__content"\n        ng-if="block.data.url" ng-src="{{videoUrl}}"></iframe>\n</div>\n\n'),
    e.put("/views/blocks/pricingtable/renders/custom_field.html", '<text-editor\n        text-property="cellObj.columnObj.column.ref"\n        content="cellObj.dataObj.data.custom_fields"\n        content-editable="isEditableByUser(cellObj.dataObj)"\n        activate-on-load="rowObj.isNew && $index === 0"\n        toolbar="shared">\n</text-editor>\n'),
    e.put("/views/blocks/pricingtable/renders/line_discount.html", '<div class="form-row form-row--vert-middle pos--rel z-1">\n    <number-editor model="cellObj.dataObj.data.discount" number="\'value\'" decimal-places="block.data.settings.decimalPlaces"\n                   percent="true" editable="isEditableByUser(cellObj.dataObj)"></number-editor>\n</div>\n'),
    e.put("/views/blocks/pricingtable/renders/line_tax_first.html", '<div class="form-row form-row--vert-middle pos--rel z-1">\n    <number-editor model="cellObj.dataObj.data.tax_first" number="\'value\'" decimal-places="block.data.settings.decimalPlaces"\n                   percent="true" editable="isEditableByUser(cellObj.dataObj)"></number-editor>\n</div>\n'),
    e.put("/views/blocks/pricingtable/renders/line_tax_second.html", '<div class="form-row form-row--vert-middle pos--rel z-1">\n    <number-editor model="cellObj.dataObj.data.tax_second" number="\'value\'" decimal-places="block.data.settings.decimalPlaces"\n                   percent="true" editable="isEditableByUser(cellObj.dataObj)"></number-editor>\n</div>\n'),
    e.put("/views/blocks/pricingtable/renders/name.html", '<div>\n\n  <div class="form-row">\n    <div class="form-row__fixed" ng-if="cellObj.dataObj.options.optional">\n\n        <label class="chb optional-row-chb">\n            <input type="checkbox" class="chb__input" id="id-{{::rowObj.dataObj.ref}}"\n                   ng-model="cellObj.dataObj.options.optional_selected"\n                   ng-disabled="::!isEditableByUserOrRecipient(cellObj.dataObj)"/>\n            <span class="chb__animation-wrap">\n              <span class="chb__icon chb__icon--checked"></span>\n            </span>\n            <span class="chb__icon chb__icon--unchecked"></span>\n        </label>\n\n    </div>\n\n    <div class="form-row__stretcher">\n        <label class="doc-table__procuct-touch-helper">\n            <catalog-item-selector class="contenteditable " visibility-monitor="name"\n               ng-if="::isEditableByUser(cellObj.dataObj)"\n               item="cellObj.dataObj.data"\n               parent="cellObj.dataObj"\n               table-id="::tableUUID"\n               focus="::rowObj.isNew">\n            </catalog-item-selector>\n        </label>\n\n\n      <div ng-if="::!isEditableByUser(cellObj.dataObj)">\n        <label for="id-{{::rowObj.dataObj.ref}}" class="doc-table__item-name">{{::cellObj.dataObj.data.name}}</label>\n      </div>\n\n    </div>\n  </div>\n\n\n    <text-editor visibility-monitor="description"\n        class="pos--rel z-auto doc-table__product-descr"\n        text-property="\'description\'"\n        content="cellObj.dataObj.data"\n        content-editable="::isEditableByUser(cellObj.dataObj)"\n        toolbar="shared"\n        empty-text-placeholder="Type your description...">\n    </text-editor>\n\n    <div class="product-pics" ng-if="cellObj.dataObj.data.images.length">\n        <div class="product-pic" ng-repeat="image in cellObj.dataObj.data.images">\n            <image-light-box images="cellObj.dataObj.data.images" current="image"></image-light-box>\n            <button ng-if="::isEditableByUser(cellObj.dataObj)" class="product-pic__del btn pos--abs top-0 right-0"\n                    ng-click="removeImage(rowObj, image)" >\n                <i class="icon icon--delete-sm icon--xs color--white"></i>\n            </button>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/blocks/pricingtable/renders/price.html", '<div class="form-row form-row--vert-middle pos--rel z-1">\n    <number-editor model="cellObj.dataObj.data" number="\'price\'"\n      currency="block.data.options.currency" decimal-places="block.data.settings.decimalPlaces" editable="::isEditableByUser(cellObj.dataObj)"></number-editor>\n</div>\n'),
    e.put("/views/blocks/pricingtable/renders/qty.html", '<div class="number-field--qty"\n     ng-class="{\'number-field--qty-editable\': cellObj.dataObj.options.qty_editable}">\n    <number-editor model="cellObj.dataObj.data"\n       number="\'qty\'" only-positive="true"\n    editable="isEditableByUser(cellObj.dataObj) || (cellObj.dataObj.options.qty_editable && isEditableByRecipient(cellObj.dataObj))"></number-editor>\n</div>\n'),
    e.put("/views/blocks/pricingtable/renders/sku.html", '<text-editor\n    text-property="cellObj.columnObj.column.ref"\n    content="cellObj.dataObj.data"\n    content-editable="isEditableByUser(cellObj.dataObj)"\n    activate-on-load="rowObj.isNew && $index === 0"\n    toolbar="shared">\n</text-editor>\n'),
    e.put("/views/blocks/pricingtable/renders/total.html", '<div class="doc-table__cell-total"\n     ng-class="{\'doc-table__cell-total--optional-unchecked\': cellObj.dataObj.options.optional && !rowObj.dataObj.options.optional_selected }">\n    {{cellObj.dataObj.data.total | cy : block.data.options.currency : block.data.settings.decimalPlaces}}\n</div>\n'),
    e.put("/views/blocks/settings/blocks/apply-button.html", '<button class="btn btn-block btn-primary block" ng-click="closeBlockSettings()">\n    Apply\n</button>'),
    e.put("/views/blocks/settings/blocks/layouts.html", '<div>\n    <div class="doctool-subhead m--bottom-sm"><span>Layout</span></div>\n    <div class="btn-sq-holder m--bottom">\n        <button class="btn btn--sq-icon"\n                ng-class="{\'active\': block.layout.id === layout.id}"\n                ng-repeat="layout in layouts"\n                ng-click="changeLayout(layout)" >\n                    <span class="btn--sq-icon__bd">\n                        <i class="icon icon--xxbig icon--layout-{{layout.handle}} color--text-default"></i>\n                        <span class="btn--sq-icon__text">{{\'block.layout.\' + layout.handle | translate}}</span>\n                    </span>\n        </button>\n    </div>\n</div>\n\n'),
    e.put("/views/blocks/settings/blocks/remove-button.html", '<button class="btn btn--transparent pull-right pull--padding-right color--red" ng-click="removeBlock()" type="button">\n    <i class="icon icon--small icon--trash push-next"></i>\n    {{label || \'Remove\'}}\n</button>\n'),
    e.put("/views/blocks/settings/blocks/remove-row-button.html", '<div>\n\n  <!-- row -->\n  <button class="btn btn--transparent pull-right pull--padding-right color--red"\n          ng-if="tableRow" ng-click="removeRow()" type="button">\n    <i class="icon icon--small icon--trash push-next"></i>\n    Remove row\n  </button>\n\n  <!-- section -->\n\n  <button class="btn btn--transparent btn-block color--red a--left pull--padding-left p--left-sm"\n          ng-if="tableSection" ng-click="removeSectionWithAllContent()" type="button">\n    <i class="icon icon--small icon--trash push-next"></i>\n    Remove header and rows under it\n  </button>\n\n  <button class="btn btn--transparent btn-block color--red a--left pull--padding-left p--left-sm"\n          ng-if="tableSection" ng-click="removeSection()" type="button">\n    <i class="icon icon--small icon--trash push-next"></i>\n    Remove section header only\n  </button>\n\n\n</div>\n'),
    e.put("/views/blocks/settings/blocks/save-as-template.html", '<button class="btn btn--transparent pull--padding-left" ng-click="saveAsTemplate(block)" type="button">\n    <i class="icon icon--small icon--plus-circled-inverted push-next"></i>\n    Save as template\n</button>\n'),
    e.put("/views/blocks/settings/blocks/table-borders.html", '<div class="doctool-subhead m--bottom-sm"><span>Borders</span></div>\n<ul class="m--bottom">\n    <li class="checkbox">\n        <label>\n            Vertical\n            <input type="checkbox" ng-model="block.data.settings.verticalBorder">\n        </label>\n    </li>\n    <li class="checkbox">\n        <label>\n            Horizontal\n            <input type="checkbox" ng-model="block.data.settings.horizontalBorder">\n        </label>\n    </li>\n</ul>\n'),
    e.put("/views/blocks/settings/blocks/table-headers.html", '<div class="doctool-subhead m--bottom-sm"><span>Headers</span></div>\n<ul class="m--bottom">\n    <li class="checkbox">\n        <label>\n            Show headers\n            <input type="checkbox" ng-model="block.data.settings.showHeaders">\n        </label>\n    </li>\n</ul>\n'),
    e.put("/views/blocks/settings/blocks/table-sub-tabs.html", '<ul class="list list--tabs m--bottom">\n  <li ng-class="{\'active\': tableSettingsSection === TABLE_SETTINGS_SECTIONS.TABLE}">\n    <a href="" ng-click="showTableSettings()">Table</a>\n  </li>\n  <li ng-class="{\'active\': tableSettingsSection === TABLE_SETTINGS_SECTIONS.ROW}">\n    <a href="" ng-hide="!tableRow && !tableSection" ng-click="showTableRowSettings()">Row</a>\n  </li>\n</ul>\n'),
    e.put("/views/blocks/settings/blocks/tax.html", '<div>\n\n    <div class="m--bottom-sm m--top-sm"><span class="">\n        <span>{{tax.name}}</span>\n    </span></div>\n\n    <ul class="m--bottom-sm">\n        <li class="radio">\n            <label>\n                <input type="radio" ng-model="tax.global" ng-value="true"/>\n                Total tax\n            </label>\n        </li>\n        <li class="radio">\n            <label>\n                <input type="radio" ng-model="tax.global" ng-value="false"/>\n                Line item tax\n            </label>\n        </li>\n    </ul>\n\n    <label class="control-label" ng-if="tax.global">\n        Tax rate\n    </label>\n\n    <div class="grid grid--spacing-sm">\n        <div class="grid__item w50">\n            <div class="form-row">\n                <div class="form-row__stretcher">\n                    <input type="number" class="form-control" ng-class="{\'border--red\' : !isValid}"\n                           ng-if="tax.global" ng-model="tax.value">\n                </div>\n                <div class="form-row__fixed form-control-static" ng-if="tax.global">%</div>\n            </div>\n        </div>\n        <div class="grid__item w50">\n            <button ng-if="removable" ng-click="removeTax()"\n                    class="color--red btn btn--smaller btn--transparent pull--padding-right pull-right t--smaller">\n                Remove tax\n            </button>\n        </div>\n    </div>\n\n    <p class="t--small-dimmed color--red" ng-if="!isValid">\n        No more than 15 digits in total (13 digits in integer part and 2 digits in fraction part)\n    </p>\n\n</div>\n'),
    e.put("/views/common/directives/audit/document-audit-timeline.html", '<div>\n    <div class="p--sm bg--very-light t--smaller m--bottom">\n        <strong>Audit trail</strong> gives a step by step history of a document\'s changes.\n    </div>\n\n    <document-status-timeline>\n        <document-status-item ng-repeat="event in events" status="event.status" without-description="true">\n            <ng-include src="event.layout"></ng-include>\n            <p class="t--small-dimmed">\n                {{event.date_created | moment}}\n                <span ng-if="event.data.city || event.data.country">\n                    &middot; <i class="icon icon--location icon--xs a--baseline"></i>\n                </span>\n                <span ng-if="event.data.city">{{event.data.city}}</span><!--\n             --><span ng-if="event.data.city && event.data.country">, </span>\n                <span ng-if="event.data.country">{{event.data.country}}</span>\n            </p>\n        </document-status-item>\n    </document-status-timeline>\n</div>\n'),
    e.put("/views/common/directives/audit/document-status-item.html", '<li class="doc-flow__item">\n    <div class="doc-flow__mark">\n        <i class="icon icon--doc-status icon--doc-status-{{status}} doc-status--{{status}}"></i>\n    </div>\n    <h4 class="doc-flow__item-title">{{\'doc.status.\' + status | translate}}</h4>\n    <p class="m--bottom-sm color--dimmed" ng-if="description && !withoutDescription">{{description}}</p>\n    <p class="m--bottom-sm color--dimmed" ng-if="!description && !withoutDescription">{{\'doc.status_description.\' + status | translate}}</p>\n    <div ng-transclude></div>\n</li>\n'),
    e.put("/views/common/directives/audit/document-status-timeline.html", '<ul class="doc-flow ng-transclude">\n</ul>\n'),
    e.put("/views/doctools/approval/dialogs/send-for-approval-dialog.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <h4 class="modal-title">Send for approval</h4>\n</div>\n<div class="modal-body p--none">\n\n    <div class="form-row color--dimmed">\n        <div class="form-row__fixed p--sm"><strong>From:</strong></div>\n        <div class="form-row__stretcher p--sm p--left-none">{{documentInfo.document.owner | fullName}}</div>\n    </div>\n    <div class="hr m--bottom-xs"></div>\n\n    <div class="form-row color--dimmed">\n        <div class="form-row__fixed p--sm"><strong>To:</strong></div>\n        <div class="form-row__stretcher p--sm p--left-none">\n            <i class="icon icon--contacts-2 push-next a--baseline" ng-if="moderatedByRole"></i>\n            {{moderatorName}}\n        </div>\n    </div>\n\n\n    <div class="hr m--bottom-xs"></div>\n    <form class="">\n        <textarea class="form-control w100 border--none radius-0 resize-v" rows="7" ng-model="messageModel.message"\n                  placeholder="Optional message" focus-me ng-trim="false"></textarea>\n    </form>\n</div>\n<div class="modal-footer">\n    <button ng-click="send()" class="btn btn-primary btn--stretch-narrow pull-right "\n            ng-disabled="sending">\n        <spinner visible="sending" class="push-next"></spinner>\n        <span ng-if="!sending">Send for approval</span>\n        <span ng-if="sending">Sending for approval</span>\n    </button>\n    <button ng-click="$dismiss()" class="btn btn-default btn--stretch-narrow pull-left">Cancel</button>\n</div>\n\n'),
    e.put("/views/documents/pad/approve/document-approve-panel.html", '<div class="document-action-panel document-action-panel--default clearfix p--lg" ng-show="visible">\n\n    <div class="pull-right document-action-panel__action">\n\n        <button class="btn btn-danger  document-action-panel__button" ng-click="reject()" ng-disabled="working">\n            <spinner visible="working"></spinner>\n            <span>Reject</span>\n        </button>\n\n        <button class="btn btn-primary  document-action-panel__button" ng-click="approve()" ng-disabled="working">\n            <spinner visible="working"></spinner>\n            <span>Approve</span>\n        </button>\n    </div>\n\n    <div ng-if="!event.reason" class="document-action-panel__action-name t--medium m--none form-control-static">\n        Review the document and Approve or Reject it\n    </div>\n\n    <div ng-if="event.reason" class="document-action-panel__action-name">\n        <div class="media card m--bottom">\n            <avatar class="pull-left" user="event.user" size="35"></avatar>\n            <div class="media-body">\n                <h4 class="t--normal t--larger m--bottom-xs">\n                    Review the document and Approve or Reject it\n                </h4>\n                <div class="t--small">\n                    <span class="color--dimmed">{{event.user | fullName}}<span ng-if="event.reason">:</span></span>\n                    <q>{{event.reason | truncate : 60 }}</q>\n                    <a href="" ng-click="openTimeline()" ng-if="event.reason.length>60" class="link-camouflage">More</a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/documents/pad/approve/document-approve-panel.phone.html", '<div class="document-action-panel document-action-panel--phone clearfix" ng-show="visible">\n\n    <div class="pull-right document-action-panel__action">\n\n        <button class="btn btn-danger  document-action-panel__button" ng-click="reject()" ng-disabled="working">\n            <spinner visible="working"></spinner>\n            <span>Reject</span>\n        </button>\n\n        <button class="btn btn-primary  document-action-panel__button" ng-click="approve()" ng-disabled="working">\n            <spinner visible="working"></spinner>\n            <span>Approve</span>\n        </button>\n    </div>\n\n    <div ng-if="!event" class="document-action-panel__action-name t--medium m--none form-control-static">Review the document and Approve or Reject it</div>\n    <div ng-if="event" class="document-action-panel__action-name">\n        <div class="media card m--bottom">\n            <avatar class="pull-left" user="event.user" size="35"></avatar>\n            <div class="media-body">\n                <h4 class="t--normal t--larger m--bottom-xs">\n                    Review the document and Approve or Reject it\n                </h4>\n                <div class="t--small">\n                    <span class="color--dimmed">{{event.user | fullName}}<span ng-if="event.reason">:</span></span>\n                    <q>{{event.reason | truncate : 60 }}</q>\n                    <a href="" ng-click="openTimeline()" ng-if="event.reason.length>60" class="link-camouflage">More</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/documents/pad/content/attach-document-action-page.html", '<div class="document-page">\n\n    <div class="document-page__sheet">\n\n        <div class="document-page__content a--center p clickable" ng-if="!isShowUploadZone" ng-click="showUploadZone()">\n            <a href="">\n                <i class="icon icon--plus push-next"></i>\n                Attach another document\n            </a>\n\n        </div>\n\n        <div class="document-page__content clearfix" ng-if="isShowUploadZone">\n\n            <div class="pos--rel m--lg m--bottom-none">\n                <file-uploader-inline ng-if="uploading" delegate="this" class="uploadcare-inline--in-doc-block"></file-uploader-inline>\n            </div>\n            <file-process ng-if="processing" delegate="this" options="processingOptions"></file-process>\n\n            <div class="a--center p" ng-show="!processing && cancelAvailable">\n                <a href="" ng-click="hideUploadZone()" class=" btn btn--transparent color--red">\n                    <i class="icon icon--close push-next"></i>\n                    Cancel\n                </a>\n            </div>\n\n        </div>\n        <div id="ScrollToMe"></div>\n    </div>\n</div>\n'),
    e.put("/views/documents/pad/content/page.html", '<div class="document-page document-pdf-page document-page--loading" id="page-{{page.number}}-{{page.content}}"\n     data-page-num=\'{{page.number}}\' data-page-content="{{page.content}}"\n     ng-class="{\'document-page--loading\':page.isLoading}">\n\n    <div class="document-page__sheet inspectlet-sensitive">\n\n        <div ng-show="documentContentInfo.isBoxContent">\n            <div class="document-page__content">\n                <div class="document-page__crocodoc-svg" >\n                    <object ng-if="!isIE && !isIOS7" ng-show="page.isLoaded" type="image/svg+xml" ng-attr-data="{{page.svg}}" width="{{page.size.width}}" class="the-doc-part"></object>\n                    <img ng-if="isIE || isIOS7" ng-show="page.isLoaded" ng-src="{{page.svg}}" width="{{page.size.width}}" class="the-doc-part"/>\n                </div>\n            </div>\n\n            <object ng-if="page.isLoaded && !isIE && !isIOS7" type="image/svg+xml" ng-attr-data="{{page.svg}}" class="page-copy" style="display: none;"></object>\n            <img ng-if="page.isLoaded && (isIE || isIOS7)" ng-src="{{page.svg}}" class="page-copy" style="display: none;"/>\n        </div>\n\n        <div ng-show="documentContentInfo.isStaticContent">\n            <button ng-click="reloadImage()" class="document__reload btn" ng-if="!page.isLoading && !page.isLoaded">\n                <i class="icon icon--big icon--reload push-next"></i>\n                <span class="t--larger">\n                    {{\'doc.reload_page\' | translate}}\n                </span>\n            </button>\n\n            <div class="document-page__content">\n                <img ng-show="page.isLoaded" ng-src="{{page.url}}" width="{{page.size.width}}" class="the-doc-part"/>\n            </div>\n\n            <img ng-if="page.isLoaded" ng-src="{{page.url}}" width="{{page.size.width}}" class="page-copy"\n                 style="display: none"/>\n        </div>\n\n\n        <div class="document-actions" ng-if="page.isReady && actionPanelVisible">\n            <document-action ng-repeat="action in page.actions" document-content-info="documentContentInfo" document-info="documentInfo" action=\'action\'/>\n        </div>\n\n        <div class="document-page__overlay" ng-if="page.isReady">\n            <widget-preview ng-repeat="wInfo in page.widgetsInfo" document-info="documentInfo" document-content-info="documentContentInfo" widget-info="wInfo"></widget-preview>\n        </div>\n\n    </div>\n\n</div>\n'),
    e.put("/views/documents/pad/content/page.phone.html", '<div class="document-page document-page--loading" id="page-{{page.number}}-{{page.content}}"\n     data-page-num=\'{{page.number}}\' data-page-content="{{page.content}}"\n     ng-class="{\'document-page--loading\':page.isLoading}">\n\n    <div class="document-page__sheet inspectlet-sensitive">\n\n        <div ng-show="documentContentInfo.isBoxContent">\n            <div class="document-page__content">\n                <div class="document-page__crocodoc-svg">\n                    <object ng-if="!isIE && !isIOS7" ng-show="page.isLoaded" type="image/svg+xml" ng-attr-data="{{page.svg}}" width="{{page.size.width}}" class="the-doc-part"></object>\n                    <img ng-if="isIE || isIOS7" ng-show="page.isLoaded" ng-src="{{page.svg}}" width="{{page.size.width}}" class="the-doc-part"/>\n                </div>\n            </div>\n        </div>\n\n        <div ng-show="documentContentInfo.isStaticContent">\n            <button ng-click="reloadImage()" class="document__reload btn" ng-if="!page.isLoading && !page.isLoaded">\n                <i class="icon icon--big icon--reload push-next"></i> <span class="t--larger">Reload page</span>\n            </button>\n\n            <div class="document-page__content">\n                <img ng-show="page.isLoaded" ng-src="{{page.url}}" width="page.size.width" class="the-doc-part"/>\n            </div>\n        </div>\n\n        <div class="document-actions" ng-if="page.isReady && actionPanelVisible">\n            <document-action ng-repeat="action in page.actions" document-content-info="documentContentInfo" document-info="documentInfo" action=\'action\'/>\n        </div>\n\n        <div class="document-page__overlay" ng-if="page.isReady">\n            <widget-preview ng-repeat="wInfo in page.widgetsInfo" document-info="documentInfo" document-content-info="documentContentInfo" widget-info="wInfo"></widget-preview>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/documents/pad/panels/document-pad-bottom-panel.html", '<div class="document-action-panel document-action-panel--default clearfix p--lg" ng-show="visible">\n    <div class="document-action-panel__action-name">\n        <ng-include src="layout"></ng-include>\n    </div>\n</div>\n'),
    e.put("/views/layout/parts/session_view/top_panel.session_view.html", '<div class="panel panel--top">\n    <div class="page-header">\n\n        <div class="page-header__p1">\n            <breadcrumbs></breadcrumbs>\n        </div>\n        <!--/.page-header-p1-->\n\n    </div>\n    <!--/.page-header-->\n\n</div>\n<!--/.panel--top-->\n'),
    e.put("/views/layout/parts/session_view/top_panel.session_view.phone.html", '<div class="panel panel--top panel--top-phone">\n    <div class="page-header page-header--phone">\n        <div class="page-header__title section-header">{{$root.documentName}}</div>\n    </div>\n    <!--/.page-header-->\n</div>'),
    e.put("/views/layout/parts/viewer/top_panel.viewer.html", '<div class="panel panel--top">\n    <div class="page-header">\n\n        <div class="page-header__p1">\n            <breadcrumbs></breadcrumbs>\n        </div>\n        <!--/.page-header-p1-->\n\n    </div>\n    <!--/.page-header-->\n\n</div>\n<!--/.panel--top-->\n'),
    e.put("/views/layout/parts/viewer/top_panel.viewer.phone.html", '<div class="panel panel--top panel--top-phone">\n    <div class="page-header page-header--phone">\n        <div class="page-header__title section-header">{{$root.documentName}}</div>\n    </div>\n    <!--/.page-header-->\n</div>'),
    e.put("/views/onboarding/controllers/slides/close-slides-content.html", '<div class="onboarding__slide-bd-centerer">\n    <h2 ng-bind-html="slide.title"></h2>\n    <div class="onboarding__slide-txt m--bottom-lg color--dimmed t--primary" ng-bind-html="slide.text"></div>\n\n    <button class="form-row__fixed btn btn-primary btn--stretch-narrow" ng-click="close()">\n        Got it\n    </button>\n\n</div>\n'),
    e.put("/views/onboarding/controllers/slides/request-demo-slide-content.html", '<div ng-controller="OnboardingRequestDemoSlideContentController">\n\n    <!-- main slide content -->\n    <div class="onboarding-slides__hide-while-video" ng-show="!demoRequested && !webinarJoined">\n        <h2 ng-bind-html="slide.title"></h2>\n        <div class="onboarding__slide-txt m--bottom color--dimmed t--primary" ng-bind-html="slide.text"></div>\n    </div>\n\n    <!-- Member -->\n    <div ng-if="member">\n        <a ng-show="!videoUrl" class="btn btn-primary m--bottom-sm onboarding-slides__hide-while-video" ng-click="playVideo(slide.header_video_url)">Watch the video</a>\n        <div>\n            <a ng-show="!videoUrl" class="link-hover" ng-click="close()">{{slide.closeText}}</a>\n            <button ng-show="videoUrl" class="form-row__fixed btn btn-primary btn--stretch-narrow" ng-click="close()">\n                {{slide.closeText}}\n            </button>\n        </div>\n    </div>\n\n\n    <!-- Small company owner -->\n    <div ng-if="smallCompanyOwner && webinarJoined">\n        <h2>Thank you!</h2>\n        <div class="onboarding__slide-txt m--bottom color--dimmed t--primary">\n            You should receive a confirmation email any moment now. We\'re looking forward to seeing you at the webinar!\n        </div>\n    </div>\n\n    <div ng-if="smallCompanyOwner">\n        <join-webinar ng-show="!webinarJoined"></join-webinar>\n        <p class="color--dimmed m--none" ng-show="!webinarJoined"><a ng-click="close()">{{slide.closeText}}</a></p>\n        <button ng-show="webinarJoined" class="form-row__fixed btn btn-primary btn--stretch-narrow" ng-click="close()">\n            {{slide.closeText}}\n        </button>\n    </div>\n\n\n\n    <!-- Big company owner -->\n    <div ng-if="bigCompanyOwner && demoRequested">\n        <h2>Thank you, we got your request!</h2>\n        <div class="onboarding__slide-txt m--bottom color--dimmed t--primary">\n            A PandaDoc representative will be reaching out to you soon to schedule your demo for a date and time that’s convenient for you.\n        </div>\n    </div>\n\n    <div ng-if="bigCompanyOwner">\n        <request-demo ng-show="!demoRequested"></request-demo>\n        <p class="color--dimmed m--none" ng-show="!demoRequested"><a ng-click="close()">{{slide.closeText}}</a></p>\n        <button ng-show="demoRequested" class="form-row__fixed btn btn-primary btn--stretch-narrow" ng-click="close()">\n            {{slide.closeText}}\n        </button>\n    </div>\n\n\n</div>\n'),
    e.put("/views/onboarding/controllers/slides/sample-sales-proposal-content.html", '<div class="onboarding__slide-bd-centerer" ng-controller="OnboardingCheckSampleDocumentController">\n    <h2 ng-bind-html="slide.title"></h2>\n    <div class="onboarding__slide-txt m--bottom-lg color--dimmed t--primary" ng-bind-html="slide.text"></div>\n    <button class="form-row__fixed btn btn-primary btn--stretch-narrow m--bottom-sm btn-lg t--normal" ng-click="checkSampleDocumentAction()">\n        {{slide.actionText}}\n    </button>\n    <p class="color--dimmed m--none"><a ng-click="close()">{{slide.closeText}}</a></p>\n</div>\n'),
    e.put("/views/onboarding/controllers/slides/video-content.html", '<div>\n    <!-- main slide content -->\n    <div class="onboarding-slides__hide-while-video">\n        <h2 ng-bind-html="slide.title"></h2>\n        <div class="onboarding__slide-txt m--bottom color--dimmed t--primary" ng-bind-html="slide.text"></div>\n    </div>\n\n    <div>\n        <a ng-show="!videoUrl" class="btn btn-primary m--bottom-sm onboarding-slides__hide-while-video btn-lg t--normal" ng-click="playVideo(slide.header_video_url)">{{slide.actionText}}</a>\n        <div>\n            <a ng-show="!videoUrl" class="link-hover" ng-click="close()">{{slide.closeText}}</a>\n            <button ng-show="videoUrl" class="form-row__fixed btn btn-primary btn--stretch-narrow btn-lg t--normal" ng-click="close()">\n                {{slide.closeText}}\n            </button>\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/settings/billing/chargify/billing-plans.html", '<div class="app-bg--default scrollpane__bd adjust-for-subpanel anim--slide-in-from-left">\n\n<div class="bg--white">\n        <div class="restrict-page-width">\n            <div class="billing-hdr w100">\n                <div class="billing-hdr__prt1">\n                    <h1 class="section-header">{{\'billing.title\' | translate}}</h1>\n                    <p class="m--none t--medium" ng-if="currentPlan">\n                        <span class="color--dimmed">{{\'billing.current_plan\' | translate}}:</span>\n                        <span class="t--bold">{{\'billing.plan.\'+currentPlan.handle+\'.name\'|translate}}</span>\n                    </p>\n                    <p class="t--medium" ng-if="currentPlan">\n                        <span class="color--dimmed" ng-show="currentPlan.interval === monthly">{{\'billing.payment_per_month\' | translate}}:</span>\n                        <span class="color--dimmed" ng-show="currentPlan.interval === annual">{{\'billing.payment_per_year\' | translate}}:</span>\n                        <span class="t--bold">${{currentPlan.price | fullPrice : workspace}}</span>\n                    </p>\n					<a href="{{chargifyUrl}}" target="_blank" ng-click="manageBillingDetails()" ng-show="currentPlan && currentPlan.handle !== freePlan.handle"\n                       class="btn btn--transparent btn--text-brand pull--padding-left">\n                        {{\'billing.manage_billing_details\' | translate}}\n                    </a>\n\n                </div>\n                <div class="billing-hdr__prt2">\n                    <div ng-if="subscription.docs_count >= 0" class="t--xl t--bold">{{subscription.docs_count}}</div>\n                    <div ng-if="subscription.docs_count < 0" class="t--large t--bold">Unlimited</div>\n                    <p class="color--dimmed">{{\'billing.docs_left\' | translate}}</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="p--lg restrict-page-width">\n\n        <ul class="tariff-list block" ng-if="plans">\n            <li class="block">\n                <div class="tariff">\n                    <div class="tariff__p1">\n                        <h2 class=" tariff__title m--none">{{\'billing.plan.free.name\' | translate}}</h2>\n                        <p class="color--dimmed t--larger block">{{\'billing.plan.free.desc\' | translate}}</p>\n                        <p class="m--none"><a href="#/settings/rewards/" class="tariff__desc2">\n                            <i class="icon icon--friends icon--lg push-next color--dimmed"></i>\n                            {{\'billing.get_more_docs\' | translate}}</a></p>\n                    </div>\n                    <div class="tariff__p2">\n                        <subscription-plan plan="freePlan" subscription="subscription"></subscription-plan>\n                    </div>\n                </div>\n            </li>\n\n            <li class="block">\n                <div class="tariff">\n                    <div class="tariff__p1">\n                        <h2 class=" tariff__title m--none">{{\'billing.plan.professional.name\' | translate}}</h2>\n                        <p class="color--dimmed t--larger block">{{\'billing.plan.professional.desc\' | translate}}</p>\n                        <p class="m--none color--dimmed">\n                            <i class="icon icon--thumb-up icon--lg push-next"></i>\n                            Save 17%, pay yearly\n                        </p>\n\n                    </div>\n                    <div class="tariff__p2">\n                        <subscription-plan plan="professionalPlan" subscription="subscription" upgrade="true"></subscription-plan>\n                        <subscription-plan plan="professionalAnnualPlan" subscription="subscription" upgrade="true" badge="-17%"></subscription-plan>\n                    </div>\n                </div>\n            </li>\n\n            <li class="block">\n                <div class="tariff">\n                    <div class="tariff__p1">\n                        <h2 class=" tariff__title m--none">{{\'billing.plan.business.name\' | translate}}</h2>\n                        <p class="color--dimmed t--larger block"> {{\'billing.plan.business.desc\' | translate}}</p>\n                        <p class="m--none color--dimmed">\n                            <i class="icon icon--thumb-up icon--lg push-next"></i>\n                            Save 17%, pay yearly\n                        </p>\n\n                    </div>\n                    <div class="tariff__p2">\n                        <subscription-plan plan="businessPlan" subscription="subscription" upgrade="true"></subscription-plan>\n                        <subscription-plan plan="businessAnnualPlan" subscription="subscription" upgrade="true" badge="-17%"></subscription-plan>\n                    </div>\n                </div>\n            </li>\n        </ul>\n\n        <div class="bg--white p" ng-if="!plans">\n            <spinner visible="true" class="icon--big"></spinner>\n        </div>\n\n    </div>\n\n\n</div>\n'),
    e.put("/views/settings/billing/chargify/chargify.html", '<div class="app-bg--default scrollpane__bd adjust-for-subpanel anim--slide-in-from-left">\n\n    <div class="bg--white anim--slide-in-from-left">\n    <div class="restrict-page-width">\n            <div class="billing-hdr w100">\n                <div class="billing-hdr__prt1">\n                    <h1 class="section-header">{{title | translate}}</h1>\n                    <p><a ng-click="openPlans()" class="btn btn--transparent btn--text-brand pull--padding-left"> ← {{\'billing.back_to_plans\' | translate}}</a></p>\n                </div>\n            </div>\n        </div>\n        <div class="p--left a--center" style="padding: 100px 0 1000px 20px" ng-if="chargifyLoading">\n            <spinner visible="chargifyLoading" class="icon--big"></spinner>\n        </div>\n    </div>\n    <iframe ng-src="{{chargifyUrl}}" frameborder="0" style="width:100%;" chargify-iframe-wrapper></iframe>\n</div>\n'),
    e.put("/views/settings/billing/chargify/subscription-plan.html", '<div class="tariff__plan" ng-class="{\'tariff__plan--active\' : currentPlan}">\n    <div class="t--large color--text-default">${{plan.price}}</div>\n    <p class="tariff__desc1">{{\'billing.plan.\' + plan.handle + \'.price_desc\' | translate}}</translate></p>\n\n    <button class="tariff__action btn btn--block btn-sm btn-primary t--bold" ng-if="!currentPlan && !chargifyUrl" ng-click="changePlan(plan)" ng-disabled="changing">\n        <spinner visible="changing" class="pos--rel"></spinner>\n        <span ng-if="!changing && upgrade">{{\'billing.upgrade\'|translate}}</span>\n        <span ng-if="!changing && !upgrade">{{\'billing.downgrade\'|translate}}</span>\n        <span ng-if="changing">{{\'billing.working\'|translate}}</span>\n    </button>\n\n    <a class="tariff__action btn btn--block btn-sm btn-primary t--bold" ng-if="!currentPlan && chargifyUrl" href="{{chargifyUrl}}" target="_blank">{{\'billing.upgrade\'|translate}}</a>\n\n    <div class="t--caps t--bold" ng-if="currentPlan">Current plan</div>\n\n    <div class="tariff__plan-badge" ng-if="badge">\n        <div class="tariff__plan-badge-bd">\n          {{badge}}\n        </div>\n    </div>\n</div>\n'),
    e.put("/views/settings/billing/stripe/billing-packages.html", '<div class="app-bg--default scrollpane__bd adjust-for-subpanel anim--slide-in-from-left">\n\n    <div class="p--lg restrict-page-width">\n\n        <div class="tariffs">\n            <div class="bg--white p m--bottom grid a--center t--medium">\n                <div class="tariffs__item">\n                    <h2 class="m--bottom-sm t--primary">Invite Friends. Get Docs For Free</h2>\n\n                    <p class="tariffs__desc color--dimmed t--smaller">\n                    For every referral you get\n                        <ng-pluralize count="REWARD_DOCS_AMOUNT" when="{\'0\': \'\', \'1\': \'1 doc\', \'other\': \'{} docs\'}"></ng-pluralize>. <br/>\n                        Your friend gets <ng-pluralize count="REWARD_DOCS_AMOUNT" when="{\'0\': \'\', \'1\': \'1 doc\', \'other\': \'{} docs\'}"></ng-pluralize> as well.\n                    </p>\n                    <div class="tariffs__content">\n                        <i class="icon icon--present icon--huge color--brand"></i>\n                    </div>\n\n                    <a href="#/settings/rewards/" class="btn btn-default btn-lg  tariffs__action">Invite</a>\n                </div>\n                <form class="tariffs__item">\n                    <h2 class="m--bottom-sm t--primary">Pay as You Go</h2>\n\n                    <p class="color--dimmed t--smaller tariffs__desc"> Buy docs, use them when you need </p>\n\n                    <div ng-if="packages.length === 0"><i class="icon spinner"></i></div>\n\n                    <ol class="tariffs__content tariff-toc" ng-if="packages.length > 0">\n                        <li ng-repeat="package in packages" ng-if="package.package">\n                            <label class="tariff-toc__item clearfix">\n                                <span class="radio-custom">\n                                     <input type="radio" ng-model="model.selected" ng-value="package"/>\n                                    <i class="__img"></i>\n                                </span>\n                                <span class="tariff-toc__name pull-left">\n                                    {{package.count}} docs\n                                    <em class="tariff-toc__deal" ng-if="package.default">Best deal</em>\n                                </span>\n                                <span class="tariff-toc__val pull-right"><strong style="font-weight:600">${{package.price_per_doc / 100 | number : 2}}</strong><span\n                                        class="color--dimmed">/doc</span></span>\n                            </label>\n                        </li>\n\n                        <li ng-repeat="plan in packages" ng-if="plan.plan">\n                            <label class="tariff-toc__item clearfix">\n                                <span class="radio-custom">\n                                     <input type="radio" ng-model="model.selected" ng-value="plan"/>\n                                    <i class="__img"></i>\n                                </span>\n                                <span class="tariff-toc__name pull-left">\n                                    Unlimited\n                                </span>\n                               <span class="tariff-toc__val pull-right"></span>\n                            </label>\n                        </li>\n\n                    </ol>\n\n                    <div ng-if="packages.length > 0">\n                        <a ng-click="buy(model.selected)" class="btn btn-primary btn-lg  tariffs__action" ng-disabled="working">\n                            <spinner visible="stripe === \'preparing\' || stripe === \'processing\'"></spinner>\n\n                            <span ng-if="stripe === \'processing\'">\n                                Processing your\n                                <span ng-if="model.selected.plan">subscription</span>\n                                <span ng-if="model.selected.package">${{model.selected.price | number : 2}} payment</span>\n                            </span>\n                            <span ng-if="stripe !== \'processing\'">\n                                <span ng-if="model.selected.plan">Subscribe for ${{unlimitedPrice}}/user/mo</span>\n                                <span ng-if="model.selected.package">Buy for ${{model.selected.price | number : 2}}</span>\n                            </span>\n                        </a>\n\n                    </div>\n                </form>\n            </div>\n        </div>\n\n    </div>\n\n</div>\n\n\n\n\n\n\n'),
    e.put("/views/settings/integrations/connect/capsulecrm.html", '<div ng-controller="CapsuleCustomSettingsController">\n    <div class="m--bottom">\n        <label>Domain <span class="color--red">* <span ng-if="invalidDomain">(domain name should up with \'.capsulecrm.com\' and do not have any protocol prefix, like \'http://\' or \'www.\')</span></span></label>\n        <input type="text" class="form-control m--bottom" ng-model="params.domain" required\n               placeholder="yourdomain.capculecrm.com"/>\n\n        <label>Authentication token <span class="color--red">*</span></label>\n        <input type="text" class="form-control m--bottom-xs" ng-model="params.access_token" required/>\n\n        <a ng-if="customSettingsHelpLink" ng-href="{{customSettingsHelpLink}}"\n           target="_blank" class="link-hover m--bottom t--small">How do I find my Capsule API key?</a>\n\n    </div>\n\n    <div class="a--center">\n      <single-click-button handler="connect" disabled="disabled" class="btn  btn-primary"\n           text="Connect {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n           processing-text = "Connecting {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n          ></single-click-button>  \n    </div>\n\n</div>\n'),
    e.put("/views/settings/integrations/connect/generic-oauth.html", '<div ng-controller="GenericOAuthSettingsController" class="a--center">\n    <button class="btn  btn-primary" ng-click="connect()" focus-me>Connect {{\'integration.\' + integration.integration + \'.name\' | translate}}</button>\n</div>\n'),
    e.put("/views/settings/integrations/connect/insightly.html", '<div ng-controller="InsightlyCustomSettingsController">\n    <div class="m--bottom">\n        <label>API key <span class="color--red">*</span></label>\n        <input type="text" class="form-control m--bottom-xs" ng-model="params.access_token" required/>\n        <a ng-if="customSettingsHelpLink" ng-href="{{customSettingsHelpLink}}"\n           target="_blank" class="link-hover t--small">Get API key under Insightly My Info&rarr;User Settings</a>\n    </div>\n\n    <div class="a--center">\n      <single-click-button handler="connect" disabled="disabled" class="btn  btn-primary"\n           text="Connect {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n           processing-text = "Connecting {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n          ></single-click-button>\n    </div>\n\n\n</div>\n'),
    e.put("/views/settings/integrations/connect/nutshell.html", '<div ng-controller="NutshellCustomSettingsController">\n    <div class="m--bottom">\n        <label>Email <span class="color--red">*</span></label>\n        <input type="email" class="form-control m--bottom" ng-model="params.email" required/>\n\n        <label>API key <span class="color--red">*</span></label>\n        <input type="text" class="form-control m--bottom-xs" ng-model="params.access_token" required/>\n\n        <a ng-if="customSettingsHelpLink" ng-href="{{customSettingsHelpLink}}"\n           target="_blank" class="link-hover t--small">How do I find my Nutshell API key?</a>\n    </div>\n    <div class="a--center">\n      <single-click-button handler="connect" disabled="disabled" class="btn  btn-primary"\n           text="Connect {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n           processing-text = "Connecting {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n          ></single-click-button>  \n    </div>\n\n\n</div>\n'),
    e.put("/views/settings/integrations/connect/onepagecrm.html", '<div ng-controller="OnepagecrmCustomSettingsController">\n    <div class="m--bottom">\n        <label>Login <span class="color--red">*</span></label>\n        <input type="text" class="form-control m--bottom" ng-model="params.login" required/>\n\n        <label>Password <span class="color--red">*</span></label>\n        <input type="password" class="form-control" ng-model="params.password" required/>\n\n    </div>\n    <div class="a--center">\n      <single-click-button handler="connect" disabled="disabled" class="btn  btn-primary"\n           text="Connect {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n           processing-text = "Connecting {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n          ></single-click-button>  \n    </div>\n\n\n</div>\n'),
    e.put("/views/settings/integrations/connect/pipelinedeals.html", '<div ng-controller="PipelinedealsCustomSettingsController">\n    <div class="m--bottom">\n        <label>API key <span class="color--red">*</span></label>\n        <input type="text" class="form-control m--bottom-xs" ng-model="params.access_token" required/>\n\n        <a  class="link-hover t--small" ng-if="customSettingsHelpLink" ng-href="{{customSettingsHelpLink}}" target="_blank">How do I find my PipelineDeals API key?</a>\n        <div class="t--small-dimmed">Enable API access in your PipelineDeals account before enabling the integration in PandaDoc</div>\n    </div>\n\n    <div class="a--center">\n      <single-click-button handler="connect" disabled="disabled" class="btn  btn-primary"\n       text="Connect {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n       processing-text = "Connecting {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n      ></single-click-button>\n    </div>\n</div>\n'),
    e.put("/views/settings/integrations/connect/pipeliner.html", '<div ng-controller="PipelinerCustomSettingsController">\n    <div class="m--bottom">\n        <label>API Token <span class="color--red">*</span></label>\n        <input type="text" class="form-control m--bottom-xs" ng-model="params.username" required/>\n        <a ng-if="customSettingsHelpLink" ng-href="{{customSettingsHelpLink}}" target="_blank" class="link-hover t--small">How do I find my Pipeliner API Token?</a>\n    </div>\n\n    <div class="m--bottom">\n        <label>API Password <span class="color--red">*</span></label>\n        <input type="password" class="form-control m--bottom-sm" ng-model="params.password" required/>\n    </div>\n    <div class="m--bottom">\n        <label>Space ID <span class="color--red">*</span></label>\n        <input type="text" class="form-control" ng-model="params.namespace" required/>\n    </div>\n\n    <div class="a--center">\n      <single-click-button handler="connect" disabled="disabled" class="btn  btn-primary" text="Connect {{\'integration.\' + integration.integration + \'.name\' | translate}}" processing-text="Connecting {{\'integration.\' + integration.integration + \'.name\' | translate}}"></single-click-button>\n    </div>\n</div>\n'),
    e.put("/views/settings/integrations/connect/salesforce.html", '<div ng-controller="SalesforceCustomSettingsController">\n    <div class="m--bottom-lg">\n        <h2 class="t--larger m--bottom-sm">Step 1. Install Salesforce Add-on</h2>\n        <p>To connect PandaDoc to your Salesforce CRM, you need to install a PandaDoc Salesforce add-on.</p>\n        <p>Please follow our step by step instruction:</p>\n\n        <p><a target="_blank" class="t--bold link-hover"\n              href="{{\'integration.salesforce.setup_guide_link\'|translate}}">Install PandaDoc Salesforce add-on</a></p>\n    </div>\n\n    <div class="m--bottom-lg">\n        <h2 class="t--larger m--bottom-sm">Step 2. Enable integration in PandaDoc</h2>\n        <p>Once add-on has been installed, you need to enable integration in PandaDoc.\n            Just click \'Enable Salesforce Integration\' button below to enable this integration.</p>\n        <p>Here is a <a target="_blank" class="link-hover" href="{{\'integration.salesforce.faq_link\'|translate}}">walkthrough</a> on how to use Salesforce integration.</p>\n    </div>\n\n    <div class="a--center">\n        <button class="btn  btn-primary" ng-click="onEnable()">Enable Salesforce Integration</button>\n    </div>\n</div>\n'),
    e.put("/views/settings/integrations/connect/webhooks.html", '<div ng-controller="WebhookConnectionSettingsController">\n    <single-click-button handler="connect" disabled="connecting" class="btn  btn-primary"\n        text="Connect {{\'integration.\' + integration.integration + \'.name\' | translate}}"\n        processing-text = "Connecting {{\'integration.\' + integration.integration + \'.name\' | translate}}">\n    </single-click-button>\n</div>\n'),
    e.put("/views/settings/integrations/settings/salesforce.html", '<div class="m--bottom-lg">\n    <p>Learn more about Salesforce integration and how to use it in our\n        <a href="https://www.pandadoc.com/faqs/salesforce-integration-pandadoc/" target="_blank" class="link-hover">FAQ tutorial</a>.</p>\n</div>\n'),
    e.put("/views/settings/integrations/settings/webhook-details.html", '<div class="modal-header">\n    <button type="button" class="close" ng-click="$dismiss()" aria-hidden="true">&times;</button>\n    <div class="modal-title" ng-if="webhook.id">Webhook settings</div>\n    <div class="modal-title" ng-if="!webhook.id">Create webhook</div>\n</div>\n\n<div class="modal-body">\n    <!-- webhook details form -->\n    <div ng-if="historyCollapsed">\n        <form novalidate>\n            <div class="form-group clearfix">\n                <label for="name" class="control-label">Name <help-tooltip message="webhook.help.name"></help-tooltip></label>\n                <input type="text" class="form-control" ng-model="webhook.name" name="name" id="name"/>\n            </div>\n            <div class="form-group clearfix">\n                <label for="url" class="control-label">Webhook endpoint URL <help-tooltip message="webhook.help.endpoint_url"></help-tooltip></label>\n                <input type="url" class="form-control" ng-model="webhook.url" name="url" id="url" ng-class="{\'border--red\' : invalidUrl}"/>\n                <p class="t--small-dimmed color--red m--top-sm" ng-if="invalidUrl">\n                    Invalid URL\n                </p>\n            </div>\n            <div  class="form-group clearfix">\n                <label class="control-label m--bottom-none">Include in JSON payload <help-tooltip message="webhook.help.json_payload"></help-tooltip></label>\n                <ul>\n                    <li class="checkbox">\n                        <label>Metadata<input type="checkbox" ng-model="webhook.metadata"></label>\n                    </li>\n                    <li class="checkbox">\n                        <label>Tokens<input type="checkbox" ng-model="webhook.tokens"></label>\n                    </li>\n                    <li class="checkbox">\n                        <label>Fields<input type="checkbox" ng-model="webhook.fields"></label>\n                    </li>\n                    <li class="checkbox">\n                        <label>Products<input type="checkbox" ng-model="webhook.products"></label>\n                    </li>\n                </ul>\n            </div>\n            <div  class="form-group clearfix">\n                <label class="control-label m--bottom-none">Subscribe to events <help-tooltip message="webhook.help.subscribe_to_events"></help-tooltip></label>\n                <ul>\n                    <li class="checkbox">\n                        <label>Document Updated<input type="checkbox" ng-model="webhook.document_updated"></label>\n                    </li>\n                    <li class="checkbox">\n                        <label>Document State Changed<input type="checkbox" ng-model="webhook.document_state_changed"></label>\n                    </li>\n                    <li class="checkbox">\n                        <label>Recipient Completed a document<input type="checkbox" ng-model="webhook.recipient_completed"></label>\n                    </li>\n                    <li class="checkbox">\n                        <label>Document Deleted<input type="checkbox" ng-model="webhook.document_deleted"></label>\n                    </li>\n                </ul>\n            </div>\n\n            <p class="t--small-dimmed">\n                For more information please see <a href="https://developers.pandadoc.com/#webhooks" target="_blank">Webhooks documentation</a>\n            </p>\n\n            <div class="form-group clearfix" ng-if="webhook.id">\n                <label for="shared_key" class="m--bottom-sm display-block">Shared key <help-tooltip message="webhook.help.shared_key"></help-tooltip></label>\n                <div class="grid grid--spacing-sm">\n                    <div class="grid__item w75">\n                        <input id="shared_key" class="m--bottom-sm form-control t--small bg--white" type="text"\n                               readonly select-on-click value="{{webhook.shared_key}}"/>\n                    </div>\n                    <div class="grid__item w25">\n                        <button class="btn  btn--transparent" ng-click="regenerate()" ng-disabled="regenerating">\n                            <spinner visible="regenerating" class="push-next"></spinner>\n                            <span class="color--green">Regenerate</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class="form-group clearfix">\n                <label class="control-label">Webhook status</label>\n                <div><switch ng-model="webhook.is_active" on="On" off="Off"></switch></div>\n            </div>\n        </form>\n        <button type="button" class="color--text-default btn btn--smaller btn--transparent pull--padding-left t--smaller"\n                ng-click="toggleCallsHistory()" ng-if="webhook.id">\n            <span class="icon icon--time push-next"></span>\n            Show webhook calls history\n        </button>\n    </div>\n    <!-- calls history -->\n    <div ng-if="!historyCollapsed">\n        <a class="display-block m--bottom" ng-click="toggleCallsHistory()">&larr; Back to webhook settings</a>\n\n        <p ng-if="!history.length" class="t--small-dimmed">No history yet.</p>\n\n        <ul class="list list--bordered list--bordered-top color--dimmed" style="height:420px; overflow: scroll; overflow-x: hidden;" ng-if="history.length">\n            <li ng-repeat="event in history" class="form-row form-row--vert-middle p--vert-sm t--small">\n                <p>{{event.last_sent | date : \'yyyy-MM-dd HH:mm Z\'}}&nbsp;&nbsp;\n                <span class="whook__status" ng-class="{\n                    \'whook__status--ok\': event.status_code < 400,\n                    \'whook__status--error\': event.status_code >= 400\n                    }">{{event.status_code}}</span>&nbsp;&nbsp;-&nbsp;&nbsp;<span class="color--text-default t--bold">{{event.type}}</span>\n                    {{event.error ? \' - \' + event.error: \'\'}}\n                </p>\n            </li>\n        </ul>\n    </div>\n</div>\n\n<div class="modal-footer">\n    <button class="btn btn-primary btn--stretch-narrow t--caps" ng-click="save()"\n        ng-disabled="!webhook.name || !webhook.url || saving || removing || !hasChanges()">\n        <spinner visible="saving" class="push-next"></spinner>\n        Save\n    </button>\n\n    <button class="color--red btn btn--transparent p--horis-sm btn--no-outline pull-left pull--padding-left"\n            ng-click="removeWebhook(webhook)" ng-if="webhook.id">\n        <span ng-if="!removing && !webhook.confirmDelete">Delete webhook</span>\n        <span ng-if="webhook.confirmDelete && !removing">Delete webhook?</span>\n        <spinner visible="removing" class="push-self"></spinner>\n    </button>\n</div>\n\n<style>.modal-dialog {width:450px;}</style>\n'),
    e.put("/views/settings/integrations/settings/webhook.html", '<div class="whook m--bottom-sm break-word" ng-class="{\'whook--inactive\': !webhook.is_active}"\n    ng-click="showDetails(webhook)">\n    {{webhook.name}}\n    <button style="font-size: 10px;" class="btn btn-sm t--caps whook__settings" ng-class="{\n      \'btn-primary\': webhook.is_active\n    }">{{webhook.is_active ? \'ON\': \'OFF\'}}</button>\n</div>\n'),
    e.put("/views/settings/integrations/settings/webhooks.html", '<div ng-controller="WebhookCustomSettingsController">\n    <p class="color--dimmed">\n        You can find more information about webhooks in our\n        <a href="https://developers.pandadoc.com/#webhooks" target="_blank">API docs</a>.\n    </p>\n    <div class="hr block m--vert"></div>\n\n    <button class="btn color--text-default btn--transparent pull--padding-left m--bottom"\n            ng-click="showNewWebhookForm()">\n        <span class="icon icon--plus-circled push-next" ></span> Create a webhook\n    </button>\n\n    <div>\n        <div class="hr m--bottom-sm"></div>\n        <spinner class="m--vert" visible="loading"></spinner>\n        <p class="t--small-dimmed m--bottom-sm" ng-show="!loading && webhooks.length === 0">\n            You don\'t have any configured webhooks yet.</p>\n\n        <webhook ng-repeat="webhook in webhooks | orderBy:\'-is_active\'" webhook="webhook"></webhook>\n    </div>\n</div>\n'),
    e.put("/views/settings/integrations/settings/xero.html", '<div ng-controller="XeroSettingsController" class="clearfix">\n    <div class="m--bottom a--center" ng-show="!settings">\n        <spinner visible="!settings"></spinner>\n    </div>\n\n    <div class="m--bottom-lg" ng-show="settings">\n\n        <!-- currency -->\n        <label class="control-label">Invoice currency</label>\n\n        <select ng-model="settings.currency"\n                ng-options="currency.code as currency.display_name group by currency.group for (code, currency) in currencies"\n                class="form-control m--bottom-sm"></select>\n\n        <!-- automatically create invoices -->\n        <!--<label class="control-label">Invoices</label>-->\n\n        <!--<ul class="m--bottom-sm">-->\n            <!--<li class="radio m--top-none">-->\n                <!--<label>-->\n                    <!--<input type="radio" ng-model="settings.auto_create" ng-value="true"/>-->\n                    <!--Automatically create invoices when document is completed-->\n                <!--</label>-->\n            <!--</li>-->\n            <!--<li class="radio">-->\n                <!--<label>-->\n                    <!--<input type="radio" ng-model="settings.auto_create" ng-value="false"/>-->\n                    <!--Create invoices manually-->\n                <!--</label>-->\n            <!--</li>-->\n        <!--</ul>-->\n\n        <!-- account -->\n        <label class="control-label">\n            Account\n            <help-tooltip message="integration.xero.help_messages.account"></help-tooltip>\n        </label>\n        <input type="text" ng-model="settings.account" class="form-control m--bottom-sm" placeholder="Default invoice account"/>\n\n        <!-- tax -->\n        <label class="control-label">Tax</label>\n        <select ng-model="settings.tax" class="form-control m--bottom-sm" placeholder="Default invoice tax type" ng-options="tax.TaxType as tax.Name for tax in taxes">\n            <option value="">No Tax</option>\n        </select>\n\n        <!-- access level -->\n        <label ng-show="showPermissions" class="control-label">Who has access to Xero panel</label>\n\n        <select ng-show="showPermissions" ng-model="settings.role"\n                ng-options="role as \'roles_hierarchy.\' + role | translate for role in roles"\n                class="form-control m--bottom-sm"></select>\n    </div>\n    <div class="a--center">\n      <button class="btn btn-primary m--bottom-sm a--center" ng-click="save()" ng-disabled="saving">\n          <spinner visible="saving" class="push-next"></spinner>\n          Save settings\n      </button>\n    </div>\n</div>\n'),
    e.put("/views/widgets/settings/blocks/actor-selector-form.html", '<div ng-show="!isTemplate && !isLibraryItem">\n    <style type="text/css">\n        .animated {\n            -webkit-animation-duration: 1s;\n            animation-duration: 1s;\n            -webkit-animation-fill-mode: both;\n            animation-fill-mode: both;\n        }\n\n        @-webkit-keyframes fadeIn {\n            0% {\n                opacity: 0;\n            }\n\n            100% {\n                opacity: 1;\n            }\n        }\n\n        @keyframes fadeIn {\n            0% {\n                opacity: 0;\n            }\n\n            100% {\n                opacity: 1;\n            }\n        }\n\n        .fadeIn {\n            -webkit-animation-name: fadeIn;\n            animation-name: fadeIn;\n        }\n\n    </style>\n\n    <div ng-if="!showAddActorForm" class="block--text animated" ng-class="{\'fadeIn\': highlight.actorSelectorForm}" ng-hide="widgetInfo.static">\n        <label class="control-label">Assign a recipient</label>\n        <div class="from-row">\n            <div class="form-row__stretcher">\n                <select ng-disabled="!widgetInfo.isSettingsEditable" ng-model="widgetInfo.widget.actor" ng-options="actor.id as actor | fullName:{email:true} for actor in actors" class="form-control">\n                    <option value="">Not Assigned</option>\n                </select>\n            </div>\n            <div class="form-row__fixed">\n                <button class="btn--add-actor btn  btn--transparent p--horis-sm btn--gray-border" type="button"\n                        ng-click="toggleAddActorForm()" title="Add new recipient">\n                    <i class="icon icon--lg icon--actor-add color--icon-dimmed"></i>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div ng-if="showAddActorForm" class="form--add-actor bg--very-light p--sm pull--padding-right pull--padding-left m--bottom">\n        <button class="form--add-actor__close btn btn--transparent pull-right pull--padding-right" ng-click="toggleAddActorForm()" type="button">\n            close &nbsp;<i class="icon icon--lg icon--close color--icon-dimmed"></i>\n        </button>\n        <label class="form--add-actor__title color--text-default m--bottom-sm">Add new recipient</label>\n        <participants-form existed="documentInfo.document.recipients" has-close-button="false" delegate="this" class="doc-participants--in-panel"></participants-form>\n    </div>\n</div>\n'),
    e.put("/views/widgets/settings/blocks/apply-button.html", '<button class="btn btn-block btn-primary block" ng-show="!showAddActorForm && !showAddRoleForm" ng-click="close()" ng-class="{\'btn-default\':showAddActorForm, \'btn-primary\': !showAddActorForm}">\n    Apply\n</button>'),
    e.put("/views/widgets/settings/blocks/date-format-selector.html", '<div class="m--bottom">\n    <label class="control-label">Date format</label>\n    <select ng-model="widgetInfo.widget.properties.dateFormat" ng-options="format for format in dateFormats" class="form-control"> </select>\n</div>'),
    e.put("/views/widgets/settings/blocks/dropdown-items.html", '<div>\n    <items-editor items="widgetInfo.widget.properties.items"></items-editor>\n</div>\n'),
    e.put("/views/widgets/settings/blocks/field-name.html", '<div class="block--text" ng-if="developerPortalAvailable && isTemplates">\n    <label class="control-label tooltip-fix-hook">\n        Name\n        <help-tooltip message="widget.help.field_name"></help-tooltip>\n    </label>\n    <style>\n        .tooltip-fix-hook .tooltip {\n            width: 140px\n        }\n    </style>\n    <input ng-disabled="!widgetInfo.isSettingsEditable" class="form-control" placeholder="Name" ng-model="widgetInfo.widget.field_name">\n</div>\n'),
    e.put("/views/widgets/settings/blocks/remove-button.html", '<button class="btn btn--transparent pull-right pull--padding-right color--red" ng-click="remove()" type="button">\n    <i class="icon icon--small icon--trash push-next"></i>\n    Remove\n</button>\n'),
    e.put("/views/widgets/settings/blocks/required.html", '<div class="checkbox block--text" ng-hide="widgetInfo.static">\n    <label>\n        <input type="checkbox" ng-disabled="!widgetInfo.isSettingsEditable" ng-model="widgetInfo.widget.required" class="icon icon--small push-next"/>\n        Required\n    </label>\n</div>\n'),
    e.put("/views/widgets/settings/blocks/roles.html", '<div ng-if="isTemplate || isLibraryItem">\n    <div ng-if="!showAddRoleForm" class="block--text" ng-hide="widgetInfo.static">\n        <label class="control-label">Select a role</label>\n        <div class="from--row">\n            <div class="form-row__stretcher">\n                <select ng-disabled="!widgetInfo.isSettingsEditable" ng-model="widgetInfo.widget.role" ng-options="role.id as role.name for role in documentInfo.document.roles" class="form-control">\n                    <option value="">Not Assigned</option>\n                </select>\n            </div>\n            <div class="form-row__fixed">\n                <button class="btn--add-actor btn  btn--transparent p--sm-hor btn--gray-border" type="button"\n                        ng-click="toggleAddRoleForm()" title="Add new role">\n                    <i class="icon icon--lg icon--actor-add color--icon-dimmed"></i>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div ng-if="showAddRoleForm" class="form--add-actor p--sm bg--very-light pull--padding-right pull--padding-left m--bottom">\n        <button class="form--add-actor__close btn btn--transparent pull-right" ng-click="toggleAddRoleForm()" type="button">\n            close &nbsp;<i class="icon icon--lg icon--close color--icon-dimmed"></i>\n        </button>\n        <label class="form--add-actor__title color--text-default">Add new role</label>\n        <role-form document-info="documentInfo"></role-form>\n    </div>\n</div>'),
    e.put("/views/widgets/settings/blocks/settings-header.html", '<h3 class="section-header ellipsis">Settings</h3>'),
    e.put("/views/widgets/settings/blocks/title.html", '<div class="block--text">\n    <label class="control-label">Title</label>\n    <input ng-disabled="!widgetInfo.isSettingsEditable" class="form-control" placeholder="Title" ng-model="widgetInfo.widget.title">\n</div>'),
    e.put("/views/blocks/table/renders/base/cell.html", '<text-editor\n    content="cellObj.dataObj.data"\n    text-property="cellObj.columnObj.column.ref"\n    content-editable="::isEditableByUser(cellObj.dataObj)"\n    activate-on-load="::rowObj.isNew && $index === 0"\n    toolbar="shared">\n</text-editor>\n'),
    e.put("/views/blocks/table/renders/base/column.html", '<text-editor\n        text-property="\'name\'"\n        content="columnObj.column"\n        content-editable="::isEditableByUser(columnObj.column)"\n        activate-on-load="::columnObj.isNew"\n        toolbar="shared"\n        disable-image-controls="true">\n</text-editor>\n\n<span class="confirmation-button" ng-class="{\'confirmation-button--open\': columnObj.deleteConfirmation}"\n      ng-if="model.columns.length > 1 && columnObj.column.options.removable">\n    <button ng-if="!columnObj.deleteConfirmation" tabindex="-1"\n            class="doc-block__control btn btn--block-control btn--block-control-del doc-table__col-remove btn--tbl-ctrl"\n            title="Delete" ng-click="confirmColumnDelete(columnObj)">\n        <i class="icon icon--small icon--delete-sm"></i>\n    </button>\n\n    <button ng-if="columnObj.deleteConfirmation" tabindex="-1"\n            class="doc-block__control btn btn--block-control btn--block-control-del doc-table__col-remove btn--tbl-ctrl open"\n            title="Delete" ng-click="removeColumn(columnObj)">\n        <i class="icon icon--small icon--delete-sm"></i>\n        <span class="btn--block-control__text">Delete ?</span>\n    </button>\n</span>\n\n'),
    e.put("/views/blocks/table/renders/base/section.html", '<text-editor\n        text-property="\'name\'"\n        content="rowObj.section"\n        content-editable="::isEditableByUser(rowObj.section)"\n        activate-on-load="::rowObj.isNew"\n        disable-image-controls="true"\n        toolbar="shared">\n</text-editor>\n'),
    e.put("/views/common/directives/audit/includes/event-approved.html", '<span><b>{{event.user | fullName}}</b> approved this document</span>\n<p class="doc-flow__comment" ng-if="event.reason">{{event.reason}}</p>\n'),
    e.put("/views/common/directives/audit/includes/event-completed-by-all.html", "<span><b>All participants</b> completed this document</span>\n"),
    e.put("/views/common/directives/audit/includes/event-completed-by-recipient.html", "<span><b>{{event.user | fullName}}</b> completed this document</span>\n"),
    e.put("/views/common/directives/audit/includes/event-created.html", "<span><b>{{event.user | fullName}}</b> created this document</span>\n"),
    e.put("/views/common/directives/audit/includes/event-new-revision.html", "<span><b>{{event.user | fullName}}</b> created a new revision of this document</span>\n"),
    e.put("/views/common/directives/audit/includes/event-rejected.html", '<span><b>{{event.user | fullName}}</b> rejected this document</span>\n<p class="doc-flow__comment" ng-if="event.reason">{{event.reason}}</p>\n'),
    e.put("/views/common/directives/audit/includes/event-sent-for-approval.html", '<span><b>{{event.user | fullName}}</b> sent this document for approval</span>\n<p class="doc-flow__comment" ng-if="event.reason">{{event.reason}}</p>\n'),
    e.put("/views/common/directives/audit/includes/event-sent.html", '<span><b>{{event.user | fullName}}</b> sent this document</span>\n<p class="doc-flow__comment" ng-if="event.reason">{{event.reason}}</p>\n'),
    e.put("/views/common/directives/audit/includes/event-viewed.html", "<span>This document has been viewed by one of the recipients</span>\n"),
    e.put("/views/documents/pad/panels/includes/document-already-approved-or-rejected.html", '<div ng-controller="DocumentEditCompletedPanelController">\n    <p class="form-control-static">{{\'warnings.document_already-approved-or-rejected\' | translate}}</p>\n    <button class="btn btn-primary pull-right document-action-panel__button" ng-click="reloadDocument()">\n        Reload the document\n    </button>\n</div>\n'),
    e.put("/views/documents/pad/panels/includes/document-approved.html", '<div ng-controller="DocumentApprovedPanelController">\n\n    <div class="pull-right document-action-panel__action">\n\n        <button ng-if="documentInfo.isOwner && !isSelfComplete" class="btn btn-primary pull-right document-action-panel__button"\n                ng-click="sendDocument()">\n            Send document\n        </button>\n\n        <button ng-if="documentInfo.isOwner && isSelfComplete" class="btn btn-primary pull-right document-action-panel__button"\n                ng-click="selfCompleteDocument()">\n            Complete document\n        </button>\n    </div>\n\n    <div ng-if="!event.reason" class="document-action-panel__action-name t--medium m--none form-control-static">\n        {{\'warnings.document_approved\' | translate}}\n    </div>\n    <div ng-if="event.reason" class="document-action-panel__action-name a--left">\n        <div class="media card m--bottom-xs">\n            <avatar class="pull-left" user="event.user" size="35"></avatar>\n            <div class="media-body">\n                <h4 class="t--normal t--larger m--bottom-xs">\n                    {{\'warnings.document_approved\' | translate}}\n                </h4>\n                <div class="t--small">\n                    <span class="color--dimmed">{{event.user | fullName}}<span ng-if="event.reason">:</span></span>\n                    <q>{{event.reason | truncate : 60 }}</q>\n                    <a href="" ng-click="openTimeline()" ng-if="event.reason.length>60" class="link-camouflage">More</a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n'),
    e.put("/views/documents/pad/panels/includes/document-been-edit.html", '<p class="form-control-static a--center" ng-controller="DocumentBeenEditPanelController">\n    {{\'warnings.document_is_draft\' | translate}}\n</p>\n'),
    e.put("/views/documents/pad/panels/includes/document-edit-completed.html", '<div ng-controller="DocumentEditCompletedPanelController">\n    <p class="form-control-static">{{\'warnings.document_is_ready\' | translate}}</p>\n    <button class="btn btn-primary pull-right document-action-panel__button" ng-click="reloadDocument()">\n        Reload the document\n    </button>\n</div>\n'),
    e.put("/views/documents/pad/panels/includes/document-opened-out-of-turn.html", "<p class=\"form-control-static a--center\">\n    {{'warnings.document-opened-out-of-turn' | translate}}\n</p>\n"),
    e.put("/views/documents/pad/panels/includes/document-rejected.html", '<div ng-controller="DocumentRejectedPanelController" class="a--left">\n\n    <div class="pull-right document-action-panel__action">\n        <button ng-if="documentInfo.isOwner" class="btn btn-primary"\n                ng-disabled="working" ng-click="editDocument()">\n            <spinner visible="working"></spinner>\n            Edit document\n        </button>\n    </div>\n\n    <div ng-if="!event.reason" class="document-action-panel__action-name t--medium m--none form-control-static">\n        {{\'warnings.document_rejected\' | translate}}\n    </div>\n    <div ng-if="event.reason" class="document-action-panel__action-name a--left">\n        <div class="media card m--bottom-sm">\n            <avatar class="pull-left" user="event.user" size="35"></avatar>\n            <div class="media-body">\n                <h4 class="t--normal t--larger m--bottom-xs">\n                    {{\'warnings.document_rejected\' | translate}}\n                </h4>\n                <div class="t--small">\n                    <span class="color--dimmed">{{event.user | fullName}}<span ng-if="event.reason">:</span></span>\n                    <q>{{event.reason | truncate : 60 }}</q>\n                    <a href="" ng-click="openTimeline()" ng-if="event.reason.length > 60" class="link-camouflage">More</a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n'),
    e.put("/views/documents/pad/panels/includes/document-waiting-for-approval.html", '<div ng-controller="DocumentWaitingForApprovalPanelController">\n\n    <button ng-if="documentInfo.isOwner" class="btn btn-primary pull-right document-action-panel__button" ng-click="editDocument()" ng-disabled="working">\n        <spinner visible="working"></spinner>\n        Edit document\n    </button>\n\n    <p class="form-control-static">{{\'warnings.document-waiting-for-approval\' | translate}}</p>\n\n</div>\n')
}
]);
